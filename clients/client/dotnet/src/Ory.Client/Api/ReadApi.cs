/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.0.1-alpha.183
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Client.Client;
using Ory.Client.Model;

namespace Ory.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ClientGetCheckResponse</returns>
        ClientGetCheckResponse GetCheck(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?));

        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ApiResponse of ClientGetCheckResponse</returns>
        ApiResponse<ClientGetCheckResponse> GetCheckWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?));
        /// <summary>
        /// Expand a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to expand a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ClientExpandTree</returns>
        ClientExpandTree GetExpand(string _namespace, string _object, string relation, long? maxDepth = default(long?));

        /// <summary>
        /// Expand a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to expand a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ApiResponse of ClientExpandTree</returns>
        ApiResponse<ClientExpandTree> GetExpandWithHttpInfo(string _namespace, string _object, string relation, long? maxDepth = default(long?));
        /// <summary>
        /// Query relation tuples
        /// </summary>
        /// <remarks>
        /// Get all relation tuples that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ClientGetRelationTuplesResponse</returns>
        ClientGetRelationTuplesResponse GetRelationTuples(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));

        /// <summary>
        /// Query relation tuples
        /// </summary>
        /// <remarks>
        /// Get all relation tuples that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of ClientGetRelationTuplesResponse</returns>
        ApiResponse<ClientGetRelationTuplesResponse> GetRelationTuplesWithHttpInfo(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));
        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ClientGetCheckResponse</returns>
        ClientGetCheckResponse PostCheck(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery));

        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ApiResponse of ClientGetCheckResponse</returns>
        ApiResponse<ClientGetCheckResponse> PostCheckWithHttpInfo(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetCheckResponse</returns>
        System.Threading.Tasks.Task<ClientGetCheckResponse> GetCheckAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientGetCheckResponse>> GetCheckWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Expand a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to expand a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientExpandTree</returns>
        System.Threading.Tasks.Task<ClientExpandTree> GetExpandAsync(string _namespace, string _object, string relation, long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Expand a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to expand a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientExpandTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientExpandTree>> GetExpandWithHttpInfoAsync(string _namespace, string _object, string relation, long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query relation tuples
        /// </summary>
        /// <remarks>
        /// Get all relation tuples that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetRelationTuplesResponse</returns>
        System.Threading.Tasks.Task<ClientGetRelationTuplesResponse> GetRelationTuplesAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query relation tuples
        /// </summary>
        /// <remarks>
        /// Get all relation tuples that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetRelationTuplesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientGetRelationTuplesResponse>> GetRelationTuplesWithHttpInfoAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetCheckResponse</returns>
        System.Threading.Tasks.Task<ClientGetCheckResponse> PostCheckAsync(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check a relation tuple
        /// </summary>
        /// <remarks>
        /// To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientGetCheckResponse>> PostCheckWithHttpInfoAsync(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadApi : IReadApiSync, IReadApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReadApi : IReadApi
    {
        private Ory.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReadApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReadApi(string basePath)
        {
            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                new Ory.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReadApi(Ory.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReadApi(Ory.Client.Client.ISynchronousClient client, Ory.Client.Client.IAsynchronousClient asyncClient, Ory.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ClientGetCheckResponse</returns>
        public ClientGetCheckResponse GetCheck(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?))
        {
            Ory.Client.Client.ApiResponse<ClientGetCheckResponse> localVarResponse = GetCheckWithHttpInfo(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ApiResponse of ClientGetCheckResponse</returns>
        public Ory.Client.Client.ApiResponse<ClientGetCheckResponse> GetCheckWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }
            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientGetCheckResponse>("/relation-tuples/check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetCheckResponse</returns>
        public async System.Threading.Tasks.Task<ClientGetCheckResponse> GetCheckAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientGetCheckResponse> localVarResponse = await GetCheckWithHttpInfoAsync(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetCheckResponse)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientGetCheckResponse>> GetCheckWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }
            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientGetCheckResponse>("/relation-tuples/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expand a Relation Tuple Use this endpoint to expand a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ClientExpandTree</returns>
        public ClientExpandTree GetExpand(string _namespace, string _object, string relation, long? maxDepth = default(long?))
        {
            Ory.Client.Client.ApiResponse<ClientExpandTree> localVarResponse = GetExpandWithHttpInfo(_namespace, _object, relation, maxDepth);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expand a Relation Tuple Use this endpoint to expand a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <returns>ApiResponse of ClientExpandTree</returns>
        public Ory.Client.Client.ApiResponse<ClientExpandTree> GetExpandWithHttpInfo(string _namespace, string _object, string relation, long? maxDepth = default(long?))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter '_namespace' when calling ReadApi->GetExpand");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter '_object' when calling ReadApi->GetExpand");
            }

            // verify the required parameter 'relation' is set
            if (relation == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'relation' when calling ReadApi->GetExpand");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientExpandTree>("/relation-tuples/expand", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expand a Relation Tuple Use this endpoint to expand a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientExpandTree</returns>
        public async System.Threading.Tasks.Task<ClientExpandTree> GetExpandAsync(string _namespace, string _object, string relation, long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientExpandTree> localVarResponse = await GetExpandWithHttpInfoAsync(_namespace, _object, relation, maxDepth, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expand a Relation Tuple Use this endpoint to expand a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Subject Set</param>
        /// <param name="_object">Object of the Subject Set</param>
        /// <param name="relation">Relation of the Subject Set</param>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientExpandTree)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientExpandTree>> GetExpandWithHttpInfoAsync(string _namespace, string _object, string relation, long? maxDepth = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter '_namespace' when calling ReadApi->GetExpand");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter '_object' when calling ReadApi->GetExpand");
            }

            // verify the required parameter 'relation' is set
            if (relation == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'relation' when calling ReadApi->GetExpand");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientExpandTree>("/relation-tuples/expand", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query relation tuples Get all relation tuples that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ClientGetRelationTuplesResponse</returns>
        public ClientGetRelationTuplesResponse GetRelationTuples(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Client.Client.ApiResponse<ClientGetRelationTuplesResponse> localVarResponse = GetRelationTuplesWithHttpInfo(pageToken, pageSize, _namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query relation tuples Get all relation tuples that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of ClientGetRelationTuplesResponse</returns>
        public Ory.Client.Client.ApiResponse<ClientGetRelationTuplesResponse> GetRelationTuplesWithHttpInfo(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientGetRelationTuplesResponse>("/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query relation tuples Get all relation tuples that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetRelationTuplesResponse</returns>
        public async System.Threading.Tasks.Task<ClientGetRelationTuplesResponse> GetRelationTuplesAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientGetRelationTuplesResponse> localVarResponse = await GetRelationTuplesWithHttpInfoAsync(pageToken, pageSize, _namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query relation tuples Get all relation tuples that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetRelationTuplesResponse)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientGetRelationTuplesResponse>> GetRelationTuplesWithHttpInfoAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientGetRelationTuplesResponse>("/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ClientGetCheckResponse</returns>
        public ClientGetCheckResponse PostCheck(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery))
        {
            Ory.Client.Client.ApiResponse<ClientGetCheckResponse> localVarResponse = PostCheckWithHttpInfo(maxDepth, clientRelationQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ApiResponse of ClientGetCheckResponse</returns>
        public Ory.Client.Client.ApiResponse<ClientGetCheckResponse> PostCheckWithHttpInfo(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }
            localVarRequestOptions.Data = clientRelationQuery;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientGetCheckResponse>("/relation-tuples/check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGetCheckResponse</returns>
        public async System.Threading.Tasks.Task<ClientGetCheckResponse> PostCheckAsync(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientGetCheckResponse> localVarResponse = await PostCheckWithHttpInfoAsync(maxDepth, clientRelationQuery, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check a relation tuple To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxDepth"> (optional)</param>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGetCheckResponse)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientGetCheckResponse>> PostCheckWithHttpInfoAsync(long? maxDepth = default(long?), ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxDepth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "max-depth", maxDepth));
            }
            localVarRequestOptions.Data = clientRelationQuery;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientGetCheckResponse>("/relation-tuples/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
