/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.8.1
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Client.Client;
using Ory.Client.Model;

namespace Ory.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an event stream for your project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <returns>ClientEventStream</returns>
        ClientEventStream CreateEventStream(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody);

        /// <summary>
        /// Create an event stream for your project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <returns>ApiResponse of ClientEventStream</returns>
        ApiResponse<ClientEventStream> CreateEventStreamWithHttpInfo(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody);
        /// <summary>
        /// Remove an event stream from a project
        /// </summary>
        /// <remarks>
        /// Remove an event stream from a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <returns></returns>
        void DeleteEventStream(string projectId, string eventStreamId);

        /// <summary>
        /// Remove an event stream from a project
        /// </summary>
        /// <remarks>
        /// Remove an event stream from a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventStreamWithHttpInfo(string projectId, string eventStreamId);
        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ClientListEventStreams</returns>
        ClientListEventStreams ListEventStreams(string projectId);

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of ClientListEventStreams</returns>
        ApiResponse<ClientListEventStreams> ListEventStreamsWithHttpInfo(string projectId);
        /// <summary>
        /// Update an event stream for a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <returns>ClientEventStream</returns>
        ClientEventStream SetEventStream(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody));

        /// <summary>
        /// Update an event stream for a project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <returns>ApiResponse of ClientEventStream</returns>
        ApiResponse<ClientEventStream> SetEventStreamWithHttpInfo(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an event stream for your project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventStream</returns>
        System.Threading.Tasks.Task<ClientEventStream> CreateEventStreamAsync(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an event stream for your project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientEventStream>> CreateEventStreamWithHttpInfoAsync(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an event stream from a project
        /// </summary>
        /// <remarks>
        /// Remove an event stream from a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventStreamAsync(string projectId, string eventStreamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an event stream from a project
        /// </summary>
        /// <remarks>
        /// Remove an event stream from a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventStreamWithHttpInfoAsync(string projectId, string eventStreamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListEventStreams</returns>
        System.Threading.Tasks.Task<ClientListEventStreams> ListEventStreamsAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListEventStreams)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientListEventStreams>> ListEventStreamsWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an event stream for a project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventStream</returns>
        System.Threading.Tasks.Task<ClientEventStream> SetEventStreamAsync(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an event stream for a project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientEventStream>> SetEventStreamWithHttpInfoAsync(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private Ory.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                new Ory.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Ory.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(Ory.Client.Client.ISynchronousClient client, Ory.Client.Client.IAsynchronousClient asyncClient, Ory.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an event stream for your project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <returns>ClientEventStream</returns>
        public ClientEventStream CreateEventStream(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody)
        {
            Ory.Client.Client.ApiResponse<ClientEventStream> localVarResponse = CreateEventStreamWithHttpInfo(projectId, clientCreateEventStreamBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an event stream for your project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <returns>ApiResponse of ClientEventStream</returns>
        public Ory.Client.Client.ApiResponse<ClientEventStream> CreateEventStreamWithHttpInfo(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->CreateEventStream");
            }

            // verify the required parameter 'clientCreateEventStreamBody' is set
            if (clientCreateEventStreamBody == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'clientCreateEventStreamBody' when calling EventsApi->CreateEventStream");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientCreateEventStreamBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientEventStream>("/projects/{project_id}/eventstreams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an event stream for your project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventStream</returns>
        public async System.Threading.Tasks.Task<ClientEventStream> CreateEventStreamAsync(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientEventStream> localVarResponse = await CreateEventStreamWithHttpInfoAsync(projectId, clientCreateEventStreamBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an event stream for your project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientCreateEventStreamBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventStream)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientEventStream>> CreateEventStreamWithHttpInfoAsync(string projectId, ClientCreateEventStreamBody clientCreateEventStreamBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->CreateEventStream");
            }

            // verify the required parameter 'clientCreateEventStreamBody' is set
            if (clientCreateEventStreamBody == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'clientCreateEventStreamBody' when calling EventsApi->CreateEventStream");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientCreateEventStreamBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientEventStream>("/projects/{project_id}/eventstreams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an event stream from a project Remove an event stream from a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <returns></returns>
        public void DeleteEventStream(string projectId, string eventStreamId)
        {
            DeleteEventStreamWithHttpInfo(projectId, eventStreamId);
        }

        /// <summary>
        /// Remove an event stream from a project Remove an event stream from a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> DeleteEventStreamWithHttpInfo(string projectId, string eventStreamId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->DeleteEventStream");
            }

            // verify the required parameter 'eventStreamId' is set
            if (eventStreamId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'eventStreamId' when calling EventsApi->DeleteEventStream");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("event_stream_id", Ory.Client.Client.ClientUtils.ParameterToString(eventStreamId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/projects/{project_id}/eventstreams/{event_stream_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an event stream from a project Remove an event stream from a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventStreamAsync(string projectId, string eventStreamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEventStreamWithHttpInfoAsync(projectId, eventStreamId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an event stream from a project Remove an event stream from a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The ID of the event stream to be deleted, as returned when created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> DeleteEventStreamWithHttpInfoAsync(string projectId, string eventStreamId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->DeleteEventStream");
            }

            // verify the required parameter 'eventStreamId' is set
            if (eventStreamId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'eventStreamId' when calling EventsApi->DeleteEventStream");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("event_stream_id", Ory.Client.Client.ClientUtils.ParameterToString(eventStreamId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/projects/{project_id}/eventstreams/{event_stream_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ClientListEventStreams</returns>
        public ClientListEventStreams ListEventStreams(string projectId)
        {
            Ory.Client.Client.ApiResponse<ClientListEventStreams> localVarResponse = ListEventStreamsWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of ClientListEventStreams</returns>
        public Ory.Client.Client.ApiResponse<ClientListEventStreams> ListEventStreamsWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->ListEventStreams");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientListEventStreams>("/projects/{project_id}/eventstreams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEventStreams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListEventStreams</returns>
        public async System.Threading.Tasks.Task<ClientListEventStreams> ListEventStreamsAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientListEventStreams> localVarResponse = await ListEventStreamsWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all event streams for the project. This endpoint is not paginated. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListEventStreams)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientListEventStreams>> ListEventStreamsWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->ListEventStreams");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientListEventStreams>("/projects/{project_id}/eventstreams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEventStreams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an event stream for a project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <returns>ClientEventStream</returns>
        public ClientEventStream SetEventStream(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody))
        {
            Ory.Client.Client.ApiResponse<ClientEventStream> localVarResponse = SetEventStreamWithHttpInfo(projectId, eventStreamId, clientSetEventStreamBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an event stream for a project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <returns>ApiResponse of ClientEventStream</returns>
        public Ory.Client.Client.ApiResponse<ClientEventStream> SetEventStreamWithHttpInfo(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->SetEventStream");
            }

            // verify the required parameter 'eventStreamId' is set
            if (eventStreamId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'eventStreamId' when calling EventsApi->SetEventStream");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("event_stream_id", Ory.Client.Client.ClientUtils.ParameterToString(eventStreamId)); // path parameter
            localVarRequestOptions.Data = clientSetEventStreamBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ClientEventStream>("/projects/{project_id}/eventstreams/{event_stream_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an event stream for a project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventStream</returns>
        public async System.Threading.Tasks.Task<ClientEventStream> SetEventStreamAsync(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientEventStream> localVarResponse = await SetEventStreamWithHttpInfoAsync(projectId, eventStreamId, clientSetEventStreamBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an event stream for a project. 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="eventStreamId">Event Stream ID  The event stream&#39;s ID.</param>
        /// <param name="clientSetEventStreamBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventStream)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientEventStream>> SetEventStreamWithHttpInfoAsync(string projectId, string eventStreamId, ClientSetEventStreamBody clientSetEventStreamBody = default(ClientSetEventStreamBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling EventsApi->SetEventStream");
            }

            // verify the required parameter 'eventStreamId' is set
            if (eventStreamId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'eventStreamId' when calling EventsApi->SetEventStream");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("event_stream_id", Ory.Client.Client.ClientUtils.ParameterToString(eventStreamId)); // path parameter
            localVarRequestOptions.Data = clientSetEventStreamBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ClientEventStream>("/projects/{project_id}/eventstreams/{event_stream_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetEventStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
