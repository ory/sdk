/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.1.25
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Client.Client;
using Ory.Client.Model;

namespace Ory.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Creates a new project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <returns>ClientProject</returns>
        ClientProject CreateProject(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody));

        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Creates a new project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <returns>ApiResponse of ClientProject</returns>
        ApiResponse<ClientProject> CreateProjectWithHttpInfo(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody));
        /// <summary>
        /// Create project API token
        /// </summary>
        /// <remarks>
        /// Create an API token for a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <returns>ClientProjectApiKey</returns>
        ClientProjectApiKey CreateProjectApiKey(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3));

        /// <summary>
        /// Create project API token
        /// </summary>
        /// <remarks>
        /// Create an API token for a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <returns>ApiResponse of ClientProjectApiKey</returns>
        ApiResponse<ClientProjectApiKey> CreateProjectApiKeyWithHttpInfo(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3));
        /// <summary>
        /// Delete project API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <returns></returns>
        void DeleteProjectApiKey(string project, string tokenId);

        /// <summary>
        /// Delete project API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectApiKeyWithHttpInfo(string project, string tokenId);
        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to get your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientActiveProjectInConsole</returns>
        ClientActiveProjectInConsole GetActiveProjectInConsole();

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to get your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientActiveProjectInConsole</returns>
        ApiResponse<ClientActiveProjectInConsole> GetActiveProjectInConsoleWithHttpInfo();
        /// <summary>
        /// Get a Project
        /// </summary>
        /// <remarks>
        /// Get a projects you have access to by its ID.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ClientProject</returns>
        ClientProject GetProject(string projectId);

        /// <summary>
        /// Get a Project
        /// </summary>
        /// <remarks>
        /// Get a projects you have access to by its ID.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of ClientProject</returns>
        ApiResponse<ClientProject> GetProjectWithHttpInfo(string projectId);
        /// <summary>
        /// Get all members associated with this project
        /// </summary>
        /// <remarks>
        /// This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>List&lt;ClientCloudAccount&gt;</returns>
        List<ClientCloudAccount> GetProjectMembers(string projectId);

        /// <summary>
        /// Get all members associated with this project
        /// </summary>
        /// <remarks>
        /// This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of List&lt;ClientCloudAccount&gt;</returns>
        ApiResponse<List<ClientCloudAccount>> GetProjectMembersWithHttpInfo(string projectId);
        /// <summary>
        /// List a project&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the project&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <returns>List&lt;ClientProjectApiKey&gt;</returns>
        List<ClientProjectApiKey> ListProjectApiKeys(string project);

        /// <summary>
        /// List a project&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the project&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <returns>ApiResponse of List&lt;ClientProjectApiKey&gt;</returns>
        ApiResponse<List<ClientProjectApiKey>> ListProjectApiKeysWithHttpInfo(string project);
        /// <summary>
        /// List All Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects you have access to.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClientProjectMetadata&gt;</returns>
        List<ClientProjectMetadata> ListProjects();

        /// <summary>
        /// List All Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects you have access to.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClientProjectMetadata&gt;</returns>
        ApiResponse<List<ClientProjectMetadata>> ListProjectsWithHttpInfo();
        /// <summary>
        /// Patch an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <returns>ClientSuccessfulProjectUpdate</returns>
        ClientSuccessfulProjectUpdate PatchProject(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>));

        /// <summary>
        /// Patch an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <returns>ApiResponse of ClientSuccessfulProjectUpdate</returns>
        ApiResponse<ClientSuccessfulProjectUpdate> PatchProjectWithHttpInfo(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>));
        /// <summary>
        /// Irrecoverably purge a project
        /// </summary>
        /// <remarks>
        /// !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns></returns>
        void PurgeProject(string projectId);

        /// <summary>
        /// Irrecoverably purge a project
        /// </summary>
        /// <remarks>
        /// !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PurgeProjectWithHttpInfo(string projectId);
        /// <summary>
        /// Remove a member associated with this project
        /// </summary>
        /// <remarks>
        /// This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <returns></returns>
        void RemoveProjectMember(string projectId, string memberId);

        /// <summary>
        /// Remove a member associated with this project
        /// </summary>
        /// <remarks>
        /// This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveProjectMemberWithHttpInfo(string projectId, string memberId);
        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to set your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <returns></returns>
        void SetActiveProjectInConsole(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody));

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to set your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetActiveProjectInConsoleWithHttpInfo(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody));
        /// <summary>
        /// Update an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <returns>ClientSuccessfulProjectUpdate</returns>
        ClientSuccessfulProjectUpdate SetProject(string projectId, ClientSetProject clientSetProject = default(ClientSetProject));

        /// <summary>
        /// Update an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <returns>ApiResponse of ClientSuccessfulProjectUpdate</returns>
        ApiResponse<ClientSuccessfulProjectUpdate> SetProjectWithHttpInfo(string projectId, ClientSetProject clientSetProject = default(ClientSetProject));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Creates a new project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProject</returns>
        System.Threading.Tasks.Task<ClientProject> CreateProjectAsync(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Project
        /// </summary>
        /// <remarks>
        /// Creates a new project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientProject>> CreateProjectWithHttpInfoAsync(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create project API token
        /// </summary>
        /// <remarks>
        /// Create an API token for a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProjectApiKey</returns>
        System.Threading.Tasks.Task<ClientProjectApiKey> CreateProjectApiKeyAsync(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create project API token
        /// </summary>
        /// <remarks>
        /// Create an API token for a project.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProjectApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientProjectApiKey>> CreateProjectApiKeyWithHttpInfoAsync(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete project API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectApiKeyAsync(string project, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete project API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectApiKeyWithHttpInfoAsync(string project, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to get your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientActiveProjectInConsole</returns>
        System.Threading.Tasks.Task<ClientActiveProjectInConsole> GetActiveProjectInConsoleAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to get your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientActiveProjectInConsole)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientActiveProjectInConsole>> GetActiveProjectInConsoleWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Project
        /// </summary>
        /// <remarks>
        /// Get a projects you have access to by its ID.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProject</returns>
        System.Threading.Tasks.Task<ClientProject> GetProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Project
        /// </summary>
        /// <remarks>
        /// Get a projects you have access to by its ID.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientProject>> GetProjectWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all members associated with this project
        /// </summary>
        /// <remarks>
        /// This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientCloudAccount&gt;</returns>
        System.Threading.Tasks.Task<List<ClientCloudAccount>> GetProjectMembersAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all members associated with this project
        /// </summary>
        /// <remarks>
        /// This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientCloudAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientCloudAccount>>> GetProjectMembersWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a project&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the project&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientProjectApiKey&gt;</returns>
        System.Threading.Tasks.Task<List<ClientProjectApiKey>> ListProjectApiKeysAsync(string project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a project&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the project&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientProjectApiKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientProjectApiKey>>> ListProjectApiKeysWithHttpInfoAsync(string project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List All Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects you have access to.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientProjectMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<ClientProjectMetadata>> ListProjectsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List All Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects you have access to.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientProjectMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientProjectMetadata>>> ListProjectsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSuccessfulProjectUpdate</returns>
        System.Threading.Tasks.Task<ClientSuccessfulProjectUpdate> PatchProjectAsync(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSuccessfulProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientSuccessfulProjectUpdate>> PatchProjectWithHttpInfoAsync(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Irrecoverably purge a project
        /// </summary>
        /// <remarks>
        /// !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PurgeProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Irrecoverably purge a project
        /// </summary>
        /// <remarks>
        /// !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PurgeProjectWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a member associated with this project
        /// </summary>
        /// <remarks>
        /// This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveProjectMemberAsync(string projectId, string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a member associated with this project
        /// </summary>
        /// <remarks>
        /// This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProjectMemberWithHttpInfoAsync(string projectId, string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to set your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetActiveProjectInConsoleAsync(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console
        /// </summary>
        /// <remarks>
        /// Use this API to set your active project in the Ory Network Console UI.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetActiveProjectInConsoleWithHttpInfoAsync(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSuccessfulProjectUpdate</returns>
        System.Threading.Tasks.Task<ClientSuccessfulProjectUpdate> SetProjectAsync(string projectId, ClientSetProject clientSetProject = default(ClientSetProject), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an Ory Network Project Configuration
        /// </summary>
        /// <remarks>
        /// This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSuccessfulProjectUpdate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientSuccessfulProjectUpdate>> SetProjectWithHttpInfoAsync(string projectId, ClientSetProject clientSetProject = default(ClientSetProject), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IProjectApiSync, IProjectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private Ory.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(string basePath)
        {
            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                new Ory.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(Ory.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectApi(Ory.Client.Client.ISynchronousClient client, Ory.Client.Client.IAsynchronousClient asyncClient, Ory.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Project Creates a new project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <returns>ClientProject</returns>
        public ClientProject CreateProject(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody))
        {
            Ory.Client.Client.ApiResponse<ClientProject> localVarResponse = CreateProjectWithHttpInfo(clientCreateProjectBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Project Creates a new project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <returns>ApiResponse of ClientProject</returns>
        public Ory.Client.Client.ApiResponse<ClientProject> CreateProjectWithHttpInfo(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientCreateProjectBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientProject>("/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Project Creates a new project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProject</returns>
        public async System.Threading.Tasks.Task<ClientProject> CreateProjectAsync(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientProject> localVarResponse = await CreateProjectWithHttpInfoAsync(clientCreateProjectBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Project Creates a new project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateProjectBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProject)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientProject>> CreateProjectWithHttpInfoAsync(ClientCreateProjectBody clientCreateProjectBody = default(ClientCreateProjectBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientCreateProjectBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientProject>("/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project API token Create an API token for a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <returns>ClientProjectApiKey</returns>
        public ClientProjectApiKey CreateProjectApiKey(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3))
        {
            Ory.Client.Client.ApiResponse<ClientProjectApiKey> localVarResponse = CreateProjectApiKeyWithHttpInfo(project, clientInlineObject3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project API token Create an API token for a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <returns>ApiResponse of ClientProjectApiKey</returns>
        public Ory.Client.Client.ApiResponse<ClientProjectApiKey> CreateProjectApiKeyWithHttpInfo(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3))
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->CreateProjectApiKey");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.Data = clientInlineObject3;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientProjectApiKey>("/projects/{project}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create project API token Create an API token for a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProjectApiKey</returns>
        public async System.Threading.Tasks.Task<ClientProjectApiKey> CreateProjectApiKeyAsync(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientProjectApiKey> localVarResponse = await CreateProjectApiKeyWithHttpInfoAsync(project, clientInlineObject3, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create project API token Create an API token for a project.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="clientInlineObject3"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProjectApiKey)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientProjectApiKey>> CreateProjectApiKeyWithHttpInfoAsync(string project, ClientInlineObject3 clientInlineObject3 = default(ClientInlineObject3), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->CreateProjectApiKey");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.Data = clientInlineObject3;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientProjectApiKey>("/projects/{project}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <returns></returns>
        public void DeleteProjectApiKey(string project, string tokenId)
        {
            DeleteProjectApiKeyWithHttpInfo(project, tokenId);
        }

        /// <summary>
        /// Delete project API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> DeleteProjectApiKeyWithHttpInfo(string project, string tokenId)
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->DeleteProjectApiKey");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'tokenId' when calling ProjectApi->DeleteProjectApiKey");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Ory.Client.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/projects/{project}/tokens/{token_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete project API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectApiKeyAsync(string project, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteProjectApiKeyWithHttpInfoAsync(project, tokenId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete project API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> DeleteProjectApiKeyWithHttpInfoAsync(string project, string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->DeleteProjectApiKey");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'tokenId' when calling ProjectApi->DeleteProjectApiKey");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Ory.Client.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/projects/{project}/tokens/{token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console Use this API to get your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientActiveProjectInConsole</returns>
        public ClientActiveProjectInConsole GetActiveProjectInConsole()
        {
            Ory.Client.Client.ApiResponse<ClientActiveProjectInConsole> localVarResponse = GetActiveProjectInConsoleWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console Use this API to get your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientActiveProjectInConsole</returns>
        public Ory.Client.Client.ApiResponse<ClientActiveProjectInConsole> GetActiveProjectInConsoleWithHttpInfo()
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientActiveProjectInConsole>("/console/active/project", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveProjectInConsole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console Use this API to get your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientActiveProjectInConsole</returns>
        public async System.Threading.Tasks.Task<ClientActiveProjectInConsole> GetActiveProjectInConsoleAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientActiveProjectInConsole> localVarResponse = await GetActiveProjectInConsoleWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Ory Network Project selected in the Ory Network Console Use this API to get your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientActiveProjectInConsole)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientActiveProjectInConsole>> GetActiveProjectInConsoleWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientActiveProjectInConsole>("/console/active/project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveProjectInConsole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Project Get a projects you have access to by its ID.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ClientProject</returns>
        public ClientProject GetProject(string projectId)
        {
            Ory.Client.Client.ApiResponse<ClientProject> localVarResponse = GetProjectWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Project Get a projects you have access to by its ID.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of ClientProject</returns>
        public Ory.Client.Client.ApiResponse<ClientProject> GetProjectWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProject");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientProject>("/projects/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Project Get a projects you have access to by its ID.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProject</returns>
        public async System.Threading.Tasks.Task<ClientProject> GetProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientProject> localVarResponse = await GetProjectWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Project Get a projects you have access to by its ID.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProject)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientProject>> GetProjectWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProject");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientProject>("/projects/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all members associated with this project This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>List&lt;ClientCloudAccount&gt;</returns>
        public List<ClientCloudAccount> GetProjectMembers(string projectId)
        {
            Ory.Client.Client.ApiResponse<List<ClientCloudAccount>> localVarResponse = GetProjectMembersWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all members associated with this project This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of List&lt;ClientCloudAccount&gt;</returns>
        public Ory.Client.Client.ApiResponse<List<ClientCloudAccount>> GetProjectMembersWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectMembers");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientCloudAccount>>("/projects/{project_id}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all members associated with this project This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientCloudAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientCloudAccount>> GetProjectMembersAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<List<ClientCloudAccount>> localVarResponse = await GetProjectMembersWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all members associated with this project This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientCloudAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<List<ClientCloudAccount>>> GetProjectMembersWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->GetProjectMembers");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientCloudAccount>>("/projects/{project_id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a project&#39;s API Tokens A list of all the project&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <returns>List&lt;ClientProjectApiKey&gt;</returns>
        public List<ClientProjectApiKey> ListProjectApiKeys(string project)
        {
            Ory.Client.Client.ApiResponse<List<ClientProjectApiKey>> localVarResponse = ListProjectApiKeysWithHttpInfo(project);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a project&#39;s API Tokens A list of all the project&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <returns>ApiResponse of List&lt;ClientProjectApiKey&gt;</returns>
        public Ory.Client.Client.ApiResponse<List<ClientProjectApiKey>> ListProjectApiKeysWithHttpInfo(string project)
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->ListProjectApiKeys");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientProjectApiKey>>("/projects/{project}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a project&#39;s API Tokens A list of all the project&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientProjectApiKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientProjectApiKey>> ListProjectApiKeysAsync(string project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<List<ClientProjectApiKey>> localVarResponse = await ListProjectApiKeysWithHttpInfoAsync(project, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a project&#39;s API Tokens A list of all the project&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">The Project ID or Project slug</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientProjectApiKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<List<ClientProjectApiKey>>> ListProjectApiKeysWithHttpInfoAsync(string project, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'project' is set
            if (project == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'project' when calling ProjectApi->ListProjectApiKeys");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project", Ory.Client.Client.ClientUtils.ParameterToString(project)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientProjectApiKey>>("/projects/{project}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjectApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Projects Lists all projects you have access to.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClientProjectMetadata&gt;</returns>
        public List<ClientProjectMetadata> ListProjects()
        {
            Ory.Client.Client.ApiResponse<List<ClientProjectMetadata>> localVarResponse = ListProjectsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Projects Lists all projects you have access to.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClientProjectMetadata&gt;</returns>
        public Ory.Client.Client.ApiResponse<List<ClientProjectMetadata>> ListProjectsWithHttpInfo()
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientProjectMetadata>>("/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Projects Lists all projects you have access to.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientProjectMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientProjectMetadata>> ListProjectsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<List<ClientProjectMetadata>> localVarResponse = await ListProjectsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Projects Lists all projects you have access to.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientProjectMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<List<ClientProjectMetadata>>> ListProjectsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientProjectMetadata>>("/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an Ory Network Project Configuration Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <returns>ClientSuccessfulProjectUpdate</returns>
        public ClientSuccessfulProjectUpdate PatchProject(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>))
        {
            Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> localVarResponse = PatchProjectWithHttpInfo(projectId, clientJsonPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an Ory Network Project Configuration Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <returns>ApiResponse of ClientSuccessfulProjectUpdate</returns>
        public Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> PatchProjectWithHttpInfo(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->PatchProject");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientJsonPatch;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ClientSuccessfulProjectUpdate>("/projects/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an Ory Network Project Configuration Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSuccessfulProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ClientSuccessfulProjectUpdate> PatchProjectAsync(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> localVarResponse = await PatchProjectWithHttpInfoAsync(projectId, clientJsonPatch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an Ory Network Project Configuration Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientJsonPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSuccessfulProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate>> PatchProjectWithHttpInfoAsync(string projectId, List<ClientJsonPatch> clientJsonPatch = default(List<ClientJsonPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->PatchProject");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientJsonPatch;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ClientSuccessfulProjectUpdate>("/projects/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Irrecoverably purge a project !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns></returns>
        public void PurgeProject(string projectId)
        {
            PurgeProjectWithHttpInfo(projectId);
        }

        /// <summary>
        /// Irrecoverably purge a project !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> PurgeProjectWithHttpInfo(string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->PurgeProject");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/projects/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Irrecoverably purge a project !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PurgeProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PurgeProjectWithHttpInfoAsync(projectId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Irrecoverably purge a project !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> PurgeProjectWithHttpInfoAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->PurgeProject");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/projects/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member associated with this project This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <returns></returns>
        public void RemoveProjectMember(string projectId, string memberId)
        {
            RemoveProjectMemberWithHttpInfo(projectId, memberId);
        }

        /// <summary>
        /// Remove a member associated with this project This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> RemoveProjectMemberWithHttpInfo(string projectId, string memberId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->RemoveProjectMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'memberId' when calling ProjectApi->RemoveProjectMember");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_id", Ory.Client.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/projects/{project_id}/members/{member_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProjectMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member associated with this project This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveProjectMemberAsync(string projectId, string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveProjectMemberWithHttpInfoAsync(projectId, memberId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a member associated with this project This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="memberId">Member ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> RemoveProjectMemberWithHttpInfoAsync(string projectId, string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->RemoveProjectMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'memberId' when calling ProjectApi->RemoveProjectMember");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("member_id", Ory.Client.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/projects/{project_id}/members/{member_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProjectMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console Use this API to set your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <returns></returns>
        public void SetActiveProjectInConsole(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody))
        {
            SetActiveProjectInConsoleWithHttpInfo(clientSetActiveProjectInConsoleBody);
        }

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console Use this API to set your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> SetActiveProjectInConsoleWithHttpInfo(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientSetActiveProjectInConsoleBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/console/active/project", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActiveProjectInConsole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console Use this API to set your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetActiveProjectInConsoleAsync(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetActiveProjectInConsoleWithHttpInfoAsync(clientSetActiveProjectInConsoleBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sets the Ory Network Project active in the Ory Network Console Use this API to set your active project in the Ory Network Console UI.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientSetActiveProjectInConsoleBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> SetActiveProjectInConsoleWithHttpInfoAsync(ClientSetActiveProjectInConsoleBody clientSetActiveProjectInConsoleBody = default(ClientSetActiveProjectInConsoleBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientSetActiveProjectInConsoleBody;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/console/active/project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActiveProjectInConsole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Ory Network Project Configuration This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <returns>ClientSuccessfulProjectUpdate</returns>
        public ClientSuccessfulProjectUpdate SetProject(string projectId, ClientSetProject clientSetProject = default(ClientSetProject))
        {
            Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> localVarResponse = SetProjectWithHttpInfo(projectId, clientSetProject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Ory Network Project Configuration This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <returns>ApiResponse of ClientSuccessfulProjectUpdate</returns>
        public Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> SetProjectWithHttpInfo(string projectId, ClientSetProject clientSetProject = default(ClientSetProject))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->SetProject");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientSetProject;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ClientSuccessfulProjectUpdate>("/projects/{project_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Ory Network Project Configuration This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSuccessfulProjectUpdate</returns>
        public async System.Threading.Tasks.Task<ClientSuccessfulProjectUpdate> SetProjectAsync(string projectId, ClientSetProject clientSetProject = default(ClientSetProject), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate> localVarResponse = await SetProjectWithHttpInfoAsync(projectId, clientSetProject, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Ory Network Project Configuration This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Project ID  The project&#39;s ID.</param>
        /// <param name="clientSetProject"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSuccessfulProjectUpdate)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientSuccessfulProjectUpdate>> SetProjectWithHttpInfoAsync(string projectId, ClientSetProject clientSetProject = default(ClientSetProject), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->SetProject");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("project_id", Ory.Client.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = clientSetProject;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ClientSuccessfulProjectUpdate>("/projects/{project_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
