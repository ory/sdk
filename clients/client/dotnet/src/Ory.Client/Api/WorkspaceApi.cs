/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.15.0
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Client.Client;
using Ory.Client.Client.Auth;
using Ory.Client.Model;

namespace Ory.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new workspace
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        ClientWorkspace CreateWorkspace(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0);

        /// <summary>
        /// Create a new workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        ApiResponse<ClientWorkspace> CreateWorkspaceWithHttpInfo(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0);
        /// <summary>
        /// Create workspace API key
        /// </summary>
        /// <remarks>
        /// Create an API key for a workspace.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspaceApiKey</returns>
        ClientWorkspaceApiKey CreateWorkspaceApiKey(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0);

        /// <summary>
        /// Create workspace API key
        /// </summary>
        /// <remarks>
        /// Create an API key for a workspace.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspaceApiKey</returns>
        ApiResponse<ClientWorkspaceApiKey> CreateWorkspaceApiKeyWithHttpInfo(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0);
        /// <summary>
        /// Delete workspace API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWorkspaceApiKey(string workspace, string tokenId, int operationIndex = 0);

        /// <summary>
        /// Delete workspace API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkspaceApiKeyWithHttpInfo(string workspace, string tokenId, int operationIndex = 0);
        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        ClientWorkspace GetWorkspace(string workspace, int operationIndex = 0);

        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        ApiResponse<ClientWorkspace> GetWorkspaceWithHttpInfo(string workspace, int operationIndex = 0);
        /// <summary>
        /// List a workspace&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the workspace&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClientWorkspaceApiKey&gt;</returns>
        List<ClientWorkspaceApiKey> ListWorkspaceApiKeys(string workspace, int operationIndex = 0);

        /// <summary>
        /// List a workspace&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the workspace&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClientWorkspaceApiKey&gt;</returns>
        ApiResponse<List<ClientWorkspaceApiKey>> ListWorkspaceApiKeysWithHttpInfo(string workspace, int operationIndex = 0);
        /// <summary>
        /// List all projects of a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientListWorkspaceProjects</returns>
        ClientListWorkspaceProjects ListWorkspaceProjects(string workspace, int operationIndex = 0);

        /// <summary>
        /// List all projects of a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientListWorkspaceProjects</returns>
        ApiResponse<ClientListWorkspaceProjects> ListWorkspaceProjectsWithHttpInfo(string workspace, int operationIndex = 0);
        /// <summary>
        /// List workspaces the user is a member of
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientListWorkspaces</returns>
        ClientListWorkspaces ListWorkspaces(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List workspaces the user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientListWorkspaces</returns>
        ApiResponse<ClientListWorkspaces> ListWorkspacesWithHttpInfo(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update an workspace
        /// </summary>
        /// <remarks>
        /// Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        ClientWorkspace UpdateWorkspace(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0);

        /// <summary>
        /// Update an workspace
        /// </summary>
        /// <remarks>
        /// Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        ApiResponse<ClientWorkspace> UpdateWorkspaceWithHttpInfo(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        System.Threading.Tasks.Task<ClientWorkspace> CreateWorkspaceAsync(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientWorkspace>> CreateWorkspaceWithHttpInfoAsync(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create workspace API key
        /// </summary>
        /// <remarks>
        /// Create an API key for a workspace.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspaceApiKey</returns>
        System.Threading.Tasks.Task<ClientWorkspaceApiKey> CreateWorkspaceApiKeyAsync(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create workspace API key
        /// </summary>
        /// <remarks>
        /// Create an API key for a workspace.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspaceApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientWorkspaceApiKey>> CreateWorkspaceApiKeyWithHttpInfoAsync(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete workspace API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkspaceApiKeyAsync(string workspace, string tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete workspace API token
        /// </summary>
        /// <remarks>
        /// Deletes an API token and immediately removes it.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkspaceApiKeyWithHttpInfoAsync(string workspace, string tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        System.Threading.Tasks.Task<ClientWorkspace> GetWorkspaceAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientWorkspace>> GetWorkspaceWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a workspace&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the workspace&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientWorkspaceApiKey&gt;</returns>
        System.Threading.Tasks.Task<List<ClientWorkspaceApiKey>> ListWorkspaceApiKeysAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a workspace&#39;s API Tokens
        /// </summary>
        /// <remarks>
        /// A list of all the workspace&#39;s API tokens.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientWorkspaceApiKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientWorkspaceApiKey>>> ListWorkspaceApiKeysWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all projects of a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListWorkspaceProjects</returns>
        System.Threading.Tasks.Task<ClientListWorkspaceProjects> ListWorkspaceProjectsAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all projects of a workspace
        /// </summary>
        /// <remarks>
        /// Any workspace member can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListWorkspaceProjects)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientListWorkspaceProjects>> ListWorkspaceProjectsWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List workspaces the user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListWorkspaces</returns>
        System.Threading.Tasks.Task<ClientListWorkspaces> ListWorkspacesAsync(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List workspaces the user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListWorkspaces)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientListWorkspaces>> ListWorkspacesWithHttpInfoAsync(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an workspace
        /// </summary>
        /// <remarks>
        /// Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        System.Threading.Tasks.Task<ClientWorkspace> UpdateWorkspaceAsync(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an workspace
        /// </summary>
        /// <remarks>
        /// Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientWorkspace>> UpdateWorkspaceWithHttpInfoAsync(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkspaceApi : IWorkspaceApiSync, IWorkspaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkspaceApi : IWorkspaceApi
    {
        private Ory.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspaceApi(string basePath)
        {
            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                new Ory.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspaceApi(Ory.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkspaceApi(Ory.Client.Client.ISynchronousClient client, Ory.Client.Client.IAsynchronousClient asyncClient, Ory.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new workspace 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        public ClientWorkspace CreateWorkspace(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = CreateWorkspaceWithHttpInfo(clientCreateWorkspaceBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new workspace 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        public Ory.Client.Client.ApiResponse<ClientWorkspace> CreateWorkspaceWithHttpInfo(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0)
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientCreateWorkspaceBody;

            localVarRequestOptions.Operation = "WorkspaceApi.CreateWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientWorkspace>("/workspaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new workspace 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        public async System.Threading.Tasks.Task<ClientWorkspace> CreateWorkspaceAsync(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = await CreateWorkspaceWithHttpInfoAsync(clientCreateWorkspaceBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new workspace 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientCreateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientWorkspace>> CreateWorkspaceWithHttpInfoAsync(ClientCreateWorkspaceBody? clientCreateWorkspaceBody = default(ClientCreateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientCreateWorkspaceBody;

            localVarRequestOptions.Operation = "WorkspaceApi.CreateWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientWorkspace>("/workspaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create workspace API key Create an API key for a workspace.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspaceApiKey</returns>
        public ClientWorkspaceApiKey CreateWorkspaceApiKey(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientWorkspaceApiKey> localVarResponse = CreateWorkspaceApiKeyWithHttpInfo(workspace, clientCreateWorkspaceApiKeyBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create workspace API key Create an API key for a workspace.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspaceApiKey</returns>
        public Ory.Client.Client.ApiResponse<ClientWorkspaceApiKey> CreateWorkspaceApiKeyWithHttpInfo(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->CreateWorkspaceApiKey");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.Data = clientCreateWorkspaceApiKeyBody;

            localVarRequestOptions.Operation = "WorkspaceApi.CreateWorkspaceApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientWorkspaceApiKey>("/workspaces/{workspace}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspaceApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create workspace API key Create an API key for a workspace.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspaceApiKey</returns>
        public async System.Threading.Tasks.Task<ClientWorkspaceApiKey> CreateWorkspaceApiKeyAsync(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientWorkspaceApiKey> localVarResponse = await CreateWorkspaceApiKeyWithHttpInfoAsync(workspace, clientCreateWorkspaceApiKeyBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create workspace API key Create an API key for a workspace.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID</param>
        /// <param name="clientCreateWorkspaceApiKeyBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspaceApiKey)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientWorkspaceApiKey>> CreateWorkspaceApiKeyWithHttpInfoAsync(string workspace, ClientCreateWorkspaceApiKeyBody? clientCreateWorkspaceApiKeyBody = default(ClientCreateWorkspaceApiKeyBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->CreateWorkspaceApiKey");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.Data = clientCreateWorkspaceApiKeyBody;

            localVarRequestOptions.Operation = "WorkspaceApi.CreateWorkspaceApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientWorkspaceApiKey>("/workspaces/{workspace}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspaceApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete workspace API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWorkspaceApiKey(string workspace, string tokenId, int operationIndex = 0)
        {
            DeleteWorkspaceApiKeyWithHttpInfo(workspace, tokenId);
        }

        /// <summary>
        /// Delete workspace API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> DeleteWorkspaceApiKeyWithHttpInfo(string workspace, string tokenId, int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->DeleteWorkspaceApiKey");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'tokenId' when calling WorkspaceApi->DeleteWorkspaceApiKey");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Ory.Client.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.DeleteWorkspaceApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/workspaces/{workspace}/tokens/{token_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkspaceApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete workspace API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkspaceApiKeyAsync(string workspace, string tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWorkspaceApiKeyWithHttpInfoAsync(workspace, tokenId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete workspace API token Deletes an API token and immediately removes it.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="tokenId">The Token ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> DeleteWorkspaceApiKeyWithHttpInfoAsync(string workspace, string tokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->DeleteWorkspaceApiKey");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'tokenId' when calling WorkspaceApi->DeleteWorkspaceApiKey");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Ory.Client.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.DeleteWorkspaceApiKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/workspaces/{workspace}/tokens/{token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkspaceApiKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        public ClientWorkspace GetWorkspace(string workspace, int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = GetWorkspaceWithHttpInfo(workspace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        public Ory.Client.Client.ApiResponse<ClientWorkspace> GetWorkspaceWithHttpInfo(string workspace, int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->GetWorkspace");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.GetWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientWorkspace>("/workspaces/{workspace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        public async System.Threading.Tasks.Task<ClientWorkspace> GetWorkspaceAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = await GetWorkspaceWithHttpInfoAsync(workspace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientWorkspace>> GetWorkspaceWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->GetWorkspace");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.GetWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientWorkspace>("/workspaces/{workspace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a workspace&#39;s API Tokens A list of all the workspace&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClientWorkspaceApiKey&gt;</returns>
        public List<ClientWorkspaceApiKey> ListWorkspaceApiKeys(string workspace, int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<List<ClientWorkspaceApiKey>> localVarResponse = ListWorkspaceApiKeysWithHttpInfo(workspace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a workspace&#39;s API Tokens A list of all the workspace&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClientWorkspaceApiKey&gt;</returns>
        public Ory.Client.Client.ApiResponse<List<ClientWorkspaceApiKey>> ListWorkspaceApiKeysWithHttpInfo(string workspace, int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->ListWorkspaceApiKeys");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaceApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientWorkspaceApiKey>>("/workspaces/{workspace}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a workspace&#39;s API Tokens A list of all the workspace&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientWorkspaceApiKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientWorkspaceApiKey>> ListWorkspaceApiKeysAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<List<ClientWorkspaceApiKey>> localVarResponse = await ListWorkspaceApiKeysWithHttpInfoAsync(workspace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a workspace&#39;s API Tokens A list of all the workspace&#39;s API tokens.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace">The Workspace ID or Workspace slug</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientWorkspaceApiKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<List<ClientWorkspaceApiKey>>> ListWorkspaceApiKeysWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->ListWorkspaceApiKeys");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaceApiKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientWorkspaceApiKey>>("/workspaces/{workspace}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceApiKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all projects of a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientListWorkspaceProjects</returns>
        public ClientListWorkspaceProjects ListWorkspaceProjects(string workspace, int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientListWorkspaceProjects> localVarResponse = ListWorkspaceProjectsWithHttpInfo(workspace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all projects of a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientListWorkspaceProjects</returns>
        public Ory.Client.Client.ApiResponse<ClientListWorkspaceProjects> ListWorkspaceProjectsWithHttpInfo(string workspace, int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->ListWorkspaceProjects");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaceProjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientListWorkspaceProjects>("/workspaces/{workspace}/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all projects of a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListWorkspaceProjects</returns>
        public async System.Threading.Tasks.Task<ClientListWorkspaceProjects> ListWorkspaceProjectsAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientListWorkspaceProjects> localVarResponse = await ListWorkspaceProjectsWithHttpInfoAsync(workspace, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all projects of a workspace Any workspace member can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListWorkspaceProjects)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientListWorkspaceProjects>> ListWorkspaceProjectsWithHttpInfoAsync(string workspace, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->ListWorkspaceProjects");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaceProjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientListWorkspaceProjects>("/workspaces/{workspace}/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List workspaces the user is a member of 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientListWorkspaces</returns>
        public ClientListWorkspaces ListWorkspaces(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientListWorkspaces> localVarResponse = ListWorkspacesWithHttpInfo(pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List workspaces the user is a member of 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientListWorkspaces</returns>
        public Ory.Client.Client.ApiResponse<ClientListWorkspaces> ListWorkspacesWithHttpInfo(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaces";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientListWorkspaces>("/workspaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List workspaces the user is a member of 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientListWorkspaces</returns>
        public async System.Threading.Tasks.Task<ClientListWorkspaces> ListWorkspacesAsync(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientListWorkspaces> localVarResponse = await ListWorkspacesWithHttpInfoAsync(pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List workspaces the user is a member of 
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientListWorkspaces)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientListWorkspaces>> ListWorkspacesWithHttpInfoAsync(long? pageSize = default(long?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "WorkspaceApi.ListWorkspaces";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientListWorkspaces>("/workspaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an workspace Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientWorkspace</returns>
        public ClientWorkspace UpdateWorkspace(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0)
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = UpdateWorkspaceWithHttpInfo(workspace, clientUpdateWorkspaceBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an workspace Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientWorkspace</returns>
        public Ory.Client.Client.ApiResponse<ClientWorkspace> UpdateWorkspaceWithHttpInfo(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0)
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->UpdateWorkspace");
            }

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.Data = clientUpdateWorkspaceBody;

            localVarRequestOptions.Operation = "WorkspaceApi.UpdateWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ClientWorkspace>("/workspaces/{workspace}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an workspace Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientWorkspace</returns>
        public async System.Threading.Tasks.Task<ClientWorkspace> UpdateWorkspaceAsync(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientWorkspace> localVarResponse = await UpdateWorkspaceWithHttpInfoAsync(workspace, clientUpdateWorkspaceBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an workspace Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspace"></param>
        /// <param name="clientUpdateWorkspaceBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientWorkspace)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientWorkspace>> UpdateWorkspaceWithHttpInfoAsync(string workspace, ClientUpdateWorkspaceBody? clientUpdateWorkspaceBody = default(ClientUpdateWorkspaceBody?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workspace' is set
            if (workspace == null)
            {
                throw new Ory.Client.Client.ApiException(400, "Missing required parameter 'workspace' when calling WorkspaceApi->UpdateWorkspace");
            }


            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("workspace", Ory.Client.Client.ClientUtils.ParameterToString(workspace)); // path parameter
            localVarRequestOptions.Data = clientUpdateWorkspaceBody;

            localVarRequestOptions.Operation = "WorkspaceApi.UpdateWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oryWorkspaceApiKey) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ClientWorkspace>("/workspaces/{workspace}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
