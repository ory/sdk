/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v0.0.1-alpha.183
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Client.Client;
using Ory.Client.Model;

namespace Ory.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ClientRelationQuery</returns>
        ClientRelationQuery CreateRelationTuple(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery));

        /// <summary>
        /// Create a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ApiResponse of ClientRelationQuery</returns>
        ApiResponse<ClientRelationQuery> CreateRelationTupleWithHttpInfo(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery));
        /// <summary>
        /// Delete Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relation tuples
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns></returns>
        void DeleteRelationTuples(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));

        /// <summary>
        /// Delete Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relation tuples
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRelationTuplesWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));
        /// <summary>
        /// Patch Multiple Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relation tuples.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <returns></returns>
        void PatchRelationTuples(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>));

        /// <summary>
        /// Patch Multiple Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relation tuples.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchRelationTuplesWithHttpInfo(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRelationQuery</returns>
        System.Threading.Tasks.Task<ClientRelationQuery> CreateRelationTupleAsync(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Relation Tuple
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relation tuple.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRelationQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientRelationQuery>> CreateRelationTupleWithHttpInfoAsync(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relation tuples
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRelationTuplesAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relation tuples
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationTuplesWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch Multiple Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relation tuples.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchRelationTuplesAsync(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch Multiple Relation Tuples
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relation tuples.
        /// </remarks>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchRelationTuplesWithHttpInfoAsync(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteApi : IWriteApiSync, IWriteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WriteApi : IWriteApi
    {
        private Ory.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WriteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WriteApi(string basePath)
        {
            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                new Ory.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WriteApi(Ory.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Client.Client.Configuration.MergeConfigurations(
                Ory.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WriteApi(Ory.Client.Client.ISynchronousClient client, Ory.Client.Client.IAsynchronousClient asyncClient, Ory.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Relation Tuple Use this endpoint to create a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ClientRelationQuery</returns>
        public ClientRelationQuery CreateRelationTuple(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery))
        {
            Ory.Client.Client.ApiResponse<ClientRelationQuery> localVarResponse = CreateRelationTupleWithHttpInfo(clientRelationQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Relation Tuple Use this endpoint to create a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <returns>ApiResponse of ClientRelationQuery</returns>
        public Ory.Client.Client.ApiResponse<ClientRelationQuery> CreateRelationTupleWithHttpInfo(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientRelationQuery;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ClientRelationQuery>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationTuple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Relation Tuple Use this endpoint to create a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRelationQuery</returns>
        public async System.Threading.Tasks.Task<ClientRelationQuery> CreateRelationTupleAsync(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Client.Client.ApiResponse<ClientRelationQuery> localVarResponse = await CreateRelationTupleWithHttpInfoAsync(clientRelationQuery, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Relation Tuple Use this endpoint to create a relation tuple.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRelationQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRelationQuery)</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<ClientRelationQuery>> CreateRelationTupleWithHttpInfoAsync(ClientRelationQuery clientRelationQuery = default(ClientRelationQuery), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientRelationQuery;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ClientRelationQuery>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationTuple", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Relation Tuples Use this endpoint to delete relation tuples
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns></returns>
        public void DeleteRelationTuples(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            DeleteRelationTuplesWithHttpInfo(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation);
        }

        /// <summary>
        /// Delete Relation Tuples Use this endpoint to delete relation tuples
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> DeleteRelationTuplesWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Relation Tuples Use this endpoint to delete relation tuples
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRelationTuplesAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRelationTuplesWithHttpInfoAsync(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Relation Tuples Use this endpoint to delete relation tuples
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relation Tuple (optional)</param>
        /// <param name="_object">Object of the Relation Tuple (optional)</param>
        /// <param name="relation">Relation of the Relation Tuple (optional)</param>
        /// <param name="subjectId">SubjectID of the Relation Tuple (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> DeleteRelationTuplesWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Multiple Relation Tuples Use this endpoint to patch one or more relation tuples.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <returns></returns>
        public void PatchRelationTuples(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>))
        {
            PatchRelationTuplesWithHttpInfo(clientPatchDelta);
        }

        /// <summary>
        /// Patch Multiple Relation Tuples Use this endpoint to patch one or more relation tuples.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Client.Client.ApiResponse<Object> PatchRelationTuplesWithHttpInfo(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>))
        {
            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientPatchDelta;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Multiple Relation Tuples Use this endpoint to patch one or more relation tuples.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchRelationTuplesAsync(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchRelationTuplesWithHttpInfoAsync(clientPatchDelta, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Patch Multiple Relation Tuples Use this endpoint to patch one or more relation tuples.
        /// </summary>
        /// <exception cref="Ory.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientPatchDelta"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Client.Client.ApiResponse<Object>> PatchRelationTuplesWithHttpInfoAsync(List<ClientPatchDelta> clientPatchDelta = default(List<ClientPatchDelta>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Client.Client.RequestOptions localVarRequestOptions = new Ory.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientPatchDelta;

            // authentication (oryAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRelationTuples", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
