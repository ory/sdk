/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.8.1
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Client.Client.OpenAPIDateConverter;

namespace Ory.Client.Model
{
    /// <summary>
    /// ClientSessionActivityDatapoint
    /// </summary>
    [DataContract(Name = "SessionActivityDatapoint")]
    public partial class ClientSessionActivityDatapoint : IEquatable<ClientSessionActivityDatapoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSessionActivityDatapoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientSessionActivityDatapoint()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSessionActivityDatapoint" /> class.
        /// </summary>
        /// <param name="country">Country of the events (required).</param>
        /// <param name="failed">Number of events that failed in the given timeframe (required).</param>
        /// <param name="succeeded">Number of events that succeeded in the given timeframe (required).</param>
        public ClientSessionActivityDatapoint(string country = default(string), long failed = default(long), long succeeded = default(long))
        {
            // to ensure "country" is required (not null)
            if (country == null) {
                throw new ArgumentNullException("country is a required property for ClientSessionActivityDatapoint and cannot be null");
            }
            this.Country = country;
            this.Failed = failed;
            this.Succeeded = succeeded;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Country of the events
        /// </summary>
        /// <value>Country of the events</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Number of events that failed in the given timeframe
        /// </summary>
        /// <value>Number of events that failed in the given timeframe</value>
        [DataMember(Name = "failed", IsRequired = true, EmitDefaultValue = false)]
        public long Failed { get; set; }

        /// <summary>
        /// Number of events that succeeded in the given timeframe
        /// </summary>
        /// <value>Number of events that succeeded in the given timeframe</value>
        [DataMember(Name = "succeeded", IsRequired = true, EmitDefaultValue = false)]
        public long Succeeded { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientSessionActivityDatapoint {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientSessionActivityDatapoint);
        }

        /// <summary>
        /// Returns true if ClientSessionActivityDatapoint instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientSessionActivityDatapoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientSessionActivityDatapoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed.Equals(input.Failed)
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    this.Succeeded.Equals(input.Succeeded)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                hashCode = (hashCode * 59) + this.Succeeded.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
