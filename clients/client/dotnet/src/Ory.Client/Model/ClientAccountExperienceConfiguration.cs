/*
 * Ory APIs
 *
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | - -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 
 *
 * The version of the OpenAPI document: v1.20.4
 * Contact: support@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Client.Client.OpenAPIDateConverter;

namespace Ory.Client.Model
{
    /// <summary>
    /// ClientAccountExperienceConfiguration
    /// </summary>
    [DataContract(Name = "accountExperienceConfiguration")]
    public partial class ClientAccountExperienceConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAccountExperienceConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientAccountExperienceConfiguration()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAccountExperienceConfiguration" /> class.
        /// </summary>
        /// <param name="defaultRedirectUrl">defaultRedirectUrl (required).</param>
        /// <param name="errorUiUrl">errorUiUrl (required).</param>
        /// <param name="faviconDarkUrl">faviconDarkUrl.</param>
        /// <param name="faviconLightUrl">faviconLightUrl.</param>
        /// <param name="loginUiUrl">loginUiUrl (required).</param>
        /// <param name="logoDarkUrl">logoDarkUrl.</param>
        /// <param name="logoLightUrl">logoLightUrl.</param>
        /// <param name="name">name (required).</param>
        /// <param name="recoveryEnabled">recoveryEnabled (required).</param>
        /// <param name="recoveryUiUrl">recoveryUiUrl (required).</param>
        /// <param name="registrationEnabled">registrationEnabled (required).</param>
        /// <param name="registrationUiUrl">registrationUiUrl (required).</param>
        /// <param name="settingsUiUrl">settingsUiUrl (required).</param>
        /// <param name="stylesheet">stylesheet.</param>
        /// <param name="verificationEnabled">verificationEnabled (required).</param>
        /// <param name="verificationUiUrl">verificationUiUrl (required).</param>
        public ClientAccountExperienceConfiguration(string defaultRedirectUrl = default(string), string errorUiUrl = default(string), string faviconDarkUrl = default(string), string faviconLightUrl = default(string), string loginUiUrl = default(string), string logoDarkUrl = default(string), string logoLightUrl = default(string), string name = default(string), bool recoveryEnabled = default(bool), string recoveryUiUrl = default(string), bool registrationEnabled = default(bool), string registrationUiUrl = default(string), string settingsUiUrl = default(string), string stylesheet = default(string), bool verificationEnabled = default(bool), string verificationUiUrl = default(string))
        {
            // to ensure "defaultRedirectUrl" is required (not null)
            if (defaultRedirectUrl == null)
            {
                throw new ArgumentNullException("defaultRedirectUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.DefaultRedirectUrl = defaultRedirectUrl;
            // to ensure "errorUiUrl" is required (not null)
            if (errorUiUrl == null)
            {
                throw new ArgumentNullException("errorUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.ErrorUiUrl = errorUiUrl;
            // to ensure "loginUiUrl" is required (not null)
            if (loginUiUrl == null)
            {
                throw new ArgumentNullException("loginUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.LoginUiUrl = loginUiUrl;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.Name = name;
            this.RecoveryEnabled = recoveryEnabled;
            // to ensure "recoveryUiUrl" is required (not null)
            if (recoveryUiUrl == null)
            {
                throw new ArgumentNullException("recoveryUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.RecoveryUiUrl = recoveryUiUrl;
            this.RegistrationEnabled = registrationEnabled;
            // to ensure "registrationUiUrl" is required (not null)
            if (registrationUiUrl == null)
            {
                throw new ArgumentNullException("registrationUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.RegistrationUiUrl = registrationUiUrl;
            // to ensure "settingsUiUrl" is required (not null)
            if (settingsUiUrl == null)
            {
                throw new ArgumentNullException("settingsUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.SettingsUiUrl = settingsUiUrl;
            this.VerificationEnabled = verificationEnabled;
            // to ensure "verificationUiUrl" is required (not null)
            if (verificationUiUrl == null)
            {
                throw new ArgumentNullException("verificationUiUrl is a required property for ClientAccountExperienceConfiguration and cannot be null");
            }
            this.VerificationUiUrl = verificationUiUrl;
            this.FaviconDarkUrl = faviconDarkUrl;
            this.FaviconLightUrl = faviconLightUrl;
            this.LogoDarkUrl = logoDarkUrl;
            this.LogoLightUrl = logoLightUrl;
            this.Stylesheet = stylesheet;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets DefaultRedirectUrl
        /// </summary>
        [DataMember(Name = "default_redirect_url", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultRedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets ErrorUiUrl
        /// </summary>
        [DataMember(Name = "error_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets FaviconDarkUrl
        /// </summary>
        [DataMember(Name = "favicon_dark_url", EmitDefaultValue = false)]
        public string FaviconDarkUrl { get; set; }

        /// <summary>
        /// Gets or Sets FaviconLightUrl
        /// </summary>
        [DataMember(Name = "favicon_light_url", EmitDefaultValue = false)]
        public string FaviconLightUrl { get; set; }

        /// <summary>
        /// Gets or Sets LoginUiUrl
        /// </summary>
        [DataMember(Name = "login_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string LoginUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets LogoDarkUrl
        /// </summary>
        [DataMember(Name = "logo_dark_url", EmitDefaultValue = false)]
        public string LogoDarkUrl { get; set; }

        /// <summary>
        /// Gets or Sets LogoLightUrl
        /// </summary>
        [DataMember(Name = "logo_light_url", EmitDefaultValue = false)]
        public string LogoLightUrl { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryEnabled
        /// </summary>
        [DataMember(Name = "recovery_enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool RecoveryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryUiUrl
        /// </summary>
        [DataMember(Name = "recovery_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string RecoveryUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationEnabled
        /// </summary>
        [DataMember(Name = "registration_enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool RegistrationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationUiUrl
        /// </summary>
        [DataMember(Name = "registration_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string RegistrationUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets SettingsUiUrl
        /// </summary>
        [DataMember(Name = "settings_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string SettingsUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets Stylesheet
        /// </summary>
        [DataMember(Name = "stylesheet", EmitDefaultValue = false)]
        public string Stylesheet { get; set; }

        /// <summary>
        /// Gets or Sets VerificationEnabled
        /// </summary>
        [DataMember(Name = "verification_enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool VerificationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets VerificationUiUrl
        /// </summary>
        [DataMember(Name = "verification_ui_url", IsRequired = true, EmitDefaultValue = true)]
        public string VerificationUiUrl { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientAccountExperienceConfiguration {\n");
            sb.Append("  DefaultRedirectUrl: ").Append(DefaultRedirectUrl).Append("\n");
            sb.Append("  ErrorUiUrl: ").Append(ErrorUiUrl).Append("\n");
            sb.Append("  FaviconDarkUrl: ").Append(FaviconDarkUrl).Append("\n");
            sb.Append("  FaviconLightUrl: ").Append(FaviconLightUrl).Append("\n");
            sb.Append("  LoginUiUrl: ").Append(LoginUiUrl).Append("\n");
            sb.Append("  LogoDarkUrl: ").Append(LogoDarkUrl).Append("\n");
            sb.Append("  LogoLightUrl: ").Append(LogoLightUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecoveryEnabled: ").Append(RecoveryEnabled).Append("\n");
            sb.Append("  RecoveryUiUrl: ").Append(RecoveryUiUrl).Append("\n");
            sb.Append("  RegistrationEnabled: ").Append(RegistrationEnabled).Append("\n");
            sb.Append("  RegistrationUiUrl: ").Append(RegistrationUiUrl).Append("\n");
            sb.Append("  SettingsUiUrl: ").Append(SettingsUiUrl).Append("\n");
            sb.Append("  Stylesheet: ").Append(Stylesheet).Append("\n");
            sb.Append("  VerificationEnabled: ").Append(VerificationEnabled).Append("\n");
            sb.Append("  VerificationUiUrl: ").Append(VerificationUiUrl).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
