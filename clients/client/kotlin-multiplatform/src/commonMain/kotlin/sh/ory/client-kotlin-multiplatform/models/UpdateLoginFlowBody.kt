/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithCodeMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithIdentifierFirstMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithLookupSecretMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithOidcMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithPasskeyMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithPasswordMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithTotpMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowWithWebAuthnMethod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param csrfToken Sending the anti-csrf token is only required for browser login flows.
 * @param identifier Identifier is the email or username of the user trying to log in.
 * @param method Method should be set to \"password\" when logging in using the identifier and password strategy.
 * @param password The user's password.
 * @param provider The provider to register with
 * @param totpCode The TOTP code.
 * @param lookupSecret The lookup secret.
 * @param passwordIdentifier Identifier is the email or username of the user trying to log in. This field is deprecated!
 * @param transientPayload Transient data to pass along to any webhooks
 * @param idToken IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google
 * @param idTokenNonce IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and required.
 * @param traits The identity traits. This is a placeholder for the registration flow.
 * @param upstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
 * @param webauthnLogin Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
 * @param address Address is the address to send the code to, in case that there are multiple addresses. This field is only used in two-factor flows and is ineffective for passwordless flows.
 * @param code Code is the 6 digits code sent to the user
 * @param resend Resend is set when the user wants to resend the code
 * @param passkeyLogin Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
 */


interface UpdateLoginFlowBody {

    /* Sending the anti-csrf token is only required for browser login flows. */
    @SerialName(value = "csrf_token") @Required val csrfToken: kotlin.String
    /* Identifier is the email or username of the user trying to log in. */
    @SerialName(value = "identifier") @Required val identifier: kotlin.String
    /* Method should be set to \"password\" when logging in using the identifier and password strategy. */
    @SerialName(value = "method") @Required val method: kotlin.String
    /* The user's password. */
    @SerialName(value = "password") @Required val password: kotlin.String
    /* The provider to register with */
    @SerialName(value = "provider") @Required val provider: kotlin.String
    /* The TOTP code. */
    @SerialName(value = "totp_code") @Required val totpCode: kotlin.String
    /* The lookup secret. */
    @SerialName(value = "lookup_secret") @Required val lookupSecret: kotlin.String
    /* Identifier is the email or username of the user trying to log in. This field is deprecated! */
    @SerialName(value = "password_identifier") val passwordIdentifier: kotlin.String?
    /* Transient data to pass along to any webhooks */
    @SerialName(value = "transient_payload") val transientPayload: kotlin.String?
    /* IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google */
    @SerialName(value = "id_token") val idToken: kotlin.String?
    /* IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and required. */
    @SerialName(value = "id_token_nonce") val idTokenNonce: kotlin.String?
    /* The identity traits. This is a placeholder for the registration flow. */
    @SerialName(value = "traits") val traits: kotlin.String?
    /* UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`. */
    @SerialName(value = "upstream_parameters") val upstreamParameters: kotlin.String?
    /* Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    @SerialName(value = "webauthn_login") val webauthnLogin: kotlin.String?
    /* Address is the address to send the code to, in case that there are multiple addresses. This field is only used in two-factor flows and is ineffective for passwordless flows. */
    @SerialName(value = "address") val address: kotlin.String?
    /* Code is the 6 digits code sent to the user */
    @SerialName(value = "code") val code: kotlin.String?
    /* Resend is set when the user wants to resend the code */
    @SerialName(value = "resend") val resend: kotlin.String?
    /* Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    @SerialName(value = "passkey_login") val passkeyLogin: kotlin.String?

}

