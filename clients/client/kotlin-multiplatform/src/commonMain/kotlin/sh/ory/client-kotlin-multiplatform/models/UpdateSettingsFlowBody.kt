/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithLookupMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithOidcMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithPasskeyMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithPasswordMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithProfileMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithTotpMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithWebAuthnMethod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Update Settings Flow Request Body
 *
 * @param method Method  Should be set to \"passkey\" when trying to add, update, or remove a webAuthn pairing.
 * @param password Password is the updated password
 * @param traits The identity's traits  in: body
 * @param csrfToken CSRFToken is the anti-CSRF token
 * @param transientPayload Transient data to pass along to any webhooks
 * @param flow Flow ID is the flow's ID.  in: query
 * @param link Link this provider  Either this or `unlink` must be set.  type: string in: body
 * @param unlink Unlink this provider  Either this or `link` must be set.  type: string in: body
 * @param upstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
 * @param totpCode ValidationTOTP must contain a valid TOTP based on the
 * @param totpUnlink UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
 * @param webauthnRegister Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
 * @param webauthnRegisterDisplayname Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
 * @param webauthnRemove Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
 * @param lookupSecretConfirm If set to true will save the regenerated lookup secrets
 * @param lookupSecretDisable Disables this method if true.
 * @param lookupSecretRegenerate If set to true will regenerate the lookup secrets
 * @param lookupSecretReveal If set to true will reveal the lookup secrets
 * @param passkeyRemove Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
 * @param passkeySettingsRegister Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
 */


interface UpdateSettingsFlowBody {

    /* Method  Should be set to \"passkey\" when trying to add, update, or remove a webAuthn pairing. */
    @SerialName(value = "method") @Required val method: kotlin.String
    /* Password is the updated password */
    @SerialName(value = "password") @Required val password: kotlin.String
    /* The identity's traits  in: body */
    @SerialName(value = "traits") @Required val traits: kotlin.String
    /* CSRFToken is the anti-CSRF token */
    @SerialName(value = "csrf_token") val csrfToken: kotlin.String?
    /* Transient data to pass along to any webhooks */
    @SerialName(value = "transient_payload") val transientPayload: kotlin.String?
    /* Flow ID is the flow's ID.  in: query */
    @SerialName(value = "flow") val flow: kotlin.String?
    /* Link this provider  Either this or `unlink` must be set.  type: string in: body */
    @SerialName(value = "link") val link: kotlin.String?
    /* Unlink this provider  Either this or `link` must be set.  type: string in: body */
    @SerialName(value = "unlink") val unlink: kotlin.String?
    /* UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`. */
    @SerialName(value = "upstream_parameters") val upstreamParameters: kotlin.String?
    /* ValidationTOTP must contain a valid TOTP based on the */
    @SerialName(value = "totp_code") val totpCode: kotlin.String?
    /* UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device. */
    @SerialName(value = "totp_unlink") val totpUnlink: kotlin.Boolean?
    /* Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    @SerialName(value = "webauthn_register") val webauthnRegister: kotlin.String?
    /* Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added. */
    @SerialName(value = "webauthn_register_displayname") val webauthnRegisterDisplayname: kotlin.String?
    /* Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    @SerialName(value = "webauthn_remove") val webauthnRemove: kotlin.String?
    /* If set to true will save the regenerated lookup secrets */
    @SerialName(value = "lookup_secret_confirm") val lookupSecretConfirm: kotlin.Boolean?
    /* Disables this method if true. */
    @SerialName(value = "lookup_secret_disable") val lookupSecretDisable: kotlin.Boolean?
    /* If set to true will regenerate the lookup secrets */
    @SerialName(value = "lookup_secret_regenerate") val lookupSecretRegenerate: kotlin.Boolean?
    /* If set to true will reveal the lookup secrets */
    @SerialName(value = "lookup_secret_reveal") val lookupSecretReveal: kotlin.Boolean?
    /* Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection. */
    @SerialName(value = "passkey_remove") val passkeyRemove: kotlin.String?
    /* Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    @SerialName(value = "passkey_settings_register") val passkeySettingsRegister: kotlin.String?

}

