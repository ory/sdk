/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import sh.ory.client-kotlin-multiplatform.models.PlanDetails

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param createdAt 
 * @param currency The currency of the subscription. To change this, a new subscription must be created. usd USD eur Euro
 * @param currentInterval The currently active interval of the subscription monthly Monthly yearly Yearly
 * @param currentPlan The currently active plan of the subscription
 * @param customerId The ID of the stripe customer
 * @param id The ID of the subscription
 * @param intervalChangesTo 
 * @param payedUntil Until when the subscription is payed
 * @param planChangesTo 
 * @param status For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.  If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
 * @param updatedAt 
 * @param currentPlanDetails 
 * @param ongoingStripeCheckoutId 
 * @param planChangesAt 
 * @param stripeCheckoutExpiresAt 
 */
@Serializable

data class Subscription (

    @SerialName(value = "created_at") @Required val createdAt: kotlinx.datetime.Instant,

    /* The currency of the subscription. To change this, a new subscription must be created. usd USD eur Euro */
    @SerialName(value = "currency") @Required val currency: Subscription.Currency,

    /* The currently active interval of the subscription monthly Monthly yearly Yearly */
    @SerialName(value = "current_interval") @Required val currentInterval: Subscription.CurrentInterval,

    /* The currently active plan of the subscription */
    @SerialName(value = "current_plan") @Required val currentPlan: kotlin.String,

    /* The ID of the stripe customer */
    @SerialName(value = "customer_id") @Required val customerId: kotlin.String,

    /* The ID of the subscription */
    @SerialName(value = "id") @Required val id: kotlin.String,

    @SerialName(value = "interval_changes_to") @Required val intervalChangesTo: kotlin.String?,

    /* Until when the subscription is payed */
    @SerialName(value = "payed_until") @Required val payedUntil: kotlinx.datetime.Instant,

    @SerialName(value = "plan_changes_to") @Required val planChangesTo: kotlin.String?,

    /* For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.  If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices. */
    @SerialName(value = "status") @Required val status: kotlin.String,

    @SerialName(value = "updated_at") @Required val updatedAt: kotlinx.datetime.Instant,

    @SerialName(value = "current_plan_details") val currentPlanDetails: PlanDetails? = null,

    @SerialName(value = "ongoing_stripe_checkout_id") val ongoingStripeCheckoutId: kotlin.String? = null,

    @SerialName(value = "plan_changes_at") val planChangesAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "stripe_checkout_expires_at") val stripeCheckoutExpiresAt: kotlinx.datetime.Instant? = null

) {

    /**
     * The currency of the subscription. To change this, a new subscription must be created. usd USD eur Euro
     *
     * Values: usd,eur
     */
    @Serializable
    enum class Currency(val value: kotlin.String) {
        @SerialName(value = "usd") usd("usd"),
        @SerialName(value = "eur") eur("eur");
    }
    /**
     * The currently active interval of the subscription monthly Monthly yearly Yearly
     *
     * Values: monthly,yearly
     */
    @Serializable
    enum class CurrentInterval(val value: kotlin.String) {
        @SerialName(value = "monthly") monthly("monthly"),
        @SerialName(value = "yearly") yearly("yearly");
    }

}

