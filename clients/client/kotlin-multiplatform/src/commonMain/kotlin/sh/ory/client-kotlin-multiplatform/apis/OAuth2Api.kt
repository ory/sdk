/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import sh.ory.client-kotlin-multiplatform.models.AcceptOAuth2ConsentRequest
import sh.ory.client-kotlin-multiplatform.models.AcceptOAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.ErrorOAuth2
import sh.ory.client-kotlin-multiplatform.models.GenericError
import sh.ory.client-kotlin-multiplatform.models.IntrospectedOAuth2Token
import sh.ory.client-kotlin-multiplatform.models.JsonPatch
import sh.ory.client-kotlin-multiplatform.models.OAuth2Client
import sh.ory.client-kotlin-multiplatform.models.OAuth2ClientTokenLifespans
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentSession
import sh.ory.client-kotlin-multiplatform.models.OAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2LogoutRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2RedirectTo
import sh.ory.client-kotlin-multiplatform.models.OAuth2TokenExchange
import sh.ory.client-kotlin-multiplatform.models.RejectOAuth2Request
import sh.ory.client-kotlin-multiplatform.models.TrustOAuth2JwtGrantIssuer
import sh.ory.client-kotlin-multiplatform.models.TrustedOAuth2JwtGrantIssuer

import sh.ory.client-kotlin-multiplatform.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class OAuth2Api : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Accept OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge
     * @param acceptOAuth2ConsentRequest  (optional)
     * @return OAuth2RedirectTo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun acceptOAuth2ConsentRequest(consentChallenge: kotlin.String, acceptOAuth2ConsentRequest: AcceptOAuth2ConsentRequest? = null): HttpResponse<OAuth2RedirectTo> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = acceptOAuth2ConsentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        consentChallenge?.apply { localVariableQuery["consent_challenge"] = listOf("$consentChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/consent/accept",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Accept OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge
     * @param acceptOAuth2LoginRequest  (optional)
     * @return OAuth2RedirectTo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun acceptOAuth2LoginRequest(loginChallenge: kotlin.String, acceptOAuth2LoginRequest: AcceptOAuth2LoginRequest? = null): HttpResponse<OAuth2RedirectTo> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = acceptOAuth2LoginRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        loginChallenge?.apply { localVariableQuery["login_challenge"] = listOf("$loginChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/login/accept",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Accept OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param logoutChallenge OAuth 2.0 Logout Request Challenge
     * @return OAuth2RedirectTo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun acceptOAuth2LogoutRequest(logoutChallenge: kotlin.String): HttpResponse<OAuth2RedirectTo> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        logoutChallenge?.apply { localVariableQuery["logout_challenge"] = listOf("$logoutChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/logout/accept",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create OAuth 2.0 Client
     * Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * @param oauth2Client OAuth 2.0 Client Request Body
     * @return OAuth2Client
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createOAuth2Client(oauth2Client: OAuth2Client): HttpResponse<OAuth2Client> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = oauth2Client

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete OAuth 2.0 Client
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @param id The id of the OAuth 2.0 Client.
     * @return void
     */
    open suspend fun deleteOAuth2Client(id: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/clients/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * @param clientId OAuth 2.0 Client ID
     * @return void
     */
    open suspend fun deleteOAuth2Token(clientId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        clientId?.apply { localVariableQuery["client_id"] = listOf("$clientId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/oauth2/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @param id The id of the desired grant
     * @return void
     */
    open suspend fun deleteTrustedOAuth2JwtGrantIssuer(id: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/trust/grants/jwt-bearer/issuers/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get an OAuth 2.0 Client
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client.
     * @return OAuth2Client
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOAuth2Client(id: kotlin.String): HttpResponse<OAuth2Client> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/clients/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge
     * @return OAuth2ConsentRequest
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOAuth2ConsentRequest(consentChallenge: kotlin.String): HttpResponse<OAuth2ConsentRequest> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        consentChallenge?.apply { localVariableQuery["consent_challenge"] = listOf("$consentChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/oauth2/auth/requests/consent",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @param loginChallenge OAuth 2.0 Login Request Challenge
     * @return OAuth2LoginRequest
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOAuth2LoginRequest(loginChallenge: kotlin.String): HttpResponse<OAuth2LoginRequest> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        loginChallenge?.apply { localVariableQuery["login_challenge"] = listOf("$loginChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/oauth2/auth/requests/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get OAuth 2.0 Session Logout Request
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * @param logoutChallenge 
     * @return OAuth2LogoutRequest
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOAuth2LogoutRequest(logoutChallenge: kotlin.String): HttpResponse<OAuth2LogoutRequest> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        logoutChallenge?.apply { localVariableQuery["logout_challenge"] = listOf("$logoutChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/oauth2/auth/requests/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @param id The id of the desired grant
     * @return TrustedOAuth2JwtGrantIssuer
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getTrustedOAuth2JwtGrantIssuer(id: kotlin.String): HttpResponse<TrustedOAuth2JwtGrantIssuer> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/trust/grants/jwt-bearer/issuers/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Introspect OAuth2 Access and Refresh Tokens
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
     * @param token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @return IntrospectedOAuth2Token
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun introspectOAuth2Token(token: kotlin.String, scope: kotlin.String? = null): HttpResponse<IntrospectedOAuth2Token> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            ParametersBuilder().also {
                scope?.apply { it.append("scope", scope.toString()) }
                token?.apply { it.append("token", token.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/oauth2/introspect",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List OAuth 2.0 Clients
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     * @param clientName The name of the clients to filter by. (optional)
     * @param owner The owner of the clients to filter by. (optional)
     * @return kotlin.collections.List<OAuth2Client>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listOAuth2Clients(pageSize: kotlin.Long? = 250L, pageToken: kotlin.String? = "1", clientName: kotlin.String? = null, owner: kotlin.String? = null): HttpResponse<kotlin.collections.List<OAuth2Client>> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        pageToken?.apply { localVariableQuery["page_token"] = listOf("$pageToken") }
        clientName?.apply { localVariableQuery["client_name"] = listOf("$clientName") }
        owner?.apply { localVariableQuery["owner"] = listOf("$owner") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListOAuth2ClientsResponse>().map { value }
    }

    @Serializable(ListOAuth2ClientsResponse.Companion::class)
    private class ListOAuth2ClientsResponse(val value: List<OAuth2Client>) {
        companion object : KSerializer<ListOAuth2ClientsResponse> {
            private val serializer: KSerializer<List<OAuth2Client>> = serializer<List<OAuth2Client>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListOAuth2ClientsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListOAuth2ClientsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List OAuth 2.0 Consent Sessions of a Subject
     * This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * @param subject The subject to list the consent sessions for.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to "1")
     * @param loginSessionId The login session id to list the consent sessions for. (optional)
     * @return kotlin.collections.List<OAuth2ConsentSession>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listOAuth2ConsentSessions(subject: kotlin.String, pageSize: kotlin.Long? = 250L, pageToken: kotlin.String? = "1", loginSessionId: kotlin.String? = null): HttpResponse<kotlin.collections.List<OAuth2ConsentSession>> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        pageToken?.apply { localVariableQuery["page_token"] = listOf("$pageToken") }
        subject?.apply { localVariableQuery["subject"] = listOf("$subject") }
        loginSessionId?.apply { localVariableQuery["login_session_id"] = listOf("$loginSessionId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/oauth2/auth/sessions/consent",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListOAuth2ConsentSessionsResponse>().map { value }
    }

    @Serializable(ListOAuth2ConsentSessionsResponse.Companion::class)
    private class ListOAuth2ConsentSessionsResponse(val value: List<OAuth2ConsentSession>) {
        companion object : KSerializer<ListOAuth2ConsentSessionsResponse> {
            private val serializer: KSerializer<List<OAuth2ConsentSession>> = serializer<List<OAuth2ConsentSession>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListOAuth2ConsentSessionsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListOAuth2ConsentSessionsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @param maxItems  (optional)
     * @param defaultItems  (optional)
     * @param issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @return kotlin.collections.List<TrustedOAuth2JwtGrantIssuer>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listTrustedOAuth2JwtGrantIssuers(maxItems: kotlin.Long? = null, defaultItems: kotlin.Long? = null, issuer: kotlin.String? = null): HttpResponse<kotlin.collections.List<TrustedOAuth2JwtGrantIssuer>> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        maxItems?.apply { localVariableQuery["MaxItems"] = listOf("$maxItems") }
        defaultItems?.apply { localVariableQuery["DefaultItems"] = listOf("$defaultItems") }
        issuer?.apply { localVariableQuery["issuer"] = listOf("$issuer") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/trust/grants/jwt-bearer/issuers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListTrustedOAuth2JwtGrantIssuersResponse>().map { value }
    }

    @Serializable(ListTrustedOAuth2JwtGrantIssuersResponse.Companion::class)
    private class ListTrustedOAuth2JwtGrantIssuersResponse(val value: List<TrustedOAuth2JwtGrantIssuer>) {
        companion object : KSerializer<ListTrustedOAuth2JwtGrantIssuersResponse> {
            private val serializer: KSerializer<List<TrustedOAuth2JwtGrantIssuer>> = serializer<List<TrustedOAuth2JwtGrantIssuer>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListTrustedOAuth2JwtGrantIssuersResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListTrustedOAuth2JwtGrantIssuersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * OAuth 2.0 Authorize Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  This endpoint should not be used via the Ory SDK and is only included for technical reasons. Instead, use one of the libraries linked above.
     * @return ErrorOAuth2
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oAuth2Authorize(): HttpResponse<ErrorOAuth2> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/oauth2/auth",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * The OAuth 2.0 Token Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  This endpoint should not be used via the Ory SDK and is only included for technical reasons. Instead, use one of the libraries linked above.
     * @param grantType 
     * @param clientId  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param refreshToken  (optional)
     * @return OAuth2TokenExchange
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun oauth2TokenExchange(grantType: kotlin.String, clientId: kotlin.String? = null, code: kotlin.String? = null, redirectUri: kotlin.String? = null, refreshToken: kotlin.String? = null): HttpResponse<OAuth2TokenExchange> {

        val localVariableAuthNames = listOf<String>("basic", "oauth2")

        val localVariableBody = 
            ParametersBuilder().also {
                clientId?.apply { it.append("client_id", clientId.toString()) }
                code?.apply { it.append("code", code.toString()) }
                grantType?.apply { it.append("grant_type", grantType.toString()) }
                redirectUri?.apply { it.append("redirect_uri", redirectUri.toString()) }
                refreshToken?.apply { it.append("refresh_token", refreshToken.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Patch OAuth 2.0 Client
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client.
     * @param jsonPatch OAuth 2.0 Client JSON Patch Body
     * @return OAuth2Client
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchOAuth2Client(id: kotlin.String, jsonPatch: kotlin.collections.List<JsonPatch>): HttpResponse<OAuth2Client> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = PatchOAuth2ClientRequest(jsonPatch)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/admin/clients/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(PatchOAuth2ClientRequest.Companion::class)
    private class PatchOAuth2ClientRequest(val value: List<JsonPatch>) {
        companion object : KSerializer<PatchOAuth2ClientRequest> {
            private val serializer: KSerializer<List<JsonPatch>> = serializer<List<JsonPatch>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: PatchOAuth2ClientRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = PatchOAuth2ClientRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * Reject OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge
     * @param rejectOAuth2Request  (optional)
     * @return OAuth2RedirectTo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun rejectOAuth2ConsentRequest(consentChallenge: kotlin.String, rejectOAuth2Request: RejectOAuth2Request? = null): HttpResponse<OAuth2RedirectTo> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = rejectOAuth2Request

        val localVariableQuery = mutableMapOf<String, List<String>>()
        consentChallenge?.apply { localVariableQuery["consent_challenge"] = listOf("$consentChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/consent/reject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Reject OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge
     * @param rejectOAuth2Request  (optional)
     * @return OAuth2RedirectTo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun rejectOAuth2LoginRequest(loginChallenge: kotlin.String, rejectOAuth2Request: RejectOAuth2Request? = null): HttpResponse<OAuth2RedirectTo> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = rejectOAuth2Request

        val localVariableQuery = mutableMapOf<String, List<String>>()
        loginChallenge?.apply { localVariableQuery["login_challenge"] = listOf("$loginChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/login/reject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Reject OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @param logoutChallenge 
     * @return void
     */
    open suspend fun rejectOAuth2LogoutRequest(logoutChallenge: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        logoutChallenge?.apply { localVariableQuery["logout_challenge"] = listOf("$logoutChallenge") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/oauth2/auth/requests/logout/reject",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revoke OAuth 2.0 Consent Sessions of a Subject
     * This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * @param subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
     * @param client OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     * @param all Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     * @return void
     */
    open suspend fun revokeOAuth2ConsentSessions(subject: kotlin.String, client: kotlin.String? = null, all: kotlin.Boolean? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subject?.apply { localVariableQuery["subject"] = listOf("$subject") }
        client?.apply { localVariableQuery["client"] = listOf("$client") }
        all?.apply { localVariableQuery["all"] = listOf("$all") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/oauth2/auth/sessions/consent",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * @param subject OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param sid Login Session ID  The login session to revoke. (optional)
     * @return void
     */
    open suspend fun revokeOAuth2LoginSessions(subject: kotlin.String? = null, sid: kotlin.String? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subject?.apply { localVariableQuery["subject"] = listOf("$subject") }
        sid?.apply { localVariableQuery["sid"] = listOf("$sid") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/oauth2/auth/sessions/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revoke OAuth 2.0 Access or Refresh Token
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @param token 
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return void
     */
    open suspend fun revokeOAuth2Token(token: kotlin.String, clientId: kotlin.String? = null, clientSecret: kotlin.String? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("basic", "oauth2")

        val localVariableBody = 
            ParametersBuilder().also {
                clientId?.apply { it.append("client_id", clientId.toString()) }
                clientSecret?.apply { it.append("client_secret", clientSecret.toString()) }
                token?.apply { it.append("token", token.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth2/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Set OAuth 2.0 Client
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id OAuth 2.0 Client ID
     * @param oauth2Client OAuth 2.0 Client Request Body
     * @return OAuth2Client
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun setOAuth2Client(id: kotlin.String, oauth2Client: OAuth2Client): HttpResponse<OAuth2Client> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = oauth2Client

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/clients/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Set OAuth2 Client Token Lifespans
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * @param id OAuth 2.0 Client ID
     * @param oauth2ClientTokenLifespans  (optional)
     * @return OAuth2Client
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun setOAuth2ClientLifespans(id: kotlin.String, oauth2ClientTokenLifespans: OAuth2ClientTokenLifespans? = null): HttpResponse<OAuth2Client> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = oauth2ClientTokenLifespans

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/clients/{id}/lifespans".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Trust OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @param trustOAuth2JwtGrantIssuer  (optional)
     * @return TrustedOAuth2JwtGrantIssuer
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer: TrustOAuth2JwtGrantIssuer? = null): HttpResponse<TrustedOAuth2JwtGrantIssuer> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = trustOAuth2JwtGrantIssuer

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/trust/grants/jwt-bearer/issuers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
