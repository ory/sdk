/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithCodeMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithOidcMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithPasskeyMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithPasswordMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithProfileMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithWebAuthnMethod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Update Registration Request Body
 *
 * @param method Method  Should be set to profile when trying to update a profile.
 * @param password Password to sign the user up with
 * @param traits Traits  The identity's traits.
 * @param provider The provider to register with
 * @param csrfToken The Anti-CSRF Token  This token is only required when performing browser flows.
 * @param transientPayload Transient data to pass along to any webhooks
 * @param idToken IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google
 * @param idTokenNonce IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and is required.
 * @param upstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
 * @param webauthnRegister Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
 * @param webauthnRegisterDisplayname Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
 * @param code The OTP Code sent to the user
 * @param resend Resend restarts the flow with a new code
 * @param passkeyRegister Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
 * @param screen Screen requests navigation to a previous screen.  This must be set to credential-selection to go back to the credential selection screen. credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential previous RegistrationScreenPrevious
 */


interface UpdateRegistrationFlowBody {

    /* Method  Should be set to profile when trying to update a profile. */
    @SerialName(value = "method") @Required val method: kotlin.String
    /* Password to sign the user up with */
    @SerialName(value = "password") @Required val password: kotlin.String
    /* Traits  The identity's traits. */
    @SerialName(value = "traits") @Required val traits: kotlin.String
    /* The provider to register with */
    @SerialName(value = "provider") @Required val provider: kotlin.String
    /* The Anti-CSRF Token  This token is only required when performing browser flows. */
    @SerialName(value = "csrf_token") val csrfToken: kotlin.String?
    /* Transient data to pass along to any webhooks */
    @SerialName(value = "transient_payload") val transientPayload: kotlin.String?
    /* IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google */
    @SerialName(value = "id_token") val idToken: kotlin.String?
    /* IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and is required. */
    @SerialName(value = "id_token_nonce") val idTokenNonce: kotlin.String?
    /* UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`. */
    @SerialName(value = "upstream_parameters") val upstreamParameters: kotlin.String?
    /* Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    @SerialName(value = "webauthn_register") val webauthnRegister: kotlin.String?
    /* Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added. */
    @SerialName(value = "webauthn_register_displayname") val webauthnRegisterDisplayname: kotlin.String?
    /* The OTP Code sent to the user */
    @SerialName(value = "code") val code: kotlin.String?
    /* Resend restarts the flow with a new code */
    @SerialName(value = "resend") val resend: kotlin.String?
    /* Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here. */
    @SerialName(value = "passkey_register") val passkeyRegister: kotlin.String?
    /* Screen requests navigation to a previous screen.  This must be set to credential-selection to go back to the credential selection screen. credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential previous RegistrationScreenPrevious */
    @SerialName(value = "screen") val screen: UpdateRegistrationFlowBody.Screen?
    /**
     * Screen requests navigation to a previous screen.  This must be set to credential-selection to go back to the credential selection screen. credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential previous RegistrationScreenPrevious
     *
     * Values: credentialMinusSelection,previous
     */
    @Serializable
    enum class Screen(val value: kotlin.String) {
        @SerialName(value = "credential-selection") credentialMinusSelection("credential-selection"),
        @SerialName(value = "previous") previous("previous");
    }

}

