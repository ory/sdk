/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import sh.ory.client-kotlin-multiplatform.models.CreateWorkspaceApiKeyBody
import sh.ory.client-kotlin-multiplatform.models.CreateWorkspaceBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.ListWorkspaceProjects
import sh.ory.client-kotlin-multiplatform.models.ListWorkspaces
import sh.ory.client-kotlin-multiplatform.models.UpdateWorkspaceBody
import sh.ory.client-kotlin-multiplatform.models.Workspace
import sh.ory.client-kotlin-multiplatform.models.WorkspaceApiKey

import sh.ory.client-kotlin-multiplatform.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class WorkspaceApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create a new workspace
     * 
     * @param createWorkspaceBody  (optional)
     * @return Workspace
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createWorkspace(createWorkspaceBody: CreateWorkspaceBody? = null): HttpResponse<Workspace> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = createWorkspaceBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workspaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create workspace API key
     * Create an API key for a workspace.
     * @param workspace The Workspace ID
     * @param createWorkspaceApiKeyBody  (optional)
     * @return WorkspaceApiKey
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createWorkspaceApiKey(workspace: kotlin.String, createWorkspaceApiKeyBody: CreateWorkspaceApiKeyBody? = null): HttpResponse<WorkspaceApiKey> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = createWorkspaceApiKeyBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workspaces/{workspace}/tokens".replace("{" + "workspace" + "}", "$workspace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete workspace API key
     * Deletes an API key and immediately removes it.
     * @param workspace The Workspace ID or Workspace slug
     * @param tokenId The Token ID
     * @return void
     */
    open suspend fun deleteWorkspaceApiKey(workspace: kotlin.String, tokenId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/workspaces/{workspace}/tokens/{token_id}".replace("{" + "workspace" + "}", "$workspace").replace("{" + "token_id" + "}", "$tokenId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a workspace
     * Any workspace member can access this endpoint.
     * @param workspace 
     * @return Workspace
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWorkspace(workspace: kotlin.String): HttpResponse<Workspace> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/workspaces/{workspace}".replace("{" + "workspace" + "}", "$workspace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List a workspace&#39;s API keys
     * A list of all the workspace&#39;s API keys.
     * @param workspace The Workspace ID or Workspace slug
     * @return kotlin.collections.List<WorkspaceApiKey>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listWorkspaceApiKeys(workspace: kotlin.String): HttpResponse<kotlin.collections.List<WorkspaceApiKey>> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/workspaces/{workspace}/tokens".replace("{" + "workspace" + "}", "$workspace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListWorkspaceApiKeysResponse>().map { value }
    }

    @Serializable(ListWorkspaceApiKeysResponse.Companion::class)
    private class ListWorkspaceApiKeysResponse(val value: List<WorkspaceApiKey>) {
        companion object : KSerializer<ListWorkspaceApiKeysResponse> {
            private val serializer: KSerializer<List<WorkspaceApiKey>> = serializer<List<WorkspaceApiKey>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListWorkspaceApiKeysResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListWorkspaceApiKeysResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List all projects of a workspace
     * Any workspace member can access this endpoint.
     * @param workspace 
     * @return ListWorkspaceProjects
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listWorkspaceProjects(workspace: kotlin.String): HttpResponse<ListWorkspaceProjects> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/workspaces/{workspace}/projects".replace("{" + "workspace" + "}", "$workspace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List workspaces the user is a member of
     * 
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     * @return ListWorkspaces
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listWorkspaces(pageSize: kotlin.Long? = 250L, pageToken: kotlin.String? = null): HttpResponse<ListWorkspaces> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        pageToken?.apply { localVariableQuery["page_token"] = listOf("$pageToken") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/workspaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update an workspace
     * Workspace members with the role &#x60;OWNER&#x60; can access this endpoint.
     * @param workspace 
     * @param updateWorkspaceBody  (optional)
     * @return Workspace
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateWorkspace(workspace: kotlin.String, updateWorkspaceBody: UpdateWorkspaceBody? = null): HttpResponse<Workspace> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = updateWorkspaceBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/workspaces/{workspace}".replace("{" + "workspace" + "}", "$workspace"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
