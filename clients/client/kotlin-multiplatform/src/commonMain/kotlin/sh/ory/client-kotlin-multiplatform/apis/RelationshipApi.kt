/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import sh.ory.client-kotlin-multiplatform.models.CheckOplSyntaxResult
import sh.ory.client-kotlin-multiplatform.models.CreateRelationshipBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.Relationship
import sh.ory.client-kotlin-multiplatform.models.RelationshipNamespaces
import sh.ory.client-kotlin-multiplatform.models.RelationshipPatch
import sh.ory.client-kotlin-multiplatform.models.Relationships

import sh.ory.client-kotlin-multiplatform.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class RelationshipApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Check the syntax of an OPL file
     * The OPL file is expected in the body of the request.
     * @param body  (optional)
     * @return CheckOplSyntaxResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun checkOplSyntax(body: kotlin.String? = null): HttpResponse<CheckOplSyntaxResult> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/opl/syntax/check",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create a Relationship
     * Use this endpoint to create a relationship.
     * @param createRelationshipBody  (optional)
     * @return Relationship
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createRelationship(createRelationshipBody: CreateRelationshipBody? = null): HttpResponse<Relationship> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = createRelationshipBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/relation-tuples",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete Relationships
     * Use this endpoint to delete relationships
     * @param namespace Namespace of the Relationship (optional)
     * @param `object` Object of the Relationship (optional)
     * @param relation Relation of the Relationship (optional)
     * @param subjectId SubjectID of the Relationship (optional)
     * @param subjectSetNamespace Namespace of the Subject Set (optional)
     * @param subjectSetObject Object of the Subject Set (optional)
     * @param subjectSetRelation Relation of the Subject Set (optional)
     * @return void
     */
    open suspend fun deleteRelationships(namespace: kotlin.String? = null, `object`: kotlin.String? = null, relation: kotlin.String? = null, subjectId: kotlin.String? = null, subjectSetNamespace: kotlin.String? = null, subjectSetObject: kotlin.String? = null, subjectSetRelation: kotlin.String? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        namespace?.apply { localVariableQuery["namespace"] = listOf("$namespace") }
        `object`?.apply { localVariableQuery["object"] = listOf("$`object`") }
        relation?.apply { localVariableQuery["relation"] = listOf("$relation") }
        subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
        subjectSetNamespace?.apply { localVariableQuery["subject_set.namespace"] = listOf("$subjectSetNamespace") }
        subjectSetObject?.apply { localVariableQuery["subject_set.object"] = listOf("$subjectSetObject") }
        subjectSetRelation?.apply { localVariableQuery["subject_set.relation"] = listOf("$subjectSetRelation") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/admin/relation-tuples",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Query relationships
     * Get all relationships that match the query. Only the namespace field is required.
     * @param pageToken  (optional)
     * @param pageSize  (optional)
     * @param namespace Namespace of the Relationship (optional)
     * @param `object` Object of the Relationship (optional)
     * @param relation Relation of the Relationship (optional)
     * @param subjectId SubjectID of the Relationship (optional)
     * @param subjectSetNamespace Namespace of the Subject Set (optional)
     * @param subjectSetObject Object of the Subject Set (optional)
     * @param subjectSetRelation Relation of the Subject Set (optional)
     * @return Relationships
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRelationships(pageToken: kotlin.String? = null, pageSize: kotlin.Long? = null, namespace: kotlin.String? = null, `object`: kotlin.String? = null, relation: kotlin.String? = null, subjectId: kotlin.String? = null, subjectSetNamespace: kotlin.String? = null, subjectSetObject: kotlin.String? = null, subjectSetRelation: kotlin.String? = null): HttpResponse<Relationships> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageToken?.apply { localVariableQuery["page_token"] = listOf("$pageToken") }
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        namespace?.apply { localVariableQuery["namespace"] = listOf("$namespace") }
        `object`?.apply { localVariableQuery["object"] = listOf("$`object`") }
        relation?.apply { localVariableQuery["relation"] = listOf("$relation") }
        subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
        subjectSetNamespace?.apply { localVariableQuery["subject_set.namespace"] = listOf("$subjectSetNamespace") }
        subjectSetObject?.apply { localVariableQuery["subject_set.object"] = listOf("$subjectSetObject") }
        subjectSetRelation?.apply { localVariableQuery["subject_set.relation"] = listOf("$subjectSetRelation") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/relation-tuples",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Query namespaces
     * Get all namespaces
     * @return RelationshipNamespaces
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listRelationshipNamespaces(): HttpResponse<RelationshipNamespaces> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/namespaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Patch Multiple Relationships
     * Use this endpoint to patch one or more relationships.
     * @param relationshipPatch  (optional)
     * @return void
     */
    open suspend fun patchRelationships(relationshipPatch: kotlin.collections.List<RelationshipPatch>? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryAccessToken")

        val localVariableBody = PatchRelationshipsRequest(relationshipPatch)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/admin/relation-tuples",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(PatchRelationshipsRequest.Companion::class)
    private class PatchRelationshipsRequest(val value: List<RelationshipPatch>) {
        companion object : KSerializer<PatchRelationshipsRequest> {
            private val serializer: KSerializer<List<RelationshipPatch>> = serializer<List<RelationshipPatch>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: PatchRelationshipsRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = PatchRelationshipsRequest(serializer.deserialize(decoder))
        }
    }

}
