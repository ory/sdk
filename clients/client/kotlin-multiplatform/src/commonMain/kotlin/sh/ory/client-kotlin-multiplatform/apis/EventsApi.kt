/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import sh.ory.client-kotlin-multiplatform.models.CreateEventStreamBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.EventStream
import sh.ory.client-kotlin-multiplatform.models.ListEventStreams
import sh.ory.client-kotlin-multiplatform.models.SetEventStreamBody

import sh.ory.client-kotlin-multiplatform.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class EventsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create an event stream for your project.
     * 
     * @param projectId Project ID  The project&#39;s ID.
     * @param createEventStreamBody 
     * @return EventStream
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createEventStream(projectId: kotlin.String, createEventStreamBody: CreateEventStreamBody): HttpResponse<EventStream> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = createEventStreamBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/{project_id}/eventstreams".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Remove an event stream from a project
     * Remove an event stream from a project.
     * @param projectId Project ID  The project&#39;s ID.
     * @param eventStreamId Event Stream ID  The ID of the event stream to be deleted, as returned when created.
     * @return void
     */
    open suspend fun deleteEventStream(projectId: kotlin.String, eventStreamId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project_id}/eventstreams/{event_stream_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "event_stream_id" + "}", "$eventStreamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List all event streams for the project. This endpoint is not paginated.
     * 
     * @param projectId Project ID  The project&#39;s ID.
     * @return ListEventStreams
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listEventStreams(projectId: kotlin.String): HttpResponse<ListEventStreams> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/eventstreams".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update an event stream for a project.
     * 
     * @param projectId Project ID  The project&#39;s ID.
     * @param eventStreamId Event Stream ID  The event stream&#39;s ID.
     * @param setEventStreamBody  (optional)
     * @return EventStream
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun setEventStream(projectId: kotlin.String, eventStreamId: kotlin.String, setEventStreamBody: SetEventStreamBody? = null): HttpResponse<EventStream> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = setEventStreamBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/projects/{project_id}/eventstreams/{event_stream_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "event_stream_id" + "}", "$eventStreamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
