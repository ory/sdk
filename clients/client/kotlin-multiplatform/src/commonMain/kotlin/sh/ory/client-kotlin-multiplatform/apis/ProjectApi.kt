/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import sh.ory.client-kotlin-multiplatform.models.CreateProjectApiKeyRequest
import sh.ory.client-kotlin-multiplatform.models.CreateProjectBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.GenericError
import sh.ory.client-kotlin-multiplatform.models.GetOrganizationResponse
import sh.ory.client-kotlin-multiplatform.models.JsonPatch
import sh.ory.client-kotlin-multiplatform.models.ListOrganizationsResponse
import sh.ory.client-kotlin-multiplatform.models.Organization
import sh.ory.client-kotlin-multiplatform.models.OrganizationBody
import sh.ory.client-kotlin-multiplatform.models.Project
import sh.ory.client-kotlin-multiplatform.models.ProjectApiKey
import sh.ory.client-kotlin-multiplatform.models.ProjectMember
import sh.ory.client-kotlin-multiplatform.models.ProjectMetadata
import sh.ory.client-kotlin-multiplatform.models.SetProject
import sh.ory.client-kotlin-multiplatform.models.SuccessfulProjectUpdate

import sh.ory.client-kotlin-multiplatform.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ProjectApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create an Enterprise SSO Organization
     * Creates an Enterprise SSO Organization in a project.
     * @param projectId Project ID  The project&#39;s ID.
     * @param organizationBody  (optional)
     * @return Organization
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createOrganization(projectId: kotlin.String, organizationBody: OrganizationBody? = null): HttpResponse<Organization> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = organizationBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/{project_id}/organizations".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create a Project
     * Creates a new project.
     * @param createProjectBody  (optional)
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createProject(createProjectBody: CreateProjectBody? = null): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = createProjectBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create project API key
     * Create an API key for a project.
     * @param project The Project ID or Project slug
     * @param createProjectApiKeyRequest  (optional)
     * @return ProjectApiKey
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createProjectApiKey(project: kotlin.String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = null): HttpResponse<ProjectApiKey> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = createProjectApiKeyRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/{project}/tokens".replace("{" + "project" + "}", "$project"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete Enterprise SSO Organization
     * Irrecoverably deletes an Enterprise SSO Organization in a project by its ID.
     * @param projectId Project ID  The project&#39;s ID.
     * @param organizationId Organization ID  The Organization&#39;s ID.
     * @return void
     */
    open suspend fun deleteOrganization(projectId: kotlin.String, organizationId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project_id}/organizations/{organization_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "organization_id" + "}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete project API key
     * Deletes an API key and immediately removes it.
     * @param project The Project ID or Project slug
     * @param tokenId The Token ID
     * @return void
     */
    open suspend fun deleteProjectApiKey(project: kotlin.String, tokenId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project}/tokens/{token_id}".replace("{" + "project" + "}", "$project").replace("{" + "token_id" + "}", "$tokenId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Enterprise SSO Organization by ID
     * Retrieves an Enterprise SSO Organization for a project by its ID
     * @param projectId Project ID  The project&#39;s ID.
     * @param organizationId Organization ID  The Organization&#39;s ID.
     * @return GetOrganizationResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOrganization(projectId: kotlin.String, organizationId: kotlin.String): HttpResponse<GetOrganizationResponse> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/organizations/{organization_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "organization_id" + "}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a Project
     * Get a projects you have access to by its ID.
     * @param projectId Project ID  The project&#39;s ID.
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProject(projectId: kotlin.String): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get all members associated with this project
     * This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
     * @param project 
     * @return kotlin.collections.List<ProjectMember>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProjectMembers(project: kotlin.String): HttpResponse<kotlin.collections.List<ProjectMember>> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project}/members".replace("{" + "project" + "}", "$project"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetProjectMembersResponse>().map { value }
    }

    @Serializable(GetProjectMembersResponse.Companion::class)
    private class GetProjectMembersResponse(val value: List<ProjectMember>) {
        companion object : KSerializer<GetProjectMembersResponse> {
            private val serializer: KSerializer<List<ProjectMember>> = serializer<List<ProjectMember>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetProjectMembersResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetProjectMembersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List all Enterprise SSO organizations
     * Lists all Enterprise SSO organizations in a project.
     * @param projectId Project ID  The project&#39;s ID.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     * @param domain Domain  If set, only organizations with that domain will be returned. (optional)
     * @return ListOrganizationsResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listOrganizations(projectId: kotlin.String, pageSize: kotlin.Long? = 250L, pageToken: kotlin.String? = null, domain: kotlin.String? = null): HttpResponse<ListOrganizationsResponse> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        pageToken?.apply { localVariableQuery["page_token"] = listOf("$pageToken") }
        domain?.apply { localVariableQuery["domain"] = listOf("$domain") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/organizations".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List a project&#39;s API keys
     * A list of all the project&#39;s API keys.
     * @param project The Project ID or Project slug
     * @return kotlin.collections.List<ProjectApiKey>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listProjectApiKeys(project: kotlin.String): HttpResponse<kotlin.collections.List<ProjectApiKey>> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project}/tokens".replace("{" + "project" + "}", "$project"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListProjectApiKeysResponse>().map { value }
    }

    @Serializable(ListProjectApiKeysResponse.Companion::class)
    private class ListProjectApiKeysResponse(val value: List<ProjectApiKey>) {
        companion object : KSerializer<ListProjectApiKeysResponse> {
            private val serializer: KSerializer<List<ProjectApiKey>> = serializer<List<ProjectApiKey>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListProjectApiKeysResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListProjectApiKeysResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * List All Projects
     * Lists all projects you have access to.
     * @return kotlin.collections.List<ProjectMetadata>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listProjects(): HttpResponse<kotlin.collections.List<ProjectMetadata>> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListProjectsResponse>().map { value }
    }

    @Serializable(ListProjectsResponse.Companion::class)
    private class ListProjectsResponse(val value: List<ProjectMetadata>) {
        companion object : KSerializer<ListProjectsResponse> {
            private val serializer: KSerializer<List<ProjectMetadata>> = serializer<List<ProjectMetadata>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ListProjectsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ListProjectsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Patch an Ory Network Project Configuration
     * Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @param projectId Project ID  The project&#39;s ID.
     * @param jsonPatch  (optional)
     * @return SuccessfulProjectUpdate
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchProject(projectId: kotlin.String, jsonPatch: kotlin.collections.List<JsonPatch>? = null): HttpResponse<SuccessfulProjectUpdate> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = PatchProjectRequest(jsonPatch)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(PatchProjectRequest.Companion::class)
    private class PatchProjectRequest(val value: List<JsonPatch>) {
        companion object : KSerializer<PatchProjectRequest> {
            private val serializer: KSerializer<List<JsonPatch>> = serializer<List<JsonPatch>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: PatchProjectRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = PatchProjectRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * Patch an Ory Network Project Configuration based on a revision ID
     * This endpoints allows you to patch individual Ory Network Project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @param projectId Project ID  The project&#39;s ID.
     * @param revisionId Revision ID  The revision ID that this patch was generated for.
     * @param jsonPatch  (optional)
     * @return SuccessfulProjectUpdate
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchProjectWithRevision(projectId: kotlin.String, revisionId: kotlin.String, jsonPatch: kotlin.collections.List<JsonPatch>? = null): HttpResponse<SuccessfulProjectUpdate> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = PatchProjectWithRevisionRequest(jsonPatch)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/projects/{project_id}/revision/{revision_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(PatchProjectWithRevisionRequest.Companion::class)
    private class PatchProjectWithRevisionRequest(val value: List<JsonPatch>) {
        companion object : KSerializer<PatchProjectWithRevisionRequest> {
            private val serializer: KSerializer<List<JsonPatch>> = serializer<List<JsonPatch>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: PatchProjectWithRevisionRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = PatchProjectWithRevisionRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * Irrecoverably purge a project
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  Calling this endpoint will additionally delete custom domains and other related data.  If the project is linked to a subscription, the subscription needs to be unlinked first.
     * @param projectId Project ID  The project&#39;s ID.
     * @return void
     */
    open suspend fun purgeProject(projectId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Remove a member associated with this project
     * This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
     * @param project 
     * @param member 
     * @return void
     */
    open suspend fun removeProjectMember(project: kotlin.String, member: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project}/members/{member}".replace("{" + "project" + "}", "$project").replace("{" + "member" + "}", "$member"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update an Ory Network Project Configuration
     * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
     * @param projectId Project ID  The project&#39;s ID.
     * @param setProject  (optional)
     * @return SuccessfulProjectUpdate
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun setProject(projectId: kotlin.String, setProject: SetProject? = null): HttpResponse<SuccessfulProjectUpdate> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = setProject

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update an Enterprise SSO Organization
     * Updates an Enterprise SSO Organization in a project by its ID.
     * @param projectId Project ID  The project&#39;s ID.
     * @param organizationId Organization ID  The Organization&#39;s ID.
     * @param organizationBody  (optional)
     * @return Organization
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateOrganization(projectId: kotlin.String, organizationId: kotlin.String, organizationBody: OrganizationBody? = null): HttpResponse<Organization> {

        val localVariableAuthNames = listOf<String>("oryWorkspaceApiKey")

        val localVariableBody = organizationBody

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/projects/{project_id}/organizations/{organization_id}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "organization_id" + "}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
