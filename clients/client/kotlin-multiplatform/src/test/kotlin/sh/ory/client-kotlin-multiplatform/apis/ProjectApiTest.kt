/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.apis.ProjectApi
import sh.ory.client-kotlin-multiplatform.models.CreateProjectApiKeyRequest
import sh.ory.client-kotlin-multiplatform.models.CreateProjectBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.GenericError
import sh.ory.client-kotlin-multiplatform.models.GetOrganizationResponse
import sh.ory.client-kotlin-multiplatform.models.JsonPatch
import sh.ory.client-kotlin-multiplatform.models.ListOrganizationsResponse
import sh.ory.client-kotlin-multiplatform.models.Organization
import sh.ory.client-kotlin-multiplatform.models.OrganizationBody
import sh.ory.client-kotlin-multiplatform.models.Project
import sh.ory.client-kotlin-multiplatform.models.ProjectApiKey
import sh.ory.client-kotlin-multiplatform.models.ProjectMember
import sh.ory.client-kotlin-multiplatform.models.ProjectMetadata
import sh.ory.client-kotlin-multiplatform.models.SetProject
import sh.ory.client-kotlin-multiplatform.models.SuccessfulProjectUpdate

class ProjectApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectApi
        //val apiInstance = ProjectApi()

        // to test createOrganization
        should("test createOrganization") {
            // uncomment below to test createOrganization
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val organizationBody : OrganizationBody =  // OrganizationBody | 
            //val result : Organization = apiInstance.createOrganization(projectId, organizationBody)
            //result shouldBe ("TODO")
        }

        // to test createProject
        should("test createProject") {
            // uncomment below to test createProject
            //val createProjectBody : CreateProjectBody =  // CreateProjectBody | 
            //val result : Project = apiInstance.createProject(createProjectBody)
            //result shouldBe ("TODO")
        }

        // to test createProjectApiKey
        should("test createProjectApiKey") {
            // uncomment below to test createProjectApiKey
            //val project : kotlin.String = project_example // kotlin.String | The Project ID or Project slug
            //val createProjectApiKeyRequest : CreateProjectApiKeyRequest =  // CreateProjectApiKeyRequest | 
            //val result : ProjectApiKey = apiInstance.createProjectApiKey(project, createProjectApiKeyRequest)
            //result shouldBe ("TODO")
        }

        // to test deleteOrganization
        should("test deleteOrganization") {
            // uncomment below to test deleteOrganization
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val organizationId : kotlin.String = organizationId_example // kotlin.String | Organization ID  The Organization's ID.
            //apiInstance.deleteOrganization(projectId, organizationId)
        }

        // to test deleteProjectApiKey
        should("test deleteProjectApiKey") {
            // uncomment below to test deleteProjectApiKey
            //val project : kotlin.String = project_example // kotlin.String | The Project ID or Project slug
            //val tokenId : kotlin.String = tokenId_example // kotlin.String | The Token ID
            //apiInstance.deleteProjectApiKey(project, tokenId)
        }

        // to test getOrganization
        should("test getOrganization") {
            // uncomment below to test getOrganization
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val organizationId : kotlin.String = organizationId_example // kotlin.String | Organization ID  The Organization's ID.
            //val result : GetOrganizationResponse = apiInstance.getOrganization(projectId, organizationId)
            //result shouldBe ("TODO")
        }

        // to test getProject
        should("test getProject") {
            // uncomment below to test getProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val result : Project = apiInstance.getProject(projectId)
            //result shouldBe ("TODO")
        }

        // to test getProjectMembers
        should("test getProjectMembers") {
            // uncomment below to test getProjectMembers
            //val project : kotlin.String = project_example // kotlin.String | 
            //val result : kotlin.collections.List<ProjectMember> = apiInstance.getProjectMembers(project)
            //result shouldBe ("TODO")
        }

        // to test listOrganizations
        should("test listOrganizations") {
            // uncomment below to test listOrganizations
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val pageSize : kotlin.Long = 789 // kotlin.Long | Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val pageToken : kotlin.String = pageToken_example // kotlin.String | Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val domain : kotlin.String = domain_example // kotlin.String | Domain  If set, only organizations with that domain will be returned.
            //val result : ListOrganizationsResponse = apiInstance.listOrganizations(projectId, pageSize, pageToken, domain)
            //result shouldBe ("TODO")
        }

        // to test listProjectApiKeys
        should("test listProjectApiKeys") {
            // uncomment below to test listProjectApiKeys
            //val project : kotlin.String = project_example // kotlin.String | The Project ID or Project slug
            //val result : kotlin.collections.List<ProjectApiKey> = apiInstance.listProjectApiKeys(project)
            //result shouldBe ("TODO")
        }

        // to test listProjects
        should("test listProjects") {
            // uncomment below to test listProjects
            //val result : kotlin.collections.List<ProjectMetadata> = apiInstance.listProjects()
            //result shouldBe ("TODO")
        }

        // to test patchProject
        should("test patchProject") {
            // uncomment below to test patchProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val jsonPatch : kotlin.collections.List<JsonPatch> =  // kotlin.collections.List<JsonPatch> | 
            //val result : SuccessfulProjectUpdate = apiInstance.patchProject(projectId, jsonPatch)
            //result shouldBe ("TODO")
        }

        // to test patchProjectWithRevision
        should("test patchProjectWithRevision") {
            // uncomment below to test patchProjectWithRevision
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val revisionId : kotlin.String = revisionId_example // kotlin.String | Revision ID  The revision ID that this patch was generated for.
            //val jsonPatch : kotlin.collections.List<JsonPatch> =  // kotlin.collections.List<JsonPatch> | 
            //val result : SuccessfulProjectUpdate = apiInstance.patchProjectWithRevision(projectId, revisionId, jsonPatch)
            //result shouldBe ("TODO")
        }

        // to test purgeProject
        should("test purgeProject") {
            // uncomment below to test purgeProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //apiInstance.purgeProject(projectId)
        }

        // to test removeProjectMember
        should("test removeProjectMember") {
            // uncomment below to test removeProjectMember
            //val project : kotlin.String = project_example // kotlin.String | 
            //val member : kotlin.String = member_example // kotlin.String | 
            //apiInstance.removeProjectMember(project, member)
        }

        // to test setProject
        should("test setProject") {
            // uncomment below to test setProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val setProject : SetProject =  // SetProject | 
            //val result : SuccessfulProjectUpdate = apiInstance.setProject(projectId, setProject)
            //result shouldBe ("TODO")
        }

        // to test updateOrganization
        should("test updateOrganization") {
            // uncomment below to test updateOrganization
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val organizationId : kotlin.String = organizationId_example // kotlin.String | Organization ID  The Organization's ID.
            //val organizationBody : OrganizationBody =  // OrganizationBody | 
            //val result : Organization = apiInstance.updateOrganization(projectId, organizationId, organizationBody)
            //result shouldBe ("TODO")
        }

    }
}
