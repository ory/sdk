/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.Identity
import sh.ory.client-kotlin-multiplatform.models.IdentityCredentials
import sh.ory.client-kotlin-multiplatform.models.RecoveryIdentityAddress
import sh.ory.client-kotlin-multiplatform.models.VerifiableIdentityAddress

class IdentityTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Identity
        //val modelInstance = Identity()

        // to test the property `id` - ID is the identity's unique identifier.  The Identity ID can not be changed and can not be chosen. This ensures future compatibility and optimization for distributed stores such as CockroachDB.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `schemaId` - SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
        should("test schemaId") {
            // uncomment below to test the property
            //modelInstance.schemaId shouldBe ("TODO")
        }

        // to test the property `schemaUrl` - SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.  format: url
        should("test schemaUrl") {
            // uncomment below to test the property
            //modelInstance.schemaUrl shouldBe ("TODO")
        }

        // to test the property `traits` - Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
        should("test traits") {
            // uncomment below to test the property
            //modelInstance.traits shouldBe ("TODO")
        }

        // to test the property `createdAt` - CreatedAt is a helper struct field for gobuffalo.pop.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `credentials` - Credentials represents all credentials that can be used for authenticating this identity.
        should("test credentials") {
            // uncomment below to test the property
            //modelInstance.credentials shouldBe ("TODO")
        }

        // to test the property `metadataAdmin` - NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
        should("test metadataAdmin") {
            // uncomment below to test the property
            //modelInstance.metadataAdmin shouldBe ("TODO")
        }

        // to test the property `metadataPublic` - NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
        should("test metadataPublic") {
            // uncomment below to test the property
            //modelInstance.metadataPublic shouldBe ("TODO")
        }

        // to test the property `organizationId`
        should("test organizationId") {
            // uncomment below to test the property
            //modelInstance.organizationId shouldBe ("TODO")
        }

        // to test the property `recoveryAddresses` - RecoveryAddresses contains all the addresses that can be used to recover an identity.
        should("test recoveryAddresses") {
            // uncomment below to test the property
            //modelInstance.recoveryAddresses shouldBe ("TODO")
        }

        // to test the property `state` - State is the identity's state.  This value has currently no effect. active StateActive inactive StateInactive
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `stateChangedAt`
        should("test stateChangedAt") {
            // uncomment below to test the property
            //modelInstance.stateChangedAt shouldBe ("TODO")
        }

        // to test the property `updatedAt` - UpdatedAt is a helper struct field for gobuffalo.pop.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `verifiableAddresses` - VerifiableAddresses contains all the addresses that can be verified by the user.
        should("test verifiableAddresses") {
            // uncomment below to test the property
            //modelInstance.verifiableAddresses shouldBe ("TODO")
        }

    }
}
