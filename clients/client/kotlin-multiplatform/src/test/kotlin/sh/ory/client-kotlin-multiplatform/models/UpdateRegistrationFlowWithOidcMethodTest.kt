/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithOidcMethod

class UpdateRegistrationFlowWithOidcMethodTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UpdateRegistrationFlowWithOidcMethod
        //val modelInstance = UpdateRegistrationFlowWithOidcMethod()

        // to test the property `method` - Method to use  This field must be set to `oidc` when using the oidc method.
        should("test method") {
            // uncomment below to test the property
            //modelInstance.method shouldBe ("TODO")
        }

        // to test the property `provider` - The provider to register with
        should("test provider") {
            // uncomment below to test the property
            //modelInstance.provider shouldBe ("TODO")
        }

        // to test the property `csrfToken` - The CSRF Token
        should("test csrfToken") {
            // uncomment below to test the property
            //modelInstance.csrfToken shouldBe ("TODO")
        }

        // to test the property `idToken` - IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google
        should("test idToken") {
            // uncomment below to test the property
            //modelInstance.idToken shouldBe ("TODO")
        }

        // to test the property `idTokenNonce` - IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and is required.
        should("test idTokenNonce") {
            // uncomment below to test the property
            //modelInstance.idTokenNonce shouldBe ("TODO")
        }

        // to test the property `traits` - The identity traits
        should("test traits") {
            // uncomment below to test the property
            //modelInstance.traits shouldBe ("TODO")
        }

        // to test the property `transientPayload` - Transient data to pass along to any webhooks
        should("test transientPayload") {
            // uncomment below to test the property
            //modelInstance.transientPayload shouldBe ("TODO")
        }

        // to test the property `upstreamParameters` - UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
        should("test upstreamParameters") {
            // uncomment below to test the property
            //modelInstance.upstreamParameters shouldBe ("TODO")
        }

    }
}
