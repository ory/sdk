/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithLookupMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithOidcMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithPasskeyMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithPasswordMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithProfileMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithTotpMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowWithWebAuthnMethod

class UpdateSettingsFlowBodyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UpdateSettingsFlowBody
        //val modelInstance = UpdateSettingsFlowBody()

        // to test the property `method` - Method  Should be set to \"passkey\" when trying to add, update, or remove a webAuthn pairing.
        should("test method") {
            // uncomment below to test the property
            //modelInstance.method shouldBe ("TODO")
        }

        // to test the property `password` - Password is the updated password
        should("test password") {
            // uncomment below to test the property
            //modelInstance.password shouldBe ("TODO")
        }

        // to test the property `traits` - The identity's traits  in: body
        should("test traits") {
            // uncomment below to test the property
            //modelInstance.traits shouldBe ("TODO")
        }

        // to test the property `csrfToken` - CSRFToken is the anti-CSRF token
        should("test csrfToken") {
            // uncomment below to test the property
            //modelInstance.csrfToken shouldBe ("TODO")
        }

        // to test the property `transientPayload` - Transient data to pass along to any webhooks
        should("test transientPayload") {
            // uncomment below to test the property
            //modelInstance.transientPayload shouldBe ("TODO")
        }

        // to test the property `flow` - Flow ID is the flow's ID.  in: query
        should("test flow") {
            // uncomment below to test the property
            //modelInstance.flow shouldBe ("TODO")
        }

        // to test the property `link` - Link this provider  Either this or `unlink` must be set.  type: string in: body
        should("test link") {
            // uncomment below to test the property
            //modelInstance.link shouldBe ("TODO")
        }

        // to test the property `unlink` - Unlink this provider  Either this or `link` must be set.  type: string in: body
        should("test unlink") {
            // uncomment below to test the property
            //modelInstance.unlink shouldBe ("TODO")
        }

        // to test the property `upstreamParameters` - UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
        should("test upstreamParameters") {
            // uncomment below to test the property
            //modelInstance.upstreamParameters shouldBe ("TODO")
        }

        // to test the property `totpCode` - ValidationTOTP must contain a valid TOTP based on the
        should("test totpCode") {
            // uncomment below to test the property
            //modelInstance.totpCode shouldBe ("TODO")
        }

        // to test the property `totpUnlink` - UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
        should("test totpUnlink") {
            // uncomment below to test the property
            //modelInstance.totpUnlink shouldBe ("TODO")
        }

        // to test the property `webauthnRegister` - Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        should("test webauthnRegister") {
            // uncomment below to test the property
            //modelInstance.webauthnRegister shouldBe ("TODO")
        }

        // to test the property `webauthnRegisterDisplayname` - Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
        should("test webauthnRegisterDisplayname") {
            // uncomment below to test the property
            //modelInstance.webauthnRegisterDisplayname shouldBe ("TODO")
        }

        // to test the property `webauthnRemove` - Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
        should("test webauthnRemove") {
            // uncomment below to test the property
            //modelInstance.webauthnRemove shouldBe ("TODO")
        }

        // to test the property `lookupSecretConfirm` - If set to true will save the regenerated lookup secrets
        should("test lookupSecretConfirm") {
            // uncomment below to test the property
            //modelInstance.lookupSecretConfirm shouldBe ("TODO")
        }

        // to test the property `lookupSecretDisable` - Disables this method if true.
        should("test lookupSecretDisable") {
            // uncomment below to test the property
            //modelInstance.lookupSecretDisable shouldBe ("TODO")
        }

        // to test the property `lookupSecretRegenerate` - If set to true will regenerate the lookup secrets
        should("test lookupSecretRegenerate") {
            // uncomment below to test the property
            //modelInstance.lookupSecretRegenerate shouldBe ("TODO")
        }

        // to test the property `lookupSecretReveal` - If set to true will reveal the lookup secrets
        should("test lookupSecretReveal") {
            // uncomment below to test the property
            //modelInstance.lookupSecretReveal shouldBe ("TODO")
        }

        // to test the property `passkeyRemove` - Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
        should("test passkeyRemove") {
            // uncomment below to test the property
            //modelInstance.passkeyRemove shouldBe ("TODO")
        }

        // to test the property `passkeySettingsRegister` - Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        should("test passkeySettingsRegister") {
            // uncomment below to test the property
            //modelInstance.passkeySettingsRegister shouldBe ("TODO")
        }

    }
}
