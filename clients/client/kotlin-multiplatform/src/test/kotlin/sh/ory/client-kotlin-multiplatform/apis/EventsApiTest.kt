/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.apis.EventsApi
import sh.ory.client-kotlin-multiplatform.models.CreateEventStreamBody
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.EventStream
import sh.ory.client-kotlin-multiplatform.models.ListEventStreams
import sh.ory.client-kotlin-multiplatform.models.SetEventStreamBody

class EventsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EventsApi
        //val apiInstance = EventsApi()

        // to test createEventStream
        should("test createEventStream") {
            // uncomment below to test createEventStream
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val createEventStreamBody : CreateEventStreamBody =  // CreateEventStreamBody | 
            //val result : EventStream = apiInstance.createEventStream(projectId, createEventStreamBody)
            //result shouldBe ("TODO")
        }

        // to test deleteEventStream
        should("test deleteEventStream") {
            // uncomment below to test deleteEventStream
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val eventStreamId : kotlin.String = eventStreamId_example // kotlin.String | Event Stream ID  The ID of the event stream to be deleted, as returned when created.
            //apiInstance.deleteEventStream(projectId, eventStreamId)
        }

        // to test listEventStreams
        should("test listEventStreams") {
            // uncomment below to test listEventStreams
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val result : ListEventStreams = apiInstance.listEventStreams(projectId)
            //result shouldBe ("TODO")
        }

        // to test setEventStream
        should("test setEventStream") {
            // uncomment below to test setEventStream
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project ID  The project's ID.
            //val eventStreamId : kotlin.String = eventStreamId_example // kotlin.String | Event Stream ID  The event stream's ID.
            //val setEventStreamBody : SetEventStreamBody =  // SetEventStreamBody | 
            //val result : EventStream = apiInstance.setEventStream(projectId, eventStreamId, setEventStreamBody)
            //result shouldBe ("TODO")
        }

    }
}
