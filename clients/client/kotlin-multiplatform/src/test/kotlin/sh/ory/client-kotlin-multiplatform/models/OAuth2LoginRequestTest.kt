/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.OAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2Client
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentRequestOpenIDConnectContext

class OAuth2LoginRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OAuth2LoginRequest
        //val modelInstance = OAuth2LoginRequest()

        // to test the property `challenge` - ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
        should("test challenge") {
            // uncomment below to test the property
            //modelInstance.challenge shouldBe ("TODO")
        }

        // to test the property `client`
        should("test client") {
            // uncomment below to test the property
            //modelInstance.client shouldBe ("TODO")
        }

        // to test the property `requestUrl` - RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
        should("test requestUrl") {
            // uncomment below to test the property
            //modelInstance.requestUrl shouldBe ("TODO")
        }

        // to test the property `skip` - Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
        should("test skip") {
            // uncomment below to test the property
            //modelInstance.skip shouldBe ("TODO")
        }

        // to test the property `subject` - Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
        should("test subject") {
            // uncomment below to test the property
            //modelInstance.subject shouldBe ("TODO")
        }

        // to test the property `oidcContext`
        should("test oidcContext") {
            // uncomment below to test the property
            //modelInstance.oidcContext shouldBe ("TODO")
        }

        // to test the property `requestedAccessTokenAudience`
        should("test requestedAccessTokenAudience") {
            // uncomment below to test the property
            //modelInstance.requestedAccessTokenAudience shouldBe ("TODO")
        }

        // to test the property `requestedScope`
        should("test requestedScope") {
            // uncomment below to test the property
            //modelInstance.requestedScope shouldBe ("TODO")
        }

        // to test the property `sessionId` - SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user.
        should("test sessionId") {
            // uncomment below to test the property
            //modelInstance.sessionId shouldBe ("TODO")
        }

    }
}
