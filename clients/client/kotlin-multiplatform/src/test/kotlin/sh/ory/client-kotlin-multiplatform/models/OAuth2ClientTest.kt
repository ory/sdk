/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.OAuth2Client

class OAuth2ClientTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OAuth2Client
        //val modelInstance = OAuth2Client()

        // to test the property `accessTokenStrategy` - OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in `strategies.access_token`.
        should("test accessTokenStrategy") {
            // uncomment below to test the property
            //modelInstance.accessTokenStrategy shouldBe ("TODO")
        }

        // to test the property `allowedCorsOrigins`
        should("test allowedCorsOrigins") {
            // uncomment below to test the property
            //modelInstance.allowedCorsOrigins shouldBe ("TODO")
        }

        // to test the property `audience`
        should("test audience") {
            // uncomment below to test the property
            //modelInstance.audience shouldBe ("TODO")
        }

        // to test the property `authorizationCodeGrantAccessTokenLifespan`
        should("test authorizationCodeGrantAccessTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.authorizationCodeGrantAccessTokenLifespan shouldBe ("TODO")
        }

        // to test the property `authorizationCodeGrantIdTokenLifespan`
        should("test authorizationCodeGrantIdTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.authorizationCodeGrantIdTokenLifespan shouldBe ("TODO")
        }

        // to test the property `authorizationCodeGrantRefreshTokenLifespan`
        should("test authorizationCodeGrantRefreshTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.authorizationCodeGrantRefreshTokenLifespan shouldBe ("TODO")
        }

        // to test the property `backchannelLogoutSessionRequired` - OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
        should("test backchannelLogoutSessionRequired") {
            // uncomment below to test the property
            //modelInstance.backchannelLogoutSessionRequired shouldBe ("TODO")
        }

        // to test the property `backchannelLogoutUri` - OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
        should("test backchannelLogoutUri") {
            // uncomment below to test the property
            //modelInstance.backchannelLogoutUri shouldBe ("TODO")
        }

        // to test the property `clientCredentialsGrantAccessTokenLifespan`
        should("test clientCredentialsGrantAccessTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.clientCredentialsGrantAccessTokenLifespan shouldBe ("TODO")
        }

        // to test the property `clientId` - OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.
        should("test clientId") {
            // uncomment below to test the property
            //modelInstance.clientId shouldBe ("TODO")
        }

        // to test the property `clientName` - OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
        should("test clientName") {
            // uncomment below to test the property
            //modelInstance.clientName shouldBe ("TODO")
        }

        // to test the property `clientSecret` - OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
        should("test clientSecret") {
            // uncomment below to test the property
            //modelInstance.clientSecret shouldBe ("TODO")
        }

        // to test the property `clientSecretExpiresAt` - OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
        should("test clientSecretExpiresAt") {
            // uncomment below to test the property
            //modelInstance.clientSecretExpiresAt shouldBe ("TODO")
        }

        // to test the property `clientUri` - OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
        should("test clientUri") {
            // uncomment below to test the property
            //modelInstance.clientUri shouldBe ("TODO")
        }

        // to test the property `contacts`
        should("test contacts") {
            // uncomment below to test the property
            //modelInstance.contacts shouldBe ("TODO")
        }

        // to test the property `createdAt` - OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client's creation.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `frontchannelLogoutSessionRequired` - OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
        should("test frontchannelLogoutSessionRequired") {
            // uncomment below to test the property
            //modelInstance.frontchannelLogoutSessionRequired shouldBe ("TODO")
        }

        // to test the property `frontchannelLogoutUri` - OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
        should("test frontchannelLogoutUri") {
            // uncomment below to test the property
            //modelInstance.frontchannelLogoutUri shouldBe ("TODO")
        }

        // to test the property `grantTypes`
        should("test grantTypes") {
            // uncomment below to test the property
            //modelInstance.grantTypes shouldBe ("TODO")
        }

        // to test the property `implicitGrantAccessTokenLifespan`
        should("test implicitGrantAccessTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.implicitGrantAccessTokenLifespan shouldBe ("TODO")
        }

        // to test the property `implicitGrantIdTokenLifespan`
        should("test implicitGrantIdTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.implicitGrantIdTokenLifespan shouldBe ("TODO")
        }

        // to test the property `jwks` - OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
        should("test jwks") {
            // uncomment below to test the property
            //modelInstance.jwks shouldBe ("TODO")
        }

        // to test the property `jwksUri` - OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
        should("test jwksUri") {
            // uncomment below to test the property
            //modelInstance.jwksUri shouldBe ("TODO")
        }

        // to test the property `jwtBearerGrantAccessTokenLifespan`
        should("test jwtBearerGrantAccessTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.jwtBearerGrantAccessTokenLifespan shouldBe ("TODO")
        }

        // to test the property `logoUri` - OAuth 2.0 Client Logo URI  A URL string referencing the client's logo.
        should("test logoUri") {
            // uncomment below to test the property
            //modelInstance.logoUri shouldBe ("TODO")
        }

        // to test the property `metadata`
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `owner` - OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
        should("test owner") {
            // uncomment below to test the property
            //modelInstance.owner shouldBe ("TODO")
        }

        // to test the property `policyUri` - OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
        should("test policyUri") {
            // uncomment below to test the property
            //modelInstance.policyUri shouldBe ("TODO")
        }

        // to test the property `postLogoutRedirectUris`
        should("test postLogoutRedirectUris") {
            // uncomment below to test the property
            //modelInstance.postLogoutRedirectUris shouldBe ("TODO")
        }

        // to test the property `redirectUris`
        should("test redirectUris") {
            // uncomment below to test the property
            //modelInstance.redirectUris shouldBe ("TODO")
        }

        // to test the property `refreshTokenGrantAccessTokenLifespan`
        should("test refreshTokenGrantAccessTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.refreshTokenGrantAccessTokenLifespan shouldBe ("TODO")
        }

        // to test the property `refreshTokenGrantIdTokenLifespan`
        should("test refreshTokenGrantIdTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.refreshTokenGrantIdTokenLifespan shouldBe ("TODO")
        }

        // to test the property `refreshTokenGrantRefreshTokenLifespan`
        should("test refreshTokenGrantRefreshTokenLifespan") {
            // uncomment below to test the property
            //modelInstance.refreshTokenGrantRefreshTokenLifespan shouldBe ("TODO")
        }

        // to test the property `registrationAccessToken` - OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
        should("test registrationAccessToken") {
            // uncomment below to test the property
            //modelInstance.registrationAccessToken shouldBe ("TODO")
        }

        // to test the property `registrationClientUri` - OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
        should("test registrationClientUri") {
            // uncomment below to test the property
            //modelInstance.registrationClientUri shouldBe ("TODO")
        }

        // to test the property `requestObjectSigningAlg` - OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
        should("test requestObjectSigningAlg") {
            // uncomment below to test the property
            //modelInstance.requestObjectSigningAlg shouldBe ("TODO")
        }

        // to test the property `requestUris`
        should("test requestUris") {
            // uncomment below to test the property
            //modelInstance.requestUris shouldBe ("TODO")
        }

        // to test the property `responseTypes`
        should("test responseTypes") {
            // uncomment below to test the property
            //modelInstance.responseTypes shouldBe ("TODO")
        }

        // to test the property `scope` - OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
        should("test scope") {
            // uncomment below to test the property
            //modelInstance.scope shouldBe ("TODO")
        }

        // to test the property `sectorIdentifierUri` - OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
        should("test sectorIdentifierUri") {
            // uncomment below to test the property
            //modelInstance.sectorIdentifierUri shouldBe ("TODO")
        }

        // to test the property `skipConsent` - SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
        should("test skipConsent") {
            // uncomment below to test the property
            //modelInstance.skipConsent shouldBe ("TODO")
        }

        // to test the property `skipLogoutConsent` - SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.
        should("test skipLogoutConsent") {
            // uncomment below to test the property
            //modelInstance.skipLogoutConsent shouldBe ("TODO")
        }

        // to test the property `subjectType` - OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
        should("test subjectType") {
            // uncomment below to test the property
            //modelInstance.subjectType shouldBe ("TODO")
        }

        // to test the property `tokenEndpointAuthMethod` - OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.
        should("test tokenEndpointAuthMethod") {
            // uncomment below to test the property
            //modelInstance.tokenEndpointAuthMethod shouldBe ("TODO")
        }

        // to test the property `tokenEndpointAuthSigningAlg` - OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
        should("test tokenEndpointAuthSigningAlg") {
            // uncomment below to test the property
            //modelInstance.tokenEndpointAuthSigningAlg shouldBe ("TODO")
        }

        // to test the property `tosUri` - OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
        should("test tosUri") {
            // uncomment below to test the property
            //modelInstance.tosUri shouldBe ("TODO")
        }

        // to test the property `updatedAt` - OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `userinfoSignedResponseAlg` - OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
        should("test userinfoSignedResponseAlg") {
            // uncomment below to test the property
            //modelInstance.userinfoSignedResponseAlg shouldBe ("TODO")
        }

    }
}
