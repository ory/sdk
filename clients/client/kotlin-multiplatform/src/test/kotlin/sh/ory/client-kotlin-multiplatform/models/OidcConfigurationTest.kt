/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.OidcConfiguration
import sh.ory.client-kotlin-multiplatform.models.CredentialSupportedDraft00

class OidcConfigurationTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OidcConfiguration
        //val modelInstance = OidcConfiguration()

        // to test the property `authorizationEndpoint` - OAuth 2.0 Authorization Endpoint URL
        should("test authorizationEndpoint") {
            // uncomment below to test the property
            //modelInstance.authorizationEndpoint shouldBe ("TODO")
        }

        // to test the property `idTokenSignedResponseAlg` - OpenID Connect Default ID Token Signing Algorithms  Algorithm used to sign OpenID Connect ID Tokens.
        should("test idTokenSignedResponseAlg") {
            // uncomment below to test the property
            //modelInstance.idTokenSignedResponseAlg shouldBe ("TODO")
        }

        // to test the property `idTokenSigningAlgValuesSupported` - OpenID Connect Supported ID Token Signing Algorithms  JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
        should("test idTokenSigningAlgValuesSupported") {
            // uncomment below to test the property
            //modelInstance.idTokenSigningAlgValuesSupported shouldBe ("TODO")
        }

        // to test the property `issuer` - OpenID Connect Issuer URL  An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
        should("test issuer") {
            // uncomment below to test the property
            //modelInstance.issuer shouldBe ("TODO")
        }

        // to test the property `jwksUri` - OpenID Connect Well-Known JSON Web Keys URL  URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
        should("test jwksUri") {
            // uncomment below to test the property
            //modelInstance.jwksUri shouldBe ("TODO")
        }

        // to test the property `responseTypesSupported` - OAuth 2.0 Supported Response Types  JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
        should("test responseTypesSupported") {
            // uncomment below to test the property
            //modelInstance.responseTypesSupported shouldBe ("TODO")
        }

        // to test the property `subjectTypesSupported` - OpenID Connect Supported Subject Types  JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
        should("test subjectTypesSupported") {
            // uncomment below to test the property
            //modelInstance.subjectTypesSupported shouldBe ("TODO")
        }

        // to test the property `tokenEndpoint` - OAuth 2.0 Token Endpoint URL
        should("test tokenEndpoint") {
            // uncomment below to test the property
            //modelInstance.tokenEndpoint shouldBe ("TODO")
        }

        // to test the property `userinfoSignedResponseAlg` - OpenID Connect User Userinfo Signing Algorithm  Algorithm used to sign OpenID Connect Userinfo Responses.
        should("test userinfoSignedResponseAlg") {
            // uncomment below to test the property
            //modelInstance.userinfoSignedResponseAlg shouldBe ("TODO")
        }

        // to test the property `backchannelLogoutSessionSupported` - OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
        should("test backchannelLogoutSessionSupported") {
            // uncomment below to test the property
            //modelInstance.backchannelLogoutSessionSupported shouldBe ("TODO")
        }

        // to test the property `backchannelLogoutSupported` - OpenID Connect Back-Channel Logout Supported  Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
        should("test backchannelLogoutSupported") {
            // uncomment below to test the property
            //modelInstance.backchannelLogoutSupported shouldBe ("TODO")
        }

        // to test the property `claimsParameterSupported` - OpenID Connect Claims Parameter Parameter Supported  Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
        should("test claimsParameterSupported") {
            // uncomment below to test the property
            //modelInstance.claimsParameterSupported shouldBe ("TODO")
        }

        // to test the property `claimsSupported` - OpenID Connect Supported Claims  JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
        should("test claimsSupported") {
            // uncomment below to test the property
            //modelInstance.claimsSupported shouldBe ("TODO")
        }

        // to test the property `codeChallengeMethodsSupported` - OAuth 2.0 PKCE Supported Code Challenge Methods  JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
        should("test codeChallengeMethodsSupported") {
            // uncomment below to test the property
            //modelInstance.codeChallengeMethodsSupported shouldBe ("TODO")
        }

        // to test the property `credentialsEndpointDraft00` - OpenID Connect Verifiable Credentials Endpoint  Contains the URL of the Verifiable Credentials Endpoint.
        should("test credentialsEndpointDraft00") {
            // uncomment below to test the property
            //modelInstance.credentialsEndpointDraft00 shouldBe ("TODO")
        }

        // to test the property `credentialsSupportedDraft00` - OpenID Connect Verifiable Credentials Supported  JSON array containing a list of the Verifiable Credentials supported by this authorization server.
        should("test credentialsSupportedDraft00") {
            // uncomment below to test the property
            //modelInstance.credentialsSupportedDraft00 shouldBe ("TODO")
        }

        // to test the property `endSessionEndpoint` - OpenID Connect End-Session Endpoint  URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
        should("test endSessionEndpoint") {
            // uncomment below to test the property
            //modelInstance.endSessionEndpoint shouldBe ("TODO")
        }

        // to test the property `frontchannelLogoutSessionSupported` - OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.
        should("test frontchannelLogoutSessionSupported") {
            // uncomment below to test the property
            //modelInstance.frontchannelLogoutSessionSupported shouldBe ("TODO")
        }

        // to test the property `frontchannelLogoutSupported` - OpenID Connect Front-Channel Logout Supported  Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
        should("test frontchannelLogoutSupported") {
            // uncomment below to test the property
            //modelInstance.frontchannelLogoutSupported shouldBe ("TODO")
        }

        // to test the property `grantTypesSupported` - OAuth 2.0 Supported Grant Types  JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
        should("test grantTypesSupported") {
            // uncomment below to test the property
            //modelInstance.grantTypesSupported shouldBe ("TODO")
        }

        // to test the property `registrationEndpoint` - OpenID Connect Dynamic Client Registration Endpoint URL
        should("test registrationEndpoint") {
            // uncomment below to test the property
            //modelInstance.registrationEndpoint shouldBe ("TODO")
        }

        // to test the property `requestObjectSigningAlgValuesSupported` - OpenID Connect Supported Request Object Signing Algorithms  JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
        should("test requestObjectSigningAlgValuesSupported") {
            // uncomment below to test the property
            //modelInstance.requestObjectSigningAlgValuesSupported shouldBe ("TODO")
        }

        // to test the property `requestParameterSupported` - OpenID Connect Request Parameter Supported  Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
        should("test requestParameterSupported") {
            // uncomment below to test the property
            //modelInstance.requestParameterSupported shouldBe ("TODO")
        }

        // to test the property `requestUriParameterSupported` - OpenID Connect Request URI Parameter Supported  Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
        should("test requestUriParameterSupported") {
            // uncomment below to test the property
            //modelInstance.requestUriParameterSupported shouldBe ("TODO")
        }

        // to test the property `requireRequestUriRegistration` - OpenID Connect Requires Request URI Registration  Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
        should("test requireRequestUriRegistration") {
            // uncomment below to test the property
            //modelInstance.requireRequestUriRegistration shouldBe ("TODO")
        }

        // to test the property `responseModesSupported` - OAuth 2.0 Supported Response Modes  JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
        should("test responseModesSupported") {
            // uncomment below to test the property
            //modelInstance.responseModesSupported shouldBe ("TODO")
        }

        // to test the property `revocationEndpoint` - OAuth 2.0 Token Revocation URL  URL of the authorization server's OAuth 2.0 revocation endpoint.
        should("test revocationEndpoint") {
            // uncomment below to test the property
            //modelInstance.revocationEndpoint shouldBe ("TODO")
        }

        // to test the property `scopesSupported` - OAuth 2.0 Supported Scope Values  JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
        should("test scopesSupported") {
            // uncomment below to test the property
            //modelInstance.scopesSupported shouldBe ("TODO")
        }

        // to test the property `tokenEndpointAuthMethodsSupported` - OAuth 2.0 Supported Client Authentication Methods  JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
        should("test tokenEndpointAuthMethodsSupported") {
            // uncomment below to test the property
            //modelInstance.tokenEndpointAuthMethodsSupported shouldBe ("TODO")
        }

        // to test the property `userinfoEndpoint` - OpenID Connect Userinfo URL  URL of the OP's UserInfo Endpoint.
        should("test userinfoEndpoint") {
            // uncomment below to test the property
            //modelInstance.userinfoEndpoint shouldBe ("TODO")
        }

        // to test the property `userinfoSigningAlgValuesSupported` - OpenID Connect Supported Userinfo Signing Algorithm  JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
        should("test userinfoSigningAlgValuesSupported") {
            // uncomment below to test the property
            //modelInstance.userinfoSigningAlgValuesSupported shouldBe ("TODO")
        }

    }
}
