/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.NormalizedProjectRevisionCourierChannel

class NormalizedProjectRevisionCourierChannelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of NormalizedProjectRevisionCourierChannel
        //val modelInstance = NormalizedProjectRevisionCourierChannel()

        // to test the property `channelId` - The Channel's public ID
        should("test channelId") {
            // uncomment below to test the property
            //modelInstance.channelId shouldBe ("TODO")
        }

        // to test the property `requestConfigBody` - URI pointing to the JsonNet template used for HTTP body payload generation.
        should("test requestConfigBody") {
            // uncomment below to test the property
            //modelInstance.requestConfigBody shouldBe ("TODO")
        }

        // to test the property `requestConfigMethod` - The HTTP method to use (GET, POST, etc) for the HTTP call
        should("test requestConfigMethod") {
            // uncomment below to test the property
            //modelInstance.requestConfigMethod shouldBe ("TODO")
        }

        // to test the property `createdAt` - The creation date
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthConfigApiKeyIn` - API key location  Can either be \"header\" or \"query\"
        should("test requestConfigAuthConfigApiKeyIn") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthConfigApiKeyIn shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthConfigApiKeyName` - API key name  Only used if the auth type is api_key
        should("test requestConfigAuthConfigApiKeyName") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthConfigApiKeyName shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthConfigApiKeyValue` - API key value  Only used if the auth type is api_key
        should("test requestConfigAuthConfigApiKeyValue") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthConfigApiKeyValue shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthConfigBasicAuthPassword` - Basic Auth Password  Only used if the auth type is basic_auth
        should("test requestConfigAuthConfigBasicAuthPassword") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthConfigBasicAuthPassword shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthConfigBasicAuthUser` - Basic Auth Username  Only used if the auth type is basic_auth
        should("test requestConfigAuthConfigBasicAuthUser") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthConfigBasicAuthUser shouldBe ("TODO")
        }

        // to test the property `requestConfigAuthType` - HTTP Auth Method to use for the HTTP call  Can either be basic_auth or api_key basic_auth CourierChannelAuthTypeBasicAuth api_key CourierChannelAuthTypeApiKey
        should("test requestConfigAuthType") {
            // uncomment below to test the property
            //modelInstance.requestConfigAuthType shouldBe ("TODO")
        }

        // to test the property `requestConfigHeaders` - NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
        should("test requestConfigHeaders") {
            // uncomment below to test the property
            //modelInstance.requestConfigHeaders shouldBe ("TODO")
        }

        // to test the property `requestConfigUrl`
        should("test requestConfigUrl") {
            // uncomment below to test the property
            //modelInstance.requestConfigUrl shouldBe ("TODO")
        }

        // to test the property `updatedAt` - Last upate time
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

    }
}
