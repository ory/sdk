/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.Subscription
import sh.ory.client-kotlin-multiplatform.models.PlanDetails

class SubscriptionTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Subscription
        //val modelInstance = Subscription()

        // to test the property `createdAt`
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `currency` - The currency of the subscription. To change this, a new subscription must be created. usd USD eur Euro
        should("test currency") {
            // uncomment below to test the property
            //modelInstance.currency shouldBe ("TODO")
        }

        // to test the property `currentInterval` - The currently active interval of the subscription monthly Monthly yearly Yearly
        should("test currentInterval") {
            // uncomment below to test the property
            //modelInstance.currentInterval shouldBe ("TODO")
        }

        // to test the property `currentPlan` - The currently active plan of the subscription
        should("test currentPlan") {
            // uncomment below to test the property
            //modelInstance.currentPlan shouldBe ("TODO")
        }

        // to test the property `customerId` - The ID of the stripe customer
        should("test customerId") {
            // uncomment below to test the property
            //modelInstance.customerId shouldBe ("TODO")
        }

        // to test the property `id` - The ID of the subscription
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `intervalChangesTo`
        should("test intervalChangesTo") {
            // uncomment below to test the property
            //modelInstance.intervalChangesTo shouldBe ("TODO")
        }

        // to test the property `payedUntil` - Until when the subscription is payed
        should("test payedUntil") {
            // uncomment below to test the property
            //modelInstance.payedUntil shouldBe ("TODO")
        }

        // to test the property `planChangesTo`
        should("test planChangesTo") {
            // uncomment below to test the property
            //modelInstance.planChangesTo shouldBe ("TODO")
        }

        // to test the property `status` - For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.  If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `updatedAt`
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `currentPlanDetails`
        should("test currentPlanDetails") {
            // uncomment below to test the property
            //modelInstance.currentPlanDetails shouldBe ("TODO")
        }

        // to test the property `ongoingStripeCheckoutId`
        should("test ongoingStripeCheckoutId") {
            // uncomment below to test the property
            //modelInstance.ongoingStripeCheckoutId shouldBe ("TODO")
        }

        // to test the property `planChangesAt`
        should("test planChangesAt") {
            // uncomment below to test the property
            //modelInstance.planChangesAt shouldBe ("TODO")
        }

        // to test the property `stripeCheckoutExpiresAt`
        should("test stripeCheckoutExpiresAt") {
            // uncomment below to test the property
            //modelInstance.stripeCheckoutExpiresAt shouldBe ("TODO")
        }

    }
}
