/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.NormalizedProjectRevisionHook

class NormalizedProjectRevisionHookTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of NormalizedProjectRevisionHook
        //val modelInstance = NormalizedProjectRevisionHook()

        // to test the property `configKey` - The Hooks Config Key
        should("test configKey") {
            // uncomment below to test the property
            //modelInstance.configKey shouldBe ("TODO")
        }

        // to test the property `hook` - The Hook Type
        should("test hook") {
            // uncomment below to test the property
            //modelInstance.hook shouldBe ("TODO")
        }

        // to test the property `createdAt` - The Project's Revision Creation Date
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `id` - ID of the entry
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `projectRevisionId` - The Revision's ID this schema belongs to
        should("test projectRevisionId") {
            // uncomment below to test the property
            //modelInstance.projectRevisionId shouldBe ("TODO")
        }

        // to test the property `updatedAt` - Last Time Project's Revision was Updated
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthApiKeyIn` - Whether to send the API Key in the HTTP Header or as a HTTP Cookie
        should("test webHookConfigAuthApiKeyIn") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthApiKeyIn shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthApiKeyName` - The name of the api key
        should("test webHookConfigAuthApiKeyName") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthApiKeyName shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthApiKeyValue` - The value of the api key
        should("test webHookConfigAuthApiKeyValue") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthApiKeyValue shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthBasicAuthPassword` - The password to be sent in the HTTP Basic Auth Header
        should("test webHookConfigAuthBasicAuthPassword") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthBasicAuthPassword shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthBasicAuthUser` - The username to be sent in the HTTP Basic Auth Header
        should("test webHookConfigAuthBasicAuthUser") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthBasicAuthUser shouldBe ("TODO")
        }

        // to test the property `webHookConfigAuthType` - HTTP Auth Method to use for the Web-Hook
        should("test webHookConfigAuthType") {
            // uncomment below to test the property
            //modelInstance.webHookConfigAuthType shouldBe ("TODO")
        }

        // to test the property `webHookConfigBody` - URI pointing to the JsonNet template used for Web-Hook payload generation. Only used for those HTTP methods, which support HTTP body payloads.
        should("test webHookConfigBody") {
            // uncomment below to test the property
            //modelInstance.webHookConfigBody shouldBe ("TODO")
        }

        // to test the property `webHookConfigCanInterrupt` - If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format.
        should("test webHookConfigCanInterrupt") {
            // uncomment below to test the property
            //modelInstance.webHookConfigCanInterrupt shouldBe ("TODO")
        }

        // to test the property `webHookConfigMethod` - The HTTP method to use (GET, POST, etc) for the Web-Hook
        should("test webHookConfigMethod") {
            // uncomment below to test the property
            //modelInstance.webHookConfigMethod shouldBe ("TODO")
        }

        // to test the property `webHookConfigResponseIgnore` - Whether to ignore the Web Hook response
        should("test webHookConfigResponseIgnore") {
            // uncomment below to test the property
            //modelInstance.webHookConfigResponseIgnore shouldBe ("TODO")
        }

        // to test the property `webHookConfigResponseParse` - Whether to parse the Web Hook response
        should("test webHookConfigResponseParse") {
            // uncomment below to test the property
            //modelInstance.webHookConfigResponseParse shouldBe ("TODO")
        }

        // to test the property `webHookConfigUrl` - The URL the Web-Hook should call
        should("test webHookConfigUrl") {
            // uncomment below to test the property
            //modelInstance.webHookConfigUrl shouldBe ("TODO")
        }

    }
}
