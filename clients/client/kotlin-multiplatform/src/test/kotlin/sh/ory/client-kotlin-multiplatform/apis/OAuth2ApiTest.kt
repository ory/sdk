/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.apis.OAuth2Api
import sh.ory.client-kotlin-multiplatform.models.AcceptOAuth2ConsentRequest
import sh.ory.client-kotlin-multiplatform.models.AcceptOAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.ErrorOAuth2
import sh.ory.client-kotlin-multiplatform.models.GenericError
import sh.ory.client-kotlin-multiplatform.models.IntrospectedOAuth2Token
import sh.ory.client-kotlin-multiplatform.models.JsonPatch
import sh.ory.client-kotlin-multiplatform.models.OAuth2Client
import sh.ory.client-kotlin-multiplatform.models.OAuth2ClientTokenLifespans
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentSession
import sh.ory.client-kotlin-multiplatform.models.OAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2LogoutRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2RedirectTo
import sh.ory.client-kotlin-multiplatform.models.OAuth2TokenExchange
import sh.ory.client-kotlin-multiplatform.models.RejectOAuth2Request
import sh.ory.client-kotlin-multiplatform.models.TrustOAuth2JwtGrantIssuer
import sh.ory.client-kotlin-multiplatform.models.TrustedOAuth2JwtGrantIssuer

class OAuth2ApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OAuth2Api
        //val apiInstance = OAuth2Api()

        // to test acceptOAuth2ConsentRequest
        should("test acceptOAuth2ConsentRequest") {
            // uncomment below to test acceptOAuth2ConsentRequest
            //val consentChallenge : kotlin.String = consentChallenge_example // kotlin.String | OAuth 2.0 Consent Request Challenge
            //val acceptOAuth2ConsentRequest : AcceptOAuth2ConsentRequest =  // AcceptOAuth2ConsentRequest | 
            //val result : OAuth2RedirectTo = apiInstance.acceptOAuth2ConsentRequest(consentChallenge, acceptOAuth2ConsentRequest)
            //result shouldBe ("TODO")
        }

        // to test acceptOAuth2LoginRequest
        should("test acceptOAuth2LoginRequest") {
            // uncomment below to test acceptOAuth2LoginRequest
            //val loginChallenge : kotlin.String = loginChallenge_example // kotlin.String | OAuth 2.0 Login Request Challenge
            //val acceptOAuth2LoginRequest : AcceptOAuth2LoginRequest =  // AcceptOAuth2LoginRequest | 
            //val result : OAuth2RedirectTo = apiInstance.acceptOAuth2LoginRequest(loginChallenge, acceptOAuth2LoginRequest)
            //result shouldBe ("TODO")
        }

        // to test acceptOAuth2LogoutRequest
        should("test acceptOAuth2LogoutRequest") {
            // uncomment below to test acceptOAuth2LogoutRequest
            //val logoutChallenge : kotlin.String = logoutChallenge_example // kotlin.String | OAuth 2.0 Logout Request Challenge
            //val result : OAuth2RedirectTo = apiInstance.acceptOAuth2LogoutRequest(logoutChallenge)
            //result shouldBe ("TODO")
        }

        // to test createOAuth2Client
        should("test createOAuth2Client") {
            // uncomment below to test createOAuth2Client
            //val oauth2Client : OAuth2Client =  // OAuth2Client | OAuth 2.0 Client Request Body
            //val result : OAuth2Client = apiInstance.createOAuth2Client(oauth2Client)
            //result shouldBe ("TODO")
        }

        // to test deleteOAuth2Client
        should("test deleteOAuth2Client") {
            // uncomment below to test deleteOAuth2Client
            //val id : kotlin.String = id_example // kotlin.String | The id of the OAuth 2.0 Client.
            //apiInstance.deleteOAuth2Client(id)
        }

        // to test deleteOAuth2Token
        should("test deleteOAuth2Token") {
            // uncomment below to test deleteOAuth2Token
            //val clientId : kotlin.String = clientId_example // kotlin.String | OAuth 2.0 Client ID
            //apiInstance.deleteOAuth2Token(clientId)
        }

        // to test deleteTrustedOAuth2JwtGrantIssuer
        should("test deleteTrustedOAuth2JwtGrantIssuer") {
            // uncomment below to test deleteTrustedOAuth2JwtGrantIssuer
            //val id : kotlin.String = id_example // kotlin.String | The id of the desired grant
            //apiInstance.deleteTrustedOAuth2JwtGrantIssuer(id)
        }

        // to test getOAuth2Client
        should("test getOAuth2Client") {
            // uncomment below to test getOAuth2Client
            //val id : kotlin.String = id_example // kotlin.String | The id of the OAuth 2.0 Client.
            //val result : OAuth2Client = apiInstance.getOAuth2Client(id)
            //result shouldBe ("TODO")
        }

        // to test getOAuth2ConsentRequest
        should("test getOAuth2ConsentRequest") {
            // uncomment below to test getOAuth2ConsentRequest
            //val consentChallenge : kotlin.String = consentChallenge_example // kotlin.String | OAuth 2.0 Consent Request Challenge
            //val result : OAuth2ConsentRequest = apiInstance.getOAuth2ConsentRequest(consentChallenge)
            //result shouldBe ("TODO")
        }

        // to test getOAuth2LoginRequest
        should("test getOAuth2LoginRequest") {
            // uncomment below to test getOAuth2LoginRequest
            //val loginChallenge : kotlin.String = loginChallenge_example // kotlin.String | OAuth 2.0 Login Request Challenge
            //val result : OAuth2LoginRequest = apiInstance.getOAuth2LoginRequest(loginChallenge)
            //result shouldBe ("TODO")
        }

        // to test getOAuth2LogoutRequest
        should("test getOAuth2LogoutRequest") {
            // uncomment below to test getOAuth2LogoutRequest
            //val logoutChallenge : kotlin.String = logoutChallenge_example // kotlin.String | 
            //val result : OAuth2LogoutRequest = apiInstance.getOAuth2LogoutRequest(logoutChallenge)
            //result shouldBe ("TODO")
        }

        // to test getTrustedOAuth2JwtGrantIssuer
        should("test getTrustedOAuth2JwtGrantIssuer") {
            // uncomment below to test getTrustedOAuth2JwtGrantIssuer
            //val id : kotlin.String = id_example // kotlin.String | The id of the desired grant
            //val result : TrustedOAuth2JwtGrantIssuer = apiInstance.getTrustedOAuth2JwtGrantIssuer(id)
            //result shouldBe ("TODO")
        }

        // to test introspectOAuth2Token
        should("test introspectOAuth2Token") {
            // uncomment below to test introspectOAuth2Token
            //val token : kotlin.String = token_example // kotlin.String | The string value of the token. For access tokens, this is the \\\"access_token\\\" value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\"refresh_token\\\" value returned.
            //val scope : kotlin.String = scope_example // kotlin.String | An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
            //val result : IntrospectedOAuth2Token = apiInstance.introspectOAuth2Token(token, scope)
            //result shouldBe ("TODO")
        }

        // to test listOAuth2Clients
        should("test listOAuth2Clients") {
            // uncomment below to test listOAuth2Clients
            //val pageSize : kotlin.Long = 789 // kotlin.Long | Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val pageToken : kotlin.String = pageToken_example // kotlin.String | Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val clientName : kotlin.String = clientName_example // kotlin.String | The name of the clients to filter by.
            //val owner : kotlin.String = owner_example // kotlin.String | The owner of the clients to filter by.
            //val result : kotlin.collections.List<OAuth2Client> = apiInstance.listOAuth2Clients(pageSize, pageToken, clientName, owner)
            //result shouldBe ("TODO")
        }

        // to test listOAuth2ConsentSessions
        should("test listOAuth2ConsentSessions") {
            // uncomment below to test listOAuth2ConsentSessions
            //val subject : kotlin.String = subject_example // kotlin.String | The subject to list the consent sessions for.
            //val pageSize : kotlin.Long = 789 // kotlin.Long | Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val pageToken : kotlin.String = pageToken_example // kotlin.String | Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val loginSessionId : kotlin.String = loginSessionId_example // kotlin.String | The login session id to list the consent sessions for.
            //val result : kotlin.collections.List<OAuth2ConsentSession> = apiInstance.listOAuth2ConsentSessions(subject, pageSize, pageToken, loginSessionId)
            //result shouldBe ("TODO")
        }

        // to test listTrustedOAuth2JwtGrantIssuers
        should("test listTrustedOAuth2JwtGrantIssuers") {
            // uncomment below to test listTrustedOAuth2JwtGrantIssuers
            //val maxItems : kotlin.Long = 789 // kotlin.Long | 
            //val defaultItems : kotlin.Long = 789 // kotlin.Long | 
            //val issuer : kotlin.String = issuer_example // kotlin.String | If optional \"issuer\" is supplied, only jwt-bearer grants with this issuer will be returned.
            //val result : kotlin.collections.List<TrustedOAuth2JwtGrantIssuer> = apiInstance.listTrustedOAuth2JwtGrantIssuers(maxItems, defaultItems, issuer)
            //result shouldBe ("TODO")
        }

        // to test oAuth2Authorize
        should("test oAuth2Authorize") {
            // uncomment below to test oAuth2Authorize
            //val result : ErrorOAuth2 = apiInstance.oAuth2Authorize()
            //result shouldBe ("TODO")
        }

        // to test oauth2TokenExchange
        should("test oauth2TokenExchange") {
            // uncomment below to test oauth2TokenExchange
            //val grantType : kotlin.String = grantType_example // kotlin.String | 
            //val clientId : kotlin.String = clientId_example // kotlin.String | 
            //val code : kotlin.String = code_example // kotlin.String | 
            //val redirectUri : kotlin.String = redirectUri_example // kotlin.String | 
            //val refreshToken : kotlin.String = refreshToken_example // kotlin.String | 
            //val result : OAuth2TokenExchange = apiInstance.oauth2TokenExchange(grantType, clientId, code, redirectUri, refreshToken)
            //result shouldBe ("TODO")
        }

        // to test patchOAuth2Client
        should("test patchOAuth2Client") {
            // uncomment below to test patchOAuth2Client
            //val id : kotlin.String = id_example // kotlin.String | The id of the OAuth 2.0 Client.
            //val jsonPatch : kotlin.collections.List<JsonPatch> =  // kotlin.collections.List<JsonPatch> | OAuth 2.0 Client JSON Patch Body
            //val result : OAuth2Client = apiInstance.patchOAuth2Client(id, jsonPatch)
            //result shouldBe ("TODO")
        }

        // to test rejectOAuth2ConsentRequest
        should("test rejectOAuth2ConsentRequest") {
            // uncomment below to test rejectOAuth2ConsentRequest
            //val consentChallenge : kotlin.String = consentChallenge_example // kotlin.String | OAuth 2.0 Consent Request Challenge
            //val rejectOAuth2Request : RejectOAuth2Request =  // RejectOAuth2Request | 
            //val result : OAuth2RedirectTo = apiInstance.rejectOAuth2ConsentRequest(consentChallenge, rejectOAuth2Request)
            //result shouldBe ("TODO")
        }

        // to test rejectOAuth2LoginRequest
        should("test rejectOAuth2LoginRequest") {
            // uncomment below to test rejectOAuth2LoginRequest
            //val loginChallenge : kotlin.String = loginChallenge_example // kotlin.String | OAuth 2.0 Login Request Challenge
            //val rejectOAuth2Request : RejectOAuth2Request =  // RejectOAuth2Request | 
            //val result : OAuth2RedirectTo = apiInstance.rejectOAuth2LoginRequest(loginChallenge, rejectOAuth2Request)
            //result shouldBe ("TODO")
        }

        // to test rejectOAuth2LogoutRequest
        should("test rejectOAuth2LogoutRequest") {
            // uncomment below to test rejectOAuth2LogoutRequest
            //val logoutChallenge : kotlin.String = logoutChallenge_example // kotlin.String | 
            //apiInstance.rejectOAuth2LogoutRequest(logoutChallenge)
        }

        // to test revokeOAuth2ConsentSessions
        should("test revokeOAuth2ConsentSessions") {
            // uncomment below to test revokeOAuth2ConsentSessions
            //val subject : kotlin.String = subject_example // kotlin.String | OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
            //val client : kotlin.String = client_example // kotlin.String | OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID.
            //val all : kotlin.Boolean = true // kotlin.Boolean | Revoke All Consent Sessions  If set to `true` deletes all consent sessions by the Subject that have been granted.
            //apiInstance.revokeOAuth2ConsentSessions(subject, client, all)
        }

        // to test revokeOAuth2LoginSessions
        should("test revokeOAuth2LoginSessions") {
            // uncomment below to test revokeOAuth2LoginSessions
            //val subject : kotlin.String = subject_example // kotlin.String | OAuth 2.0 Subject  The subject to revoke authentication sessions for.
            //val sid : kotlin.String = sid_example // kotlin.String | Login Session ID  The login session to revoke.
            //apiInstance.revokeOAuth2LoginSessions(subject, sid)
        }

        // to test revokeOAuth2Token
        should("test revokeOAuth2Token") {
            // uncomment below to test revokeOAuth2Token
            //val token : kotlin.String = token_example // kotlin.String | 
            //val clientId : kotlin.String = clientId_example // kotlin.String | 
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | 
            //apiInstance.revokeOAuth2Token(token, clientId, clientSecret)
        }

        // to test setOAuth2Client
        should("test setOAuth2Client") {
            // uncomment below to test setOAuth2Client
            //val id : kotlin.String = id_example // kotlin.String | OAuth 2.0 Client ID
            //val oauth2Client : OAuth2Client =  // OAuth2Client | OAuth 2.0 Client Request Body
            //val result : OAuth2Client = apiInstance.setOAuth2Client(id, oauth2Client)
            //result shouldBe ("TODO")
        }

        // to test setOAuth2ClientLifespans
        should("test setOAuth2ClientLifespans") {
            // uncomment below to test setOAuth2ClientLifespans
            //val id : kotlin.String = id_example // kotlin.String | OAuth 2.0 Client ID
            //val oauth2ClientTokenLifespans : OAuth2ClientTokenLifespans =  // OAuth2ClientTokenLifespans | 
            //val result : OAuth2Client = apiInstance.setOAuth2ClientLifespans(id, oauth2ClientTokenLifespans)
            //result shouldBe ("TODO")
        }

        // to test trustOAuth2JwtGrantIssuer
        should("test trustOAuth2JwtGrantIssuer") {
            // uncomment below to test trustOAuth2JwtGrantIssuer
            //val trustOAuth2JwtGrantIssuer : TrustOAuth2JwtGrantIssuer =  // TrustOAuth2JwtGrantIssuer | 
            //val result : TrustedOAuth2JwtGrantIssuer = apiInstance.trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer)
            //result shouldBe ("TODO")
        }

    }
}
