/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.LoginFlow
import sh.ory.client-kotlin-multiplatform.models.AuthenticatorAssuranceLevel
import sh.ory.client-kotlin-multiplatform.models.OAuth2LoginRequest
import sh.ory.client-kotlin-multiplatform.models.UiContainer

class LoginFlowTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of LoginFlow
        //val modelInstance = LoginFlow()

        // to test the property `expiresAt` - ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `id` - ID represents the flow's unique ID. When performing the login flow, this represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `issuedAt` - IssuedAt is the time (UTC) when the flow started.
        should("test issuedAt") {
            // uncomment below to test the property
            //modelInstance.issuedAt shouldBe ("TODO")
        }

        // to test the property `requestUrl` - RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.
        should("test requestUrl") {
            // uncomment below to test the property
            //modelInstance.requestUrl shouldBe ("TODO")
        }

        // to test the property `state` - State represents the state of this request:  choose_method: ask the user to choose a method to sign in with sent_email: the email has been sent to the user passed_challenge: the request was successful and the login challenge was passed.
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `type` - The flow type can either be `api` or `browser`.
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `ui`
        should("test ui") {
            // uncomment below to test the property
            //modelInstance.ui shouldBe ("TODO")
        }

        // to test the property `active` - The active login method  If set contains the login method used. If the flow is new, it is unset. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode
        should("test active") {
            // uncomment below to test the property
            //modelInstance.active shouldBe ("TODO")
        }

        // to test the property `createdAt` - CreatedAt is a helper struct field for gobuffalo.pop.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `oauth2LoginChallenge` - Ory OAuth 2.0 Login Challenge.  This value is set using the `login_challenge` query parameter of the registration and login endpoints. If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
        should("test oauth2LoginChallenge") {
            // uncomment below to test the property
            //modelInstance.oauth2LoginChallenge shouldBe ("TODO")
        }

        // to test the property `oauth2LoginRequest`
        should("test oauth2LoginRequest") {
            // uncomment below to test the property
            //modelInstance.oauth2LoginRequest shouldBe ("TODO")
        }

        // to test the property `organizationId`
        should("test organizationId") {
            // uncomment below to test the property
            //modelInstance.organizationId shouldBe ("TODO")
        }

        // to test the property `refresh` - Refresh stores whether this login flow should enforce re-authentication.
        should("test refresh") {
            // uncomment below to test the property
            //modelInstance.refresh shouldBe ("TODO")
        }

        // to test the property `requestedAal`
        should("test requestedAal") {
            // uncomment below to test the property
            //modelInstance.requestedAal shouldBe ("TODO")
        }

        // to test the property `returnTo` - ReturnTo contains the requested return_to URL.
        should("test returnTo") {
            // uncomment below to test the property
            //modelInstance.returnTo shouldBe ("TODO")
        }

        // to test the property `sessionTokenExchangeCode` - SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the login flow has been completed. This is only set if the client has requested a session token exchange code, and if the flow is of type \"api\", and only on creating the login flow.
        should("test sessionTokenExchangeCode") {
            // uncomment below to test the property
            //modelInstance.sessionTokenExchangeCode shouldBe ("TODO")
        }

        // to test the property `transientPayload` - TransientPayload is used to pass data from the login to hooks and email templates
        should("test transientPayload") {
            // uncomment below to test the property
            //modelInstance.transientPayload shouldBe ("TODO")
        }

        // to test the property `updatedAt` - UpdatedAt is a helper struct field for gobuffalo.pop.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

    }
}
