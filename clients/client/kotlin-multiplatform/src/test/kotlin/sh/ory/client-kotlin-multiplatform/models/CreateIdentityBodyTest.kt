/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.CreateIdentityBody
import sh.ory.client-kotlin-multiplatform.models.IdentityWithCredentials
import sh.ory.client-kotlin-multiplatform.models.RecoveryIdentityAddress
import sh.ory.client-kotlin-multiplatform.models.VerifiableIdentityAddress

class CreateIdentityBodyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CreateIdentityBody
        //val modelInstance = CreateIdentityBody()

        // to test the property `schemaId` - SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
        should("test schemaId") {
            // uncomment below to test the property
            //modelInstance.schemaId shouldBe ("TODO")
        }

        // to test the property `traits` - Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
        should("test traits") {
            // uncomment below to test the property
            //modelInstance.traits shouldBe ("TODO")
        }

        // to test the property `credentials`
        should("test credentials") {
            // uncomment below to test the property
            //modelInstance.credentials shouldBe ("TODO")
        }

        // to test the property `metadataAdmin` - Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
        should("test metadataAdmin") {
            // uncomment below to test the property
            //modelInstance.metadataAdmin shouldBe ("TODO")
        }

        // to test the property `metadataPublic` - Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
        should("test metadataPublic") {
            // uncomment below to test the property
            //modelInstance.metadataPublic shouldBe ("TODO")
        }

        // to test the property `recoveryAddresses` - RecoveryAddresses contains all the addresses that can be used to recover an identity.  Use this structure to import recovery addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
        should("test recoveryAddresses") {
            // uncomment below to test the property
            //modelInstance.recoveryAddresses shouldBe ("TODO")
        }

        // to test the property `state` - State is the identity's state. active StateActive inactive StateInactive
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `verifiableAddresses` - VerifiableAddresses contains all the addresses that can be verified by the user.  Use this structure to import verified addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
        should("test verifiableAddresses") {
            // uncomment below to test the property
            //modelInstance.verifiableAddresses shouldBe ("TODO")
        }

    }
}
