/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.OidcUserInfo

class OidcUserInfoTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OidcUserInfo
        //val modelInstance = OidcUserInfo()

        // to test the property `birthdate` - End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
        should("test birthdate") {
            // uncomment below to test the property
            //modelInstance.birthdate shouldBe ("TODO")
        }

        // to test the property `email` - End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
        should("test email") {
            // uncomment below to test the property
            //modelInstance.email shouldBe ("TODO")
        }

        // to test the property `emailVerified` - True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        should("test emailVerified") {
            // uncomment below to test the property
            //modelInstance.emailVerified shouldBe ("TODO")
        }

        // to test the property `familyName` - Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
        should("test familyName") {
            // uncomment below to test the property
            //modelInstance.familyName shouldBe ("TODO")
        }

        // to test the property `gender` - End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
        should("test gender") {
            // uncomment below to test the property
            //modelInstance.gender shouldBe ("TODO")
        }

        // to test the property `givenName` - Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
        should("test givenName") {
            // uncomment below to test the property
            //modelInstance.givenName shouldBe ("TODO")
        }

        // to test the property `locale` - End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
        should("test locale") {
            // uncomment below to test the property
            //modelInstance.locale shouldBe ("TODO")
        }

        // to test the property `middleName` - Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
        should("test middleName") {
            // uncomment below to test the property
            //modelInstance.middleName shouldBe ("TODO")
        }

        // to test the property `name` - End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `nickname` - Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
        should("test nickname") {
            // uncomment below to test the property
            //modelInstance.nickname shouldBe ("TODO")
        }

        // to test the property `phoneNumber` - End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
        should("test phoneNumber") {
            // uncomment below to test the property
            //modelInstance.phoneNumber shouldBe ("TODO")
        }

        // to test the property `phoneNumberVerified` - True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
        should("test phoneNumberVerified") {
            // uncomment below to test the property
            //modelInstance.phoneNumberVerified shouldBe ("TODO")
        }

        // to test the property `picture` - URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
        should("test picture") {
            // uncomment below to test the property
            //modelInstance.picture shouldBe ("TODO")
        }

        // to test the property `preferredUsername` - Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
        should("test preferredUsername") {
            // uncomment below to test the property
            //modelInstance.preferredUsername shouldBe ("TODO")
        }

        // to test the property `profile` - URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
        should("test profile") {
            // uncomment below to test the property
            //modelInstance.profile shouldBe ("TODO")
        }

        // to test the property `sub` - Subject - Identifier for the End-User at the IssuerURL.
        should("test sub") {
            // uncomment below to test the property
            //modelInstance.sub shouldBe ("TODO")
        }

        // to test the property `updatedAt` - Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `website` - URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
        should("test website") {
            // uncomment below to test the property
            //modelInstance.website shouldBe ("TODO")
        }

        // to test the property `zoneinfo` - String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
        should("test zoneinfo") {
            // uncomment below to test the property
            //modelInstance.zoneinfo shouldBe ("TODO")
        }

    }
}
