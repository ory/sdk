/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.SettingsFlow
import sh.ory.client-kotlin-multiplatform.models.ContinueWith
import sh.ory.client-kotlin-multiplatform.models.Identity
import sh.ory.client-kotlin-multiplatform.models.UiContainer

class SettingsFlowTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SettingsFlow
        //val modelInstance = SettingsFlow()

        // to test the property `expiresAt` - ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `id` - ID represents the flow's unique ID. When performing the settings flow, this represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `identity`
        should("test identity") {
            // uncomment below to test the property
            //modelInstance.identity shouldBe ("TODO")
        }

        // to test the property `issuedAt` - IssuedAt is the time (UTC) when the flow occurred.
        should("test issuedAt") {
            // uncomment below to test the property
            //modelInstance.issuedAt shouldBe ("TODO")
        }

        // to test the property `requestUrl` - RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.
        should("test requestUrl") {
            // uncomment below to test the property
            //modelInstance.requestUrl shouldBe ("TODO")
        }

        // to test the property `state` - State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `type` - The flow type can either be `api` or `browser`.
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `ui`
        should("test ui") {
            // uncomment below to test the property
            //modelInstance.ui shouldBe ("TODO")
        }

        // to test the property `active` - Active, if set, contains the registration method that is being used. It is initially not set.
        should("test active") {
            // uncomment below to test the property
            //modelInstance.active shouldBe ("TODO")
        }

        // to test the property `continueWith` - Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user's registration.
        should("test continueWith") {
            // uncomment below to test the property
            //modelInstance.continueWith shouldBe ("TODO")
        }

        // to test the property `returnTo` - ReturnTo contains the requested return_to URL.
        should("test returnTo") {
            // uncomment below to test the property
            //modelInstance.returnTo shouldBe ("TODO")
        }

        // to test the property `transientPayload` - TransientPayload is used to pass data from the settings flow to hooks and email templates
        should("test transientPayload") {
            // uncomment below to test the property
            //modelInstance.transientPayload shouldBe ("TODO")
        }

    }
}
