/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.apis.FrontendApi
import sh.ory.client-kotlin-multiplatform.models.DeleteMySessionsCount
import sh.ory.client-kotlin-multiplatform.models.ErrorBrowserLocationChangeRequired
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.FlowError
import sh.ory.client-kotlin-multiplatform.models.LoginFlow
import sh.ory.client-kotlin-multiplatform.models.LogoutFlow
import sh.ory.client-kotlin-multiplatform.models.PerformNativeLogoutBody
import sh.ory.client-kotlin-multiplatform.models.RecoveryFlow
import sh.ory.client-kotlin-multiplatform.models.RegistrationFlow
import sh.ory.client-kotlin-multiplatform.models.Session
import sh.ory.client-kotlin-multiplatform.models.SettingsFlow
import sh.ory.client-kotlin-multiplatform.models.SuccessfulNativeLogin
import sh.ory.client-kotlin-multiplatform.models.SuccessfulNativeRegistration
import sh.ory.client-kotlin-multiplatform.models.UpdateLoginFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateRecoveryFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateSettingsFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateVerificationFlowBody
import sh.ory.client-kotlin-multiplatform.models.VerificationFlow

class FrontendApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of FrontendApi
        //val apiInstance = FrontendApi()

        // to test createBrowserLoginFlow
        should("test createBrowserLoginFlow") {
            // uncomment below to test createBrowserLoginFlow
            //val refresh : kotlin.Boolean = true // kotlin.Boolean | Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
            //val aal : kotlin.String = aal_example // kotlin.String | Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \"upgrade\" the session's security by asking the user to perform TOTP / WebAuth/ ... you would set this to \"aal2\".
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val loginChallenge : kotlin.String = loginChallenge_example // kotlin.String | An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from `login_challenge` URL Query parameter sent to your application (e.g. `/login?login_challenge=abcde`).
            //val organization : kotlin.String = organization_example // kotlin.String | An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network.
            //val via : kotlin.String = via_example // kotlin.String | Via should contain the identity's credential the code should be sent to. Only relevant in aal2 flows.  DEPRECATED: This field is deprecated. Please remove it from your requests. The user will now see a choice of MFA credentials to choose from to perform the second factor instead.
            //val result : LoginFlow = apiInstance.createBrowserLoginFlow(refresh, aal, returnTo, cookie, loginChallenge, organization, via)
            //result shouldBe ("TODO")
        }

        // to test createBrowserLogoutFlow
        should("test createBrowserLogoutFlow") {
            // uncomment below to test createBrowserLogoutFlow
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | Return to URL  The URL to which the browser should be redirected to after the logout has been performed.
            //val result : LogoutFlow = apiInstance.createBrowserLogoutFlow(cookie, returnTo)
            //result shouldBe ("TODO")
        }

        // to test createBrowserRecoveryFlow
        should("test createBrowserRecoveryFlow") {
            // uncomment below to test createBrowserRecoveryFlow
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val result : RecoveryFlow = apiInstance.createBrowserRecoveryFlow(returnTo)
            //result shouldBe ("TODO")
        }

        // to test createBrowserRegistrationFlow
        should("test createBrowserRegistrationFlow") {
            // uncomment below to test createBrowserRegistrationFlow
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val loginChallenge : kotlin.String = loginChallenge_example // kotlin.String | Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from `login_challenge` URL Query parameter sent to your application (e.g. `/registration?login_challenge=abcde`).  This feature is compatible with Ory Hydra when not running on the Ory Network.
            //val afterVerificationReturnTo : kotlin.String = afterVerificationReturnTo_example // kotlin.String | The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default `selfservice.flows.verification.after.default_redirect_to` value.
            //val organization : kotlin.String = organization_example // kotlin.String | An optional organization ID that should be used to register this user. This parameter is only effective in the Ory Network.
            //val result : RegistrationFlow = apiInstance.createBrowserRegistrationFlow(returnTo, loginChallenge, afterVerificationReturnTo, organization)
            //result shouldBe ("TODO")
        }

        // to test createBrowserSettingsFlow
        should("test createBrowserSettingsFlow") {
            // uncomment below to test createBrowserSettingsFlow
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : SettingsFlow = apiInstance.createBrowserSettingsFlow(returnTo, cookie)
            //result shouldBe ("TODO")
        }

        // to test createBrowserVerificationFlow
        should("test createBrowserVerificationFlow") {
            // uncomment below to test createBrowserVerificationFlow
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val result : VerificationFlow = apiInstance.createBrowserVerificationFlow(returnTo)
            //result shouldBe ("TODO")
        }

        // to test createNativeLoginFlow
        should("test createNativeLoginFlow") {
            // uncomment below to test createNativeLoginFlow
            //val refresh : kotlin.Boolean = true // kotlin.Boolean | Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
            //val aal : kotlin.String = aal_example // kotlin.String | Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \"upgrade\" the session's security by asking the user to perform TOTP / WebAuth/ ... you would set this to \"aal2\".
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | The Session Token of the Identity performing the settings flow.
            //val returnSessionTokenExchangeCode : kotlin.Boolean = true // kotlin.Boolean | EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed.
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val organization : kotlin.String = organization_example // kotlin.String | An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network.
            //val via : kotlin.String = via_example // kotlin.String | Via should contain the identity's credential the code should be sent to. Only relevant in aal2 flows.  DEPRECATED: This field is deprecated. Please remove it from your requests. The user will now see a choice of MFA credentials to choose from to perform the second factor instead.
            //val result : LoginFlow = apiInstance.createNativeLoginFlow(refresh, aal, xSessionToken, returnSessionTokenExchangeCode, returnTo, organization, via)
            //result shouldBe ("TODO")
        }

        // to test createNativeRecoveryFlow
        should("test createNativeRecoveryFlow") {
            // uncomment below to test createNativeRecoveryFlow
            //val result : RecoveryFlow = apiInstance.createNativeRecoveryFlow()
            //result shouldBe ("TODO")
        }

        // to test createNativeRegistrationFlow
        should("test createNativeRegistrationFlow") {
            // uncomment below to test createNativeRegistrationFlow
            //val returnSessionTokenExchangeCode : kotlin.Boolean = true // kotlin.Boolean | EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed.
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return the browser to after the flow was completed.
            //val organization : kotlin.String = organization_example // kotlin.String | An optional organization ID that should be used to register this user. This parameter is only effective in the Ory Network.
            //val result : RegistrationFlow = apiInstance.createNativeRegistrationFlow(returnSessionTokenExchangeCode, returnTo, organization)
            //result shouldBe ("TODO")
        }

        // to test createNativeSettingsFlow
        should("test createNativeSettingsFlow") {
            // uncomment below to test createNativeSettingsFlow
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | The Session Token of the Identity performing the settings flow.
            //val result : SettingsFlow = apiInstance.createNativeSettingsFlow(xSessionToken)
            //result shouldBe ("TODO")
        }

        // to test createNativeVerificationFlow
        should("test createNativeVerificationFlow") {
            // uncomment below to test createNativeVerificationFlow
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | A URL contained in the return_to key of the verification flow. This piece of data has no effect on the actual logic of the flow and is purely informational.
            //val result : VerificationFlow = apiInstance.createNativeVerificationFlow(returnTo)
            //result shouldBe ("TODO")
        }

        // to test disableMyOtherSessions
        should("test disableMyOtherSessions") {
            // uncomment below to test disableMyOtherSessions
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
            //val cookie : kotlin.String = cookie_example // kotlin.String | Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.  It is ok if more than one cookie are included here as all other cookies will be ignored.
            //val result : DeleteMySessionsCount = apiInstance.disableMyOtherSessions(xSessionToken, cookie)
            //result shouldBe ("TODO")
        }

        // to test disableMySession
        should("test disableMySession") {
            // uncomment below to test disableMySession
            //val id : kotlin.String = id_example // kotlin.String | ID is the session's ID.
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
            //val cookie : kotlin.String = cookie_example // kotlin.String | Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.  It is ok if more than one cookie are included here as all other cookies will be ignored.
            //apiInstance.disableMySession(id, xSessionToken, cookie)
        }

        // to test exchangeSessionToken
        should("test exchangeSessionToken") {
            // uncomment below to test exchangeSessionToken
            //val initCode : kotlin.String = initCode_example // kotlin.String | The part of the code return when initializing the flow.
            //val returnToCode : kotlin.String = returnToCode_example // kotlin.String | The part of the code returned by the return_to URL.
            //val result : SuccessfulNativeLogin = apiInstance.exchangeSessionToken(initCode, returnToCode)
            //result shouldBe ("TODO")
        }

        // to test getFlowError
        should("test getFlowError") {
            // uncomment below to test getFlowError
            //val id : kotlin.String = id_example // kotlin.String | Error is the error's ID
            //val result : FlowError = apiInstance.getFlowError(id)
            //result shouldBe ("TODO")
        }

        // to test getLoginFlow
        should("test getLoginFlow") {
            // uncomment below to test getLoginFlow
            //val id : kotlin.String = id_example // kotlin.String | The Login Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/login?flow=abcde`).
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : LoginFlow = apiInstance.getLoginFlow(id, cookie)
            //result shouldBe ("TODO")
        }

        // to test getRecoveryFlow
        should("test getRecoveryFlow") {
            // uncomment below to test getRecoveryFlow
            //val id : kotlin.String = id_example // kotlin.String | The Flow ID  The value for this parameter comes from `request` URL Query parameter sent to your application (e.g. `/recovery?flow=abcde`).
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : RecoveryFlow = apiInstance.getRecoveryFlow(id, cookie)
            //result shouldBe ("TODO")
        }

        // to test getRegistrationFlow
        should("test getRegistrationFlow") {
            // uncomment below to test getRegistrationFlow
            //val id : kotlin.String = id_example // kotlin.String | The Registration Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/registration?flow=abcde`).
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : RegistrationFlow = apiInstance.getRegistrationFlow(id, cookie)
            //result shouldBe ("TODO")
        }

        // to test getSettingsFlow
        should("test getSettingsFlow") {
            // uncomment below to test getSettingsFlow
            //val id : kotlin.String = id_example // kotlin.String | ID is the Settings Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/settings?flow=abcde`).
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | The Session Token  When using the SDK in an app without a browser, please include the session token here.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : SettingsFlow = apiInstance.getSettingsFlow(id, xSessionToken, cookie)
            //result shouldBe ("TODO")
        }

        // to test getVerificationFlow
        should("test getVerificationFlow") {
            // uncomment below to test getVerificationFlow
            //val id : kotlin.String = id_example // kotlin.String | The Flow ID  The value for this parameter comes from `request` URL Query parameter sent to your application (e.g. `/verification?flow=abcde`).
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
            //val result : VerificationFlow = apiInstance.getVerificationFlow(id, cookie)
            //result shouldBe ("TODO")
        }

        // to test getWebAuthnJavaScript
        should("test getWebAuthnJavaScript") {
            // uncomment below to test getWebAuthnJavaScript
            //val result : kotlin.String = apiInstance.getWebAuthnJavaScript()
            //result shouldBe ("TODO")
        }

        // to test listMySessions
        should("test listMySessions") {
            // uncomment below to test listMySessions
            //val perPage : kotlin.Long = 789 // kotlin.Long | Deprecated Items per Page  DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.  This is the number of items per page.
            //val page : kotlin.Long = 789 // kotlin.Long | Deprecated Pagination Page  DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the `Link` header.
            //val pageSize : kotlin.Long = 789 // kotlin.Long | Page Size  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val pageToken : kotlin.String = pageToken_example // kotlin.String | Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
            //val cookie : kotlin.String = cookie_example // kotlin.String | Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.  It is ok if more than one cookie are included here as all other cookies will be ignored.
            //val result : kotlin.collections.List<Session> = apiInstance.listMySessions(perPage, page, pageSize, pageToken, xSessionToken, cookie)
            //result shouldBe ("TODO")
        }

        // to test performNativeLogout
        should("test performNativeLogout") {
            // uncomment below to test performNativeLogout
            //val performNativeLogoutBody : PerformNativeLogoutBody =  // PerformNativeLogoutBody | 
            //apiInstance.performNativeLogout(performNativeLogoutBody)
        }

        // to test toSession
        should("test toSession") {
            // uncomment below to test toSession
            //val xSessionToken : kotlin.String = MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj // kotlin.String | Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
            //val cookie : kotlin.String = ory_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== // kotlin.String | Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.  It is ok if more than one cookie are included here as all other cookies will be ignored.
            //val tokenizeAs : kotlin.String = tokenizeAs_example // kotlin.String | Returns the session additionally as a token (such as a JWT)  The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors).
            //val result : Session = apiInstance.toSession(xSessionToken, cookie, tokenizeAs)
            //result shouldBe ("TODO")
        }

        // to test updateLoginFlow
        should("test updateLoginFlow") {
            // uncomment below to test updateLoginFlow
            //val flow : kotlin.String = flow_example // kotlin.String | The Login Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/login?flow=abcde`).
            //val updateLoginFlowBody : UpdateLoginFlowBody =  // UpdateLoginFlowBody | 
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | The Session Token of the Identity performing the settings flow.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : SuccessfulNativeLogin = apiInstance.updateLoginFlow(flow, updateLoginFlowBody, xSessionToken, cookie)
            //result shouldBe ("TODO")
        }

        // to test updateLogoutFlow
        should("test updateLogoutFlow") {
            // uncomment below to test updateLogoutFlow
            //val token : kotlin.String = token_example // kotlin.String | A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call `/self-service/logout/browser` to generate a URL for this endpoint.
            //val returnTo : kotlin.String = returnTo_example // kotlin.String | The URL to return to after the logout was completed.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //apiInstance.updateLogoutFlow(token, returnTo, cookie)
        }

        // to test updateRecoveryFlow
        should("test updateRecoveryFlow") {
            // uncomment below to test updateRecoveryFlow
            //val flow : kotlin.String = flow_example // kotlin.String | The Recovery Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/recovery?flow=abcde`).
            //val updateRecoveryFlowBody : UpdateRecoveryFlowBody =  // UpdateRecoveryFlowBody | 
            //val token : kotlin.String = token_example // kotlin.String | Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : RecoveryFlow = apiInstance.updateRecoveryFlow(flow, updateRecoveryFlowBody, token, cookie)
            //result shouldBe ("TODO")
        }

        // to test updateRegistrationFlow
        should("test updateRegistrationFlow") {
            // uncomment below to test updateRegistrationFlow
            //val flow : kotlin.String = flow_example // kotlin.String | The Registration Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/registration?flow=abcde`).
            //val updateRegistrationFlowBody : UpdateRegistrationFlowBody =  // UpdateRegistrationFlowBody | 
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : SuccessfulNativeRegistration = apiInstance.updateRegistrationFlow(flow, updateRegistrationFlowBody, cookie)
            //result shouldBe ("TODO")
        }

        // to test updateSettingsFlow
        should("test updateSettingsFlow") {
            // uncomment below to test updateSettingsFlow
            //val flow : kotlin.String = flow_example // kotlin.String | The Settings Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/settings?flow=abcde`).
            //val updateSettingsFlowBody : UpdateSettingsFlowBody =  // UpdateSettingsFlowBody | 
            //val xSessionToken : kotlin.String = xSessionToken_example // kotlin.String | The Session Token of the Identity performing the settings flow.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : SettingsFlow = apiInstance.updateSettingsFlow(flow, updateSettingsFlowBody, xSessionToken, cookie)
            //result shouldBe ("TODO")
        }

        // to test updateVerificationFlow
        should("test updateVerificationFlow") {
            // uncomment below to test updateVerificationFlow
            //val flow : kotlin.String = flow_example // kotlin.String | The Verification Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/verification?flow=abcde`).
            //val updateVerificationFlowBody : UpdateVerificationFlowBody =  // UpdateVerificationFlowBody | 
            //val token : kotlin.String = token_example // kotlin.String | Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
            //val cookie : kotlin.String = cookie_example // kotlin.String | HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
            //val result : VerificationFlow = apiInstance.updateVerificationFlow(flow, updateVerificationFlowBody, token, cookie)
            //result shouldBe ("TODO")
        }

    }
}
