/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentRequest
import sh.ory.client-kotlin-multiplatform.models.OAuth2Client
import sh.ory.client-kotlin-multiplatform.models.OAuth2ConsentRequestOpenIDConnectContext

class OAuth2ConsentRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OAuth2ConsentRequest
        //val modelInstance = OAuth2ConsentRequest()

        // to test the property `challenge` - ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
        should("test challenge") {
            // uncomment below to test the property
            //modelInstance.challenge shouldBe ("TODO")
        }

        // to test the property `acr` - ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
        should("test acr") {
            // uncomment below to test the property
            //modelInstance.acr shouldBe ("TODO")
        }

        // to test the property `amr`
        should("test amr") {
            // uncomment below to test the property
            //modelInstance.amr shouldBe ("TODO")
        }

        // to test the property `client`
        should("test client") {
            // uncomment below to test the property
            //modelInstance.client shouldBe ("TODO")
        }

        // to test the property `context`
        should("test context") {
            // uncomment below to test the property
            //modelInstance.context shouldBe ("TODO")
        }

        // to test the property `loginChallenge` - LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app.
        should("test loginChallenge") {
            // uncomment below to test the property
            //modelInstance.loginChallenge shouldBe ("TODO")
        }

        // to test the property `loginSessionId` - LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user.
        should("test loginSessionId") {
            // uncomment below to test the property
            //modelInstance.loginSessionId shouldBe ("TODO")
        }

        // to test the property `oidcContext`
        should("test oidcContext") {
            // uncomment below to test the property
            //modelInstance.oidcContext shouldBe ("TODO")
        }

        // to test the property `requestUrl` - RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
        should("test requestUrl") {
            // uncomment below to test the property
            //modelInstance.requestUrl shouldBe ("TODO")
        }

        // to test the property `requestedAccessTokenAudience`
        should("test requestedAccessTokenAudience") {
            // uncomment below to test the property
            //modelInstance.requestedAccessTokenAudience shouldBe ("TODO")
        }

        // to test the property `requestedScope`
        should("test requestedScope") {
            // uncomment below to test the property
            //modelInstance.requestedScope shouldBe ("TODO")
        }

        // to test the property `skip` - Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
        should("test skip") {
            // uncomment below to test the property
            //modelInstance.skip shouldBe ("TODO")
        }

        // to test the property `subject` - Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
        should("test subject") {
            // uncomment below to test the property
            //modelInstance.subject shouldBe ("TODO")
        }

    }
}
