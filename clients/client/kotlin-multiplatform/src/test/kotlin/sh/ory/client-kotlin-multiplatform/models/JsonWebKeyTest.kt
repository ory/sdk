/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.JsonWebKey

class JsonWebKeyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of JsonWebKey
        //val modelInstance = JsonWebKey()

        // to test the property `alg` - The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
        should("test alg") {
            // uncomment below to test the property
            //modelInstance.alg shouldBe ("TODO")
        }

        // to test the property `kid` - The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
        should("test kid") {
            // uncomment below to test the property
            //modelInstance.kid shouldBe ("TODO")
        }

        // to test the property `kty` - The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
        should("test kty") {
            // uncomment below to test the property
            //modelInstance.kty shouldBe ("TODO")
        }

        // to test the property `use` - Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
        should("test use") {
            // uncomment below to test the property
            //modelInstance.use shouldBe ("TODO")
        }

        // to test the property `crv`
        should("test crv") {
            // uncomment below to test the property
            //modelInstance.crv shouldBe ("TODO")
        }

        // to test the property `d`
        should("test d") {
            // uncomment below to test the property
            //modelInstance.d shouldBe ("TODO")
        }

        // to test the property `dp`
        should("test dp") {
            // uncomment below to test the property
            //modelInstance.dp shouldBe ("TODO")
        }

        // to test the property `dq`
        should("test dq") {
            // uncomment below to test the property
            //modelInstance.dq shouldBe ("TODO")
        }

        // to test the property `e`
        should("test e") {
            // uncomment below to test the property
            //modelInstance.e shouldBe ("TODO")
        }

        // to test the property `k`
        should("test k") {
            // uncomment below to test the property
            //modelInstance.k shouldBe ("TODO")
        }

        // to test the property `n`
        should("test n") {
            // uncomment below to test the property
            //modelInstance.n shouldBe ("TODO")
        }

        // to test the property `p`
        should("test p") {
            // uncomment below to test the property
            //modelInstance.p shouldBe ("TODO")
        }

        // to test the property `q`
        should("test q") {
            // uncomment below to test the property
            //modelInstance.q shouldBe ("TODO")
        }

        // to test the property `qi`
        should("test qi") {
            // uncomment below to test the property
            //modelInstance.qi shouldBe ("TODO")
        }

        // to test the property `x`
        should("test x") {
            // uncomment below to test the property
            //modelInstance.x shouldBe ("TODO")
        }

        // to test the property `x5c` - The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
        should("test x5c") {
            // uncomment below to test the property
            //modelInstance.x5c shouldBe ("TODO")
        }

        // to test the property `y`
        should("test y") {
            // uncomment below to test the property
            //modelInstance.y shouldBe ("TODO")
        }

    }
}
