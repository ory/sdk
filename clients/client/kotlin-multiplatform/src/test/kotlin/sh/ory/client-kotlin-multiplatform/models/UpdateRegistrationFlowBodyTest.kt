/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowBody
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithCodeMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithOidcMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithPasskeyMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithPasswordMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithProfileMethod
import sh.ory.client-kotlin-multiplatform.models.UpdateRegistrationFlowWithWebAuthnMethod

class UpdateRegistrationFlowBodyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UpdateRegistrationFlowBody
        //val modelInstance = UpdateRegistrationFlowBody()

        // to test the property `method` - Method  Should be set to profile when trying to update a profile.
        should("test method") {
            // uncomment below to test the property
            //modelInstance.method shouldBe ("TODO")
        }

        // to test the property `password` - Password to sign the user up with
        should("test password") {
            // uncomment below to test the property
            //modelInstance.password shouldBe ("TODO")
        }

        // to test the property `traits` - Traits  The identity's traits.
        should("test traits") {
            // uncomment below to test the property
            //modelInstance.traits shouldBe ("TODO")
        }

        // to test the property `provider` - The provider to register with
        should("test provider") {
            // uncomment below to test the property
            //modelInstance.provider shouldBe ("TODO")
        }

        // to test the property `csrfToken` - The Anti-CSRF Token  This token is only required when performing browser flows.
        should("test csrfToken") {
            // uncomment below to test the property
            //modelInstance.csrfToken shouldBe ("TODO")
        }

        // to test the property `transientPayload` - Transient data to pass along to any webhooks
        should("test transientPayload") {
            // uncomment below to test the property
            //modelInstance.transientPayload shouldBe ("TODO")
        }

        // to test the property `idToken` - IDToken is an optional id token provided by an OIDC provider  If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate the OIDC credentials of the identity. If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.  Supported providers are Apple Google
        should("test idToken") {
            // uncomment below to test the property
            //modelInstance.idToken shouldBe ("TODO")
        }

        // to test the property `idTokenNonce` - IDTokenNonce is the nonce, used when generating the IDToken. If the provider supports nonce validation, the nonce will be validated against this value and is required.
        should("test idTokenNonce") {
            // uncomment below to test the property
            //modelInstance.idTokenNonce shouldBe ("TODO")
        }

        // to test the property `upstreamParameters` - UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
        should("test upstreamParameters") {
            // uncomment below to test the property
            //modelInstance.upstreamParameters shouldBe ("TODO")
        }

        // to test the property `webauthnRegister` - Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        should("test webauthnRegister") {
            // uncomment below to test the property
            //modelInstance.webauthnRegister shouldBe ("TODO")
        }

        // to test the property `webauthnRegisterDisplayname` - Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
        should("test webauthnRegisterDisplayname") {
            // uncomment below to test the property
            //modelInstance.webauthnRegisterDisplayname shouldBe ("TODO")
        }

        // to test the property `code` - The OTP Code sent to the user
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `resend` - Resend restarts the flow with a new code
        should("test resend") {
            // uncomment below to test the property
            //modelInstance.resend shouldBe ("TODO")
        }

        // to test the property `passkeyRegister` - Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        should("test passkeyRegister") {
            // uncomment below to test the property
            //modelInstance.passkeyRegister shouldBe ("TODO")
        }

        // to test the property `screen` - Screen requests navigation to a previous screen.  This must be set to credential-selection to go back to the credential selection screen. credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential previous RegistrationScreenPrevious
        should("test screen") {
            // uncomment below to test the property
            //modelInstance.screen shouldBe ("TODO")
        }

    }
}
