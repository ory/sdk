/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.models.NormalizedProjectRevisionThirdPartyProvider

class NormalizedProjectRevisionThirdPartyProviderTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of NormalizedProjectRevisionThirdPartyProvider
        //val modelInstance = NormalizedProjectRevisionThirdPartyProvider()

        // to test the property `additionalIdTokenAudiences`
        should("test additionalIdTokenAudiences") {
            // uncomment below to test the property
            //modelInstance.additionalIdTokenAudiences shouldBe ("TODO")
        }

        // to test the property `applePrivateKey`
        should("test applePrivateKey") {
            // uncomment below to test the property
            //modelInstance.applePrivateKey shouldBe ("TODO")
        }

        // to test the property `applePrivateKeyId` - Apple Private Key Identifier  Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret
        should("test applePrivateKeyId") {
            // uncomment below to test the property
            //modelInstance.applePrivateKeyId shouldBe ("TODO")
        }

        // to test the property `appleTeamId` - Apple Developer Team ID  Apple Developer Team ID needed for generating a JWT token for client secret
        should("test appleTeamId") {
            // uncomment below to test the property
            //modelInstance.appleTeamId shouldBe ("TODO")
        }

        // to test the property `authUrl` - AuthURL is the authorize url, typically something like: https://example.org/oauth2/auth Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
        should("test authUrl") {
            // uncomment below to test the property
            //modelInstance.authUrl shouldBe ("TODO")
        }

        // to test the property `azureTenant` - Tenant is the Azure AD Tenant to use for authentication, and must be set when `provider` is set to `microsoft`.  Can be either `common`, `organizations`, `consumers` for a multitenant application or a specific tenant like `8eaef023-2b34-4da1-9baa-8bc8c9d6a490` or `contoso.onmicrosoft.com`.
        should("test azureTenant") {
            // uncomment below to test the property
            //modelInstance.azureTenant shouldBe ("TODO")
        }

        // to test the property `claimsSource`
        should("test claimsSource") {
            // uncomment below to test the property
            //modelInstance.claimsSource shouldBe ("TODO")
        }

        // to test the property `clientId` - ClientID is the application's Client ID.
        should("test clientId") {
            // uncomment below to test the property
            //modelInstance.clientId shouldBe ("TODO")
        }

        // to test the property `clientSecret`
        should("test clientSecret") {
            // uncomment below to test the property
            //modelInstance.clientSecret shouldBe ("TODO")
        }

        // to test the property `createdAt` - The Project's Revision Creation Date
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `issuerUrl` - IssuerURL is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`. If set, neither `auth_url` nor `token_url` are required.
        should("test issuerUrl") {
            // uncomment below to test the property
            //modelInstance.issuerUrl shouldBe ("TODO")
        }

        // to test the property `label` - Label represents an optional label which can be used in the UI generation.
        should("test label") {
            // uncomment below to test the property
            //modelInstance.label shouldBe ("TODO")
        }

        // to test the property `mapperUrl` - Mapper specifies the JSONNet code snippet which uses the OpenID Connect Provider's data (e.g. GitHub or Google profile information) to hydrate the identity's data.
        should("test mapperUrl") {
            // uncomment below to test the property
            //modelInstance.mapperUrl shouldBe ("TODO")
        }

        // to test the property `organizationId`
        should("test organizationId") {
            // uncomment below to test the property
            //modelInstance.organizationId shouldBe ("TODO")
        }

        // to test the property `pkce` - PKCE controls if the OpenID Connect OAuth2 flow should use PKCE (Proof Key for Code Exchange). Possible values are: `auto` (default), `never`, `force`. `auto`: PKCE is used if the provider supports it. Requires setting `issuer_url`. `never`: Disable PKCE entirely for this provider, even if the provider advertises support for it. `force`: Always use PKCE, even if the provider does not advertise support for it. OAuth2 flows will fail if the provider does not support PKCE. IMPORTANT: If you set this to `force`, you must whitelist a different return URL for your OAuth2 client in the provider's configuration. Instead of <base-url>/self-service/methods/oidc/callback/<provider>, you must use <base-url>/self-service/methods/oidc/callback (Note the missing <provider> path segment and no trailing slash).
        should("test pkce") {
            // uncomment below to test the property
            //modelInstance.pkce shouldBe ("TODO")
        }

        // to test the property `projectRevisionId` - The Revision's ID this schema belongs to
        should("test projectRevisionId") {
            // uncomment below to test the property
            //modelInstance.projectRevisionId shouldBe ("TODO")
        }

        // to test the property `provider` - Provider is either \"generic\" for a generic OAuth 2.0 / OpenID Connect Provider or one of: generic google github gitlab microsoft discord slack facebook vk yandex apple
        should("test provider") {
            // uncomment below to test the property
            //modelInstance.provider shouldBe ("TODO")
        }

        // to test the property `providerId` - ID is the provider's ID
        should("test providerId") {
            // uncomment below to test the property
            //modelInstance.providerId shouldBe ("TODO")
        }

        // to test the property `requestedClaims`
        should("test requestedClaims") {
            // uncomment below to test the property
            //modelInstance.requestedClaims shouldBe ("TODO")
        }

        // to test the property `scope`
        should("test scope") {
            // uncomment below to test the property
            //modelInstance.scope shouldBe ("TODO")
        }

        // to test the property `state` - State indicates the state of the provider  Only providers with state `enabled` will be used for authentication enabled ThirdPartyProviderStateEnabled disabled ThirdPartyProviderStateDisabled
        should("test state") {
            // uncomment below to test the property
            //modelInstance.state shouldBe ("TODO")
        }

        // to test the property `subjectSource`
        should("test subjectSource") {
            // uncomment below to test the property
            //modelInstance.subjectSource shouldBe ("TODO")
        }

        // to test the property `tokenUrl` - TokenURL is the token url, typically something like: https://example.org/oauth2/token  Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
        should("test tokenUrl") {
            // uncomment below to test the property
            //modelInstance.tokenUrl shouldBe ("TODO")
        }

        // to test the property `updatedAt` - Last Time Project's Revision was Updated
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

    }
}
