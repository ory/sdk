/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.client-kotlin-multiplatform.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import sh.ory.client-kotlin-multiplatform.apis.PermissionApi
import sh.ory.client-kotlin-multiplatform.models.BatchCheckPermissionBody
import sh.ory.client-kotlin-multiplatform.models.BatchCheckPermissionResult
import sh.ory.client-kotlin-multiplatform.models.CheckPermissionResult
import sh.ory.client-kotlin-multiplatform.models.ErrorGeneric
import sh.ory.client-kotlin-multiplatform.models.ExpandedPermissionTree
import sh.ory.client-kotlin-multiplatform.models.PostCheckPermissionBody
import sh.ory.client-kotlin-multiplatform.models.PostCheckPermissionOrErrorBody

class PermissionApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PermissionApi
        //val apiInstance = PermissionApi()

        // to test batchCheckPermission
        should("test batchCheckPermission") {
            // uncomment below to test batchCheckPermission
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val batchCheckPermissionBody : BatchCheckPermissionBody =  // BatchCheckPermissionBody | 
            //val result : BatchCheckPermissionResult = apiInstance.batchCheckPermission(maxDepth, batchCheckPermissionBody)
            //result shouldBe ("TODO")
        }

        // to test checkPermission
        should("test checkPermission") {
            // uncomment below to test checkPermission
            //val namespace : kotlin.String = namespace_example // kotlin.String | Namespace of the Relationship
            //val `object` : kotlin.String = `object`_example // kotlin.String | Object of the Relationship
            //val relation : kotlin.String = relation_example // kotlin.String | Relation of the Relationship
            //val subjectId : kotlin.String = subjectId_example // kotlin.String | SubjectID of the Relationship
            //val subjectSetNamespace : kotlin.String = subjectSetNamespace_example // kotlin.String | Namespace of the Subject Set
            //val subjectSetObject : kotlin.String = subjectSetObject_example // kotlin.String | Object of the Subject Set
            //val subjectSetRelation : kotlin.String = subjectSetRelation_example // kotlin.String | Relation of the Subject Set
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val result : CheckPermissionResult = apiInstance.checkPermission(namespace, `object`, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth)
            //result shouldBe ("TODO")
        }

        // to test checkPermissionOrError
        should("test checkPermissionOrError") {
            // uncomment below to test checkPermissionOrError
            //val namespace : kotlin.String = namespace_example // kotlin.String | Namespace of the Relationship
            //val `object` : kotlin.String = `object`_example // kotlin.String | Object of the Relationship
            //val relation : kotlin.String = relation_example // kotlin.String | Relation of the Relationship
            //val subjectId : kotlin.String = subjectId_example // kotlin.String | SubjectID of the Relationship
            //val subjectSetNamespace : kotlin.String = subjectSetNamespace_example // kotlin.String | Namespace of the Subject Set
            //val subjectSetObject : kotlin.String = subjectSetObject_example // kotlin.String | Object of the Subject Set
            //val subjectSetRelation : kotlin.String = subjectSetRelation_example // kotlin.String | Relation of the Subject Set
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val result : CheckPermissionResult = apiInstance.checkPermissionOrError(namespace, `object`, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth)
            //result shouldBe ("TODO")
        }

        // to test expandPermissions
        should("test expandPermissions") {
            // uncomment below to test expandPermissions
            //val namespace : kotlin.String = namespace_example // kotlin.String | Namespace of the Subject Set
            //val `object` : kotlin.String = `object`_example // kotlin.String | Object of the Subject Set
            //val relation : kotlin.String = relation_example // kotlin.String | Relation of the Subject Set
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val result : ExpandedPermissionTree = apiInstance.expandPermissions(namespace, `object`, relation, maxDepth)
            //result shouldBe ("TODO")
        }

        // to test postCheckPermission
        should("test postCheckPermission") {
            // uncomment below to test postCheckPermission
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val postCheckPermissionBody : PostCheckPermissionBody =  // PostCheckPermissionBody | 
            //val result : CheckPermissionResult = apiInstance.postCheckPermission(maxDepth, postCheckPermissionBody)
            //result shouldBe ("TODO")
        }

        // to test postCheckPermissionOrError
        should("test postCheckPermissionOrError") {
            // uncomment below to test postCheckPermissionOrError
            //val maxDepth : kotlin.Long = 789 // kotlin.Long | 
            //val postCheckPermissionOrErrorBody : PostCheckPermissionOrErrorBody =  // PostCheckPermissionOrErrorBody | 
            //val result : CheckPermissionResult = apiInstance.postCheckPermissionOrError(maxDepth, postCheckPermissionOrErrorBody)
            //result shouldBe ("TODO")
        }

    }
}
