# coding: utf-8

"""
    Ory APIs

    Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

    The version of the OpenAPI document: v1.12.1
    Contact: support@ory.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ory_client.models.generic_usage import GenericUsage
from typing import Optional, Set
from typing_extensions import Self

class PlanDetails(BaseModel):
    """
    PlanDetails
    """ # noqa: E501
    base_fee_monthly: StrictInt = Field(description="BaseFeeMonthly is the monthly base fee for the plan.")
    base_fee_yearly: StrictInt = Field(description="BaseFeeYearly is the yearly base fee for the plan.")
    custom: StrictBool = Field(description="Custom is true if the plan is custom. This means it will be hidden from the pricing page.")
    description: StrictStr = Field(description="Description is the description of the plan.")
    features: Dict[str, GenericUsage]
    latest: Optional[StrictBool] = Field(default=None, description="Latest is true if the plan is the latest version of a plan and should be available for self-service usage.")
    name: StrictStr = Field(description="Name is the name of the plan.")
    version: StrictInt = Field(description="Version is the version of the plan. The combination of `name@version` must be unique.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["base_fee_monthly", "base_fee_yearly", "custom", "description", "features", "latest", "name", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in features (dict)
        _field_dict = {}
        if self.features:
            for _key in self.features:
                if self.features[_key]:
                    _field_dict[_key] = self.features[_key].to_dict()
            _dict['features'] = _field_dict
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_fee_monthly": obj.get("base_fee_monthly"),
            "base_fee_yearly": obj.get("base_fee_yearly"),
            "custom": obj.get("custom"),
            "description": obj.get("description"),
            "features": dict(
                (_k, GenericUsage.from_dict(_v))
                for _k, _v in obj["features"].items()
            )
            if obj.get("features") is not None
            else None,
            "latest": obj.get("latest"),
            "name": obj.get("name"),
            "version": obj.get("version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


