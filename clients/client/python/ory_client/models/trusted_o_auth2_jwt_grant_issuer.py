# coding: utf-8

"""
    Ory APIs

    Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

    The version of the OpenAPI document: v1.12.1
    Contact: support@ory.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ory_client.models.trusted_o_auth2_jwt_grant_json_web_key import TrustedOAuth2JwtGrantJsonWebKey
from typing import Optional, Set
from typing_extensions import Self

class TrustedOAuth2JwtGrantIssuer(BaseModel):
    """
    OAuth2 JWT Bearer Grant Type Issuer Trust Relationship
    """ # noqa: E501
    allow_any_subject: Optional[StrictBool] = Field(default=None, description="The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.")
    created_at: Optional[datetime] = Field(default=None, description="The \"created_at\" indicates, when grant was created.")
    expires_at: Optional[datetime] = Field(default=None, description="The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".")
    id: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = Field(default=None, description="The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).")
    public_key: Optional[TrustedOAuth2JwtGrantJsonWebKey] = None
    scope: Optional[List[StrictStr]] = Field(default=None, description="The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])")
    subject: Optional[StrictStr] = Field(default=None, description="The \"subject\" identifies the principal that is the subject of the JWT.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["allow_any_subject", "created_at", "expires_at", "id", "issuer", "public_key", "scope", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrustedOAuth2JwtGrantIssuer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of public_key
        if self.public_key:
            _dict['public_key'] = self.public_key.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrustedOAuth2JwtGrantIssuer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_any_subject": obj.get("allow_any_subject"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "issuer": obj.get("issuer"),
            "public_key": TrustedOAuth2JwtGrantJsonWebKey.from_dict(obj["public_key"]) if obj.get("public_key") is not None else None,
            "scope": obj.get("scope"),
            "subject": obj.get("subject")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


