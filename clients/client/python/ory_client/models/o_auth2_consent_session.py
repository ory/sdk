# coding: utf-8

"""
    Ory APIs

    Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

    The version of the OpenAPI document: v1.12.1
    Contact: support@ory.sh
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ory_client.models.accept_o_auth2_consent_request_session import AcceptOAuth2ConsentRequestSession
from ory_client.models.o_auth2_consent_request import OAuth2ConsentRequest
from ory_client.models.o_auth2_consent_session_expires_at import OAuth2ConsentSessionExpiresAt
from typing import Optional, Set
from typing_extensions import Self

class OAuth2ConsentSession(BaseModel):
    """
    A completed OAuth 2.0 Consent Session.
    """ # noqa: E501
    consent_request: Optional[OAuth2ConsentRequest] = None
    context: Optional[Dict[str, Any]] = None
    expires_at: Optional[OAuth2ConsentSessionExpiresAt] = None
    grant_access_token_audience: Optional[List[StrictStr]] = None
    grant_scope: Optional[List[StrictStr]] = None
    handled_at: Optional[datetime] = None
    remember: Optional[StrictBool] = Field(default=None, description="Remember Consent  Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.")
    remember_for: Optional[StrictInt] = Field(default=None, description="Remember Consent For  RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.")
    session: Optional[AcceptOAuth2ConsentRequestSession] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["consent_request", "context", "expires_at", "grant_access_token_audience", "grant_scope", "handled_at", "remember", "remember_for", "session"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OAuth2ConsentSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consent_request
        if self.consent_request:
            _dict['consent_request'] = self.consent_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expires_at
        if self.expires_at:
            _dict['expires_at'] = self.expires_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OAuth2ConsentSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consent_request": OAuth2ConsentRequest.from_dict(obj["consent_request"]) if obj.get("consent_request") is not None else None,
            "context": obj.get("context"),
            "expires_at": OAuth2ConsentSessionExpiresAt.from_dict(obj["expires_at"]) if obj.get("expires_at") is not None else None,
            "grant_access_token_audience": obj.get("grant_access_token_audience"),
            "grant_scope": obj.get("grant_scope"),
            "handled_at": obj.get("handled_at"),
            "remember": obj.get("remember"),
            "remember_for": obj.get("remember_for"),
            "session": AcceptOAuth2ConsentRequestSession.from_dict(obj["session"]) if obj.get("session") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


