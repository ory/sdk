# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Client.Api.V0alpha0 do
  @moduledoc """
  API calls for all endpoints tagged `V0alpha0`.
  """

  alias Client.Connection
  import Client.RequestBuilder


  @doc """
  Create a Project
  Creates a new project.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (ProjectRevision): 
  ## Returns

  {:ok, Client.Model.Project.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_project(Tesla.Env.client, keyword()) :: {:ok, Client.Model.Project.t} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def create_project(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/backoffice/public/projects")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %Client.Model.Project{}},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Returns Your Active Ory Cloud Project
  Use this API to get your active project in the Ory Cloud Console UI.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Client.Model.ActiveProject.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_active_project(Tesla.Env.client, keyword()) :: {:ok, Client.Model.GenericError.t} | {:ok, Client.Model.ActiveProject.t} | {:error, Tesla.Env.t}
  def get_active_project(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/backoffice/public/console/projects/active")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Client.Model.ActiveProject{}},
      { 401, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Get a Project
  Get a projects you have access to by its ID.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Client.Model.Project.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_project(Tesla.Env.client, String.t, keyword()) :: {:ok, Client.Model.Project.t} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def get_project(connection, project_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/backoffice/public/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Client.Model.Project{}},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Get all members associated with this project.
  This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%CloudAccount{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_project_members(Tesla.Env.client, String.t, keyword()) :: {:ok, Client.Model.GenericError.t} | {:ok, list(Client.Model.CloudAccount.t)} | {:error, Tesla.Env.t}
  def get_project_members(connection, project_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/backoffice/public/projects/#{project_id}/members")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Client.Model.CloudAccount{}]},
      { 401, %Client.Model.GenericError{}},
      { 406, %Client.Model.GenericError{}},
      { 500, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  List All Projects
  Lists all projects you have access to.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%Project{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_projects(Tesla.Env.client, keyword()) :: {:ok, list(Client.Model.Project.t)} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def list_projects(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/backoffice/public/projects")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Client.Model.Project{}]},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Irrecoverably Purge a Project
  !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec purge_project(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def purge_project(connection, project_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/backoffice/public/projects/#{project_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Remove a member associated with this project. This also sets their invite status to `REMOVED`.
  This endpoint requires the user to be a member of the project with the role `OWNER`.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - member_id (String.t): Member ID
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec remove_project_member(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def remove_project_member(connection, project_id, member_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/backoffice/public/projects/#{project_id}/members/#{member_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, %Client.Model.GenericError{}},
      { 401, %Client.Model.GenericError{}},
      { 406, %Client.Model.GenericError{}},
      { 500, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Sets Your Active Project
  Use this API to set your active project in the Ory Cloud Console UI.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec set_active_project(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def set_active_project(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/backoffice/public/console/projects/active")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Update a Project
  Creates a new configuration revision for a project.

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - opts (KeywordList): [optional] Optional parameters
    - :body (ProjectRevision): 
  ## Returns

  {:ok, Client.Model.Project.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_project(Tesla.Env.client, String.t, keyword()) :: {:ok, Client.Model.Project.t} | {:ok, Client.Model.GenericError.t} | {:error, Tesla.Env.t}
  def update_project(connection, project_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/backoffice/public/projects/#{project_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Client.Model.Project{}},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end

  @doc """
  Update an Ory Cloud Project Configuration
  This endpoints allows you to update the Ory Cloud Project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to Ory Cloud, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service's configuration will completely override your current configuration for that service!

  ## Parameters

  - connection (Client.Connection): Connection to server
  - project_id (String.t): Project ID  The project's ID.
  - opts (KeywordList): [optional] Optional parameters
    - :body (UpdateProjectConfigConfig): 
  ## Returns

  {:ok, Client.Model.SuccessfulProjectConfigUpdate.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_project_config(Tesla.Env.client, String.t, keyword()) :: {:ok, Client.Model.GenericError.t} | {:ok, Client.Model.SuccessfulProjectConfigUpdate.t} | {:error, Tesla.Env.t}
  def update_project_config(connection, project_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/backoffice/public/projects/#{project_id}/configs")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Client.Model.SuccessfulProjectConfigUpdate{}},
      { 400, %Client.Model.GenericError{}},
      { 401, %Client.Model.GenericError{}},
      { 403, %Client.Model.GenericError{}},
      { 404, %Client.Model.GenericError{}},
      { :default, %Client.Model.GenericError{}}
    ])
  end
end
