/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.15.0
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the GenericUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericUsage{}

// GenericUsage struct for GenericUsage
type GenericUsage struct {
	AdditionalPrice Money `json:"additional_price"`
	// IncludedUsage is the number of included items.
	IncludedUsage int64 `json:"included_usage"`
	AdditionalProperties map[string]interface{}
}

type _GenericUsage GenericUsage

// NewGenericUsage instantiates a new GenericUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericUsage(additionalPrice Money, includedUsage int64) *GenericUsage {
	this := GenericUsage{}
	this.AdditionalPrice = additionalPrice
	this.IncludedUsage = includedUsage
	return &this
}

// NewGenericUsageWithDefaults instantiates a new GenericUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericUsageWithDefaults() *GenericUsage {
	this := GenericUsage{}
	return &this
}

// GetAdditionalPrice returns the AdditionalPrice field value
func (o *GenericUsage) GetAdditionalPrice() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.AdditionalPrice
}

// GetAdditionalPriceOk returns a tuple with the AdditionalPrice field value
// and a boolean to check if the value has been set.
func (o *GenericUsage) GetAdditionalPriceOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalPrice, true
}

// SetAdditionalPrice sets field value
func (o *GenericUsage) SetAdditionalPrice(v Money) {
	o.AdditionalPrice = v
}

// GetIncludedUsage returns the IncludedUsage field value
func (o *GenericUsage) GetIncludedUsage() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IncludedUsage
}

// GetIncludedUsageOk returns a tuple with the IncludedUsage field value
// and a boolean to check if the value has been set.
func (o *GenericUsage) GetIncludedUsageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludedUsage, true
}

// SetIncludedUsage sets field value
func (o *GenericUsage) SetIncludedUsage(v int64) {
	o.IncludedUsage = v
}

func (o GenericUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additional_price"] = o.AdditionalPrice
	toSerialize["included_usage"] = o.IncludedUsage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenericUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"additional_price",
		"included_usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenericUsage := _GenericUsage{}

	err = json.Unmarshal(data, &varGenericUsage)

	if err != nil {
		return err
	}

	*o = GenericUsage(varGenericUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additional_price")
		delete(additionalProperties, "included_usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericUsage struct {
	value *GenericUsage
	isSet bool
}

func (v NullableGenericUsage) Get() *GenericUsage {
	return v.value
}

func (v *NullableGenericUsage) Set(val *GenericUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericUsage(val *GenericUsage) *NullableGenericUsage {
	return &NullableGenericUsage{value: val, isSet: true}
}

func (v NullableGenericUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


