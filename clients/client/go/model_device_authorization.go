/*
Ory APIs

# Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 

API version: v1.21.3
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DeviceAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthorization{}

// DeviceAuthorization # Ory's OAuth 2.0 Device Authorization API
type DeviceAuthorization struct {
	// The device verification code.
	DeviceCode *string `json:"device_code,omitempty"`
	// The lifetime in seconds of the \"device_code\" and \"user_code\".
	ExpiresIn *int64 `json:"expires_in,omitempty"`
	// The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint.  If no value is provided, clients MUST use 5 as the default.
	Interval *int64 `json:"interval,omitempty"`
	// The end-user verification code.
	UserCode *string `json:"user_code,omitempty"`
	// The end-user verification URI on the authorization server.  The URI should be short and easy to remember as end users will be asked to manually type it into their user agent.
	VerificationUri *string `json:"verification_uri,omitempty"`
	// A verification URI that includes the \"user_code\" (or other information with the same function as the \"user_code\"), which is designed for non-textual transmission.
	VerificationUriComplete *string `json:"verification_uri_complete,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceAuthorization DeviceAuthorization

// NewDeviceAuthorization instantiates a new DeviceAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthorization() *DeviceAuthorization {
	this := DeviceAuthorization{}
	return &this
}

// NewDeviceAuthorizationWithDefaults instantiates a new DeviceAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthorizationWithDefaults() *DeviceAuthorization {
	this := DeviceAuthorization{}
	return &this
}

// GetDeviceCode returns the DeviceCode field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetDeviceCode() string {
	if o == nil || IsNil(o.DeviceCode) {
		var ret string
		return ret
	}
	return *o.DeviceCode
}

// GetDeviceCodeOk returns a tuple with the DeviceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetDeviceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceCode) {
		return nil, false
	}
	return o.DeviceCode, true
}

// HasDeviceCode returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasDeviceCode() bool {
	if o != nil && !IsNil(o.DeviceCode) {
		return true
	}

	return false
}

// SetDeviceCode gets a reference to the given string and assigns it to the DeviceCode field.
func (o *DeviceAuthorization) SetDeviceCode(v string) {
	o.DeviceCode = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetExpiresIn() int64 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int64
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetExpiresInOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int64 and assigns it to the ExpiresIn field.
func (o *DeviceAuthorization) SetExpiresIn(v int64) {
	o.ExpiresIn = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *DeviceAuthorization) SetInterval(v int64) {
	o.Interval = &v
}

// GetUserCode returns the UserCode field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetUserCode() string {
	if o == nil || IsNil(o.UserCode) {
		var ret string
		return ret
	}
	return *o.UserCode
}

// GetUserCodeOk returns a tuple with the UserCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetUserCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UserCode) {
		return nil, false
	}
	return o.UserCode, true
}

// HasUserCode returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasUserCode() bool {
	if o != nil && !IsNil(o.UserCode) {
		return true
	}

	return false
}

// SetUserCode gets a reference to the given string and assigns it to the UserCode field.
func (o *DeviceAuthorization) SetUserCode(v string) {
	o.UserCode = &v
}

// GetVerificationUri returns the VerificationUri field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetVerificationUri() string {
	if o == nil || IsNil(o.VerificationUri) {
		var ret string
		return ret
	}
	return *o.VerificationUri
}

// GetVerificationUriOk returns a tuple with the VerificationUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetVerificationUriOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationUri) {
		return nil, false
	}
	return o.VerificationUri, true
}

// HasVerificationUri returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasVerificationUri() bool {
	if o != nil && !IsNil(o.VerificationUri) {
		return true
	}

	return false
}

// SetVerificationUri gets a reference to the given string and assigns it to the VerificationUri field.
func (o *DeviceAuthorization) SetVerificationUri(v string) {
	o.VerificationUri = &v
}

// GetVerificationUriComplete returns the VerificationUriComplete field value if set, zero value otherwise.
func (o *DeviceAuthorization) GetVerificationUriComplete() string {
	if o == nil || IsNil(o.VerificationUriComplete) {
		var ret string
		return ret
	}
	return *o.VerificationUriComplete
}

// GetVerificationUriCompleteOk returns a tuple with the VerificationUriComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthorization) GetVerificationUriCompleteOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationUriComplete) {
		return nil, false
	}
	return o.VerificationUriComplete, true
}

// HasVerificationUriComplete returns a boolean if a field has been set.
func (o *DeviceAuthorization) HasVerificationUriComplete() bool {
	if o != nil && !IsNil(o.VerificationUriComplete) {
		return true
	}

	return false
}

// SetVerificationUriComplete gets a reference to the given string and assigns it to the VerificationUriComplete field.
func (o *DeviceAuthorization) SetVerificationUriComplete(v string) {
	o.VerificationUriComplete = &v
}

func (o DeviceAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceCode) {
		toSerialize["device_code"] = o.DeviceCode
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.UserCode) {
		toSerialize["user_code"] = o.UserCode
	}
	if !IsNil(o.VerificationUri) {
		toSerialize["verification_uri"] = o.VerificationUri
	}
	if !IsNil(o.VerificationUriComplete) {
		toSerialize["verification_uri_complete"] = o.VerificationUriComplete
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceAuthorization) UnmarshalJSON(data []byte) (err error) {
	varDeviceAuthorization := _DeviceAuthorization{}

	err = json.Unmarshal(data, &varDeviceAuthorization)

	if err != nil {
		return err
	}

	*o = DeviceAuthorization(varDeviceAuthorization)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_code")
		delete(additionalProperties, "expires_in")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "user_code")
		delete(additionalProperties, "verification_uri")
		delete(additionalProperties, "verification_uri_complete")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceAuthorization struct {
	value *DeviceAuthorization
	isSet bool
}

func (v NullableDeviceAuthorization) Get() *DeviceAuthorization {
	return v.value
}

func (v *NullableDeviceAuthorization) Set(val *DeviceAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthorization(val *DeviceAuthorization) *NullableDeviceAuthorization {
	return &NullableDeviceAuthorization{value: val, isSet: true}
}

func (v NullableDeviceAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


