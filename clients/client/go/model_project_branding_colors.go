/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.2.10
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectBrandingColors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBrandingColors{}

// ProjectBrandingColors struct for ProjectBrandingColors
type ProjectBrandingColors struct {
	// AccentDefaultColor is a hex color code used by the Ory Account Experience theme.
	AccentDefaultColor *string `json:"accent_default_color,omitempty"`
	// AccentDisabledColor is a hex color code used by the Ory Account Experience theme.
	AccentDisabledColor *string `json:"accent_disabled_color,omitempty"`
	// AccentEmphasisColor is a hex color code used by the Ory Account Experience theme.
	AccentEmphasisColor *string `json:"accent_emphasis_color,omitempty"`
	// AccentMutedColor is a hex color code used by the Ory Account Experience theme.
	AccentMutedColor *string `json:"accent_muted_color,omitempty"`
	// AccentSubtleColor is a hex color code used by the Ory Account Experience theme.
	AccentSubtleColor *string `json:"accent_subtle_color,omitempty"`
	// BackgroundCanvasColor is a hex color code used by the Ory Account Experience theme.
	BackgroundCanvasColor *string `json:"background_canvas_color,omitempty"`
	// BackgroundSubtleColor is a hex color code used by the Ory Account Experience theme.
	BackgroundSubtleColor *string `json:"background_subtle_color,omitempty"`
	// BackgroundSurfaceColor is a hex color code used by the Ory Account Experience theme.
	BackgroundSurfaceColor *string `json:"background_surface_color,omitempty"`
	// BorderDefaultColor is a hex color code used by the Ory Account Experience theme.
	BorderDefaultColor *string `json:"border_default_color,omitempty"`
	// ErrorDefaultColor is a hex color code used by the Ory Account Experience theme.
	ErrorDefaultColor *string `json:"error_default_color,omitempty"`
	// ErrorEmphasisColor is a hex color code used by the Ory Account Experience theme.
	ErrorEmphasisColor *string `json:"error_emphasis_color,omitempty"`
	// ErrorMutedColor is a hex color code used by the Ory Account Experience theme.
	ErrorMutedColor *string `json:"error_muted_color,omitempty"`
	// ErrorSubtleColor is a hex color code used by the Ory Account Experience theme.
	ErrorSubtleColor *string `json:"error_subtle_color,omitempty"`
	// ForegroundDefaultColor is a hex color code used by the Ory Account Experience theme.
	ForegroundDefaultColor *string `json:"foreground_default_color,omitempty"`
	// ForegroundDisabledColor is a hex color code used by the Ory Account Experience theme.
	ForegroundDisabledColor *string `json:"foreground_disabled_color,omitempty"`
	// ForegroundMutedColor is a hex color code used by the Ory Account Experience theme.
	ForegroundMutedColor *string `json:"foreground_muted_color,omitempty"`
	// ForegroundOnAccentColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnAccentColor *string `json:"foreground_on_accent_color,omitempty"`
	// ForegroundOnDarkColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnDarkColor *string `json:"foreground_on_dark_color,omitempty"`
	// ForegroundOnDisabledColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnDisabledColor *string `json:"foreground_on_disabled_color,omitempty"`
	// ForegroundSubtleColor is a hex color code used by the Ory Account Experience theme.
	ForegroundSubtleColor *string `json:"foreground_subtle_color,omitempty"`
	// InputBackgroundColor is a hex color code used by the Ory Account Experience theme.
	InputBackgroundColor *string `json:"input_background_color,omitempty"`
	// InputDisabledColor is a hex color code used by the Ory Account Experience theme.
	InputDisabledColor *string `json:"input_disabled_color,omitempty"`
	// InputPlaceholderColor is a hex color code used by the Ory Account Experience theme.
	InputPlaceholderColor *string `json:"input_placeholder_color,omitempty"`
	// InputTextColor is a hex color code used by the Ory Account Experience theme.
	InputTextColor *string `json:"input_text_color,omitempty"`
	// Primary color is an hsla color value used to derive the other colors from for the Ory Account Experience theme.
	PrimaryColor *string `json:"primary_color,omitempty"`
	// Secondary color is a hsla color code used to derive the other colors from for the Ory Account Experience theme.
	SecondaryColor *string `json:"secondary_color,omitempty"`
	// SuccessEmphasisColor is a hex color code used by the Ory Account Experience theme.
	SuccessEmphasisColor *string `json:"success_emphasis_color,omitempty"`
	// TextDefaultColor is a hex color code used by the Ory Account Experience theme.
	TextDefaultColor *string `json:"text_default_color,omitempty"`
	// TextDisabledColor is a hex color code used by the Ory Account Experience theme.
	TextDisabledColor *string `json:"text_disabled_color,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProjectBrandingColors ProjectBrandingColors

// NewProjectBrandingColors instantiates a new ProjectBrandingColors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBrandingColors() *ProjectBrandingColors {
	this := ProjectBrandingColors{}
	return &this
}

// NewProjectBrandingColorsWithDefaults instantiates a new ProjectBrandingColors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBrandingColorsWithDefaults() *ProjectBrandingColors {
	this := ProjectBrandingColors{}
	return &this
}

// GetAccentDefaultColor returns the AccentDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetAccentDefaultColor() string {
	if o == nil || IsNil(o.AccentDefaultColor) {
		var ret string
		return ret
	}
	return *o.AccentDefaultColor
}

// GetAccentDefaultColorOk returns a tuple with the AccentDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetAccentDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentDefaultColor) {
		return nil, false
	}
	return o.AccentDefaultColor, true
}

// HasAccentDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasAccentDefaultColor() bool {
	if o != nil && !IsNil(o.AccentDefaultColor) {
		return true
	}

	return false
}

// SetAccentDefaultColor gets a reference to the given string and assigns it to the AccentDefaultColor field.
func (o *ProjectBrandingColors) SetAccentDefaultColor(v string) {
	o.AccentDefaultColor = &v
}

// GetAccentDisabledColor returns the AccentDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetAccentDisabledColor() string {
	if o == nil || IsNil(o.AccentDisabledColor) {
		var ret string
		return ret
	}
	return *o.AccentDisabledColor
}

// GetAccentDisabledColorOk returns a tuple with the AccentDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetAccentDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentDisabledColor) {
		return nil, false
	}
	return o.AccentDisabledColor, true
}

// HasAccentDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasAccentDisabledColor() bool {
	if o != nil && !IsNil(o.AccentDisabledColor) {
		return true
	}

	return false
}

// SetAccentDisabledColor gets a reference to the given string and assigns it to the AccentDisabledColor field.
func (o *ProjectBrandingColors) SetAccentDisabledColor(v string) {
	o.AccentDisabledColor = &v
}

// GetAccentEmphasisColor returns the AccentEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetAccentEmphasisColor() string {
	if o == nil || IsNil(o.AccentEmphasisColor) {
		var ret string
		return ret
	}
	return *o.AccentEmphasisColor
}

// GetAccentEmphasisColorOk returns a tuple with the AccentEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetAccentEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentEmphasisColor) {
		return nil, false
	}
	return o.AccentEmphasisColor, true
}

// HasAccentEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasAccentEmphasisColor() bool {
	if o != nil && !IsNil(o.AccentEmphasisColor) {
		return true
	}

	return false
}

// SetAccentEmphasisColor gets a reference to the given string and assigns it to the AccentEmphasisColor field.
func (o *ProjectBrandingColors) SetAccentEmphasisColor(v string) {
	o.AccentEmphasisColor = &v
}

// GetAccentMutedColor returns the AccentMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetAccentMutedColor() string {
	if o == nil || IsNil(o.AccentMutedColor) {
		var ret string
		return ret
	}
	return *o.AccentMutedColor
}

// GetAccentMutedColorOk returns a tuple with the AccentMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetAccentMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentMutedColor) {
		return nil, false
	}
	return o.AccentMutedColor, true
}

// HasAccentMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasAccentMutedColor() bool {
	if o != nil && !IsNil(o.AccentMutedColor) {
		return true
	}

	return false
}

// SetAccentMutedColor gets a reference to the given string and assigns it to the AccentMutedColor field.
func (o *ProjectBrandingColors) SetAccentMutedColor(v string) {
	o.AccentMutedColor = &v
}

// GetAccentSubtleColor returns the AccentSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetAccentSubtleColor() string {
	if o == nil || IsNil(o.AccentSubtleColor) {
		var ret string
		return ret
	}
	return *o.AccentSubtleColor
}

// GetAccentSubtleColorOk returns a tuple with the AccentSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetAccentSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentSubtleColor) {
		return nil, false
	}
	return o.AccentSubtleColor, true
}

// HasAccentSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasAccentSubtleColor() bool {
	if o != nil && !IsNil(o.AccentSubtleColor) {
		return true
	}

	return false
}

// SetAccentSubtleColor gets a reference to the given string and assigns it to the AccentSubtleColor field.
func (o *ProjectBrandingColors) SetAccentSubtleColor(v string) {
	o.AccentSubtleColor = &v
}

// GetBackgroundCanvasColor returns the BackgroundCanvasColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetBackgroundCanvasColor() string {
	if o == nil || IsNil(o.BackgroundCanvasColor) {
		var ret string
		return ret
	}
	return *o.BackgroundCanvasColor
}

// GetBackgroundCanvasColorOk returns a tuple with the BackgroundCanvasColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetBackgroundCanvasColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundCanvasColor) {
		return nil, false
	}
	return o.BackgroundCanvasColor, true
}

// HasBackgroundCanvasColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasBackgroundCanvasColor() bool {
	if o != nil && !IsNil(o.BackgroundCanvasColor) {
		return true
	}

	return false
}

// SetBackgroundCanvasColor gets a reference to the given string and assigns it to the BackgroundCanvasColor field.
func (o *ProjectBrandingColors) SetBackgroundCanvasColor(v string) {
	o.BackgroundCanvasColor = &v
}

// GetBackgroundSubtleColor returns the BackgroundSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetBackgroundSubtleColor() string {
	if o == nil || IsNil(o.BackgroundSubtleColor) {
		var ret string
		return ret
	}
	return *o.BackgroundSubtleColor
}

// GetBackgroundSubtleColorOk returns a tuple with the BackgroundSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetBackgroundSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundSubtleColor) {
		return nil, false
	}
	return o.BackgroundSubtleColor, true
}

// HasBackgroundSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasBackgroundSubtleColor() bool {
	if o != nil && !IsNil(o.BackgroundSubtleColor) {
		return true
	}

	return false
}

// SetBackgroundSubtleColor gets a reference to the given string and assigns it to the BackgroundSubtleColor field.
func (o *ProjectBrandingColors) SetBackgroundSubtleColor(v string) {
	o.BackgroundSubtleColor = &v
}

// GetBackgroundSurfaceColor returns the BackgroundSurfaceColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetBackgroundSurfaceColor() string {
	if o == nil || IsNil(o.BackgroundSurfaceColor) {
		var ret string
		return ret
	}
	return *o.BackgroundSurfaceColor
}

// GetBackgroundSurfaceColorOk returns a tuple with the BackgroundSurfaceColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetBackgroundSurfaceColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundSurfaceColor) {
		return nil, false
	}
	return o.BackgroundSurfaceColor, true
}

// HasBackgroundSurfaceColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasBackgroundSurfaceColor() bool {
	if o != nil && !IsNil(o.BackgroundSurfaceColor) {
		return true
	}

	return false
}

// SetBackgroundSurfaceColor gets a reference to the given string and assigns it to the BackgroundSurfaceColor field.
func (o *ProjectBrandingColors) SetBackgroundSurfaceColor(v string) {
	o.BackgroundSurfaceColor = &v
}

// GetBorderDefaultColor returns the BorderDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetBorderDefaultColor() string {
	if o == nil || IsNil(o.BorderDefaultColor) {
		var ret string
		return ret
	}
	return *o.BorderDefaultColor
}

// GetBorderDefaultColorOk returns a tuple with the BorderDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetBorderDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.BorderDefaultColor) {
		return nil, false
	}
	return o.BorderDefaultColor, true
}

// HasBorderDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasBorderDefaultColor() bool {
	if o != nil && !IsNil(o.BorderDefaultColor) {
		return true
	}

	return false
}

// SetBorderDefaultColor gets a reference to the given string and assigns it to the BorderDefaultColor field.
func (o *ProjectBrandingColors) SetBorderDefaultColor(v string) {
	o.BorderDefaultColor = &v
}

// GetErrorDefaultColor returns the ErrorDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetErrorDefaultColor() string {
	if o == nil || IsNil(o.ErrorDefaultColor) {
		var ret string
		return ret
	}
	return *o.ErrorDefaultColor
}

// GetErrorDefaultColorOk returns a tuple with the ErrorDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetErrorDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDefaultColor) {
		return nil, false
	}
	return o.ErrorDefaultColor, true
}

// HasErrorDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasErrorDefaultColor() bool {
	if o != nil && !IsNil(o.ErrorDefaultColor) {
		return true
	}

	return false
}

// SetErrorDefaultColor gets a reference to the given string and assigns it to the ErrorDefaultColor field.
func (o *ProjectBrandingColors) SetErrorDefaultColor(v string) {
	o.ErrorDefaultColor = &v
}

// GetErrorEmphasisColor returns the ErrorEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetErrorEmphasisColor() string {
	if o == nil || IsNil(o.ErrorEmphasisColor) {
		var ret string
		return ret
	}
	return *o.ErrorEmphasisColor
}

// GetErrorEmphasisColorOk returns a tuple with the ErrorEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetErrorEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorEmphasisColor) {
		return nil, false
	}
	return o.ErrorEmphasisColor, true
}

// HasErrorEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasErrorEmphasisColor() bool {
	if o != nil && !IsNil(o.ErrorEmphasisColor) {
		return true
	}

	return false
}

// SetErrorEmphasisColor gets a reference to the given string and assigns it to the ErrorEmphasisColor field.
func (o *ProjectBrandingColors) SetErrorEmphasisColor(v string) {
	o.ErrorEmphasisColor = &v
}

// GetErrorMutedColor returns the ErrorMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetErrorMutedColor() string {
	if o == nil || IsNil(o.ErrorMutedColor) {
		var ret string
		return ret
	}
	return *o.ErrorMutedColor
}

// GetErrorMutedColorOk returns a tuple with the ErrorMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetErrorMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMutedColor) {
		return nil, false
	}
	return o.ErrorMutedColor, true
}

// HasErrorMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasErrorMutedColor() bool {
	if o != nil && !IsNil(o.ErrorMutedColor) {
		return true
	}

	return false
}

// SetErrorMutedColor gets a reference to the given string and assigns it to the ErrorMutedColor field.
func (o *ProjectBrandingColors) SetErrorMutedColor(v string) {
	o.ErrorMutedColor = &v
}

// GetErrorSubtleColor returns the ErrorSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetErrorSubtleColor() string {
	if o == nil || IsNil(o.ErrorSubtleColor) {
		var ret string
		return ret
	}
	return *o.ErrorSubtleColor
}

// GetErrorSubtleColorOk returns a tuple with the ErrorSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetErrorSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorSubtleColor) {
		return nil, false
	}
	return o.ErrorSubtleColor, true
}

// HasErrorSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasErrorSubtleColor() bool {
	if o != nil && !IsNil(o.ErrorSubtleColor) {
		return true
	}

	return false
}

// SetErrorSubtleColor gets a reference to the given string and assigns it to the ErrorSubtleColor field.
func (o *ProjectBrandingColors) SetErrorSubtleColor(v string) {
	o.ErrorSubtleColor = &v
}

// GetForegroundDefaultColor returns the ForegroundDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundDefaultColor() string {
	if o == nil || IsNil(o.ForegroundDefaultColor) {
		var ret string
		return ret
	}
	return *o.ForegroundDefaultColor
}

// GetForegroundDefaultColorOk returns a tuple with the ForegroundDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundDefaultColor) {
		return nil, false
	}
	return o.ForegroundDefaultColor, true
}

// HasForegroundDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundDefaultColor() bool {
	if o != nil && !IsNil(o.ForegroundDefaultColor) {
		return true
	}

	return false
}

// SetForegroundDefaultColor gets a reference to the given string and assigns it to the ForegroundDefaultColor field.
func (o *ProjectBrandingColors) SetForegroundDefaultColor(v string) {
	o.ForegroundDefaultColor = &v
}

// GetForegroundDisabledColor returns the ForegroundDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundDisabledColor() string {
	if o == nil || IsNil(o.ForegroundDisabledColor) {
		var ret string
		return ret
	}
	return *o.ForegroundDisabledColor
}

// GetForegroundDisabledColorOk returns a tuple with the ForegroundDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundDisabledColor) {
		return nil, false
	}
	return o.ForegroundDisabledColor, true
}

// HasForegroundDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundDisabledColor() bool {
	if o != nil && !IsNil(o.ForegroundDisabledColor) {
		return true
	}

	return false
}

// SetForegroundDisabledColor gets a reference to the given string and assigns it to the ForegroundDisabledColor field.
func (o *ProjectBrandingColors) SetForegroundDisabledColor(v string) {
	o.ForegroundDisabledColor = &v
}

// GetForegroundMutedColor returns the ForegroundMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundMutedColor() string {
	if o == nil || IsNil(o.ForegroundMutedColor) {
		var ret string
		return ret
	}
	return *o.ForegroundMutedColor
}

// GetForegroundMutedColorOk returns a tuple with the ForegroundMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundMutedColor) {
		return nil, false
	}
	return o.ForegroundMutedColor, true
}

// HasForegroundMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundMutedColor() bool {
	if o != nil && !IsNil(o.ForegroundMutedColor) {
		return true
	}

	return false
}

// SetForegroundMutedColor gets a reference to the given string and assigns it to the ForegroundMutedColor field.
func (o *ProjectBrandingColors) SetForegroundMutedColor(v string) {
	o.ForegroundMutedColor = &v
}

// GetForegroundOnAccentColor returns the ForegroundOnAccentColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundOnAccentColor() string {
	if o == nil || IsNil(o.ForegroundOnAccentColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnAccentColor
}

// GetForegroundOnAccentColorOk returns a tuple with the ForegroundOnAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundOnAccentColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnAccentColor) {
		return nil, false
	}
	return o.ForegroundOnAccentColor, true
}

// HasForegroundOnAccentColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundOnAccentColor() bool {
	if o != nil && !IsNil(o.ForegroundOnAccentColor) {
		return true
	}

	return false
}

// SetForegroundOnAccentColor gets a reference to the given string and assigns it to the ForegroundOnAccentColor field.
func (o *ProjectBrandingColors) SetForegroundOnAccentColor(v string) {
	o.ForegroundOnAccentColor = &v
}

// GetForegroundOnDarkColor returns the ForegroundOnDarkColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundOnDarkColor() string {
	if o == nil || IsNil(o.ForegroundOnDarkColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnDarkColor
}

// GetForegroundOnDarkColorOk returns a tuple with the ForegroundOnDarkColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundOnDarkColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnDarkColor) {
		return nil, false
	}
	return o.ForegroundOnDarkColor, true
}

// HasForegroundOnDarkColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundOnDarkColor() bool {
	if o != nil && !IsNil(o.ForegroundOnDarkColor) {
		return true
	}

	return false
}

// SetForegroundOnDarkColor gets a reference to the given string and assigns it to the ForegroundOnDarkColor field.
func (o *ProjectBrandingColors) SetForegroundOnDarkColor(v string) {
	o.ForegroundOnDarkColor = &v
}

// GetForegroundOnDisabledColor returns the ForegroundOnDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundOnDisabledColor() string {
	if o == nil || IsNil(o.ForegroundOnDisabledColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnDisabledColor
}

// GetForegroundOnDisabledColorOk returns a tuple with the ForegroundOnDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundOnDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnDisabledColor) {
		return nil, false
	}
	return o.ForegroundOnDisabledColor, true
}

// HasForegroundOnDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundOnDisabledColor() bool {
	if o != nil && !IsNil(o.ForegroundOnDisabledColor) {
		return true
	}

	return false
}

// SetForegroundOnDisabledColor gets a reference to the given string and assigns it to the ForegroundOnDisabledColor field.
func (o *ProjectBrandingColors) SetForegroundOnDisabledColor(v string) {
	o.ForegroundOnDisabledColor = &v
}

// GetForegroundSubtleColor returns the ForegroundSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetForegroundSubtleColor() string {
	if o == nil || IsNil(o.ForegroundSubtleColor) {
		var ret string
		return ret
	}
	return *o.ForegroundSubtleColor
}

// GetForegroundSubtleColorOk returns a tuple with the ForegroundSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetForegroundSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundSubtleColor) {
		return nil, false
	}
	return o.ForegroundSubtleColor, true
}

// HasForegroundSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasForegroundSubtleColor() bool {
	if o != nil && !IsNil(o.ForegroundSubtleColor) {
		return true
	}

	return false
}

// SetForegroundSubtleColor gets a reference to the given string and assigns it to the ForegroundSubtleColor field.
func (o *ProjectBrandingColors) SetForegroundSubtleColor(v string) {
	o.ForegroundSubtleColor = &v
}

// GetInputBackgroundColor returns the InputBackgroundColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetInputBackgroundColor() string {
	if o == nil || IsNil(o.InputBackgroundColor) {
		var ret string
		return ret
	}
	return *o.InputBackgroundColor
}

// GetInputBackgroundColorOk returns a tuple with the InputBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetInputBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputBackgroundColor) {
		return nil, false
	}
	return o.InputBackgroundColor, true
}

// HasInputBackgroundColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasInputBackgroundColor() bool {
	if o != nil && !IsNil(o.InputBackgroundColor) {
		return true
	}

	return false
}

// SetInputBackgroundColor gets a reference to the given string and assigns it to the InputBackgroundColor field.
func (o *ProjectBrandingColors) SetInputBackgroundColor(v string) {
	o.InputBackgroundColor = &v
}

// GetInputDisabledColor returns the InputDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetInputDisabledColor() string {
	if o == nil || IsNil(o.InputDisabledColor) {
		var ret string
		return ret
	}
	return *o.InputDisabledColor
}

// GetInputDisabledColorOk returns a tuple with the InputDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetInputDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputDisabledColor) {
		return nil, false
	}
	return o.InputDisabledColor, true
}

// HasInputDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasInputDisabledColor() bool {
	if o != nil && !IsNil(o.InputDisabledColor) {
		return true
	}

	return false
}

// SetInputDisabledColor gets a reference to the given string and assigns it to the InputDisabledColor field.
func (o *ProjectBrandingColors) SetInputDisabledColor(v string) {
	o.InputDisabledColor = &v
}

// GetInputPlaceholderColor returns the InputPlaceholderColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetInputPlaceholderColor() string {
	if o == nil || IsNil(o.InputPlaceholderColor) {
		var ret string
		return ret
	}
	return *o.InputPlaceholderColor
}

// GetInputPlaceholderColorOk returns a tuple with the InputPlaceholderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetInputPlaceholderColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputPlaceholderColor) {
		return nil, false
	}
	return o.InputPlaceholderColor, true
}

// HasInputPlaceholderColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasInputPlaceholderColor() bool {
	if o != nil && !IsNil(o.InputPlaceholderColor) {
		return true
	}

	return false
}

// SetInputPlaceholderColor gets a reference to the given string and assigns it to the InputPlaceholderColor field.
func (o *ProjectBrandingColors) SetInputPlaceholderColor(v string) {
	o.InputPlaceholderColor = &v
}

// GetInputTextColor returns the InputTextColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetInputTextColor() string {
	if o == nil || IsNil(o.InputTextColor) {
		var ret string
		return ret
	}
	return *o.InputTextColor
}

// GetInputTextColorOk returns a tuple with the InputTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetInputTextColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputTextColor) {
		return nil, false
	}
	return o.InputTextColor, true
}

// HasInputTextColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasInputTextColor() bool {
	if o != nil && !IsNil(o.InputTextColor) {
		return true
	}

	return false
}

// SetInputTextColor gets a reference to the given string and assigns it to the InputTextColor field.
func (o *ProjectBrandingColors) SetInputTextColor(v string) {
	o.InputTextColor = &v
}

// GetPrimaryColor returns the PrimaryColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetPrimaryColor() string {
	if o == nil || IsNil(o.PrimaryColor) {
		var ret string
		return ret
	}
	return *o.PrimaryColor
}

// GetPrimaryColorOk returns a tuple with the PrimaryColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetPrimaryColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryColor) {
		return nil, false
	}
	return o.PrimaryColor, true
}

// HasPrimaryColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasPrimaryColor() bool {
	if o != nil && !IsNil(o.PrimaryColor) {
		return true
	}

	return false
}

// SetPrimaryColor gets a reference to the given string and assigns it to the PrimaryColor field.
func (o *ProjectBrandingColors) SetPrimaryColor(v string) {
	o.PrimaryColor = &v
}

// GetSecondaryColor returns the SecondaryColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetSecondaryColor() string {
	if o == nil || IsNil(o.SecondaryColor) {
		var ret string
		return ret
	}
	return *o.SecondaryColor
}

// GetSecondaryColorOk returns a tuple with the SecondaryColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetSecondaryColorOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryColor) {
		return nil, false
	}
	return o.SecondaryColor, true
}

// HasSecondaryColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasSecondaryColor() bool {
	if o != nil && !IsNil(o.SecondaryColor) {
		return true
	}

	return false
}

// SetSecondaryColor gets a reference to the given string and assigns it to the SecondaryColor field.
func (o *ProjectBrandingColors) SetSecondaryColor(v string) {
	o.SecondaryColor = &v
}

// GetSuccessEmphasisColor returns the SuccessEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetSuccessEmphasisColor() string {
	if o == nil || IsNil(o.SuccessEmphasisColor) {
		var ret string
		return ret
	}
	return *o.SuccessEmphasisColor
}

// GetSuccessEmphasisColorOk returns a tuple with the SuccessEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetSuccessEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessEmphasisColor) {
		return nil, false
	}
	return o.SuccessEmphasisColor, true
}

// HasSuccessEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasSuccessEmphasisColor() bool {
	if o != nil && !IsNil(o.SuccessEmphasisColor) {
		return true
	}

	return false
}

// SetSuccessEmphasisColor gets a reference to the given string and assigns it to the SuccessEmphasisColor field.
func (o *ProjectBrandingColors) SetSuccessEmphasisColor(v string) {
	o.SuccessEmphasisColor = &v
}

// GetTextDefaultColor returns the TextDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetTextDefaultColor() string {
	if o == nil || IsNil(o.TextDefaultColor) {
		var ret string
		return ret
	}
	return *o.TextDefaultColor
}

// GetTextDefaultColorOk returns a tuple with the TextDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetTextDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextDefaultColor) {
		return nil, false
	}
	return o.TextDefaultColor, true
}

// HasTextDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasTextDefaultColor() bool {
	if o != nil && !IsNil(o.TextDefaultColor) {
		return true
	}

	return false
}

// SetTextDefaultColor gets a reference to the given string and assigns it to the TextDefaultColor field.
func (o *ProjectBrandingColors) SetTextDefaultColor(v string) {
	o.TextDefaultColor = &v
}

// GetTextDisabledColor returns the TextDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingColors) GetTextDisabledColor() string {
	if o == nil || IsNil(o.TextDisabledColor) {
		var ret string
		return ret
	}
	return *o.TextDisabledColor
}

// GetTextDisabledColorOk returns a tuple with the TextDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingColors) GetTextDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextDisabledColor) {
		return nil, false
	}
	return o.TextDisabledColor, true
}

// HasTextDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingColors) HasTextDisabledColor() bool {
	if o != nil && !IsNil(o.TextDisabledColor) {
		return true
	}

	return false
}

// SetTextDisabledColor gets a reference to the given string and assigns it to the TextDisabledColor field.
func (o *ProjectBrandingColors) SetTextDisabledColor(v string) {
	o.TextDisabledColor = &v
}

func (o ProjectBrandingColors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBrandingColors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccentDefaultColor) {
		toSerialize["accent_default_color"] = o.AccentDefaultColor
	}
	if !IsNil(o.AccentDisabledColor) {
		toSerialize["accent_disabled_color"] = o.AccentDisabledColor
	}
	if !IsNil(o.AccentEmphasisColor) {
		toSerialize["accent_emphasis_color"] = o.AccentEmphasisColor
	}
	if !IsNil(o.AccentMutedColor) {
		toSerialize["accent_muted_color"] = o.AccentMutedColor
	}
	if !IsNil(o.AccentSubtleColor) {
		toSerialize["accent_subtle_color"] = o.AccentSubtleColor
	}
	if !IsNil(o.BackgroundCanvasColor) {
		toSerialize["background_canvas_color"] = o.BackgroundCanvasColor
	}
	if !IsNil(o.BackgroundSubtleColor) {
		toSerialize["background_subtle_color"] = o.BackgroundSubtleColor
	}
	if !IsNil(o.BackgroundSurfaceColor) {
		toSerialize["background_surface_color"] = o.BackgroundSurfaceColor
	}
	if !IsNil(o.BorderDefaultColor) {
		toSerialize["border_default_color"] = o.BorderDefaultColor
	}
	if !IsNil(o.ErrorDefaultColor) {
		toSerialize["error_default_color"] = o.ErrorDefaultColor
	}
	if !IsNil(o.ErrorEmphasisColor) {
		toSerialize["error_emphasis_color"] = o.ErrorEmphasisColor
	}
	if !IsNil(o.ErrorMutedColor) {
		toSerialize["error_muted_color"] = o.ErrorMutedColor
	}
	if !IsNil(o.ErrorSubtleColor) {
		toSerialize["error_subtle_color"] = o.ErrorSubtleColor
	}
	if !IsNil(o.ForegroundDefaultColor) {
		toSerialize["foreground_default_color"] = o.ForegroundDefaultColor
	}
	if !IsNil(o.ForegroundDisabledColor) {
		toSerialize["foreground_disabled_color"] = o.ForegroundDisabledColor
	}
	if !IsNil(o.ForegroundMutedColor) {
		toSerialize["foreground_muted_color"] = o.ForegroundMutedColor
	}
	if !IsNil(o.ForegroundOnAccentColor) {
		toSerialize["foreground_on_accent_color"] = o.ForegroundOnAccentColor
	}
	if !IsNil(o.ForegroundOnDarkColor) {
		toSerialize["foreground_on_dark_color"] = o.ForegroundOnDarkColor
	}
	if !IsNil(o.ForegroundOnDisabledColor) {
		toSerialize["foreground_on_disabled_color"] = o.ForegroundOnDisabledColor
	}
	if !IsNil(o.ForegroundSubtleColor) {
		toSerialize["foreground_subtle_color"] = o.ForegroundSubtleColor
	}
	if !IsNil(o.InputBackgroundColor) {
		toSerialize["input_background_color"] = o.InputBackgroundColor
	}
	if !IsNil(o.InputDisabledColor) {
		toSerialize["input_disabled_color"] = o.InputDisabledColor
	}
	if !IsNil(o.InputPlaceholderColor) {
		toSerialize["input_placeholder_color"] = o.InputPlaceholderColor
	}
	if !IsNil(o.InputTextColor) {
		toSerialize["input_text_color"] = o.InputTextColor
	}
	if !IsNil(o.PrimaryColor) {
		toSerialize["primary_color"] = o.PrimaryColor
	}
	if !IsNil(o.SecondaryColor) {
		toSerialize["secondary_color"] = o.SecondaryColor
	}
	if !IsNil(o.SuccessEmphasisColor) {
		toSerialize["success_emphasis_color"] = o.SuccessEmphasisColor
	}
	if !IsNil(o.TextDefaultColor) {
		toSerialize["text_default_color"] = o.TextDefaultColor
	}
	if !IsNil(o.TextDisabledColor) {
		toSerialize["text_disabled_color"] = o.TextDisabledColor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectBrandingColors) UnmarshalJSON(bytes []byte) (err error) {
	varProjectBrandingColors := _ProjectBrandingColors{}

	err = json.Unmarshal(bytes, &varProjectBrandingColors)

	if err != nil {
		return err
	}

	*o = ProjectBrandingColors(varProjectBrandingColors)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accent_default_color")
		delete(additionalProperties, "accent_disabled_color")
		delete(additionalProperties, "accent_emphasis_color")
		delete(additionalProperties, "accent_muted_color")
		delete(additionalProperties, "accent_subtle_color")
		delete(additionalProperties, "background_canvas_color")
		delete(additionalProperties, "background_subtle_color")
		delete(additionalProperties, "background_surface_color")
		delete(additionalProperties, "border_default_color")
		delete(additionalProperties, "error_default_color")
		delete(additionalProperties, "error_emphasis_color")
		delete(additionalProperties, "error_muted_color")
		delete(additionalProperties, "error_subtle_color")
		delete(additionalProperties, "foreground_default_color")
		delete(additionalProperties, "foreground_disabled_color")
		delete(additionalProperties, "foreground_muted_color")
		delete(additionalProperties, "foreground_on_accent_color")
		delete(additionalProperties, "foreground_on_dark_color")
		delete(additionalProperties, "foreground_on_disabled_color")
		delete(additionalProperties, "foreground_subtle_color")
		delete(additionalProperties, "input_background_color")
		delete(additionalProperties, "input_disabled_color")
		delete(additionalProperties, "input_placeholder_color")
		delete(additionalProperties, "input_text_color")
		delete(additionalProperties, "primary_color")
		delete(additionalProperties, "secondary_color")
		delete(additionalProperties, "success_emphasis_color")
		delete(additionalProperties, "text_default_color")
		delete(additionalProperties, "text_disabled_color")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectBrandingColors struct {
	value *ProjectBrandingColors
	isSet bool
}

func (v NullableProjectBrandingColors) Get() *ProjectBrandingColors {
	return v.value
}

func (v *NullableProjectBrandingColors) Set(val *ProjectBrandingColors) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBrandingColors) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBrandingColors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBrandingColors(val *ProjectBrandingColors) *NullableProjectBrandingColors {
	return &NullableProjectBrandingColors{value: val, isSet: true}
}

func (v NullableProjectBrandingColors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBrandingColors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


