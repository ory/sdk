/*
Ory APIs

# Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 

API version: v1.20.22
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ActiveProjectInConsole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveProjectInConsole{}

// ActiveProjectInConsole The Active Project ID
type ActiveProjectInConsole struct {
	// The Active Project ID  format: uuid
	ProjectId *string `json:"project_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ActiveProjectInConsole ActiveProjectInConsole

// NewActiveProjectInConsole instantiates a new ActiveProjectInConsole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveProjectInConsole() *ActiveProjectInConsole {
	this := ActiveProjectInConsole{}
	return &this
}

// NewActiveProjectInConsoleWithDefaults instantiates a new ActiveProjectInConsole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveProjectInConsoleWithDefaults() *ActiveProjectInConsole {
	this := ActiveProjectInConsole{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ActiveProjectInConsole) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveProjectInConsole) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ActiveProjectInConsole) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ActiveProjectInConsole) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o ActiveProjectInConsole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveProjectInConsole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActiveProjectInConsole) UnmarshalJSON(data []byte) (err error) {
	varActiveProjectInConsole := _ActiveProjectInConsole{}

	err = json.Unmarshal(data, &varActiveProjectInConsole)

	if err != nil {
		return err
	}

	*o = ActiveProjectInConsole(varActiveProjectInConsole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "project_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActiveProjectInConsole struct {
	value *ActiveProjectInConsole
	isSet bool
}

func (v NullableActiveProjectInConsole) Get() *ActiveProjectInConsole {
	return v.value
}

func (v *NullableActiveProjectInConsole) Set(val *ActiveProjectInConsole) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveProjectInConsole) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveProjectInConsole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveProjectInConsole(val *ActiveProjectInConsole) *NullableActiveProjectInConsole {
	return &NullableActiveProjectInConsole{value: val, isSet: true}
}

func (v NullableActiveProjectInConsole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveProjectInConsole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


