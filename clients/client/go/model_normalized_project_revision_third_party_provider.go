/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.12.1
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the NormalizedProjectRevisionThirdPartyProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NormalizedProjectRevisionThirdPartyProvider{}

// NormalizedProjectRevisionThirdPartyProvider struct for NormalizedProjectRevisionThirdPartyProvider
type NormalizedProjectRevisionThirdPartyProvider struct {
	AdditionalIdTokenAudiences []string `json:"additional_id_token_audiences,omitempty"`
	ApplePrivateKey NullableString `json:"apple_private_key,omitempty"`
	// Apple Private Key Identifier  Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret
	ApplePrivateKeyId *string `json:"apple_private_key_id,omitempty"`
	// Apple Developer Team ID  Apple Developer Team ID needed for generating a JWT token for client secret
	AppleTeamId *string `json:"apple_team_id,omitempty"`
	// AuthURL is the authorize url, typically something like: https://example.org/oauth2/auth Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
	AuthUrl *string `json:"auth_url,omitempty"`
	// Tenant is the Azure AD Tenant to use for authentication, and must be set when `provider` is set to `microsoft`.  Can be either `common`, `organizations`, `consumers` for a multitenant application or a specific tenant like `8eaef023-2b34-4da1-9baa-8bc8c9d6a490` or `contoso.onmicrosoft.com`.
	AzureTenant *string `json:"azure_tenant,omitempty"`
	ClaimsSource NullableString `json:"claims_source,omitempty"`
	// ClientID is the application's Client ID.
	ClientId *string `json:"client_id,omitempty"`
	ClientSecret NullableString `json:"client_secret,omitempty"`
	// The Project's Revision Creation Date
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id *string `json:"id,omitempty"`
	// IssuerURL is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`. If set, neither `auth_url` nor `token_url` are required.
	IssuerUrl *string `json:"issuer_url,omitempty"`
	// Label represents an optional label which can be used in the UI generation.
	Label *string `json:"label,omitempty"`
	// Mapper specifies the JSONNet code snippet which uses the OpenID Connect Provider's data (e.g. GitHub or Google profile information) to hydrate the identity's data.
	MapperUrl *string `json:"mapper_url,omitempty"`
	OrganizationId NullableString `json:"organization_id,omitempty"`
	// The Revision's ID this schema belongs to
	ProjectRevisionId *string `json:"project_revision_id,omitempty"`
	// Provider is either \"generic\" for a generic OAuth 2.0 / OpenID Connect Provider or one of: generic google github gitlab microsoft discord slack facebook vk yandex apple
	Provider *string `json:"provider,omitempty"`
	// ID is the provider's ID
	ProviderId *string `json:"provider_id,omitempty"`
	RequestedClaims map[string]interface{} `json:"requested_claims,omitempty"`
	Scope []string `json:"scope,omitempty"`
	// State indicates the state of the provider  Only providers with state `enabled` will be used for authentication enabled ThirdPartyProviderStateEnabled disabled ThirdPartyProviderStateDisabled
	State *string `json:"state,omitempty"`
	SubjectSource NullableString `json:"subject_source,omitempty"`
	// TokenURL is the token url, typically something like: https://example.org/oauth2/token  Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
	TokenUrl *string `json:"token_url,omitempty"`
	// Last Time Project's Revision was Updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NormalizedProjectRevisionThirdPartyProvider NormalizedProjectRevisionThirdPartyProvider

// NewNormalizedProjectRevisionThirdPartyProvider instantiates a new NormalizedProjectRevisionThirdPartyProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNormalizedProjectRevisionThirdPartyProvider() *NormalizedProjectRevisionThirdPartyProvider {
	this := NormalizedProjectRevisionThirdPartyProvider{}
	return &this
}

// NewNormalizedProjectRevisionThirdPartyProviderWithDefaults instantiates a new NormalizedProjectRevisionThirdPartyProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNormalizedProjectRevisionThirdPartyProviderWithDefaults() *NormalizedProjectRevisionThirdPartyProvider {
	this := NormalizedProjectRevisionThirdPartyProvider{}
	return &this
}

// GetAdditionalIdTokenAudiences returns the AdditionalIdTokenAudiences field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAdditionalIdTokenAudiences() []string {
	if o == nil || IsNil(o.AdditionalIdTokenAudiences) {
		var ret []string
		return ret
	}
	return o.AdditionalIdTokenAudiences
}

// GetAdditionalIdTokenAudiencesOk returns a tuple with the AdditionalIdTokenAudiences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAdditionalIdTokenAudiencesOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalIdTokenAudiences) {
		return nil, false
	}
	return o.AdditionalIdTokenAudiences, true
}

// HasAdditionalIdTokenAudiences returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasAdditionalIdTokenAudiences() bool {
	if o != nil && !IsNil(o.AdditionalIdTokenAudiences) {
		return true
	}

	return false
}

// SetAdditionalIdTokenAudiences gets a reference to the given []string and assigns it to the AdditionalIdTokenAudiences field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetAdditionalIdTokenAudiences(v []string) {
	o.AdditionalIdTokenAudiences = v
}

// GetApplePrivateKey returns the ApplePrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NormalizedProjectRevisionThirdPartyProvider) GetApplePrivateKey() string {
	if o == nil || IsNil(o.ApplePrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.ApplePrivateKey.Get()
}

// GetApplePrivateKeyOk returns a tuple with the ApplePrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NormalizedProjectRevisionThirdPartyProvider) GetApplePrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplePrivateKey.Get(), o.ApplePrivateKey.IsSet()
}

// HasApplePrivateKey returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasApplePrivateKey() bool {
	if o != nil && o.ApplePrivateKey.IsSet() {
		return true
	}

	return false
}

// SetApplePrivateKey gets a reference to the given NullableString and assigns it to the ApplePrivateKey field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetApplePrivateKey(v string) {
	o.ApplePrivateKey.Set(&v)
}
// SetApplePrivateKeyNil sets the value for ApplePrivateKey to be an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) SetApplePrivateKeyNil() {
	o.ApplePrivateKey.Set(nil)
}

// UnsetApplePrivateKey ensures that no value is present for ApplePrivateKey, not even an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) UnsetApplePrivateKey() {
	o.ApplePrivateKey.Unset()
}

// GetApplePrivateKeyId returns the ApplePrivateKeyId field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetApplePrivateKeyId() string {
	if o == nil || IsNil(o.ApplePrivateKeyId) {
		var ret string
		return ret
	}
	return *o.ApplePrivateKeyId
}

// GetApplePrivateKeyIdOk returns a tuple with the ApplePrivateKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetApplePrivateKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplePrivateKeyId) {
		return nil, false
	}
	return o.ApplePrivateKeyId, true
}

// HasApplePrivateKeyId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasApplePrivateKeyId() bool {
	if o != nil && !IsNil(o.ApplePrivateKeyId) {
		return true
	}

	return false
}

// SetApplePrivateKeyId gets a reference to the given string and assigns it to the ApplePrivateKeyId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetApplePrivateKeyId(v string) {
	o.ApplePrivateKeyId = &v
}

// GetAppleTeamId returns the AppleTeamId field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAppleTeamId() string {
	if o == nil || IsNil(o.AppleTeamId) {
		var ret string
		return ret
	}
	return *o.AppleTeamId
}

// GetAppleTeamIdOk returns a tuple with the AppleTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAppleTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppleTeamId) {
		return nil, false
	}
	return o.AppleTeamId, true
}

// HasAppleTeamId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasAppleTeamId() bool {
	if o != nil && !IsNil(o.AppleTeamId) {
		return true
	}

	return false
}

// SetAppleTeamId gets a reference to the given string and assigns it to the AppleTeamId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetAppleTeamId(v string) {
	o.AppleTeamId = &v
}

// GetAuthUrl returns the AuthUrl field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAuthUrl() string {
	if o == nil || IsNil(o.AuthUrl) {
		var ret string
		return ret
	}
	return *o.AuthUrl
}

// GetAuthUrlOk returns a tuple with the AuthUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAuthUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AuthUrl) {
		return nil, false
	}
	return o.AuthUrl, true
}

// HasAuthUrl returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasAuthUrl() bool {
	if o != nil && !IsNil(o.AuthUrl) {
		return true
	}

	return false
}

// SetAuthUrl gets a reference to the given string and assigns it to the AuthUrl field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetAuthUrl(v string) {
	o.AuthUrl = &v
}

// GetAzureTenant returns the AzureTenant field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAzureTenant() string {
	if o == nil || IsNil(o.AzureTenant) {
		var ret string
		return ret
	}
	return *o.AzureTenant
}

// GetAzureTenantOk returns a tuple with the AzureTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetAzureTenantOk() (*string, bool) {
	if o == nil || IsNil(o.AzureTenant) {
		return nil, false
	}
	return o.AzureTenant, true
}

// HasAzureTenant returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasAzureTenant() bool {
	if o != nil && !IsNil(o.AzureTenant) {
		return true
	}

	return false
}

// SetAzureTenant gets a reference to the given string and assigns it to the AzureTenant field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetAzureTenant(v string) {
	o.AzureTenant = &v
}

// GetClaimsSource returns the ClaimsSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClaimsSource() string {
	if o == nil || IsNil(o.ClaimsSource.Get()) {
		var ret string
		return ret
	}
	return *o.ClaimsSource.Get()
}

// GetClaimsSourceOk returns a tuple with the ClaimsSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClaimsSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimsSource.Get(), o.ClaimsSource.IsSet()
}

// HasClaimsSource returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasClaimsSource() bool {
	if o != nil && o.ClaimsSource.IsSet() {
		return true
	}

	return false
}

// SetClaimsSource gets a reference to the given NullableString and assigns it to the ClaimsSource field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetClaimsSource(v string) {
	o.ClaimsSource.Set(&v)
}
// SetClaimsSourceNil sets the value for ClaimsSource to be an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) SetClaimsSourceNil() {
	o.ClaimsSource.Set(nil)
}

// UnsetClaimsSource ensures that no value is present for ClaimsSource, not even an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) UnsetClaimsSource() {
	o.ClaimsSource.Unset()
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret.Get()) {
		var ret string
		return ret
	}
	return *o.ClientSecret.Get()
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NormalizedProjectRevisionThirdPartyProvider) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientSecret.Get(), o.ClientSecret.IsSet()
}

// HasClientSecret returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasClientSecret() bool {
	if o != nil && o.ClientSecret.IsSet() {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given NullableString and assigns it to the ClientSecret field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetClientSecret(v string) {
	o.ClientSecret.Set(&v)
}
// SetClientSecretNil sets the value for ClientSecret to be an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) SetClientSecretNil() {
	o.ClientSecret.Set(nil)
}

// UnsetClientSecret ensures that no value is present for ClientSecret, not even an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) UnsetClientSecret() {
	o.ClientSecret.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetId(v string) {
	o.Id = &v
}

// GetIssuerUrl returns the IssuerUrl field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetIssuerUrl() string {
	if o == nil || IsNil(o.IssuerUrl) {
		var ret string
		return ret
	}
	return *o.IssuerUrl
}

// GetIssuerUrlOk returns a tuple with the IssuerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetIssuerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerUrl) {
		return nil, false
	}
	return o.IssuerUrl, true
}

// HasIssuerUrl returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasIssuerUrl() bool {
	if o != nil && !IsNil(o.IssuerUrl) {
		return true
	}

	return false
}

// SetIssuerUrl gets a reference to the given string and assigns it to the IssuerUrl field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetIssuerUrl(v string) {
	o.IssuerUrl = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetLabel(v string) {
	o.Label = &v
}

// GetMapperUrl returns the MapperUrl field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetMapperUrl() string {
	if o == nil || IsNil(o.MapperUrl) {
		var ret string
		return ret
	}
	return *o.MapperUrl
}

// GetMapperUrlOk returns a tuple with the MapperUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetMapperUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MapperUrl) {
		return nil, false
	}
	return o.MapperUrl, true
}

// HasMapperUrl returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasMapperUrl() bool {
	if o != nil && !IsNil(o.MapperUrl) {
		return true
	}

	return false
}

// SetMapperUrl gets a reference to the given string and assigns it to the MapperUrl field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetMapperUrl(v string) {
	o.MapperUrl = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NormalizedProjectRevisionThirdPartyProvider) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId.Get()) {
		var ret string
		return ret
	}
	return *o.OrganizationId.Get()
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NormalizedProjectRevisionThirdPartyProvider) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationId.Get(), o.OrganizationId.IsSet()
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasOrganizationId() bool {
	if o != nil && o.OrganizationId.IsSet() {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given NullableString and assigns it to the OrganizationId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetOrganizationId(v string) {
	o.OrganizationId.Set(&v)
}
// SetOrganizationIdNil sets the value for OrganizationId to be an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) SetOrganizationIdNil() {
	o.OrganizationId.Set(nil)
}

// UnsetOrganizationId ensures that no value is present for OrganizationId, not even an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) UnsetOrganizationId() {
	o.OrganizationId.Unset()
}

// GetProjectRevisionId returns the ProjectRevisionId field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProjectRevisionId() string {
	if o == nil || IsNil(o.ProjectRevisionId) {
		var ret string
		return ret
	}
	return *o.ProjectRevisionId
}

// GetProjectRevisionIdOk returns a tuple with the ProjectRevisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProjectRevisionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectRevisionId) {
		return nil, false
	}
	return o.ProjectRevisionId, true
}

// HasProjectRevisionId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasProjectRevisionId() bool {
	if o != nil && !IsNil(o.ProjectRevisionId) {
		return true
	}

	return false
}

// SetProjectRevisionId gets a reference to the given string and assigns it to the ProjectRevisionId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetProjectRevisionId(v string) {
	o.ProjectRevisionId = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetProvider(v string) {
	o.Provider = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetRequestedClaims returns the RequestedClaims field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetRequestedClaims() map[string]interface{} {
	if o == nil || IsNil(o.RequestedClaims) {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestedClaims
}

// GetRequestedClaimsOk returns a tuple with the RequestedClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetRequestedClaimsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequestedClaims) {
		return map[string]interface{}{}, false
	}
	return o.RequestedClaims, true
}

// HasRequestedClaims returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasRequestedClaims() bool {
	if o != nil && !IsNil(o.RequestedClaims) {
		return true
	}

	return false
}

// SetRequestedClaims gets a reference to the given map[string]interface{} and assigns it to the RequestedClaims field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetRequestedClaims(v map[string]interface{}) {
	o.RequestedClaims = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetScope() []string {
	if o == nil || IsNil(o.Scope) {
		var ret []string
		return ret
	}
	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given []string and assigns it to the Scope field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetScope(v []string) {
	o.Scope = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetState(v string) {
	o.State = &v
}

// GetSubjectSource returns the SubjectSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NormalizedProjectRevisionThirdPartyProvider) GetSubjectSource() string {
	if o == nil || IsNil(o.SubjectSource.Get()) {
		var ret string
		return ret
	}
	return *o.SubjectSource.Get()
}

// GetSubjectSourceOk returns a tuple with the SubjectSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NormalizedProjectRevisionThirdPartyProvider) GetSubjectSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectSource.Get(), o.SubjectSource.IsSet()
}

// HasSubjectSource returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasSubjectSource() bool {
	if o != nil && o.SubjectSource.IsSet() {
		return true
	}

	return false
}

// SetSubjectSource gets a reference to the given NullableString and assigns it to the SubjectSource field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetSubjectSource(v string) {
	o.SubjectSource.Set(&v)
}
// SetSubjectSourceNil sets the value for SubjectSource to be an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) SetSubjectSourceNil() {
	o.SubjectSource.Set(nil)
}

// UnsetSubjectSource ensures that no value is present for SubjectSource, not even an explicit nil
func (o *NormalizedProjectRevisionThirdPartyProvider) UnsetSubjectSource() {
	o.SubjectSource.Unset()
}

// GetTokenUrl returns the TokenUrl field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetTokenUrl() string {
	if o == nil || IsNil(o.TokenUrl) {
		var ret string
		return ret
	}
	return *o.TokenUrl
}

// GetTokenUrlOk returns a tuple with the TokenUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetTokenUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TokenUrl) {
		return nil, false
	}
	return o.TokenUrl, true
}

// HasTokenUrl returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasTokenUrl() bool {
	if o != nil && !IsNil(o.TokenUrl) {
		return true
	}

	return false
}

// SetTokenUrl gets a reference to the given string and assigns it to the TokenUrl field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetTokenUrl(v string) {
	o.TokenUrl = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionThirdPartyProvider) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NormalizedProjectRevisionThirdPartyProvider) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o NormalizedProjectRevisionThirdPartyProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NormalizedProjectRevisionThirdPartyProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalIdTokenAudiences) {
		toSerialize["additional_id_token_audiences"] = o.AdditionalIdTokenAudiences
	}
	if o.ApplePrivateKey.IsSet() {
		toSerialize["apple_private_key"] = o.ApplePrivateKey.Get()
	}
	if !IsNil(o.ApplePrivateKeyId) {
		toSerialize["apple_private_key_id"] = o.ApplePrivateKeyId
	}
	if !IsNil(o.AppleTeamId) {
		toSerialize["apple_team_id"] = o.AppleTeamId
	}
	if !IsNil(o.AuthUrl) {
		toSerialize["auth_url"] = o.AuthUrl
	}
	if !IsNil(o.AzureTenant) {
		toSerialize["azure_tenant"] = o.AzureTenant
	}
	if o.ClaimsSource.IsSet() {
		toSerialize["claims_source"] = o.ClaimsSource.Get()
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if o.ClientSecret.IsSet() {
		toSerialize["client_secret"] = o.ClientSecret.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssuerUrl) {
		toSerialize["issuer_url"] = o.IssuerUrl
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.MapperUrl) {
		toSerialize["mapper_url"] = o.MapperUrl
	}
	if o.OrganizationId.IsSet() {
		toSerialize["organization_id"] = o.OrganizationId.Get()
	}
	if !IsNil(o.ProjectRevisionId) {
		toSerialize["project_revision_id"] = o.ProjectRevisionId
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.RequestedClaims) {
		toSerialize["requested_claims"] = o.RequestedClaims
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.SubjectSource.IsSet() {
		toSerialize["subject_source"] = o.SubjectSource.Get()
	}
	if !IsNil(o.TokenUrl) {
		toSerialize["token_url"] = o.TokenUrl
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NormalizedProjectRevisionThirdPartyProvider) UnmarshalJSON(data []byte) (err error) {
	varNormalizedProjectRevisionThirdPartyProvider := _NormalizedProjectRevisionThirdPartyProvider{}

	err = json.Unmarshal(data, &varNormalizedProjectRevisionThirdPartyProvider)

	if err != nil {
		return err
	}

	*o = NormalizedProjectRevisionThirdPartyProvider(varNormalizedProjectRevisionThirdPartyProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additional_id_token_audiences")
		delete(additionalProperties, "apple_private_key")
		delete(additionalProperties, "apple_private_key_id")
		delete(additionalProperties, "apple_team_id")
		delete(additionalProperties, "auth_url")
		delete(additionalProperties, "azure_tenant")
		delete(additionalProperties, "claims_source")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "client_secret")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "issuer_url")
		delete(additionalProperties, "label")
		delete(additionalProperties, "mapper_url")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "project_revision_id")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "provider_id")
		delete(additionalProperties, "requested_claims")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "state")
		delete(additionalProperties, "subject_source")
		delete(additionalProperties, "token_url")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNormalizedProjectRevisionThirdPartyProvider struct {
	value *NormalizedProjectRevisionThirdPartyProvider
	isSet bool
}

func (v NullableNormalizedProjectRevisionThirdPartyProvider) Get() *NormalizedProjectRevisionThirdPartyProvider {
	return v.value
}

func (v *NullableNormalizedProjectRevisionThirdPartyProvider) Set(val *NormalizedProjectRevisionThirdPartyProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizedProjectRevisionThirdPartyProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizedProjectRevisionThirdPartyProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizedProjectRevisionThirdPartyProvider(val *NormalizedProjectRevisionThirdPartyProvider) *NullableNormalizedProjectRevisionThirdPartyProvider {
	return &NullableNormalizedProjectRevisionThirdPartyProvider{value: val, isSet: true}
}

func (v NullableNormalizedProjectRevisionThirdPartyProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizedProjectRevisionThirdPartyProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


