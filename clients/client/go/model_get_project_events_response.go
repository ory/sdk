/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.12.1
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the GetProjectEventsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetProjectEventsResponse{}

// GetProjectEventsResponse Response of the getProjectEvents endpoint
type GetProjectEventsResponse struct {
	// The list of data points.
	Events []ProjectEventsDatapoint `json:"events"`
	// Pagination token to be included in next page request
	PageToken *string `json:"page_token,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetProjectEventsResponse GetProjectEventsResponse

// NewGetProjectEventsResponse instantiates a new GetProjectEventsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProjectEventsResponse(events []ProjectEventsDatapoint) *GetProjectEventsResponse {
	this := GetProjectEventsResponse{}
	this.Events = events
	return &this
}

// NewGetProjectEventsResponseWithDefaults instantiates a new GetProjectEventsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProjectEventsResponseWithDefaults() *GetProjectEventsResponse {
	this := GetProjectEventsResponse{}
	return &this
}

// GetEvents returns the Events field value
func (o *GetProjectEventsResponse) GetEvents() []ProjectEventsDatapoint {
	if o == nil {
		var ret []ProjectEventsDatapoint
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *GetProjectEventsResponse) GetEventsOk() ([]ProjectEventsDatapoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *GetProjectEventsResponse) SetEvents(v []ProjectEventsDatapoint) {
	o.Events = v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *GetProjectEventsResponse) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProjectEventsResponse) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *GetProjectEventsResponse) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *GetProjectEventsResponse) SetPageToken(v string) {
	o.PageToken = &v
}

func (o GetProjectEventsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetProjectEventsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	if !IsNil(o.PageToken) {
		toSerialize["page_token"] = o.PageToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetProjectEventsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetProjectEventsResponse := _GetProjectEventsResponse{}

	err = json.Unmarshal(data, &varGetProjectEventsResponse)

	if err != nil {
		return err
	}

	*o = GetProjectEventsResponse(varGetProjectEventsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "page_token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetProjectEventsResponse struct {
	value *GetProjectEventsResponse
	isSet bool
}

func (v NullableGetProjectEventsResponse) Get() *GetProjectEventsResponse {
	return v.value
}

func (v *NullableGetProjectEventsResponse) Set(val *GetProjectEventsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProjectEventsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProjectEventsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProjectEventsResponse(val *GetProjectEventsResponse) *NullableGetProjectEventsResponse {
	return &NullableGetProjectEventsResponse{value: val, isSet: true}
}

func (v NullableGetProjectEventsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProjectEventsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


