/*
Ory APIs

# Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 

API version: v1.21.4
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the NormalizedProjectRevisionScimClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NormalizedProjectRevisionScimClient{}

// NormalizedProjectRevisionScimClient SCIMClient represents a SCIM client configuration to be used by an external identity provider.
type NormalizedProjectRevisionScimClient struct {
	// The secret that the client uses in the authorization header to authenticate itself.
	AuthorizationHeaderSecret string `json:"authorization_header_secret"`
	// The unique ID of the SCIM server.
	ClientId string `json:"client_id"`
	// The SCIM client's creation time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The SCIM server's label
	Label string `json:"label"`
	// Mapper specifies the JSONNet code snippet which uses the SCIM provider's data to hydrate the identity's data.
	MapperUrl string `json:"mapper_url"`
	// OrganizationID is the organization ID for this SCIM server.
	OrganizationId string `json:"organization_id"`
	// State indicates the state of the SCIM server  Only servers with state `enabled` will be available for SCIM provisioning. enabled ThirdPartyProviderStateEnabled disabled ThirdPartyProviderStateDisabled
	State *string `json:"state,omitempty"`
	// Last time the SCIM client was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NormalizedProjectRevisionScimClient NormalizedProjectRevisionScimClient

// NewNormalizedProjectRevisionScimClient instantiates a new NormalizedProjectRevisionScimClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNormalizedProjectRevisionScimClient(authorizationHeaderSecret string, clientId string, label string, mapperUrl string, organizationId string) *NormalizedProjectRevisionScimClient {
	this := NormalizedProjectRevisionScimClient{}
	this.AuthorizationHeaderSecret = authorizationHeaderSecret
	this.ClientId = clientId
	this.Label = label
	this.MapperUrl = mapperUrl
	this.OrganizationId = organizationId
	return &this
}

// NewNormalizedProjectRevisionScimClientWithDefaults instantiates a new NormalizedProjectRevisionScimClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNormalizedProjectRevisionScimClientWithDefaults() *NormalizedProjectRevisionScimClient {
	this := NormalizedProjectRevisionScimClient{}
	return &this
}

// GetAuthorizationHeaderSecret returns the AuthorizationHeaderSecret field value
func (o *NormalizedProjectRevisionScimClient) GetAuthorizationHeaderSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorizationHeaderSecret
}

// GetAuthorizationHeaderSecretOk returns a tuple with the AuthorizationHeaderSecret field value
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetAuthorizationHeaderSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationHeaderSecret, true
}

// SetAuthorizationHeaderSecret sets field value
func (o *NormalizedProjectRevisionScimClient) SetAuthorizationHeaderSecret(v string) {
	o.AuthorizationHeaderSecret = v
}

// GetClientId returns the ClientId field value
func (o *NormalizedProjectRevisionScimClient) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *NormalizedProjectRevisionScimClient) SetClientId(v string) {
	o.ClientId = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionScimClient) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionScimClient) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NormalizedProjectRevisionScimClient) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetLabel returns the Label field value
func (o *NormalizedProjectRevisionScimClient) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *NormalizedProjectRevisionScimClient) SetLabel(v string) {
	o.Label = v
}

// GetMapperUrl returns the MapperUrl field value
func (o *NormalizedProjectRevisionScimClient) GetMapperUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapperUrl
}

// GetMapperUrlOk returns a tuple with the MapperUrl field value
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetMapperUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapperUrl, true
}

// SetMapperUrl sets field value
func (o *NormalizedProjectRevisionScimClient) SetMapperUrl(v string) {
	o.MapperUrl = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *NormalizedProjectRevisionScimClient) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *NormalizedProjectRevisionScimClient) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionScimClient) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionScimClient) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *NormalizedProjectRevisionScimClient) SetState(v string) {
	o.State = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NormalizedProjectRevisionScimClient) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedProjectRevisionScimClient) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NormalizedProjectRevisionScimClient) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NormalizedProjectRevisionScimClient) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o NormalizedProjectRevisionScimClient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NormalizedProjectRevisionScimClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authorization_header_secret"] = o.AuthorizationHeaderSecret
	toSerialize["client_id"] = o.ClientId
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["label"] = o.Label
	toSerialize["mapper_url"] = o.MapperUrl
	toSerialize["organization_id"] = o.OrganizationId
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NormalizedProjectRevisionScimClient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorization_header_secret",
		"client_id",
		"label",
		"mapper_url",
		"organization_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNormalizedProjectRevisionScimClient := _NormalizedProjectRevisionScimClient{}

	err = json.Unmarshal(data, &varNormalizedProjectRevisionScimClient)

	if err != nil {
		return err
	}

	*o = NormalizedProjectRevisionScimClient(varNormalizedProjectRevisionScimClient)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorization_header_secret")
		delete(additionalProperties, "client_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "label")
		delete(additionalProperties, "mapper_url")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNormalizedProjectRevisionScimClient struct {
	value *NormalizedProjectRevisionScimClient
	isSet bool
}

func (v NullableNormalizedProjectRevisionScimClient) Get() *NormalizedProjectRevisionScimClient {
	return v.value
}

func (v *NullableNormalizedProjectRevisionScimClient) Set(val *NormalizedProjectRevisionScimClient) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizedProjectRevisionScimClient) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizedProjectRevisionScimClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizedProjectRevisionScimClient(val *NormalizedProjectRevisionScimClient) *NullableNormalizedProjectRevisionScimClient {
	return &NullableNormalizedProjectRevisionScimClient{value: val, isSet: true}
}

func (v NullableNormalizedProjectRevisionScimClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizedProjectRevisionScimClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


