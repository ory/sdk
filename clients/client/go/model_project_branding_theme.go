/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.8.1
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ProjectBrandingTheme type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBrandingTheme{}

// ProjectBrandingTheme struct for ProjectBrandingTheme
type ProjectBrandingTheme struct {
	// AccentDefaultColor is a hex color code used by the Ory Account Experience theme.
	AccentDefaultColor *string `json:"accent_default_color,omitempty"`
	// AccentDisabledColor is a hex color code used by the Ory Account Experience theme.
	AccentDisabledColor *string `json:"accent_disabled_color,omitempty"`
	// AccentEmphasisColor is a hex color code used by the Ory Account Experience theme.
	AccentEmphasisColor *string `json:"accent_emphasis_color,omitempty"`
	// AccentMutedColor is a hex color code used by the Ory Account Experience theme.
	AccentMutedColor *string `json:"accent_muted_color,omitempty"`
	// AccentSubtleColor is a hex color code used by the Ory Account Experience theme.
	AccentSubtleColor *string `json:"accent_subtle_color,omitempty"`
	// BackgroundCanvasColor is a hex color code used by the Ory Account Experience theme.
	BackgroundCanvasColor *string `json:"background_canvas_color,omitempty"`
	// BackgroundSubtleColor is a hex color code used by the Ory Account Experience theme.
	BackgroundSubtleColor *string `json:"background_subtle_color,omitempty"`
	// BackgroundSurfaceColor is a hex color code used by the Ory Account Experience theme.
	BackgroundSurfaceColor *string `json:"background_surface_color,omitempty"`
	// BorderDefaultColor is a hex color code used by the Ory Account Experience theme.
	BorderDefaultColor *string `json:"border_default_color,omitempty"`
	// The Customization Creation Date.
	CreatedAt time.Time `json:"created_at"`
	// ErrorDefaultColor is a hex color code used by the Ory Account Experience theme.
	ErrorDefaultColor *string `json:"error_default_color,omitempty"`
	// ErrorEmphasisColor is a hex color code used by the Ory Account Experience theme.
	ErrorEmphasisColor *string `json:"error_emphasis_color,omitempty"`
	// ErrorMutedColor is a hex color code used by the Ory Account Experience theme.
	ErrorMutedColor *string `json:"error_muted_color,omitempty"`
	// ErrorSubtleColor is a hex color code used by the Ory Account Experience theme.
	ErrorSubtleColor *string `json:"error_subtle_color,omitempty"`
	// Favicon Type The Favicon mime type.
	FaviconType *string `json:"favicon_type,omitempty"`
	// Favicon URL Favicon can be an https:// or base64:// URL. If the URL is not allowed, the favicon will be stored inside the Ory Network storage bucket.
	FaviconUrl *string `json:"favicon_url,omitempty"`
	// ForegroundDefaultColor is a hex color code used by the Ory Account Experience theme.
	ForegroundDefaultColor *string `json:"foreground_default_color,omitempty"`
	// ForegroundDisabledColor is a hex color code used by the Ory Account Experience theme.
	ForegroundDisabledColor *string `json:"foreground_disabled_color,omitempty"`
	// ForegroundMutedColor is a hex color code used by the Ory Account Experience theme.
	ForegroundMutedColor *string `json:"foreground_muted_color,omitempty"`
	// ForegroundOnAccentColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnAccentColor *string `json:"foreground_on_accent_color,omitempty"`
	// ForegroundOnDarkColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnDarkColor *string `json:"foreground_on_dark_color,omitempty"`
	// ForegroundOnDisabledColor is a hex color code used by the Ory Account Experience theme.
	ForegroundOnDisabledColor *string `json:"foreground_on_disabled_color,omitempty"`
	// ForegroundSubtleColor is a hex color code used by the Ory Account Experience theme.
	ForegroundSubtleColor *string `json:"foreground_subtle_color,omitempty"`
	// The customization theme ID.
	Id string `json:"id"`
	// InputBackgroundColor is a hex color code used by the Ory Account Experience theme.
	InputBackgroundColor *string `json:"input_background_color,omitempty"`
	// InputDisabledColor is a hex color code used by the Ory Account Experience theme.
	InputDisabledColor *string `json:"input_disabled_color,omitempty"`
	// InputPlaceholderColor is a hex color code used by the Ory Account Experience theme.
	InputPlaceholderColor *string `json:"input_placeholder_color,omitempty"`
	// InputTextColor is a hex color code used by the Ory Account Experience theme.
	InputTextColor *string `json:"input_text_color,omitempty"`
	// Logo Type The Logo mime type.
	LogoType *string `json:"logo_type,omitempty"`
	// Logo URL Logo can be an https:// or base64:// URL. If the URL is not allowed, the logo will be stored inside the Ory Network storage bucket.
	LogoUrl *string `json:"logo_url,omitempty"`
	// The customization theme name.
	Name string `json:"name"`
	// Primary color is an hsla color value used to derive the other colors from for the Ory Account Experience theme.
	PrimaryColor *string `json:"primary_color,omitempty"`
	// The ProjectBranding ID this customization is associated with.
	ProjectBrandingId string `json:"project_branding_id"`
	// Secondary color is a hsla color code used to derive the other colors from for the Ory Account Experience theme.
	SecondaryColor *string `json:"secondary_color,omitempty"`
	// SuccessEmphasisColor is a hex color code used by the Ory Account Experience theme.
	SuccessEmphasisColor *string `json:"success_emphasis_color,omitempty"`
	// TextDefaultColor is a hex color code used by the Ory Account Experience theme.
	TextDefaultColor *string `json:"text_default_color,omitempty"`
	// TextDisabledColor is a hex color code used by the Ory Account Experience theme.
	TextDisabledColor *string `json:"text_disabled_color,omitempty"`
	// Last Time Branding was Updated.
	UpdatedAt time.Time `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _ProjectBrandingTheme ProjectBrandingTheme

// NewProjectBrandingTheme instantiates a new ProjectBrandingTheme object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBrandingTheme(createdAt time.Time, id string, name string, projectBrandingId string, updatedAt time.Time) *ProjectBrandingTheme {
	this := ProjectBrandingTheme{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.ProjectBrandingId = projectBrandingId
	this.UpdatedAt = updatedAt
	return &this
}

// NewProjectBrandingThemeWithDefaults instantiates a new ProjectBrandingTheme object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBrandingThemeWithDefaults() *ProjectBrandingTheme {
	this := ProjectBrandingTheme{}
	return &this
}

// GetAccentDefaultColor returns the AccentDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetAccentDefaultColor() string {
	if o == nil || IsNil(o.AccentDefaultColor) {
		var ret string
		return ret
	}
	return *o.AccentDefaultColor
}

// GetAccentDefaultColorOk returns a tuple with the AccentDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetAccentDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentDefaultColor) {
		return nil, false
	}
	return o.AccentDefaultColor, true
}

// HasAccentDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasAccentDefaultColor() bool {
	if o != nil && !IsNil(o.AccentDefaultColor) {
		return true
	}

	return false
}

// SetAccentDefaultColor gets a reference to the given string and assigns it to the AccentDefaultColor field.
func (o *ProjectBrandingTheme) SetAccentDefaultColor(v string) {
	o.AccentDefaultColor = &v
}

// GetAccentDisabledColor returns the AccentDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetAccentDisabledColor() string {
	if o == nil || IsNil(o.AccentDisabledColor) {
		var ret string
		return ret
	}
	return *o.AccentDisabledColor
}

// GetAccentDisabledColorOk returns a tuple with the AccentDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetAccentDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentDisabledColor) {
		return nil, false
	}
	return o.AccentDisabledColor, true
}

// HasAccentDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasAccentDisabledColor() bool {
	if o != nil && !IsNil(o.AccentDisabledColor) {
		return true
	}

	return false
}

// SetAccentDisabledColor gets a reference to the given string and assigns it to the AccentDisabledColor field.
func (o *ProjectBrandingTheme) SetAccentDisabledColor(v string) {
	o.AccentDisabledColor = &v
}

// GetAccentEmphasisColor returns the AccentEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetAccentEmphasisColor() string {
	if o == nil || IsNil(o.AccentEmphasisColor) {
		var ret string
		return ret
	}
	return *o.AccentEmphasisColor
}

// GetAccentEmphasisColorOk returns a tuple with the AccentEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetAccentEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentEmphasisColor) {
		return nil, false
	}
	return o.AccentEmphasisColor, true
}

// HasAccentEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasAccentEmphasisColor() bool {
	if o != nil && !IsNil(o.AccentEmphasisColor) {
		return true
	}

	return false
}

// SetAccentEmphasisColor gets a reference to the given string and assigns it to the AccentEmphasisColor field.
func (o *ProjectBrandingTheme) SetAccentEmphasisColor(v string) {
	o.AccentEmphasisColor = &v
}

// GetAccentMutedColor returns the AccentMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetAccentMutedColor() string {
	if o == nil || IsNil(o.AccentMutedColor) {
		var ret string
		return ret
	}
	return *o.AccentMutedColor
}

// GetAccentMutedColorOk returns a tuple with the AccentMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetAccentMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentMutedColor) {
		return nil, false
	}
	return o.AccentMutedColor, true
}

// HasAccentMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasAccentMutedColor() bool {
	if o != nil && !IsNil(o.AccentMutedColor) {
		return true
	}

	return false
}

// SetAccentMutedColor gets a reference to the given string and assigns it to the AccentMutedColor field.
func (o *ProjectBrandingTheme) SetAccentMutedColor(v string) {
	o.AccentMutedColor = &v
}

// GetAccentSubtleColor returns the AccentSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetAccentSubtleColor() string {
	if o == nil || IsNil(o.AccentSubtleColor) {
		var ret string
		return ret
	}
	return *o.AccentSubtleColor
}

// GetAccentSubtleColorOk returns a tuple with the AccentSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetAccentSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.AccentSubtleColor) {
		return nil, false
	}
	return o.AccentSubtleColor, true
}

// HasAccentSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasAccentSubtleColor() bool {
	if o != nil && !IsNil(o.AccentSubtleColor) {
		return true
	}

	return false
}

// SetAccentSubtleColor gets a reference to the given string and assigns it to the AccentSubtleColor field.
func (o *ProjectBrandingTheme) SetAccentSubtleColor(v string) {
	o.AccentSubtleColor = &v
}

// GetBackgroundCanvasColor returns the BackgroundCanvasColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetBackgroundCanvasColor() string {
	if o == nil || IsNil(o.BackgroundCanvasColor) {
		var ret string
		return ret
	}
	return *o.BackgroundCanvasColor
}

// GetBackgroundCanvasColorOk returns a tuple with the BackgroundCanvasColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetBackgroundCanvasColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundCanvasColor) {
		return nil, false
	}
	return o.BackgroundCanvasColor, true
}

// HasBackgroundCanvasColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasBackgroundCanvasColor() bool {
	if o != nil && !IsNil(o.BackgroundCanvasColor) {
		return true
	}

	return false
}

// SetBackgroundCanvasColor gets a reference to the given string and assigns it to the BackgroundCanvasColor field.
func (o *ProjectBrandingTheme) SetBackgroundCanvasColor(v string) {
	o.BackgroundCanvasColor = &v
}

// GetBackgroundSubtleColor returns the BackgroundSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetBackgroundSubtleColor() string {
	if o == nil || IsNil(o.BackgroundSubtleColor) {
		var ret string
		return ret
	}
	return *o.BackgroundSubtleColor
}

// GetBackgroundSubtleColorOk returns a tuple with the BackgroundSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetBackgroundSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundSubtleColor) {
		return nil, false
	}
	return o.BackgroundSubtleColor, true
}

// HasBackgroundSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasBackgroundSubtleColor() bool {
	if o != nil && !IsNil(o.BackgroundSubtleColor) {
		return true
	}

	return false
}

// SetBackgroundSubtleColor gets a reference to the given string and assigns it to the BackgroundSubtleColor field.
func (o *ProjectBrandingTheme) SetBackgroundSubtleColor(v string) {
	o.BackgroundSubtleColor = &v
}

// GetBackgroundSurfaceColor returns the BackgroundSurfaceColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetBackgroundSurfaceColor() string {
	if o == nil || IsNil(o.BackgroundSurfaceColor) {
		var ret string
		return ret
	}
	return *o.BackgroundSurfaceColor
}

// GetBackgroundSurfaceColorOk returns a tuple with the BackgroundSurfaceColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetBackgroundSurfaceColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundSurfaceColor) {
		return nil, false
	}
	return o.BackgroundSurfaceColor, true
}

// HasBackgroundSurfaceColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasBackgroundSurfaceColor() bool {
	if o != nil && !IsNil(o.BackgroundSurfaceColor) {
		return true
	}

	return false
}

// SetBackgroundSurfaceColor gets a reference to the given string and assigns it to the BackgroundSurfaceColor field.
func (o *ProjectBrandingTheme) SetBackgroundSurfaceColor(v string) {
	o.BackgroundSurfaceColor = &v
}

// GetBorderDefaultColor returns the BorderDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetBorderDefaultColor() string {
	if o == nil || IsNil(o.BorderDefaultColor) {
		var ret string
		return ret
	}
	return *o.BorderDefaultColor
}

// GetBorderDefaultColorOk returns a tuple with the BorderDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetBorderDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.BorderDefaultColor) {
		return nil, false
	}
	return o.BorderDefaultColor, true
}

// HasBorderDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasBorderDefaultColor() bool {
	if o != nil && !IsNil(o.BorderDefaultColor) {
		return true
	}

	return false
}

// SetBorderDefaultColor gets a reference to the given string and assigns it to the BorderDefaultColor field.
func (o *ProjectBrandingTheme) SetBorderDefaultColor(v string) {
	o.BorderDefaultColor = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ProjectBrandingTheme) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ProjectBrandingTheme) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetErrorDefaultColor returns the ErrorDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetErrorDefaultColor() string {
	if o == nil || IsNil(o.ErrorDefaultColor) {
		var ret string
		return ret
	}
	return *o.ErrorDefaultColor
}

// GetErrorDefaultColorOk returns a tuple with the ErrorDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetErrorDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDefaultColor) {
		return nil, false
	}
	return o.ErrorDefaultColor, true
}

// HasErrorDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasErrorDefaultColor() bool {
	if o != nil && !IsNil(o.ErrorDefaultColor) {
		return true
	}

	return false
}

// SetErrorDefaultColor gets a reference to the given string and assigns it to the ErrorDefaultColor field.
func (o *ProjectBrandingTheme) SetErrorDefaultColor(v string) {
	o.ErrorDefaultColor = &v
}

// GetErrorEmphasisColor returns the ErrorEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetErrorEmphasisColor() string {
	if o == nil || IsNil(o.ErrorEmphasisColor) {
		var ret string
		return ret
	}
	return *o.ErrorEmphasisColor
}

// GetErrorEmphasisColorOk returns a tuple with the ErrorEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetErrorEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorEmphasisColor) {
		return nil, false
	}
	return o.ErrorEmphasisColor, true
}

// HasErrorEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasErrorEmphasisColor() bool {
	if o != nil && !IsNil(o.ErrorEmphasisColor) {
		return true
	}

	return false
}

// SetErrorEmphasisColor gets a reference to the given string and assigns it to the ErrorEmphasisColor field.
func (o *ProjectBrandingTheme) SetErrorEmphasisColor(v string) {
	o.ErrorEmphasisColor = &v
}

// GetErrorMutedColor returns the ErrorMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetErrorMutedColor() string {
	if o == nil || IsNil(o.ErrorMutedColor) {
		var ret string
		return ret
	}
	return *o.ErrorMutedColor
}

// GetErrorMutedColorOk returns a tuple with the ErrorMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetErrorMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMutedColor) {
		return nil, false
	}
	return o.ErrorMutedColor, true
}

// HasErrorMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasErrorMutedColor() bool {
	if o != nil && !IsNil(o.ErrorMutedColor) {
		return true
	}

	return false
}

// SetErrorMutedColor gets a reference to the given string and assigns it to the ErrorMutedColor field.
func (o *ProjectBrandingTheme) SetErrorMutedColor(v string) {
	o.ErrorMutedColor = &v
}

// GetErrorSubtleColor returns the ErrorSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetErrorSubtleColor() string {
	if o == nil || IsNil(o.ErrorSubtleColor) {
		var ret string
		return ret
	}
	return *o.ErrorSubtleColor
}

// GetErrorSubtleColorOk returns a tuple with the ErrorSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetErrorSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorSubtleColor) {
		return nil, false
	}
	return o.ErrorSubtleColor, true
}

// HasErrorSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasErrorSubtleColor() bool {
	if o != nil && !IsNil(o.ErrorSubtleColor) {
		return true
	}

	return false
}

// SetErrorSubtleColor gets a reference to the given string and assigns it to the ErrorSubtleColor field.
func (o *ProjectBrandingTheme) SetErrorSubtleColor(v string) {
	o.ErrorSubtleColor = &v
}

// GetFaviconType returns the FaviconType field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetFaviconType() string {
	if o == nil || IsNil(o.FaviconType) {
		var ret string
		return ret
	}
	return *o.FaviconType
}

// GetFaviconTypeOk returns a tuple with the FaviconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetFaviconTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FaviconType) {
		return nil, false
	}
	return o.FaviconType, true
}

// HasFaviconType returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasFaviconType() bool {
	if o != nil && !IsNil(o.FaviconType) {
		return true
	}

	return false
}

// SetFaviconType gets a reference to the given string and assigns it to the FaviconType field.
func (o *ProjectBrandingTheme) SetFaviconType(v string) {
	o.FaviconType = &v
}

// GetFaviconUrl returns the FaviconUrl field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetFaviconUrl() string {
	if o == nil || IsNil(o.FaviconUrl) {
		var ret string
		return ret
	}
	return *o.FaviconUrl
}

// GetFaviconUrlOk returns a tuple with the FaviconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetFaviconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FaviconUrl) {
		return nil, false
	}
	return o.FaviconUrl, true
}

// HasFaviconUrl returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasFaviconUrl() bool {
	if o != nil && !IsNil(o.FaviconUrl) {
		return true
	}

	return false
}

// SetFaviconUrl gets a reference to the given string and assigns it to the FaviconUrl field.
func (o *ProjectBrandingTheme) SetFaviconUrl(v string) {
	o.FaviconUrl = &v
}

// GetForegroundDefaultColor returns the ForegroundDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundDefaultColor() string {
	if o == nil || IsNil(o.ForegroundDefaultColor) {
		var ret string
		return ret
	}
	return *o.ForegroundDefaultColor
}

// GetForegroundDefaultColorOk returns a tuple with the ForegroundDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundDefaultColor) {
		return nil, false
	}
	return o.ForegroundDefaultColor, true
}

// HasForegroundDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundDefaultColor() bool {
	if o != nil && !IsNil(o.ForegroundDefaultColor) {
		return true
	}

	return false
}

// SetForegroundDefaultColor gets a reference to the given string and assigns it to the ForegroundDefaultColor field.
func (o *ProjectBrandingTheme) SetForegroundDefaultColor(v string) {
	o.ForegroundDefaultColor = &v
}

// GetForegroundDisabledColor returns the ForegroundDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundDisabledColor() string {
	if o == nil || IsNil(o.ForegroundDisabledColor) {
		var ret string
		return ret
	}
	return *o.ForegroundDisabledColor
}

// GetForegroundDisabledColorOk returns a tuple with the ForegroundDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundDisabledColor) {
		return nil, false
	}
	return o.ForegroundDisabledColor, true
}

// HasForegroundDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundDisabledColor() bool {
	if o != nil && !IsNil(o.ForegroundDisabledColor) {
		return true
	}

	return false
}

// SetForegroundDisabledColor gets a reference to the given string and assigns it to the ForegroundDisabledColor field.
func (o *ProjectBrandingTheme) SetForegroundDisabledColor(v string) {
	o.ForegroundDisabledColor = &v
}

// GetForegroundMutedColor returns the ForegroundMutedColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundMutedColor() string {
	if o == nil || IsNil(o.ForegroundMutedColor) {
		var ret string
		return ret
	}
	return *o.ForegroundMutedColor
}

// GetForegroundMutedColorOk returns a tuple with the ForegroundMutedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundMutedColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundMutedColor) {
		return nil, false
	}
	return o.ForegroundMutedColor, true
}

// HasForegroundMutedColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundMutedColor() bool {
	if o != nil && !IsNil(o.ForegroundMutedColor) {
		return true
	}

	return false
}

// SetForegroundMutedColor gets a reference to the given string and assigns it to the ForegroundMutedColor field.
func (o *ProjectBrandingTheme) SetForegroundMutedColor(v string) {
	o.ForegroundMutedColor = &v
}

// GetForegroundOnAccentColor returns the ForegroundOnAccentColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundOnAccentColor() string {
	if o == nil || IsNil(o.ForegroundOnAccentColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnAccentColor
}

// GetForegroundOnAccentColorOk returns a tuple with the ForegroundOnAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundOnAccentColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnAccentColor) {
		return nil, false
	}
	return o.ForegroundOnAccentColor, true
}

// HasForegroundOnAccentColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundOnAccentColor() bool {
	if o != nil && !IsNil(o.ForegroundOnAccentColor) {
		return true
	}

	return false
}

// SetForegroundOnAccentColor gets a reference to the given string and assigns it to the ForegroundOnAccentColor field.
func (o *ProjectBrandingTheme) SetForegroundOnAccentColor(v string) {
	o.ForegroundOnAccentColor = &v
}

// GetForegroundOnDarkColor returns the ForegroundOnDarkColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundOnDarkColor() string {
	if o == nil || IsNil(o.ForegroundOnDarkColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnDarkColor
}

// GetForegroundOnDarkColorOk returns a tuple with the ForegroundOnDarkColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundOnDarkColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnDarkColor) {
		return nil, false
	}
	return o.ForegroundOnDarkColor, true
}

// HasForegroundOnDarkColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundOnDarkColor() bool {
	if o != nil && !IsNil(o.ForegroundOnDarkColor) {
		return true
	}

	return false
}

// SetForegroundOnDarkColor gets a reference to the given string and assigns it to the ForegroundOnDarkColor field.
func (o *ProjectBrandingTheme) SetForegroundOnDarkColor(v string) {
	o.ForegroundOnDarkColor = &v
}

// GetForegroundOnDisabledColor returns the ForegroundOnDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundOnDisabledColor() string {
	if o == nil || IsNil(o.ForegroundOnDisabledColor) {
		var ret string
		return ret
	}
	return *o.ForegroundOnDisabledColor
}

// GetForegroundOnDisabledColorOk returns a tuple with the ForegroundOnDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundOnDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundOnDisabledColor) {
		return nil, false
	}
	return o.ForegroundOnDisabledColor, true
}

// HasForegroundOnDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundOnDisabledColor() bool {
	if o != nil && !IsNil(o.ForegroundOnDisabledColor) {
		return true
	}

	return false
}

// SetForegroundOnDisabledColor gets a reference to the given string and assigns it to the ForegroundOnDisabledColor field.
func (o *ProjectBrandingTheme) SetForegroundOnDisabledColor(v string) {
	o.ForegroundOnDisabledColor = &v
}

// GetForegroundSubtleColor returns the ForegroundSubtleColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetForegroundSubtleColor() string {
	if o == nil || IsNil(o.ForegroundSubtleColor) {
		var ret string
		return ret
	}
	return *o.ForegroundSubtleColor
}

// GetForegroundSubtleColorOk returns a tuple with the ForegroundSubtleColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetForegroundSubtleColorOk() (*string, bool) {
	if o == nil || IsNil(o.ForegroundSubtleColor) {
		return nil, false
	}
	return o.ForegroundSubtleColor, true
}

// HasForegroundSubtleColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasForegroundSubtleColor() bool {
	if o != nil && !IsNil(o.ForegroundSubtleColor) {
		return true
	}

	return false
}

// SetForegroundSubtleColor gets a reference to the given string and assigns it to the ForegroundSubtleColor field.
func (o *ProjectBrandingTheme) SetForegroundSubtleColor(v string) {
	o.ForegroundSubtleColor = &v
}

// GetId returns the Id field value
func (o *ProjectBrandingTheme) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectBrandingTheme) SetId(v string) {
	o.Id = v
}

// GetInputBackgroundColor returns the InputBackgroundColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetInputBackgroundColor() string {
	if o == nil || IsNil(o.InputBackgroundColor) {
		var ret string
		return ret
	}
	return *o.InputBackgroundColor
}

// GetInputBackgroundColorOk returns a tuple with the InputBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetInputBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputBackgroundColor) {
		return nil, false
	}
	return o.InputBackgroundColor, true
}

// HasInputBackgroundColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasInputBackgroundColor() bool {
	if o != nil && !IsNil(o.InputBackgroundColor) {
		return true
	}

	return false
}

// SetInputBackgroundColor gets a reference to the given string and assigns it to the InputBackgroundColor field.
func (o *ProjectBrandingTheme) SetInputBackgroundColor(v string) {
	o.InputBackgroundColor = &v
}

// GetInputDisabledColor returns the InputDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetInputDisabledColor() string {
	if o == nil || IsNil(o.InputDisabledColor) {
		var ret string
		return ret
	}
	return *o.InputDisabledColor
}

// GetInputDisabledColorOk returns a tuple with the InputDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetInputDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputDisabledColor) {
		return nil, false
	}
	return o.InputDisabledColor, true
}

// HasInputDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasInputDisabledColor() bool {
	if o != nil && !IsNil(o.InputDisabledColor) {
		return true
	}

	return false
}

// SetInputDisabledColor gets a reference to the given string and assigns it to the InputDisabledColor field.
func (o *ProjectBrandingTheme) SetInputDisabledColor(v string) {
	o.InputDisabledColor = &v
}

// GetInputPlaceholderColor returns the InputPlaceholderColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetInputPlaceholderColor() string {
	if o == nil || IsNil(o.InputPlaceholderColor) {
		var ret string
		return ret
	}
	return *o.InputPlaceholderColor
}

// GetInputPlaceholderColorOk returns a tuple with the InputPlaceholderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetInputPlaceholderColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputPlaceholderColor) {
		return nil, false
	}
	return o.InputPlaceholderColor, true
}

// HasInputPlaceholderColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasInputPlaceholderColor() bool {
	if o != nil && !IsNil(o.InputPlaceholderColor) {
		return true
	}

	return false
}

// SetInputPlaceholderColor gets a reference to the given string and assigns it to the InputPlaceholderColor field.
func (o *ProjectBrandingTheme) SetInputPlaceholderColor(v string) {
	o.InputPlaceholderColor = &v
}

// GetInputTextColor returns the InputTextColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetInputTextColor() string {
	if o == nil || IsNil(o.InputTextColor) {
		var ret string
		return ret
	}
	return *o.InputTextColor
}

// GetInputTextColorOk returns a tuple with the InputTextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetInputTextColorOk() (*string, bool) {
	if o == nil || IsNil(o.InputTextColor) {
		return nil, false
	}
	return o.InputTextColor, true
}

// HasInputTextColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasInputTextColor() bool {
	if o != nil && !IsNil(o.InputTextColor) {
		return true
	}

	return false
}

// SetInputTextColor gets a reference to the given string and assigns it to the InputTextColor field.
func (o *ProjectBrandingTheme) SetInputTextColor(v string) {
	o.InputTextColor = &v
}

// GetLogoType returns the LogoType field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetLogoType() string {
	if o == nil || IsNil(o.LogoType) {
		var ret string
		return ret
	}
	return *o.LogoType
}

// GetLogoTypeOk returns a tuple with the LogoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetLogoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LogoType) {
		return nil, false
	}
	return o.LogoType, true
}

// HasLogoType returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasLogoType() bool {
	if o != nil && !IsNil(o.LogoType) {
		return true
	}

	return false
}

// SetLogoType gets a reference to the given string and assigns it to the LogoType field.
func (o *ProjectBrandingTheme) SetLogoType(v string) {
	o.LogoType = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *ProjectBrandingTheme) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetName returns the Name field value
func (o *ProjectBrandingTheme) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectBrandingTheme) SetName(v string) {
	o.Name = v
}

// GetPrimaryColor returns the PrimaryColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetPrimaryColor() string {
	if o == nil || IsNil(o.PrimaryColor) {
		var ret string
		return ret
	}
	return *o.PrimaryColor
}

// GetPrimaryColorOk returns a tuple with the PrimaryColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetPrimaryColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryColor) {
		return nil, false
	}
	return o.PrimaryColor, true
}

// HasPrimaryColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasPrimaryColor() bool {
	if o != nil && !IsNil(o.PrimaryColor) {
		return true
	}

	return false
}

// SetPrimaryColor gets a reference to the given string and assigns it to the PrimaryColor field.
func (o *ProjectBrandingTheme) SetPrimaryColor(v string) {
	o.PrimaryColor = &v
}

// GetProjectBrandingId returns the ProjectBrandingId field value
func (o *ProjectBrandingTheme) GetProjectBrandingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectBrandingId
}

// GetProjectBrandingIdOk returns a tuple with the ProjectBrandingId field value
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetProjectBrandingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectBrandingId, true
}

// SetProjectBrandingId sets field value
func (o *ProjectBrandingTheme) SetProjectBrandingId(v string) {
	o.ProjectBrandingId = v
}

// GetSecondaryColor returns the SecondaryColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetSecondaryColor() string {
	if o == nil || IsNil(o.SecondaryColor) {
		var ret string
		return ret
	}
	return *o.SecondaryColor
}

// GetSecondaryColorOk returns a tuple with the SecondaryColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetSecondaryColorOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryColor) {
		return nil, false
	}
	return o.SecondaryColor, true
}

// HasSecondaryColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasSecondaryColor() bool {
	if o != nil && !IsNil(o.SecondaryColor) {
		return true
	}

	return false
}

// SetSecondaryColor gets a reference to the given string and assigns it to the SecondaryColor field.
func (o *ProjectBrandingTheme) SetSecondaryColor(v string) {
	o.SecondaryColor = &v
}

// GetSuccessEmphasisColor returns the SuccessEmphasisColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetSuccessEmphasisColor() string {
	if o == nil || IsNil(o.SuccessEmphasisColor) {
		var ret string
		return ret
	}
	return *o.SuccessEmphasisColor
}

// GetSuccessEmphasisColorOk returns a tuple with the SuccessEmphasisColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetSuccessEmphasisColorOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessEmphasisColor) {
		return nil, false
	}
	return o.SuccessEmphasisColor, true
}

// HasSuccessEmphasisColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasSuccessEmphasisColor() bool {
	if o != nil && !IsNil(o.SuccessEmphasisColor) {
		return true
	}

	return false
}

// SetSuccessEmphasisColor gets a reference to the given string and assigns it to the SuccessEmphasisColor field.
func (o *ProjectBrandingTheme) SetSuccessEmphasisColor(v string) {
	o.SuccessEmphasisColor = &v
}

// GetTextDefaultColor returns the TextDefaultColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetTextDefaultColor() string {
	if o == nil || IsNil(o.TextDefaultColor) {
		var ret string
		return ret
	}
	return *o.TextDefaultColor
}

// GetTextDefaultColorOk returns a tuple with the TextDefaultColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetTextDefaultColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextDefaultColor) {
		return nil, false
	}
	return o.TextDefaultColor, true
}

// HasTextDefaultColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasTextDefaultColor() bool {
	if o != nil && !IsNil(o.TextDefaultColor) {
		return true
	}

	return false
}

// SetTextDefaultColor gets a reference to the given string and assigns it to the TextDefaultColor field.
func (o *ProjectBrandingTheme) SetTextDefaultColor(v string) {
	o.TextDefaultColor = &v
}

// GetTextDisabledColor returns the TextDisabledColor field value if set, zero value otherwise.
func (o *ProjectBrandingTheme) GetTextDisabledColor() string {
	if o == nil || IsNil(o.TextDisabledColor) {
		var ret string
		return ret
	}
	return *o.TextDisabledColor
}

// GetTextDisabledColorOk returns a tuple with the TextDisabledColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetTextDisabledColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextDisabledColor) {
		return nil, false
	}
	return o.TextDisabledColor, true
}

// HasTextDisabledColor returns a boolean if a field has been set.
func (o *ProjectBrandingTheme) HasTextDisabledColor() bool {
	if o != nil && !IsNil(o.TextDisabledColor) {
		return true
	}

	return false
}

// SetTextDisabledColor gets a reference to the given string and assigns it to the TextDisabledColor field.
func (o *ProjectBrandingTheme) SetTextDisabledColor(v string) {
	o.TextDisabledColor = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ProjectBrandingTheme) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectBrandingTheme) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ProjectBrandingTheme) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ProjectBrandingTheme) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBrandingTheme) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccentDefaultColor) {
		toSerialize["accent_default_color"] = o.AccentDefaultColor
	}
	if !IsNil(o.AccentDisabledColor) {
		toSerialize["accent_disabled_color"] = o.AccentDisabledColor
	}
	if !IsNil(o.AccentEmphasisColor) {
		toSerialize["accent_emphasis_color"] = o.AccentEmphasisColor
	}
	if !IsNil(o.AccentMutedColor) {
		toSerialize["accent_muted_color"] = o.AccentMutedColor
	}
	if !IsNil(o.AccentSubtleColor) {
		toSerialize["accent_subtle_color"] = o.AccentSubtleColor
	}
	if !IsNil(o.BackgroundCanvasColor) {
		toSerialize["background_canvas_color"] = o.BackgroundCanvasColor
	}
	if !IsNil(o.BackgroundSubtleColor) {
		toSerialize["background_subtle_color"] = o.BackgroundSubtleColor
	}
	if !IsNil(o.BackgroundSurfaceColor) {
		toSerialize["background_surface_color"] = o.BackgroundSurfaceColor
	}
	if !IsNil(o.BorderDefaultColor) {
		toSerialize["border_default_color"] = o.BorderDefaultColor
	}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.ErrorDefaultColor) {
		toSerialize["error_default_color"] = o.ErrorDefaultColor
	}
	if !IsNil(o.ErrorEmphasisColor) {
		toSerialize["error_emphasis_color"] = o.ErrorEmphasisColor
	}
	if !IsNil(o.ErrorMutedColor) {
		toSerialize["error_muted_color"] = o.ErrorMutedColor
	}
	if !IsNil(o.ErrorSubtleColor) {
		toSerialize["error_subtle_color"] = o.ErrorSubtleColor
	}
	if !IsNil(o.FaviconType) {
		toSerialize["favicon_type"] = o.FaviconType
	}
	if !IsNil(o.FaviconUrl) {
		toSerialize["favicon_url"] = o.FaviconUrl
	}
	if !IsNil(o.ForegroundDefaultColor) {
		toSerialize["foreground_default_color"] = o.ForegroundDefaultColor
	}
	if !IsNil(o.ForegroundDisabledColor) {
		toSerialize["foreground_disabled_color"] = o.ForegroundDisabledColor
	}
	if !IsNil(o.ForegroundMutedColor) {
		toSerialize["foreground_muted_color"] = o.ForegroundMutedColor
	}
	if !IsNil(o.ForegroundOnAccentColor) {
		toSerialize["foreground_on_accent_color"] = o.ForegroundOnAccentColor
	}
	if !IsNil(o.ForegroundOnDarkColor) {
		toSerialize["foreground_on_dark_color"] = o.ForegroundOnDarkColor
	}
	if !IsNil(o.ForegroundOnDisabledColor) {
		toSerialize["foreground_on_disabled_color"] = o.ForegroundOnDisabledColor
	}
	if !IsNil(o.ForegroundSubtleColor) {
		toSerialize["foreground_subtle_color"] = o.ForegroundSubtleColor
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.InputBackgroundColor) {
		toSerialize["input_background_color"] = o.InputBackgroundColor
	}
	if !IsNil(o.InputDisabledColor) {
		toSerialize["input_disabled_color"] = o.InputDisabledColor
	}
	if !IsNil(o.InputPlaceholderColor) {
		toSerialize["input_placeholder_color"] = o.InputPlaceholderColor
	}
	if !IsNil(o.InputTextColor) {
		toSerialize["input_text_color"] = o.InputTextColor
	}
	if !IsNil(o.LogoType) {
		toSerialize["logo_type"] = o.LogoType
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.PrimaryColor) {
		toSerialize["primary_color"] = o.PrimaryColor
	}
	toSerialize["project_branding_id"] = o.ProjectBrandingId
	if !IsNil(o.SecondaryColor) {
		toSerialize["secondary_color"] = o.SecondaryColor
	}
	if !IsNil(o.SuccessEmphasisColor) {
		toSerialize["success_emphasis_color"] = o.SuccessEmphasisColor
	}
	if !IsNil(o.TextDefaultColor) {
		toSerialize["text_default_color"] = o.TextDefaultColor
	}
	if !IsNil(o.TextDisabledColor) {
		toSerialize["text_disabled_color"] = o.TextDisabledColor
	}
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectBrandingTheme) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"name",
		"project_branding_id",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectBrandingTheme := _ProjectBrandingTheme{}

	err = json.Unmarshal(bytes, &varProjectBrandingTheme)

	if err != nil {
		return err
	}

	*o = ProjectBrandingTheme(varProjectBrandingTheme)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accent_default_color")
		delete(additionalProperties, "accent_disabled_color")
		delete(additionalProperties, "accent_emphasis_color")
		delete(additionalProperties, "accent_muted_color")
		delete(additionalProperties, "accent_subtle_color")
		delete(additionalProperties, "background_canvas_color")
		delete(additionalProperties, "background_subtle_color")
		delete(additionalProperties, "background_surface_color")
		delete(additionalProperties, "border_default_color")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "error_default_color")
		delete(additionalProperties, "error_emphasis_color")
		delete(additionalProperties, "error_muted_color")
		delete(additionalProperties, "error_subtle_color")
		delete(additionalProperties, "favicon_type")
		delete(additionalProperties, "favicon_url")
		delete(additionalProperties, "foreground_default_color")
		delete(additionalProperties, "foreground_disabled_color")
		delete(additionalProperties, "foreground_muted_color")
		delete(additionalProperties, "foreground_on_accent_color")
		delete(additionalProperties, "foreground_on_dark_color")
		delete(additionalProperties, "foreground_on_disabled_color")
		delete(additionalProperties, "foreground_subtle_color")
		delete(additionalProperties, "id")
		delete(additionalProperties, "input_background_color")
		delete(additionalProperties, "input_disabled_color")
		delete(additionalProperties, "input_placeholder_color")
		delete(additionalProperties, "input_text_color")
		delete(additionalProperties, "logo_type")
		delete(additionalProperties, "logo_url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "primary_color")
		delete(additionalProperties, "project_branding_id")
		delete(additionalProperties, "secondary_color")
		delete(additionalProperties, "success_emphasis_color")
		delete(additionalProperties, "text_default_color")
		delete(additionalProperties, "text_disabled_color")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectBrandingTheme struct {
	value *ProjectBrandingTheme
	isSet bool
}

func (v NullableProjectBrandingTheme) Get() *ProjectBrandingTheme {
	return v.value
}

func (v *NullableProjectBrandingTheme) Set(val *ProjectBrandingTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBrandingTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBrandingTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBrandingTheme(val *ProjectBrandingTheme) *NullableProjectBrandingTheme {
	return &NullableProjectBrandingTheme{value: val, isSet: true}
}

func (v NullableProjectBrandingTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBrandingTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


