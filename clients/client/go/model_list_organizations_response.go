/*
Ory APIs

Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

API version: v1.2.10
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ListOrganizationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrganizationsResponse{}

// ListOrganizationsResponse B2B SSO Organization List
type ListOrganizationsResponse struct {
	Organizations []Organization `json:"organizations"`
	AdditionalProperties map[string]interface{}
}

type _ListOrganizationsResponse ListOrganizationsResponse

// NewListOrganizationsResponse instantiates a new ListOrganizationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrganizationsResponse(organizations []Organization) *ListOrganizationsResponse {
	this := ListOrganizationsResponse{}
	this.Organizations = organizations
	return &this
}

// NewListOrganizationsResponseWithDefaults instantiates a new ListOrganizationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrganizationsResponseWithDefaults() *ListOrganizationsResponse {
	this := ListOrganizationsResponse{}
	return &this
}

// GetOrganizations returns the Organizations field value
func (o *ListOrganizationsResponse) GetOrganizations() []Organization {
	if o == nil {
		var ret []Organization
		return ret
	}

	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationsResponse) GetOrganizationsOk() ([]Organization, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organizations, true
}

// SetOrganizations sets field value
func (o *ListOrganizationsResponse) SetOrganizations(v []Organization) {
	o.Organizations = v
}

func (o ListOrganizationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOrganizationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizations"] = o.Organizations

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListOrganizationsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varListOrganizationsResponse := _ListOrganizationsResponse{}

	err = json.Unmarshal(bytes, &varListOrganizationsResponse)

	if err != nil {
		return err
	}

	*o = ListOrganizationsResponse(varListOrganizationsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "organizations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListOrganizationsResponse struct {
	value *ListOrganizationsResponse
	isSet bool
}

func (v NullableListOrganizationsResponse) Get() *ListOrganizationsResponse {
	return v.value
}

func (v *NullableListOrganizationsResponse) Set(val *ListOrganizationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizationsResponse(val *ListOrganizationsResponse) *NullableListOrganizationsResponse {
	return &NullableListOrganizationsResponse{value: val, isSet: true}
}

func (v NullableListOrganizationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


