/*
Ory APIs

# Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 

API version: v1.21.5
Contact: support@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateRecoveryFlowWithCodeMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRecoveryFlowWithCodeMethod{}

// UpdateRecoveryFlowWithCodeMethod Update Recovery Flow with Code Method
type UpdateRecoveryFlowWithCodeMethod struct {
	// Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
	Code *string `json:"code,omitempty"`
	// Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`
	// The email address of the account to recover  If the email belongs to a valid account, a recovery email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email
	Email *string `json:"email,omitempty"`
	// Method is the method that should be used for this recovery flow  Allowed values are `link` and `code`. link RecoveryStrategyLink code RecoveryStrategyCode
	Method string `json:"method"`
	// A recovery address that is registered for the user. It can be an email, a phone number (to receive the code via SMS), etc. Used in RecoveryV2.
	RecoveryAddress *string `json:"recovery_address,omitempty"`
	// If there are multiple recovery addresses registered for the user, and the initially provided address is different from the address chosen when the choice (of masked addresses) is presented, then we need to make sure that the user actually knows the full address to avoid information exfiltration, so we ask for the full address. Used in RecoveryV2.
	RecoveryConfirmAddress *string `json:"recovery_confirm_address,omitempty"`
	// If there are multiple addresses registered for the user, a choice is presented and this field stores the result of this choice. Addresses are 'masked' (never sent in full to the client and shown partially in the UI) since at this point in the recovery flow, the user has not yet proven that it knows the full address and we want to avoid information exfiltration. So for all intents and purposes, the value of this field should be treated as an opaque identifier. Used in RecoveryV2.
	RecoverySelectAddress *string `json:"recovery_select_address,omitempty"`
	// Set to \"previous\" to go back in the flow, meaningfully. Used in RecoveryV2.
	Screen *string `json:"screen,omitempty"`
	// Transient data to pass along to any webhooks
	TransientPayload map[string]interface{} `json:"transient_payload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRecoveryFlowWithCodeMethod UpdateRecoveryFlowWithCodeMethod

// NewUpdateRecoveryFlowWithCodeMethod instantiates a new UpdateRecoveryFlowWithCodeMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecoveryFlowWithCodeMethod(method string) *UpdateRecoveryFlowWithCodeMethod {
	this := UpdateRecoveryFlowWithCodeMethod{}
	this.Method = method
	return &this
}

// NewUpdateRecoveryFlowWithCodeMethodWithDefaults instantiates a new UpdateRecoveryFlowWithCodeMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecoveryFlowWithCodeMethodWithDefaults() *UpdateRecoveryFlowWithCodeMethod {
	this := UpdateRecoveryFlowWithCodeMethod{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetCode(v string) {
	o.Code = &v
}

// GetCsrfToken returns the CsrfToken field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetCsrfToken() string {
	if o == nil || IsNil(o.CsrfToken) {
		var ret string
		return ret
	}
	return *o.CsrfToken
}

// GetCsrfTokenOk returns a tuple with the CsrfToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetCsrfTokenOk() (*string, bool) {
	if o == nil || IsNil(o.CsrfToken) {
		return nil, false
	}
	return o.CsrfToken, true
}

// HasCsrfToken returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasCsrfToken() bool {
	if o != nil && !IsNil(o.CsrfToken) {
		return true
	}

	return false
}

// SetCsrfToken gets a reference to the given string and assigns it to the CsrfToken field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetCsrfToken(v string) {
	o.CsrfToken = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetEmail(v string) {
	o.Email = &v
}

// GetMethod returns the Method field value
func (o *UpdateRecoveryFlowWithCodeMethod) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *UpdateRecoveryFlowWithCodeMethod) SetMethod(v string) {
	o.Method = v
}

// GetRecoveryAddress returns the RecoveryAddress field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoveryAddress() string {
	if o == nil || IsNil(o.RecoveryAddress) {
		var ret string
		return ret
	}
	return *o.RecoveryAddress
}

// GetRecoveryAddressOk returns a tuple with the RecoveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoveryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryAddress) {
		return nil, false
	}
	return o.RecoveryAddress, true
}

// HasRecoveryAddress returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasRecoveryAddress() bool {
	if o != nil && !IsNil(o.RecoveryAddress) {
		return true
	}

	return false
}

// SetRecoveryAddress gets a reference to the given string and assigns it to the RecoveryAddress field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetRecoveryAddress(v string) {
	o.RecoveryAddress = &v
}

// GetRecoveryConfirmAddress returns the RecoveryConfirmAddress field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoveryConfirmAddress() string {
	if o == nil || IsNil(o.RecoveryConfirmAddress) {
		var ret string
		return ret
	}
	return *o.RecoveryConfirmAddress
}

// GetRecoveryConfirmAddressOk returns a tuple with the RecoveryConfirmAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoveryConfirmAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryConfirmAddress) {
		return nil, false
	}
	return o.RecoveryConfirmAddress, true
}

// HasRecoveryConfirmAddress returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasRecoveryConfirmAddress() bool {
	if o != nil && !IsNil(o.RecoveryConfirmAddress) {
		return true
	}

	return false
}

// SetRecoveryConfirmAddress gets a reference to the given string and assigns it to the RecoveryConfirmAddress field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetRecoveryConfirmAddress(v string) {
	o.RecoveryConfirmAddress = &v
}

// GetRecoverySelectAddress returns the RecoverySelectAddress field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoverySelectAddress() string {
	if o == nil || IsNil(o.RecoverySelectAddress) {
		var ret string
		return ret
	}
	return *o.RecoverySelectAddress
}

// GetRecoverySelectAddressOk returns a tuple with the RecoverySelectAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetRecoverySelectAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RecoverySelectAddress) {
		return nil, false
	}
	return o.RecoverySelectAddress, true
}

// HasRecoverySelectAddress returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasRecoverySelectAddress() bool {
	if o != nil && !IsNil(o.RecoverySelectAddress) {
		return true
	}

	return false
}

// SetRecoverySelectAddress gets a reference to the given string and assigns it to the RecoverySelectAddress field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetRecoverySelectAddress(v string) {
	o.RecoverySelectAddress = &v
}

// GetScreen returns the Screen field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetScreen() string {
	if o == nil || IsNil(o.Screen) {
		var ret string
		return ret
	}
	return *o.Screen
}

// GetScreenOk returns a tuple with the Screen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetScreenOk() (*string, bool) {
	if o == nil || IsNil(o.Screen) {
		return nil, false
	}
	return o.Screen, true
}

// HasScreen returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasScreen() bool {
	if o != nil && !IsNil(o.Screen) {
		return true
	}

	return false
}

// SetScreen gets a reference to the given string and assigns it to the Screen field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetScreen(v string) {
	o.Screen = &v
}

// GetTransientPayload returns the TransientPayload field value if set, zero value otherwise.
func (o *UpdateRecoveryFlowWithCodeMethod) GetTransientPayload() map[string]interface{} {
	if o == nil || IsNil(o.TransientPayload) {
		var ret map[string]interface{}
		return ret
	}
	return o.TransientPayload
}

// GetTransientPayloadOk returns a tuple with the TransientPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) GetTransientPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TransientPayload) {
		return map[string]interface{}{}, false
	}
	return o.TransientPayload, true
}

// HasTransientPayload returns a boolean if a field has been set.
func (o *UpdateRecoveryFlowWithCodeMethod) HasTransientPayload() bool {
	if o != nil && !IsNil(o.TransientPayload) {
		return true
	}

	return false
}

// SetTransientPayload gets a reference to the given map[string]interface{} and assigns it to the TransientPayload field.
func (o *UpdateRecoveryFlowWithCodeMethod) SetTransientPayload(v map[string]interface{}) {
	o.TransientPayload = v
}

func (o UpdateRecoveryFlowWithCodeMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRecoveryFlowWithCodeMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CsrfToken) {
		toSerialize["csrf_token"] = o.CsrfToken
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	toSerialize["method"] = o.Method
	if !IsNil(o.RecoveryAddress) {
		toSerialize["recovery_address"] = o.RecoveryAddress
	}
	if !IsNil(o.RecoveryConfirmAddress) {
		toSerialize["recovery_confirm_address"] = o.RecoveryConfirmAddress
	}
	if !IsNil(o.RecoverySelectAddress) {
		toSerialize["recovery_select_address"] = o.RecoverySelectAddress
	}
	if !IsNil(o.Screen) {
		toSerialize["screen"] = o.Screen
	}
	if !IsNil(o.TransientPayload) {
		toSerialize["transient_payload"] = o.TransientPayload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRecoveryFlowWithCodeMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRecoveryFlowWithCodeMethod := _UpdateRecoveryFlowWithCodeMethod{}

	err = json.Unmarshal(data, &varUpdateRecoveryFlowWithCodeMethod)

	if err != nil {
		return err
	}

	*o = UpdateRecoveryFlowWithCodeMethod(varUpdateRecoveryFlowWithCodeMethod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "csrf_token")
		delete(additionalProperties, "email")
		delete(additionalProperties, "method")
		delete(additionalProperties, "recovery_address")
		delete(additionalProperties, "recovery_confirm_address")
		delete(additionalProperties, "recovery_select_address")
		delete(additionalProperties, "screen")
		delete(additionalProperties, "transient_payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRecoveryFlowWithCodeMethod struct {
	value *UpdateRecoveryFlowWithCodeMethod
	isSet bool
}

func (v NullableUpdateRecoveryFlowWithCodeMethod) Get() *UpdateRecoveryFlowWithCodeMethod {
	return v.value
}

func (v *NullableUpdateRecoveryFlowWithCodeMethod) Set(val *UpdateRecoveryFlowWithCodeMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecoveryFlowWithCodeMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecoveryFlowWithCodeMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecoveryFlowWithCodeMethod(val *UpdateRecoveryFlowWithCodeMethod) *NullableUpdateRecoveryFlowWithCodeMethod {
	return &NullableUpdateRecoveryFlowWithCodeMethod{value: val, isSet: true}
}

func (v NullableUpdateRecoveryFlowWithCodeMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecoveryFlowWithCodeMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


