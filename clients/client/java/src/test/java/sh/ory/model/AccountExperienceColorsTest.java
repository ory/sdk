/*
 * Ory APIs
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 
 *
 * The version of the OpenAPI document: v1.20.7
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AccountExperienceColors
 */
public class AccountExperienceColorsTest {
    private final AccountExperienceColors model = new AccountExperienceColors();

    /**
     * Model tests for AccountExperienceColors
     */
    @Test
    public void testAccountExperienceColors() {
        // TODO: test AccountExperienceColors
    }

    /**
     * Test the property 'brand100'
     */
    @Test
    public void brand100Test() {
        // TODO: test brand100
    }

    /**
     * Test the property 'brand200'
     */
    @Test
    public void brand200Test() {
        // TODO: test brand200
    }

    /**
     * Test the property 'brand300'
     */
    @Test
    public void brand300Test() {
        // TODO: test brand300
    }

    /**
     * Test the property 'brand400'
     */
    @Test
    public void brand400Test() {
        // TODO: test brand400
    }

    /**
     * Test the property 'brand50'
     */
    @Test
    public void brand50Test() {
        // TODO: test brand50
    }

    /**
     * Test the property 'brand500'
     */
    @Test
    public void brand500Test() {
        // TODO: test brand500
    }

    /**
     * Test the property 'brand600'
     */
    @Test
    public void brand600Test() {
        // TODO: test brand600
    }

    /**
     * Test the property 'brand700'
     */
    @Test
    public void brand700Test() {
        // TODO: test brand700
    }

    /**
     * Test the property 'brand800'
     */
    @Test
    public void brand800Test() {
        // TODO: test brand800
    }

    /**
     * Test the property 'brand900'
     */
    @Test
    public void brand900Test() {
        // TODO: test brand900
    }

    /**
     * Test the property 'brand950'
     */
    @Test
    public void brand950Test() {
        // TODO: test brand950
    }

    /**
     * Test the property 'buttonIdentifierBackgroundDefault'
     */
    @Test
    public void buttonIdentifierBackgroundDefaultTest() {
        // TODO: test buttonIdentifierBackgroundDefault
    }

    /**
     * Test the property 'buttonIdentifierBackgroundHover'
     */
    @Test
    public void buttonIdentifierBackgroundHoverTest() {
        // TODO: test buttonIdentifierBackgroundHover
    }

    /**
     * Test the property 'buttonIdentifierBorderBorderDefault'
     */
    @Test
    public void buttonIdentifierBorderBorderDefaultTest() {
        // TODO: test buttonIdentifierBorderBorderDefault
    }

    /**
     * Test the property 'buttonIdentifierBorderBorderHover'
     */
    @Test
    public void buttonIdentifierBorderBorderHoverTest() {
        // TODO: test buttonIdentifierBorderBorderHover
    }

    /**
     * Test the property 'buttonIdentifierForegroundDefault'
     */
    @Test
    public void buttonIdentifierForegroundDefaultTest() {
        // TODO: test buttonIdentifierForegroundDefault
    }

    /**
     * Test the property 'buttonIdentifierForegroundHover'
     */
    @Test
    public void buttonIdentifierForegroundHoverTest() {
        // TODO: test buttonIdentifierForegroundHover
    }

    /**
     * Test the property 'buttonLinkBrandBrand'
     */
    @Test
    public void buttonLinkBrandBrandTest() {
        // TODO: test buttonLinkBrandBrand
    }

    /**
     * Test the property 'buttonLinkBrandBrandHover'
     */
    @Test
    public void buttonLinkBrandBrandHoverTest() {
        // TODO: test buttonLinkBrandBrandHover
    }

    /**
     * Test the property 'buttonLinkDefaultPrimary'
     */
    @Test
    public void buttonLinkDefaultPrimaryTest() {
        // TODO: test buttonLinkDefaultPrimary
    }

    /**
     * Test the property 'buttonLinkDefaultPrimaryHover'
     */
    @Test
    public void buttonLinkDefaultPrimaryHoverTest() {
        // TODO: test buttonLinkDefaultPrimaryHover
    }

    /**
     * Test the property 'buttonLinkDefaultSecondary'
     */
    @Test
    public void buttonLinkDefaultSecondaryTest() {
        // TODO: test buttonLinkDefaultSecondary
    }

    /**
     * Test the property 'buttonLinkDefaultSecondaryHover'
     */
    @Test
    public void buttonLinkDefaultSecondaryHoverTest() {
        // TODO: test buttonLinkDefaultSecondaryHover
    }

    /**
     * Test the property 'buttonLinkDisabledDisabled'
     */
    @Test
    public void buttonLinkDisabledDisabledTest() {
        // TODO: test buttonLinkDisabledDisabled
    }

    /**
     * Test the property 'buttonPrimaryBackgroundDefault'
     */
    @Test
    public void buttonPrimaryBackgroundDefaultTest() {
        // TODO: test buttonPrimaryBackgroundDefault
    }

    /**
     * Test the property 'buttonPrimaryBackgroundDisabled'
     */
    @Test
    public void buttonPrimaryBackgroundDisabledTest() {
        // TODO: test buttonPrimaryBackgroundDisabled
    }

    /**
     * Test the property 'buttonPrimaryBackgroundHover'
     */
    @Test
    public void buttonPrimaryBackgroundHoverTest() {
        // TODO: test buttonPrimaryBackgroundHover
    }

    /**
     * Test the property 'buttonPrimaryBorderDefault'
     */
    @Test
    public void buttonPrimaryBorderDefaultTest() {
        // TODO: test buttonPrimaryBorderDefault
    }

    /**
     * Test the property 'buttonPrimaryBorderDisabled'
     */
    @Test
    public void buttonPrimaryBorderDisabledTest() {
        // TODO: test buttonPrimaryBorderDisabled
    }

    /**
     * Test the property 'buttonPrimaryBorderHover'
     */
    @Test
    public void buttonPrimaryBorderHoverTest() {
        // TODO: test buttonPrimaryBorderHover
    }

    /**
     * Test the property 'buttonPrimaryForegroundDefault'
     */
    @Test
    public void buttonPrimaryForegroundDefaultTest() {
        // TODO: test buttonPrimaryForegroundDefault
    }

    /**
     * Test the property 'buttonPrimaryForegroundDisabled'
     */
    @Test
    public void buttonPrimaryForegroundDisabledTest() {
        // TODO: test buttonPrimaryForegroundDisabled
    }

    /**
     * Test the property 'buttonPrimaryForegroundHover'
     */
    @Test
    public void buttonPrimaryForegroundHoverTest() {
        // TODO: test buttonPrimaryForegroundHover
    }

    /**
     * Test the property 'buttonSecondaryBackgroundDefault'
     */
    @Test
    public void buttonSecondaryBackgroundDefaultTest() {
        // TODO: test buttonSecondaryBackgroundDefault
    }

    /**
     * Test the property 'buttonSecondaryBackgroundDisabled'
     */
    @Test
    public void buttonSecondaryBackgroundDisabledTest() {
        // TODO: test buttonSecondaryBackgroundDisabled
    }

    /**
     * Test the property 'buttonSecondaryBackgroundHover'
     */
    @Test
    public void buttonSecondaryBackgroundHoverTest() {
        // TODO: test buttonSecondaryBackgroundHover
    }

    /**
     * Test the property 'buttonSecondaryBorderDefault'
     */
    @Test
    public void buttonSecondaryBorderDefaultTest() {
        // TODO: test buttonSecondaryBorderDefault
    }

    /**
     * Test the property 'buttonSecondaryBorderDisabled'
     */
    @Test
    public void buttonSecondaryBorderDisabledTest() {
        // TODO: test buttonSecondaryBorderDisabled
    }

    /**
     * Test the property 'buttonSecondaryBorderHover'
     */
    @Test
    public void buttonSecondaryBorderHoverTest() {
        // TODO: test buttonSecondaryBorderHover
    }

    /**
     * Test the property 'buttonSecondaryForegroundDefault'
     */
    @Test
    public void buttonSecondaryForegroundDefaultTest() {
        // TODO: test buttonSecondaryForegroundDefault
    }

    /**
     * Test the property 'buttonSecondaryForegroundDisabled'
     */
    @Test
    public void buttonSecondaryForegroundDisabledTest() {
        // TODO: test buttonSecondaryForegroundDisabled
    }

    /**
     * Test the property 'buttonSecondaryForegroundHover'
     */
    @Test
    public void buttonSecondaryForegroundHoverTest() {
        // TODO: test buttonSecondaryForegroundHover
    }

    /**
     * Test the property 'buttonSocialBackgroundDefault'
     */
    @Test
    public void buttonSocialBackgroundDefaultTest() {
        // TODO: test buttonSocialBackgroundDefault
    }

    /**
     * Test the property 'buttonSocialBackgroundDisabled'
     */
    @Test
    public void buttonSocialBackgroundDisabledTest() {
        // TODO: test buttonSocialBackgroundDisabled
    }

    /**
     * Test the property 'buttonSocialBackgroundGenericProvider'
     */
    @Test
    public void buttonSocialBackgroundGenericProviderTest() {
        // TODO: test buttonSocialBackgroundGenericProvider
    }

    /**
     * Test the property 'buttonSocialBackgroundHover'
     */
    @Test
    public void buttonSocialBackgroundHoverTest() {
        // TODO: test buttonSocialBackgroundHover
    }

    /**
     * Test the property 'buttonSocialBorderDefault'
     */
    @Test
    public void buttonSocialBorderDefaultTest() {
        // TODO: test buttonSocialBorderDefault
    }

    /**
     * Test the property 'buttonSocialBorderDisabled'
     */
    @Test
    public void buttonSocialBorderDisabledTest() {
        // TODO: test buttonSocialBorderDisabled
    }

    /**
     * Test the property 'buttonSocialBorderGenericProvider'
     */
    @Test
    public void buttonSocialBorderGenericProviderTest() {
        // TODO: test buttonSocialBorderGenericProvider
    }

    /**
     * Test the property 'buttonSocialBorderHover'
     */
    @Test
    public void buttonSocialBorderHoverTest() {
        // TODO: test buttonSocialBorderHover
    }

    /**
     * Test the property 'buttonSocialForegroundDefault'
     */
    @Test
    public void buttonSocialForegroundDefaultTest() {
        // TODO: test buttonSocialForegroundDefault
    }

    /**
     * Test the property 'buttonSocialForegroundDisabled'
     */
    @Test
    public void buttonSocialForegroundDisabledTest() {
        // TODO: test buttonSocialForegroundDisabled
    }

    /**
     * Test the property 'buttonSocialForegroundGenericProvider'
     */
    @Test
    public void buttonSocialForegroundGenericProviderTest() {
        // TODO: test buttonSocialForegroundGenericProvider
    }

    /**
     * Test the property 'buttonSocialForegroundHover'
     */
    @Test
    public void buttonSocialForegroundHoverTest() {
        // TODO: test buttonSocialForegroundHover
    }

    /**
     * Test the property 'checkboxBackgroundChecked'
     */
    @Test
    public void checkboxBackgroundCheckedTest() {
        // TODO: test checkboxBackgroundChecked
    }

    /**
     * Test the property 'checkboxBackgroundDefault'
     */
    @Test
    public void checkboxBackgroundDefaultTest() {
        // TODO: test checkboxBackgroundDefault
    }

    /**
     * Test the property 'checkboxBorderCheckboxBorderChecked'
     */
    @Test
    public void checkboxBorderCheckboxBorderCheckedTest() {
        // TODO: test checkboxBorderCheckboxBorderChecked
    }

    /**
     * Test the property 'checkboxBorderCheckboxBorderDefault'
     */
    @Test
    public void checkboxBorderCheckboxBorderDefaultTest() {
        // TODO: test checkboxBorderCheckboxBorderDefault
    }

    /**
     * Test the property 'checkboxForegroundChecked'
     */
    @Test
    public void checkboxForegroundCheckedTest() {
        // TODO: test checkboxForegroundChecked
    }

    /**
     * Test the property 'checkboxForegroundDefault'
     */
    @Test
    public void checkboxForegroundDefaultTest() {
        // TODO: test checkboxForegroundDefault
    }

    /**
     * Test the property 'formBackgroundDefault'
     */
    @Test
    public void formBackgroundDefaultTest() {
        // TODO: test formBackgroundDefault
    }

    /**
     * Test the property 'formBorderDefault'
     */
    @Test
    public void formBorderDefaultTest() {
        // TODO: test formBorderDefault
    }

    /**
     * Test the property 'inputBackgroundDefault'
     */
    @Test
    public void inputBackgroundDefaultTest() {
        // TODO: test inputBackgroundDefault
    }

    /**
     * Test the property 'inputBackgroundDisabled'
     */
    @Test
    public void inputBackgroundDisabledTest() {
        // TODO: test inputBackgroundDisabled
    }

    /**
     * Test the property 'inputBackgroundHover'
     */
    @Test
    public void inputBackgroundHoverTest() {
        // TODO: test inputBackgroundHover
    }

    /**
     * Test the property 'inputBorderDefault'
     */
    @Test
    public void inputBorderDefaultTest() {
        // TODO: test inputBorderDefault
    }

    /**
     * Test the property 'inputBorderDisabled'
     */
    @Test
    public void inputBorderDisabledTest() {
        // TODO: test inputBorderDisabled
    }

    /**
     * Test the property 'inputBorderFocus'
     */
    @Test
    public void inputBorderFocusTest() {
        // TODO: test inputBorderFocus
    }

    /**
     * Test the property 'inputBorderHover'
     */
    @Test
    public void inputBorderHoverTest() {
        // TODO: test inputBorderHover
    }

    /**
     * Test the property 'inputForegroundDisabled'
     */
    @Test
    public void inputForegroundDisabledTest() {
        // TODO: test inputForegroundDisabled
    }

    /**
     * Test the property 'inputForegroundPrimary'
     */
    @Test
    public void inputForegroundPrimaryTest() {
        // TODO: test inputForegroundPrimary
    }

    /**
     * Test the property 'inputForegroundSecondary'
     */
    @Test
    public void inputForegroundSecondaryTest() {
        // TODO: test inputForegroundSecondary
    }

    /**
     * Test the property 'inputForegroundTertiary'
     */
    @Test
    public void inputForegroundTertiaryTest() {
        // TODO: test inputForegroundTertiary
    }

    /**
     * Test the property 'interfaceBackgroundBrandPrimary'
     */
    @Test
    public void interfaceBackgroundBrandPrimaryTest() {
        // TODO: test interfaceBackgroundBrandPrimary
    }

    /**
     * Test the property 'interfaceBackgroundBrandPrimaryHover'
     */
    @Test
    public void interfaceBackgroundBrandPrimaryHoverTest() {
        // TODO: test interfaceBackgroundBrandPrimaryHover
    }

    /**
     * Test the property 'interfaceBackgroundBrandSecondary'
     */
    @Test
    public void interfaceBackgroundBrandSecondaryTest() {
        // TODO: test interfaceBackgroundBrandSecondary
    }

    /**
     * Test the property 'interfaceBackgroundBrandSecondaryHover'
     */
    @Test
    public void interfaceBackgroundBrandSecondaryHoverTest() {
        // TODO: test interfaceBackgroundBrandSecondaryHover
    }

    /**
     * Test the property 'interfaceBackgroundDefaultInverted'
     */
    @Test
    public void interfaceBackgroundDefaultInvertedTest() {
        // TODO: test interfaceBackgroundDefaultInverted
    }

    /**
     * Test the property 'interfaceBackgroundDefaultInvertedHover'
     */
    @Test
    public void interfaceBackgroundDefaultInvertedHoverTest() {
        // TODO: test interfaceBackgroundDefaultInvertedHover
    }

    /**
     * Test the property 'interfaceBackgroundDefaultNone'
     */
    @Test
    public void interfaceBackgroundDefaultNoneTest() {
        // TODO: test interfaceBackgroundDefaultNone
    }

    /**
     * Test the property 'interfaceBackgroundDefaultPrimary'
     */
    @Test
    public void interfaceBackgroundDefaultPrimaryTest() {
        // TODO: test interfaceBackgroundDefaultPrimary
    }

    /**
     * Test the property 'interfaceBackgroundDefaultPrimaryHover'
     */
    @Test
    public void interfaceBackgroundDefaultPrimaryHoverTest() {
        // TODO: test interfaceBackgroundDefaultPrimaryHover
    }

    /**
     * Test the property 'interfaceBackgroundDefaultSecondary'
     */
    @Test
    public void interfaceBackgroundDefaultSecondaryTest() {
        // TODO: test interfaceBackgroundDefaultSecondary
    }

    /**
     * Test the property 'interfaceBackgroundDefaultSecondaryHover'
     */
    @Test
    public void interfaceBackgroundDefaultSecondaryHoverTest() {
        // TODO: test interfaceBackgroundDefaultSecondaryHover
    }

    /**
     * Test the property 'interfaceBackgroundDefaultTertiary'
     */
    @Test
    public void interfaceBackgroundDefaultTertiaryTest() {
        // TODO: test interfaceBackgroundDefaultTertiary
    }

    /**
     * Test the property 'interfaceBackgroundDefaultTertiaryHover'
     */
    @Test
    public void interfaceBackgroundDefaultTertiaryHoverTest() {
        // TODO: test interfaceBackgroundDefaultTertiaryHover
    }

    /**
     * Test the property 'interfaceBackgroundDisabledDisabled'
     */
    @Test
    public void interfaceBackgroundDisabledDisabledTest() {
        // TODO: test interfaceBackgroundDisabledDisabled
    }

    /**
     * Test the property 'interfaceBackgroundValidationDanger'
     */
    @Test
    public void interfaceBackgroundValidationDangerTest() {
        // TODO: test interfaceBackgroundValidationDanger
    }

    /**
     * Test the property 'interfaceBackgroundValidationSuccess'
     */
    @Test
    public void interfaceBackgroundValidationSuccessTest() {
        // TODO: test interfaceBackgroundValidationSuccess
    }

    /**
     * Test the property 'interfaceBackgroundValidationWarning'
     */
    @Test
    public void interfaceBackgroundValidationWarningTest() {
        // TODO: test interfaceBackgroundValidationWarning
    }

    /**
     * Test the property 'interfaceBorderBrandBrand'
     */
    @Test
    public void interfaceBorderBrandBrandTest() {
        // TODO: test interfaceBorderBrandBrand
    }

    /**
     * Test the property 'interfaceBorderDefaultInverted'
     */
    @Test
    public void interfaceBorderDefaultInvertedTest() {
        // TODO: test interfaceBorderDefaultInverted
    }

    /**
     * Test the property 'interfaceBorderDefaultNone'
     */
    @Test
    public void interfaceBorderDefaultNoneTest() {
        // TODO: test interfaceBorderDefaultNone
    }

    /**
     * Test the property 'interfaceBorderDefaultPrimary'
     */
    @Test
    public void interfaceBorderDefaultPrimaryTest() {
        // TODO: test interfaceBorderDefaultPrimary
    }

    /**
     * Test the property 'interfaceBorderDisabledDisabled'
     */
    @Test
    public void interfaceBorderDisabledDisabledTest() {
        // TODO: test interfaceBorderDisabledDisabled
    }

    /**
     * Test the property 'interfaceBorderValidationDanger'
     */
    @Test
    public void interfaceBorderValidationDangerTest() {
        // TODO: test interfaceBorderValidationDanger
    }

    /**
     * Test the property 'interfaceBorderValidationSuccess'
     */
    @Test
    public void interfaceBorderValidationSuccessTest() {
        // TODO: test interfaceBorderValidationSuccess
    }

    /**
     * Test the property 'interfaceBorderValidationWarning'
     */
    @Test
    public void interfaceBorderValidationWarningTest() {
        // TODO: test interfaceBorderValidationWarning
    }

    /**
     * Test the property 'interfaceForegroundBrandOnPrimary'
     */
    @Test
    public void interfaceForegroundBrandOnPrimaryTest() {
        // TODO: test interfaceForegroundBrandOnPrimary
    }

    /**
     * Test the property 'interfaceForegroundBrandOnSecondary'
     */
    @Test
    public void interfaceForegroundBrandOnSecondaryTest() {
        // TODO: test interfaceForegroundBrandOnSecondary
    }

    /**
     * Test the property 'interfaceForegroundBrandPrimary'
     */
    @Test
    public void interfaceForegroundBrandPrimaryTest() {
        // TODO: test interfaceForegroundBrandPrimary
    }

    /**
     * Test the property 'interfaceForegroundBrandSecondary'
     */
    @Test
    public void interfaceForegroundBrandSecondaryTest() {
        // TODO: test interfaceForegroundBrandSecondary
    }

    /**
     * Test the property 'interfaceForegroundDefaultInverted'
     */
    @Test
    public void interfaceForegroundDefaultInvertedTest() {
        // TODO: test interfaceForegroundDefaultInverted
    }

    /**
     * Test the property 'interfaceForegroundDefaultPrimary'
     */
    @Test
    public void interfaceForegroundDefaultPrimaryTest() {
        // TODO: test interfaceForegroundDefaultPrimary
    }

    /**
     * Test the property 'interfaceForegroundDefaultSecondary'
     */
    @Test
    public void interfaceForegroundDefaultSecondaryTest() {
        // TODO: test interfaceForegroundDefaultSecondary
    }

    /**
     * Test the property 'interfaceForegroundDefaultTertiary'
     */
    @Test
    public void interfaceForegroundDefaultTertiaryTest() {
        // TODO: test interfaceForegroundDefaultTertiary
    }

    /**
     * Test the property 'interfaceForegroundDisabledDisabled'
     */
    @Test
    public void interfaceForegroundDisabledDisabledTest() {
        // TODO: test interfaceForegroundDisabledDisabled
    }

    /**
     * Test the property 'interfaceForegroundDisabledOnDisabled'
     */
    @Test
    public void interfaceForegroundDisabledOnDisabledTest() {
        // TODO: test interfaceForegroundDisabledOnDisabled
    }

    /**
     * Test the property 'interfaceForegroundValidationDanger'
     */
    @Test
    public void interfaceForegroundValidationDangerTest() {
        // TODO: test interfaceForegroundValidationDanger
    }

    /**
     * Test the property 'interfaceForegroundValidationSuccess'
     */
    @Test
    public void interfaceForegroundValidationSuccessTest() {
        // TODO: test interfaceForegroundValidationSuccess
    }

    /**
     * Test the property 'interfaceForegroundValidationWarning'
     */
    @Test
    public void interfaceForegroundValidationWarningTest() {
        // TODO: test interfaceForegroundValidationWarning
    }

    /**
     * Test the property 'oryBackgroundDefault'
     */
    @Test
    public void oryBackgroundDefaultTest() {
        // TODO: test oryBackgroundDefault
    }

    /**
     * Test the property 'oryBorderDefault'
     */
    @Test
    public void oryBorderDefaultTest() {
        // TODO: test oryBorderDefault
    }

    /**
     * Test the property 'oryForegroundDefault'
     */
    @Test
    public void oryForegroundDefaultTest() {
        // TODO: test oryForegroundDefault
    }

    /**
     * Test the property 'radioBackgroundChecked'
     */
    @Test
    public void radioBackgroundCheckedTest() {
        // TODO: test radioBackgroundChecked
    }

    /**
     * Test the property 'radioBackgroundDefault'
     */
    @Test
    public void radioBackgroundDefaultTest() {
        // TODO: test radioBackgroundDefault
    }

    /**
     * Test the property 'radioBorderChecked'
     */
    @Test
    public void radioBorderCheckedTest() {
        // TODO: test radioBorderChecked
    }

    /**
     * Test the property 'radioBorderDefault'
     */
    @Test
    public void radioBorderDefaultTest() {
        // TODO: test radioBorderDefault
    }

    /**
     * Test the property 'radioForegroundChecked'
     */
    @Test
    public void radioForegroundCheckedTest() {
        // TODO: test radioForegroundChecked
    }

    /**
     * Test the property 'radioForegroundDefault'
     */
    @Test
    public void radioForegroundDefaultTest() {
        // TODO: test radioForegroundDefault
    }

    /**
     * Test the property 'toggleBackgroundChecked'
     */
    @Test
    public void toggleBackgroundCheckedTest() {
        // TODO: test toggleBackgroundChecked
    }

    /**
     * Test the property 'toggleBackgroundDefault'
     */
    @Test
    public void toggleBackgroundDefaultTest() {
        // TODO: test toggleBackgroundDefault
    }

    /**
     * Test the property 'toggleBorderChecked'
     */
    @Test
    public void toggleBorderCheckedTest() {
        // TODO: test toggleBorderChecked
    }

    /**
     * Test the property 'toggleBorderDefault'
     */
    @Test
    public void toggleBorderDefaultTest() {
        // TODO: test toggleBorderDefault
    }

    /**
     * Test the property 'toggleForegroundChecked'
     */
    @Test
    public void toggleForegroundCheckedTest() {
        // TODO: test toggleForegroundChecked
    }

    /**
     * Test the property 'toggleForegroundDefault'
     */
    @Test
    public void toggleForegroundDefaultTest() {
        // TODO: test toggleForegroundDefault
    }

    /**
     * Test the property 'ui100'
     */
    @Test
    public void ui100Test() {
        // TODO: test ui100
    }

    /**
     * Test the property 'ui200'
     */
    @Test
    public void ui200Test() {
        // TODO: test ui200
    }

    /**
     * Test the property 'ui300'
     */
    @Test
    public void ui300Test() {
        // TODO: test ui300
    }

    /**
     * Test the property 'ui400'
     */
    @Test
    public void ui400Test() {
        // TODO: test ui400
    }

    /**
     * Test the property 'ui50'
     */
    @Test
    public void ui50Test() {
        // TODO: test ui50
    }

    /**
     * Test the property 'ui500'
     */
    @Test
    public void ui500Test() {
        // TODO: test ui500
    }

    /**
     * Test the property 'ui600'
     */
    @Test
    public void ui600Test() {
        // TODO: test ui600
    }

    /**
     * Test the property 'ui700'
     */
    @Test
    public void ui700Test() {
        // TODO: test ui700
    }

    /**
     * Test the property 'ui800'
     */
    @Test
    public void ui800Test() {
        // TODO: test ui800
    }

    /**
     * Test the property 'ui900'
     */
    @Test
    public void ui900Test() {
        // TODO: test ui900
    }

    /**
     * Test the property 'ui950'
     */
    @Test
    public void ui950Test() {
        // TODO: test ui950
    }

    /**
     * Test the property 'uiBlack'
     */
    @Test
    public void uiBlackTest() {
        // TODO: test uiBlack
    }

    /**
     * Test the property 'uiDanger'
     */
    @Test
    public void uiDangerTest() {
        // TODO: test uiDanger
    }

    /**
     * Test the property 'uiSuccess'
     */
    @Test
    public void uiSuccessTest() {
        // TODO: test uiSuccess
    }

    /**
     * Test the property 'uiTransparent'
     */
    @Test
    public void uiTransparentTest() {
        // TODO: test uiTransparent
    }

    /**
     * Test the property 'uiWarning'
     */
    @Test
    public void uiWarningTest() {
        // TODO: test uiWarning
    }

    /**
     * Test the property 'uiWhite'
     */
    @Test
    public void uiWhiteTest() {
        // TODO: test uiWhite
    }

}
