/*
 * Ory APIs
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 
 *
 * The version of the OpenAPI document: v1.21.1
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sh.ory.JSON;

/**
 * # Ory&#39;s OAuth 2.0 Device Authorization API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T10:12:12.730402277Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class DeviceAuthorization {
  public static final String SERIALIZED_NAME_DEVICE_CODE = "device_code";
  @SerializedName(SERIALIZED_NAME_DEVICE_CODE)
  private String deviceCode;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Long expiresIn;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Long interval;

  public static final String SERIALIZED_NAME_USER_CODE = "user_code";
  @SerializedName(SERIALIZED_NAME_USER_CODE)
  private String userCode;

  public static final String SERIALIZED_NAME_VERIFICATION_URI = "verification_uri";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_URI)
  private String verificationUri;

  public static final String SERIALIZED_NAME_VERIFICATION_URI_COMPLETE = "verification_uri_complete";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_URI_COMPLETE)
  private String verificationUriComplete;

  public DeviceAuthorization() {
  }

  public DeviceAuthorization deviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
    return this;
  }

  /**
   * The device verification code.
   * @return deviceCode
   */
  @javax.annotation.Nullable
  public String getDeviceCode() {
    return deviceCode;
  }

  public void setDeviceCode(String deviceCode) {
    this.deviceCode = deviceCode;
  }


  public DeviceAuthorization expiresIn(Long expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * The lifetime in seconds of the \&quot;device_code\&quot; and \&quot;user_code\&quot;.
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public Long getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Long expiresIn) {
    this.expiresIn = expiresIn;
  }


  public DeviceAuthorization interval(Long interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoint.  If no value is provided, clients MUST use 5 as the default.
   * @return interval
   */
  @javax.annotation.Nullable
  public Long getInterval() {
    return interval;
  }

  public void setInterval(Long interval) {
    this.interval = interval;
  }


  public DeviceAuthorization userCode(String userCode) {
    this.userCode = userCode;
    return this;
  }

  /**
   * The end-user verification code.
   * @return userCode
   */
  @javax.annotation.Nullable
  public String getUserCode() {
    return userCode;
  }

  public void setUserCode(String userCode) {
    this.userCode = userCode;
  }


  public DeviceAuthorization verificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
    return this;
  }

  /**
   * The end-user verification URI on the authorization server.  The URI should be short and easy to remember as end users will be asked to manually type it into their user agent.
   * @return verificationUri
   */
  @javax.annotation.Nullable
  public String getVerificationUri() {
    return verificationUri;
  }

  public void setVerificationUri(String verificationUri) {
    this.verificationUri = verificationUri;
  }


  public DeviceAuthorization verificationUriComplete(String verificationUriComplete) {
    this.verificationUriComplete = verificationUriComplete;
    return this;
  }

  /**
   * A verification URI that includes the \&quot;user_code\&quot; (or other information with the same function as the \&quot;user_code\&quot;), which is designed for non-textual transmission.
   * @return verificationUriComplete
   */
  @javax.annotation.Nullable
  public String getVerificationUriComplete() {
    return verificationUriComplete;
  }

  public void setVerificationUriComplete(String verificationUriComplete) {
    this.verificationUriComplete = verificationUriComplete;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DeviceAuthorization instance itself
   */
  public DeviceAuthorization putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceAuthorization deviceAuthorization = (DeviceAuthorization) o;
    return Objects.equals(this.deviceCode, deviceAuthorization.deviceCode) &&
        Objects.equals(this.expiresIn, deviceAuthorization.expiresIn) &&
        Objects.equals(this.interval, deviceAuthorization.interval) &&
        Objects.equals(this.userCode, deviceAuthorization.userCode) &&
        Objects.equals(this.verificationUri, deviceAuthorization.verificationUri) &&
        Objects.equals(this.verificationUriComplete, deviceAuthorization.verificationUriComplete)&&
        Objects.equals(this.additionalProperties, deviceAuthorization.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceCode, expiresIn, interval, userCode, verificationUri, verificationUriComplete, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceAuthorization {\n");
    sb.append("    deviceCode: ").append(toIndentedString(deviceCode)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    userCode: ").append(toIndentedString(userCode)).append("\n");
    sb.append("    verificationUri: ").append(toIndentedString(verificationUri)).append("\n");
    sb.append("    verificationUriComplete: ").append(toIndentedString(verificationUriComplete)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_code");
    openapiFields.add("expires_in");
    openapiFields.add("interval");
    openapiFields.add("user_code");
    openapiFields.add("verification_uri");
    openapiFields.add("verification_uri_complete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceAuthorization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceAuthorization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceAuthorization is not found in the empty JSON string", DeviceAuthorization.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("device_code") != null && !jsonObj.get("device_code").isJsonNull()) && !jsonObj.get("device_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_code").toString()));
      }
      if ((jsonObj.get("user_code") != null && !jsonObj.get("user_code").isJsonNull()) && !jsonObj.get("user_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_code").toString()));
      }
      if ((jsonObj.get("verification_uri") != null && !jsonObj.get("verification_uri").isJsonNull()) && !jsonObj.get("verification_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_uri").toString()));
      }
      if ((jsonObj.get("verification_uri_complete") != null && !jsonObj.get("verification_uri_complete").isJsonNull()) && !jsonObj.get("verification_uri_complete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_uri_complete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_uri_complete").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceAuthorization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceAuthorization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceAuthorization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceAuthorization.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceAuthorization>() {
           @Override
           public void write(JsonWriter out, DeviceAuthorization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceAuthorization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DeviceAuthorization instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceAuthorization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceAuthorization
   * @throws IOException if the JSON string is invalid with respect to DeviceAuthorization
   */
  public static DeviceAuthorization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceAuthorization.class);
  }

  /**
   * Convert an instance of DeviceAuthorization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

