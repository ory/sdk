/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.1.25
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.JSON;

/**
 * OAuth2 JWT Bearer Grant Type Issuer Trusted JSON Web Key
 */
@ApiModel(description = "OAuth2 JWT Bearer Grant Type Issuer Trusted JSON Web Key")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-24T08:24:45.436303324Z[Etc/UTC]")
public class TrustedOAuth2JwtGrantJsonWebKey {
  public static final String SERIALIZED_NAME_KID = "kid";
  @SerializedName(SERIALIZED_NAME_KID)
  private String kid;

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private String set;

  public TrustedOAuth2JwtGrantJsonWebKey() {
  }

  public TrustedOAuth2JwtGrantJsonWebKey kid(String kid) {
    
    this.kid = kid;
    return this;
  }

   /**
   * The \&quot;key_id\&quot; is key unique identifier (same as kid header in jws/jwt).
   * @return kid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123e4567-e89b-12d3-a456-426655440000", value = "The \"key_id\" is key unique identifier (same as kid header in jws/jwt).")

  public String getKid() {
    return kid;
  }


  public void setKid(String kid) {
    this.kid = kid;
  }


  public TrustedOAuth2JwtGrantJsonWebKey set(String set) {
    
    this.set = set;
    return this;
  }

   /**
   * The \&quot;set\&quot; is basically a name for a group(set) of keys. Will be the same as \&quot;issuer\&quot; in grant.
   * @return set
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://jwt-idp.example.com", value = "The \"set\" is basically a name for a group(set) of keys. Will be the same as \"issuer\" in grant.")

  public String getSet() {
    return set;
  }


  public void setSet(String set) {
    this.set = set;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrustedOAuth2JwtGrantJsonWebKey trustedOAuth2JwtGrantJsonWebKey = (TrustedOAuth2JwtGrantJsonWebKey) o;
    return Objects.equals(this.kid, trustedOAuth2JwtGrantJsonWebKey.kid) &&
        Objects.equals(this.set, trustedOAuth2JwtGrantJsonWebKey.set);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kid, set);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrustedOAuth2JwtGrantJsonWebKey {\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kid");
    openapiFields.add("set");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrustedOAuth2JwtGrantJsonWebKey
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrustedOAuth2JwtGrantJsonWebKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrustedOAuth2JwtGrantJsonWebKey is not found in the empty JSON string", TrustedOAuth2JwtGrantJsonWebKey.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TrustedOAuth2JwtGrantJsonWebKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrustedOAuth2JwtGrantJsonWebKey` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("kid") != null && !jsonObj.get("kid").isJsonNull()) && !jsonObj.get("kid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kid").toString()));
      }
      if ((jsonObj.get("set") != null && !jsonObj.get("set").isJsonNull()) && !jsonObj.get("set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("set").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrustedOAuth2JwtGrantJsonWebKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrustedOAuth2JwtGrantJsonWebKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrustedOAuth2JwtGrantJsonWebKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrustedOAuth2JwtGrantJsonWebKey.class));

       return (TypeAdapter<T>) new TypeAdapter<TrustedOAuth2JwtGrantJsonWebKey>() {
           @Override
           public void write(JsonWriter out, TrustedOAuth2JwtGrantJsonWebKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrustedOAuth2JwtGrantJsonWebKey read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrustedOAuth2JwtGrantJsonWebKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrustedOAuth2JwtGrantJsonWebKey
  * @throws IOException if the JSON string is invalid with respect to TrustedOAuth2JwtGrantJsonWebKey
  */
  public static TrustedOAuth2JwtGrantJsonWebKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrustedOAuth2JwtGrantJsonWebKey.class);
  }

 /**
  * Convert an instance of TrustedOAuth2JwtGrantJsonWebKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

