/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.1.25
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.JSON;

/**
 * OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
@ApiModel(description = "OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-24T08:24:45.436303324Z[Etc/UTC]")
public class OAuth2Client {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_STRATEGY = "access_token_strategy";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_STRATEGY)
  private String accessTokenStrategy;

  public static final String SERIALIZED_NAME_ALLOWED_CORS_ORIGINS = "allowed_cors_origins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CORS_ORIGINS)
  private List<String> allowedCorsOrigins = null;

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private List<String> audience = null;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_ACCESS_TOKEN_LIFESPAN = "authorization_code_grant_access_token_lifespan";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_ACCESS_TOKEN_LIFESPAN)
  private String authorizationCodeGrantAccessTokenLifespan;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_ID_TOKEN_LIFESPAN = "authorization_code_grant_id_token_lifespan";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_ID_TOKEN_LIFESPAN)
  private String authorizationCodeGrantIdTokenLifespan;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_REFRESH_TOKEN_LIFESPAN = "authorization_code_grant_refresh_token_lifespan";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE_GRANT_REFRESH_TOKEN_LIFESPAN)
  private String authorizationCodeGrantRefreshTokenLifespan;

  public static final String SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SESSION_REQUIRED = "backchannel_logout_session_required";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_LOGOUT_SESSION_REQUIRED)
  private Boolean backchannelLogoutSessionRequired;

  public static final String SERIALIZED_NAME_BACKCHANNEL_LOGOUT_URI = "backchannel_logout_uri";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_LOGOUT_URI)
  private String backchannelLogoutUri;

  public static final String SERIALIZED_NAME_CLIENT_CREDENTIALS_GRANT_ACCESS_TOKEN_LIFESPAN = "client_credentials_grant_access_token_lifespan";
  @SerializedName(SERIALIZED_NAME_CLIENT_CREDENTIALS_GRANT_ACCESS_TOKEN_LIFESPAN)
  private String clientCredentialsGrantAccessTokenLifespan;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "client_name";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_CLIENT_SECRET_EXPIRES_AT = "client_secret_expires_at";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET_EXPIRES_AT)
  private Long clientSecretExpiresAt;

  public static final String SERIALIZED_NAME_CLIENT_URI = "client_uri";
  @SerializedName(SERIALIZED_NAME_CLIENT_URI)
  private String clientUri;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<String> contacts = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SESSION_REQUIRED = "frontchannel_logout_session_required";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_SESSION_REQUIRED)
  private Boolean frontchannelLogoutSessionRequired;

  public static final String SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_URI = "frontchannel_logout_uri";
  @SerializedName(SERIALIZED_NAME_FRONTCHANNEL_LOGOUT_URI)
  private String frontchannelLogoutUri;

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grant_types";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<String> grantTypes = null;

  public static final String SERIALIZED_NAME_IMPLICIT_GRANT_ACCESS_TOKEN_LIFESPAN = "implicit_grant_access_token_lifespan";
  @SerializedName(SERIALIZED_NAME_IMPLICIT_GRANT_ACCESS_TOKEN_LIFESPAN)
  private String implicitGrantAccessTokenLifespan;

  public static final String SERIALIZED_NAME_IMPLICIT_GRANT_ID_TOKEN_LIFESPAN = "implicit_grant_id_token_lifespan";
  @SerializedName(SERIALIZED_NAME_IMPLICIT_GRANT_ID_TOKEN_LIFESPAN)
  private String implicitGrantIdTokenLifespan;

  public static final String SERIALIZED_NAME_JWKS = "jwks";
  @SerializedName(SERIALIZED_NAME_JWKS)
  private Object jwks = null;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwks_uri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public static final String SERIALIZED_NAME_JWT_BEARER_GRANT_ACCESS_TOKEN_LIFESPAN = "jwt_bearer_grant_access_token_lifespan";
  @SerializedName(SERIALIZED_NAME_JWT_BEARER_GRANT_ACCESS_TOKEN_LIFESPAN)
  private String jwtBearerGrantAccessTokenLifespan;

  public static final String SERIALIZED_NAME_LOGO_URI = "logo_uri";
  @SerializedName(SERIALIZED_NAME_LOGO_URI)
  private String logoUri;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_POLICY_URI = "policy_uri";
  @SerializedName(SERIALIZED_NAME_POLICY_URI)
  private String policyUri;

  public static final String SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS = "post_logout_redirect_uris";
  @SerializedName(SERIALIZED_NAME_POST_LOGOUT_REDIRECT_URIS)
  private List<String> postLogoutRedirectUris = null;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = null;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_GRANT_ACCESS_TOKEN_LIFESPAN = "refresh_token_grant_access_token_lifespan";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_GRANT_ACCESS_TOKEN_LIFESPAN)
  private String refreshTokenGrantAccessTokenLifespan;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_GRANT_ID_TOKEN_LIFESPAN = "refresh_token_grant_id_token_lifespan";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_GRANT_ID_TOKEN_LIFESPAN)
  private String refreshTokenGrantIdTokenLifespan;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_GRANT_REFRESH_TOKEN_LIFESPAN = "refresh_token_grant_refresh_token_lifespan";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_GRANT_REFRESH_TOKEN_LIFESPAN)
  private String refreshTokenGrantRefreshTokenLifespan;

  public static final String SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN = "registration_access_token";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ACCESS_TOKEN)
  private String registrationAccessToken;

  public static final String SERIALIZED_NAME_REGISTRATION_CLIENT_URI = "registration_client_uri";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_CLIENT_URI)
  private String registrationClientUri;

  public static final String SERIALIZED_NAME_REQUEST_OBJECT_SIGNING_ALG = "request_object_signing_alg";
  @SerializedName(SERIALIZED_NAME_REQUEST_OBJECT_SIGNING_ALG)
  private String requestObjectSigningAlg;

  public static final String SERIALIZED_NAME_REQUEST_URIS = "request_uris";
  @SerializedName(SERIALIZED_NAME_REQUEST_URIS)
  private List<String> requestUris = null;

  public static final String SERIALIZED_NAME_RESPONSE_TYPES = "response_types";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPES)
  private List<String> responseTypes = null;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SECTOR_IDENTIFIER_URI = "sector_identifier_uri";
  @SerializedName(SERIALIZED_NAME_SECTOR_IDENTIFIER_URI)
  private String sectorIdentifierUri;

  public static final String SERIALIZED_NAME_SKIP_CONSENT = "skip_consent";
  @SerializedName(SERIALIZED_NAME_SKIP_CONSENT)
  private Boolean skipConsent;

  public static final String SERIALIZED_NAME_SUBJECT_TYPE = "subject_type";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE)
  private String subjectType;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHOD = "token_endpoint_auth_method";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHOD)
  private String tokenEndpointAuthMethod = "client_secret_basic";

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_SIGNING_ALG = "token_endpoint_auth_signing_alg";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_SIGNING_ALG)
  private String tokenEndpointAuthSigningAlg;

  public static final String SERIALIZED_NAME_TOS_URI = "tos_uri";
  @SerializedName(SERIALIZED_NAME_TOS_URI)
  private String tosUri;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USERINFO_SIGNED_RESPONSE_ALG = "userinfo_signed_response_alg";
  @SerializedName(SERIALIZED_NAME_USERINFO_SIGNED_RESPONSE_ALG)
  private String userinfoSignedResponseAlg;

  public OAuth2Client() {
  }

  public OAuth2Client accessTokenStrategy(String accessTokenStrategy) {
    
    this.accessTokenStrategy = accessTokenStrategy;
    return this;
  }

   /**
   * OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are &#x60;jwt&#x60; and &#x60;opaque&#x60;. &#x60;jwt&#x60; is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in &#x60;strategies.access_token&#x60;.
   * @return accessTokenStrategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in `strategies.access_token`.")

  public String getAccessTokenStrategy() {
    return accessTokenStrategy;
  }


  public void setAccessTokenStrategy(String accessTokenStrategy) {
    this.accessTokenStrategy = accessTokenStrategy;
  }


  public OAuth2Client allowedCorsOrigins(List<String> allowedCorsOrigins) {
    
    this.allowedCorsOrigins = allowedCorsOrigins;
    return this;
  }

  public OAuth2Client addAllowedCorsOriginsItem(String allowedCorsOriginsItem) {
    if (this.allowedCorsOrigins == null) {
      this.allowedCorsOrigins = new ArrayList<>();
    }
    this.allowedCorsOrigins.add(allowedCorsOriginsItem);
    return this;
  }

   /**
   * Get allowedCorsOrigins
   * @return allowedCorsOrigins
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAllowedCorsOrigins() {
    return allowedCorsOrigins;
  }


  public void setAllowedCorsOrigins(List<String> allowedCorsOrigins) {
    this.allowedCorsOrigins = allowedCorsOrigins;
  }


  public OAuth2Client audience(List<String> audience) {
    
    this.audience = audience;
    return this;
  }

  public OAuth2Client addAudienceItem(String audienceItem) {
    if (this.audience == null) {
      this.audience = new ArrayList<>();
    }
    this.audience.add(audienceItem);
    return this;
  }

   /**
   * Get audience
   * @return audience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAudience() {
    return audience;
  }


  public void setAudience(List<String> audience) {
    this.audience = audience;
  }


  public OAuth2Client authorizationCodeGrantAccessTokenLifespan(String authorizationCodeGrantAccessTokenLifespan) {
    
    this.authorizationCodeGrantAccessTokenLifespan = authorizationCodeGrantAccessTokenLifespan;
    return this;
  }

   /**
   * Get authorizationCodeGrantAccessTokenLifespan
   * @return authorizationCodeGrantAccessTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorizationCodeGrantAccessTokenLifespan() {
    return authorizationCodeGrantAccessTokenLifespan;
  }


  public void setAuthorizationCodeGrantAccessTokenLifespan(String authorizationCodeGrantAccessTokenLifespan) {
    this.authorizationCodeGrantAccessTokenLifespan = authorizationCodeGrantAccessTokenLifespan;
  }


  public OAuth2Client authorizationCodeGrantIdTokenLifespan(String authorizationCodeGrantIdTokenLifespan) {
    
    this.authorizationCodeGrantIdTokenLifespan = authorizationCodeGrantIdTokenLifespan;
    return this;
  }

   /**
   * Get authorizationCodeGrantIdTokenLifespan
   * @return authorizationCodeGrantIdTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorizationCodeGrantIdTokenLifespan() {
    return authorizationCodeGrantIdTokenLifespan;
  }


  public void setAuthorizationCodeGrantIdTokenLifespan(String authorizationCodeGrantIdTokenLifespan) {
    this.authorizationCodeGrantIdTokenLifespan = authorizationCodeGrantIdTokenLifespan;
  }


  public OAuth2Client authorizationCodeGrantRefreshTokenLifespan(String authorizationCodeGrantRefreshTokenLifespan) {
    
    this.authorizationCodeGrantRefreshTokenLifespan = authorizationCodeGrantRefreshTokenLifespan;
    return this;
  }

   /**
   * Get authorizationCodeGrantRefreshTokenLifespan
   * @return authorizationCodeGrantRefreshTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorizationCodeGrantRefreshTokenLifespan() {
    return authorizationCodeGrantRefreshTokenLifespan;
  }


  public void setAuthorizationCodeGrantRefreshTokenLifespan(String authorizationCodeGrantRefreshTokenLifespan) {
    this.authorizationCodeGrantRefreshTokenLifespan = authorizationCodeGrantRefreshTokenLifespan;
  }


  public OAuth2Client backchannelLogoutSessionRequired(Boolean backchannelLogoutSessionRequired) {
    
    this.backchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
    return this;
  }

   /**
   * OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
   * @return backchannelLogoutSessionRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.")

  public Boolean getBackchannelLogoutSessionRequired() {
    return backchannelLogoutSessionRequired;
  }


  public void setBackchannelLogoutSessionRequired(Boolean backchannelLogoutSessionRequired) {
    this.backchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
  }


  public OAuth2Client backchannelLogoutUri(String backchannelLogoutUri) {
    
    this.backchannelLogoutUri = backchannelLogoutUri;
    return this;
  }

   /**
   * OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
   * @return backchannelLogoutUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.")

  public String getBackchannelLogoutUri() {
    return backchannelLogoutUri;
  }


  public void setBackchannelLogoutUri(String backchannelLogoutUri) {
    this.backchannelLogoutUri = backchannelLogoutUri;
  }


  public OAuth2Client clientCredentialsGrantAccessTokenLifespan(String clientCredentialsGrantAccessTokenLifespan) {
    
    this.clientCredentialsGrantAccessTokenLifespan = clientCredentialsGrantAccessTokenLifespan;
    return this;
  }

   /**
   * Get clientCredentialsGrantAccessTokenLifespan
   * @return clientCredentialsGrantAccessTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientCredentialsGrantAccessTokenLifespan() {
    return clientCredentialsGrantAccessTokenLifespan;
  }


  public void setClientCredentialsGrantAccessTokenLifespan(String clientCredentialsGrantAccessTokenLifespan) {
    this.clientCredentialsGrantAccessTokenLifespan = clientCredentialsGrantAccessTokenLifespan;
  }


  public OAuth2Client clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * OAuth 2.0 Client ID  The ID is autogenerated and immutable.
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client ID  The ID is autogenerated and immutable.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuth2Client clientName(String clientName) {
    
    this.clientName = clientName;
    return this;
  }

   /**
   * OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
   * @return clientName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.")

  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public OAuth2Client clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public OAuth2Client clientSecretExpiresAt(Long clientSecretExpiresAt) {
    
    this.clientSecretExpiresAt = clientSecretExpiresAt;
    return this;
  }

   /**
   * OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
   * @return clientSecretExpiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.")

  public Long getClientSecretExpiresAt() {
    return clientSecretExpiresAt;
  }


  public void setClientSecretExpiresAt(Long clientSecretExpiresAt) {
    this.clientSecretExpiresAt = clientSecretExpiresAt;
  }


  public OAuth2Client clientUri(String clientUri) {
    
    this.clientUri = clientUri;
    return this;
  }

   /**
   * OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
   * @return clientUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.")

  public String getClientUri() {
    return clientUri;
  }


  public void setClientUri(String clientUri) {
    this.clientUri = clientUri;
  }


  public OAuth2Client contacts(List<String> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public OAuth2Client addContactsItem(String contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getContacts() {
    return contacts;
  }


  public void setContacts(List<String> contacts) {
    this.contacts = contacts;
  }


  public OAuth2Client createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client&#39;s creation.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client's creation.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OAuth2Client frontchannelLogoutSessionRequired(Boolean frontchannelLogoutSessionRequired) {
    
    this.frontchannelLogoutSessionRequired = frontchannelLogoutSessionRequired;
    return this;
  }

   /**
   * OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
   * @return frontchannelLogoutSessionRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.")

  public Boolean getFrontchannelLogoutSessionRequired() {
    return frontchannelLogoutSessionRequired;
  }


  public void setFrontchannelLogoutSessionRequired(Boolean frontchannelLogoutSessionRequired) {
    this.frontchannelLogoutSessionRequired = frontchannelLogoutSessionRequired;
  }


  public OAuth2Client frontchannelLogoutUri(String frontchannelLogoutUri) {
    
    this.frontchannelLogoutUri = frontchannelLogoutUri;
    return this;
  }

   /**
   * OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
   * @return frontchannelLogoutUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.")

  public String getFrontchannelLogoutUri() {
    return frontchannelLogoutUri;
  }


  public void setFrontchannelLogoutUri(String frontchannelLogoutUri) {
    this.frontchannelLogoutUri = frontchannelLogoutUri;
  }


  public OAuth2Client grantTypes(List<String> grantTypes) {
    
    this.grantTypes = grantTypes;
    return this;
  }

  public OAuth2Client addGrantTypesItem(String grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

   /**
   * Get grantTypes
   * @return grantTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getGrantTypes() {
    return grantTypes;
  }


  public void setGrantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
  }


  public OAuth2Client implicitGrantAccessTokenLifespan(String implicitGrantAccessTokenLifespan) {
    
    this.implicitGrantAccessTokenLifespan = implicitGrantAccessTokenLifespan;
    return this;
  }

   /**
   * Get implicitGrantAccessTokenLifespan
   * @return implicitGrantAccessTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImplicitGrantAccessTokenLifespan() {
    return implicitGrantAccessTokenLifespan;
  }


  public void setImplicitGrantAccessTokenLifespan(String implicitGrantAccessTokenLifespan) {
    this.implicitGrantAccessTokenLifespan = implicitGrantAccessTokenLifespan;
  }


  public OAuth2Client implicitGrantIdTokenLifespan(String implicitGrantIdTokenLifespan) {
    
    this.implicitGrantIdTokenLifespan = implicitGrantIdTokenLifespan;
    return this;
  }

   /**
   * Get implicitGrantIdTokenLifespan
   * @return implicitGrantIdTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImplicitGrantIdTokenLifespan() {
    return implicitGrantIdTokenLifespan;
  }


  public void setImplicitGrantIdTokenLifespan(String implicitGrantIdTokenLifespan) {
    this.implicitGrantIdTokenLifespan = implicitGrantIdTokenLifespan;
  }


  public OAuth2Client jwks(Object jwks) {
    
    this.jwks = jwks;
    return this;
  }

   /**
   * OAuth 2.0 Client JSON Web Key Set  Client&#39;s JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
   * @return jwks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.")

  public Object getJwks() {
    return jwks;
  }


  public void setJwks(Object jwks) {
    this.jwks = jwks;
  }


  public OAuth2Client jwksUri(String jwksUri) {
    
    this.jwksUri = jwksUri;
    return this;
  }

   /**
   * OAuth 2.0 Client JSON Web Key Set URL  URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
   * @return jwksUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.")

  public String getJwksUri() {
    return jwksUri;
  }


  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public OAuth2Client jwtBearerGrantAccessTokenLifespan(String jwtBearerGrantAccessTokenLifespan) {
    
    this.jwtBearerGrantAccessTokenLifespan = jwtBearerGrantAccessTokenLifespan;
    return this;
  }

   /**
   * Get jwtBearerGrantAccessTokenLifespan
   * @return jwtBearerGrantAccessTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJwtBearerGrantAccessTokenLifespan() {
    return jwtBearerGrantAccessTokenLifespan;
  }


  public void setJwtBearerGrantAccessTokenLifespan(String jwtBearerGrantAccessTokenLifespan) {
    this.jwtBearerGrantAccessTokenLifespan = jwtBearerGrantAccessTokenLifespan;
  }


  public OAuth2Client logoUri(String logoUri) {
    
    this.logoUri = logoUri;
    return this;
  }

   /**
   * OAuth 2.0 Client Logo URI  A URL string referencing the client&#39;s logo.
   * @return logoUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Logo URI  A URL string referencing the client's logo.")

  public String getLogoUri() {
    return logoUri;
  }


  public void setLogoUri(String logoUri) {
    this.logoUri = logoUri;
  }


  public OAuth2Client metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public OAuth2Client owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public OAuth2Client policyUri(String policyUri) {
    
    this.policyUri = policyUri;
    return this;
  }

   /**
   * OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
   * @return policyUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.")

  public String getPolicyUri() {
    return policyUri;
  }


  public void setPolicyUri(String policyUri) {
    this.policyUri = policyUri;
  }


  public OAuth2Client postLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    
    this.postLogoutRedirectUris = postLogoutRedirectUris;
    return this;
  }

  public OAuth2Client addPostLogoutRedirectUrisItem(String postLogoutRedirectUrisItem) {
    if (this.postLogoutRedirectUris == null) {
      this.postLogoutRedirectUris = new ArrayList<>();
    }
    this.postLogoutRedirectUris.add(postLogoutRedirectUrisItem);
    return this;
  }

   /**
   * Get postLogoutRedirectUris
   * @return postLogoutRedirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getPostLogoutRedirectUris() {
    return postLogoutRedirectUris;
  }


  public void setPostLogoutRedirectUris(List<String> postLogoutRedirectUris) {
    this.postLogoutRedirectUris = postLogoutRedirectUris;
  }


  public OAuth2Client redirectUris(List<String> redirectUris) {
    
    this.redirectUris = redirectUris;
    return this;
  }

  public OAuth2Client addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * Get redirectUris
   * @return redirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRedirectUris() {
    return redirectUris;
  }


  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public OAuth2Client refreshTokenGrantAccessTokenLifespan(String refreshTokenGrantAccessTokenLifespan) {
    
    this.refreshTokenGrantAccessTokenLifespan = refreshTokenGrantAccessTokenLifespan;
    return this;
  }

   /**
   * Get refreshTokenGrantAccessTokenLifespan
   * @return refreshTokenGrantAccessTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRefreshTokenGrantAccessTokenLifespan() {
    return refreshTokenGrantAccessTokenLifespan;
  }


  public void setRefreshTokenGrantAccessTokenLifespan(String refreshTokenGrantAccessTokenLifespan) {
    this.refreshTokenGrantAccessTokenLifespan = refreshTokenGrantAccessTokenLifespan;
  }


  public OAuth2Client refreshTokenGrantIdTokenLifespan(String refreshTokenGrantIdTokenLifespan) {
    
    this.refreshTokenGrantIdTokenLifespan = refreshTokenGrantIdTokenLifespan;
    return this;
  }

   /**
   * Get refreshTokenGrantIdTokenLifespan
   * @return refreshTokenGrantIdTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRefreshTokenGrantIdTokenLifespan() {
    return refreshTokenGrantIdTokenLifespan;
  }


  public void setRefreshTokenGrantIdTokenLifespan(String refreshTokenGrantIdTokenLifespan) {
    this.refreshTokenGrantIdTokenLifespan = refreshTokenGrantIdTokenLifespan;
  }


  public OAuth2Client refreshTokenGrantRefreshTokenLifespan(String refreshTokenGrantRefreshTokenLifespan) {
    
    this.refreshTokenGrantRefreshTokenLifespan = refreshTokenGrantRefreshTokenLifespan;
    return this;
  }

   /**
   * Get refreshTokenGrantRefreshTokenLifespan
   * @return refreshTokenGrantRefreshTokenLifespan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRefreshTokenGrantRefreshTokenLifespan() {
    return refreshTokenGrantRefreshTokenLifespan;
  }


  public void setRefreshTokenGrantRefreshTokenLifespan(String refreshTokenGrantRefreshTokenLifespan) {
    this.refreshTokenGrantRefreshTokenLifespan = refreshTokenGrantRefreshTokenLifespan;
  }


  public OAuth2Client registrationAccessToken(String registrationAccessToken) {
    
    this.registrationAccessToken = registrationAccessToken;
    return this;
  }

   /**
   * OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
   * @return registrationAccessToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.")

  public String getRegistrationAccessToken() {
    return registrationAccessToken;
  }


  public void setRegistrationAccessToken(String registrationAccessToken) {
    this.registrationAccessToken = registrationAccessToken;
  }


  public OAuth2Client registrationClientUri(String registrationClientUri) {
    
    this.registrationClientUri = registrationClientUri;
    return this;
  }

   /**
   * OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
   * @return registrationClientUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.")

  public String getRegistrationClientUri() {
    return registrationClientUri;
  }


  public void setRegistrationClientUri(String registrationClientUri) {
    this.registrationClientUri = registrationClientUri;
  }


  public OAuth2Client requestObjectSigningAlg(String requestObjectSigningAlg) {
    
    this.requestObjectSigningAlg = requestObjectSigningAlg;
    return this;
  }

   /**
   * OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
   * @return requestObjectSigningAlg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.")

  public String getRequestObjectSigningAlg() {
    return requestObjectSigningAlg;
  }


  public void setRequestObjectSigningAlg(String requestObjectSigningAlg) {
    this.requestObjectSigningAlg = requestObjectSigningAlg;
  }


  public OAuth2Client requestUris(List<String> requestUris) {
    
    this.requestUris = requestUris;
    return this;
  }

  public OAuth2Client addRequestUrisItem(String requestUrisItem) {
    if (this.requestUris == null) {
      this.requestUris = new ArrayList<>();
    }
    this.requestUris.add(requestUrisItem);
    return this;
  }

   /**
   * Get requestUris
   * @return requestUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRequestUris() {
    return requestUris;
  }


  public void setRequestUris(List<String> requestUris) {
    this.requestUris = requestUris;
  }


  public OAuth2Client responseTypes(List<String> responseTypes) {
    
    this.responseTypes = responseTypes;
    return this;
  }

  public OAuth2Client addResponseTypesItem(String responseTypesItem) {
    if (this.responseTypes == null) {
      this.responseTypes = new ArrayList<>();
    }
    this.responseTypes.add(responseTypesItem);
    return this;
  }

   /**
   * Get responseTypes
   * @return responseTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getResponseTypes() {
    return responseTypes;
  }


  public void setResponseTypes(List<String> responseTypes) {
    this.responseTypes = responseTypes;
  }


  public OAuth2Client scope(String scope) {
    
    this.scope = scope;
    return this;
  }

   /**
   * OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
   * @return scope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "scope1 scope-2 scope.3 scope:4", value = "OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    this.scope = scope;
  }


  public OAuth2Client sectorIdentifierUri(String sectorIdentifierUri) {
    
    this.sectorIdentifierUri = sectorIdentifierUri;
    return this;
  }

   /**
   * OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
   * @return sectorIdentifierUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.")

  public String getSectorIdentifierUri() {
    return sectorIdentifierUri;
  }


  public void setSectorIdentifierUri(String sectorIdentifierUri) {
    this.sectorIdentifierUri = sectorIdentifierUri;
  }


  public OAuth2Client skipConsent(Boolean skipConsent) {
    
    this.skipConsent = skipConsent;
    return this;
  }

   /**
   * SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
   * @return skipConsent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SkipConsent skips the consent screen for this client. This field can only be set from the admin API.")

  public Boolean getSkipConsent() {
    return skipConsent;
  }


  public void setSkipConsent(Boolean skipConsent) {
    this.skipConsent = skipConsent;
  }


  public OAuth2Client subjectType(String subjectType) {
    
    this.subjectType = subjectType;
    return this;
  }

   /**
   * OpenID Connect Subject Type  The &#x60;subject_types_supported&#x60; Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;.
   * @return subjectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.")

  public String getSubjectType() {
    return subjectType;
  }


  public void setSubjectType(String subjectType) {
    this.subjectType = subjectType;
  }


  public OAuth2Client tokenEndpointAuthMethod(String tokenEndpointAuthMethod) {
    
    this.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
    return this;
  }

   /**
   * OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  &#x60;client_secret_basic&#x60;: (default) Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; encoded in the HTTP Authorization header. &#x60;client_secret_post&#x60;: Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; in the HTTP body. &#x60;private_key_jwt&#x60;: Use JSON Web Tokens to authenticate the client. &#x60;none&#x60;: Used for public clients (native apps, mobile apps) which can not have secrets.
   * @return tokenEndpointAuthMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.")

  public String getTokenEndpointAuthMethod() {
    return tokenEndpointAuthMethod;
  }


  public void setTokenEndpointAuthMethod(String tokenEndpointAuthMethod) {
    this.tokenEndpointAuthMethod = tokenEndpointAuthMethod;
  }


  public OAuth2Client tokenEndpointAuthSigningAlg(String tokenEndpointAuthSigningAlg) {
    
    this.tokenEndpointAuthSigningAlg = tokenEndpointAuthSigningAlg;
    return this;
  }

   /**
   * OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
   * @return tokenEndpointAuthSigningAlg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.")

  public String getTokenEndpointAuthSigningAlg() {
    return tokenEndpointAuthSigningAlg;
  }


  public void setTokenEndpointAuthSigningAlg(String tokenEndpointAuthSigningAlg) {
    this.tokenEndpointAuthSigningAlg = tokenEndpointAuthSigningAlg;
  }


  public OAuth2Client tosUri(String tosUri) {
    
    this.tosUri = tosUri;
    return this;
  }

   /**
   * OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
   * @return tosUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.")

  public String getTosUri() {
    return tosUri;
  }


  public void setTosUri(String tosUri) {
    this.tosUri = tosUri;
  }


  public OAuth2Client updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public OAuth2Client userinfoSignedResponseAlg(String userinfoSignedResponseAlg) {
    
    this.userinfoSignedResponseAlg = userinfoSignedResponseAlg;
    return this;
  }

   /**
   * OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
   * @return userinfoSignedResponseAlg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.")

  public String getUserinfoSignedResponseAlg() {
    return userinfoSignedResponseAlg;
  }


  public void setUserinfoSignedResponseAlg(String userinfoSignedResponseAlg) {
    this.userinfoSignedResponseAlg = userinfoSignedResponseAlg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Client oAuth2Client = (OAuth2Client) o;
    return Objects.equals(this.accessTokenStrategy, oAuth2Client.accessTokenStrategy) &&
        Objects.equals(this.allowedCorsOrigins, oAuth2Client.allowedCorsOrigins) &&
        Objects.equals(this.audience, oAuth2Client.audience) &&
        Objects.equals(this.authorizationCodeGrantAccessTokenLifespan, oAuth2Client.authorizationCodeGrantAccessTokenLifespan) &&
        Objects.equals(this.authorizationCodeGrantIdTokenLifespan, oAuth2Client.authorizationCodeGrantIdTokenLifespan) &&
        Objects.equals(this.authorizationCodeGrantRefreshTokenLifespan, oAuth2Client.authorizationCodeGrantRefreshTokenLifespan) &&
        Objects.equals(this.backchannelLogoutSessionRequired, oAuth2Client.backchannelLogoutSessionRequired) &&
        Objects.equals(this.backchannelLogoutUri, oAuth2Client.backchannelLogoutUri) &&
        Objects.equals(this.clientCredentialsGrantAccessTokenLifespan, oAuth2Client.clientCredentialsGrantAccessTokenLifespan) &&
        Objects.equals(this.clientId, oAuth2Client.clientId) &&
        Objects.equals(this.clientName, oAuth2Client.clientName) &&
        Objects.equals(this.clientSecret, oAuth2Client.clientSecret) &&
        Objects.equals(this.clientSecretExpiresAt, oAuth2Client.clientSecretExpiresAt) &&
        Objects.equals(this.clientUri, oAuth2Client.clientUri) &&
        Objects.equals(this.contacts, oAuth2Client.contacts) &&
        Objects.equals(this.createdAt, oAuth2Client.createdAt) &&
        Objects.equals(this.frontchannelLogoutSessionRequired, oAuth2Client.frontchannelLogoutSessionRequired) &&
        Objects.equals(this.frontchannelLogoutUri, oAuth2Client.frontchannelLogoutUri) &&
        Objects.equals(this.grantTypes, oAuth2Client.grantTypes) &&
        Objects.equals(this.implicitGrantAccessTokenLifespan, oAuth2Client.implicitGrantAccessTokenLifespan) &&
        Objects.equals(this.implicitGrantIdTokenLifespan, oAuth2Client.implicitGrantIdTokenLifespan) &&
        Objects.equals(this.jwks, oAuth2Client.jwks) &&
        Objects.equals(this.jwksUri, oAuth2Client.jwksUri) &&
        Objects.equals(this.jwtBearerGrantAccessTokenLifespan, oAuth2Client.jwtBearerGrantAccessTokenLifespan) &&
        Objects.equals(this.logoUri, oAuth2Client.logoUri) &&
        Objects.equals(this.metadata, oAuth2Client.metadata) &&
        Objects.equals(this.owner, oAuth2Client.owner) &&
        Objects.equals(this.policyUri, oAuth2Client.policyUri) &&
        Objects.equals(this.postLogoutRedirectUris, oAuth2Client.postLogoutRedirectUris) &&
        Objects.equals(this.redirectUris, oAuth2Client.redirectUris) &&
        Objects.equals(this.refreshTokenGrantAccessTokenLifespan, oAuth2Client.refreshTokenGrantAccessTokenLifespan) &&
        Objects.equals(this.refreshTokenGrantIdTokenLifespan, oAuth2Client.refreshTokenGrantIdTokenLifespan) &&
        Objects.equals(this.refreshTokenGrantRefreshTokenLifespan, oAuth2Client.refreshTokenGrantRefreshTokenLifespan) &&
        Objects.equals(this.registrationAccessToken, oAuth2Client.registrationAccessToken) &&
        Objects.equals(this.registrationClientUri, oAuth2Client.registrationClientUri) &&
        Objects.equals(this.requestObjectSigningAlg, oAuth2Client.requestObjectSigningAlg) &&
        Objects.equals(this.requestUris, oAuth2Client.requestUris) &&
        Objects.equals(this.responseTypes, oAuth2Client.responseTypes) &&
        Objects.equals(this.scope, oAuth2Client.scope) &&
        Objects.equals(this.sectorIdentifierUri, oAuth2Client.sectorIdentifierUri) &&
        Objects.equals(this.skipConsent, oAuth2Client.skipConsent) &&
        Objects.equals(this.subjectType, oAuth2Client.subjectType) &&
        Objects.equals(this.tokenEndpointAuthMethod, oAuth2Client.tokenEndpointAuthMethod) &&
        Objects.equals(this.tokenEndpointAuthSigningAlg, oAuth2Client.tokenEndpointAuthSigningAlg) &&
        Objects.equals(this.tosUri, oAuth2Client.tosUri) &&
        Objects.equals(this.updatedAt, oAuth2Client.updatedAt) &&
        Objects.equals(this.userinfoSignedResponseAlg, oAuth2Client.userinfoSignedResponseAlg);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenStrategy, allowedCorsOrigins, audience, authorizationCodeGrantAccessTokenLifespan, authorizationCodeGrantIdTokenLifespan, authorizationCodeGrantRefreshTokenLifespan, backchannelLogoutSessionRequired, backchannelLogoutUri, clientCredentialsGrantAccessTokenLifespan, clientId, clientName, clientSecret, clientSecretExpiresAt, clientUri, contacts, createdAt, frontchannelLogoutSessionRequired, frontchannelLogoutUri, grantTypes, implicitGrantAccessTokenLifespan, implicitGrantIdTokenLifespan, jwks, jwksUri, jwtBearerGrantAccessTokenLifespan, logoUri, metadata, owner, policyUri, postLogoutRedirectUris, redirectUris, refreshTokenGrantAccessTokenLifespan, refreshTokenGrantIdTokenLifespan, refreshTokenGrantRefreshTokenLifespan, registrationAccessToken, registrationClientUri, requestObjectSigningAlg, requestUris, responseTypes, scope, sectorIdentifierUri, skipConsent, subjectType, tokenEndpointAuthMethod, tokenEndpointAuthSigningAlg, tosUri, updatedAt, userinfoSignedResponseAlg);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Client {\n");
    sb.append("    accessTokenStrategy: ").append(toIndentedString(accessTokenStrategy)).append("\n");
    sb.append("    allowedCorsOrigins: ").append(toIndentedString(allowedCorsOrigins)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    authorizationCodeGrantAccessTokenLifespan: ").append(toIndentedString(authorizationCodeGrantAccessTokenLifespan)).append("\n");
    sb.append("    authorizationCodeGrantIdTokenLifespan: ").append(toIndentedString(authorizationCodeGrantIdTokenLifespan)).append("\n");
    sb.append("    authorizationCodeGrantRefreshTokenLifespan: ").append(toIndentedString(authorizationCodeGrantRefreshTokenLifespan)).append("\n");
    sb.append("    backchannelLogoutSessionRequired: ").append(toIndentedString(backchannelLogoutSessionRequired)).append("\n");
    sb.append("    backchannelLogoutUri: ").append(toIndentedString(backchannelLogoutUri)).append("\n");
    sb.append("    clientCredentialsGrantAccessTokenLifespan: ").append(toIndentedString(clientCredentialsGrantAccessTokenLifespan)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    clientSecretExpiresAt: ").append(toIndentedString(clientSecretExpiresAt)).append("\n");
    sb.append("    clientUri: ").append(toIndentedString(clientUri)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    frontchannelLogoutSessionRequired: ").append(toIndentedString(frontchannelLogoutSessionRequired)).append("\n");
    sb.append("    frontchannelLogoutUri: ").append(toIndentedString(frontchannelLogoutUri)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    implicitGrantAccessTokenLifespan: ").append(toIndentedString(implicitGrantAccessTokenLifespan)).append("\n");
    sb.append("    implicitGrantIdTokenLifespan: ").append(toIndentedString(implicitGrantIdTokenLifespan)).append("\n");
    sb.append("    jwks: ").append(toIndentedString(jwks)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    jwtBearerGrantAccessTokenLifespan: ").append(toIndentedString(jwtBearerGrantAccessTokenLifespan)).append("\n");
    sb.append("    logoUri: ").append(toIndentedString(logoUri)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    policyUri: ").append(toIndentedString(policyUri)).append("\n");
    sb.append("    postLogoutRedirectUris: ").append(toIndentedString(postLogoutRedirectUris)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    refreshTokenGrantAccessTokenLifespan: ").append(toIndentedString(refreshTokenGrantAccessTokenLifespan)).append("\n");
    sb.append("    refreshTokenGrantIdTokenLifespan: ").append(toIndentedString(refreshTokenGrantIdTokenLifespan)).append("\n");
    sb.append("    refreshTokenGrantRefreshTokenLifespan: ").append(toIndentedString(refreshTokenGrantRefreshTokenLifespan)).append("\n");
    sb.append("    registrationAccessToken: ").append(toIndentedString(registrationAccessToken)).append("\n");
    sb.append("    registrationClientUri: ").append(toIndentedString(registrationClientUri)).append("\n");
    sb.append("    requestObjectSigningAlg: ").append(toIndentedString(requestObjectSigningAlg)).append("\n");
    sb.append("    requestUris: ").append(toIndentedString(requestUris)).append("\n");
    sb.append("    responseTypes: ").append(toIndentedString(responseTypes)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sectorIdentifierUri: ").append(toIndentedString(sectorIdentifierUri)).append("\n");
    sb.append("    skipConsent: ").append(toIndentedString(skipConsent)).append("\n");
    sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
    sb.append("    tokenEndpointAuthMethod: ").append(toIndentedString(tokenEndpointAuthMethod)).append("\n");
    sb.append("    tokenEndpointAuthSigningAlg: ").append(toIndentedString(tokenEndpointAuthSigningAlg)).append("\n");
    sb.append("    tosUri: ").append(toIndentedString(tosUri)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userinfoSignedResponseAlg: ").append(toIndentedString(userinfoSignedResponseAlg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token_strategy");
    openapiFields.add("allowed_cors_origins");
    openapiFields.add("audience");
    openapiFields.add("authorization_code_grant_access_token_lifespan");
    openapiFields.add("authorization_code_grant_id_token_lifespan");
    openapiFields.add("authorization_code_grant_refresh_token_lifespan");
    openapiFields.add("backchannel_logout_session_required");
    openapiFields.add("backchannel_logout_uri");
    openapiFields.add("client_credentials_grant_access_token_lifespan");
    openapiFields.add("client_id");
    openapiFields.add("client_name");
    openapiFields.add("client_secret");
    openapiFields.add("client_secret_expires_at");
    openapiFields.add("client_uri");
    openapiFields.add("contacts");
    openapiFields.add("created_at");
    openapiFields.add("frontchannel_logout_session_required");
    openapiFields.add("frontchannel_logout_uri");
    openapiFields.add("grant_types");
    openapiFields.add("implicit_grant_access_token_lifespan");
    openapiFields.add("implicit_grant_id_token_lifespan");
    openapiFields.add("jwks");
    openapiFields.add("jwks_uri");
    openapiFields.add("jwt_bearer_grant_access_token_lifespan");
    openapiFields.add("logo_uri");
    openapiFields.add("metadata");
    openapiFields.add("owner");
    openapiFields.add("policy_uri");
    openapiFields.add("post_logout_redirect_uris");
    openapiFields.add("redirect_uris");
    openapiFields.add("refresh_token_grant_access_token_lifespan");
    openapiFields.add("refresh_token_grant_id_token_lifespan");
    openapiFields.add("refresh_token_grant_refresh_token_lifespan");
    openapiFields.add("registration_access_token");
    openapiFields.add("registration_client_uri");
    openapiFields.add("request_object_signing_alg");
    openapiFields.add("request_uris");
    openapiFields.add("response_types");
    openapiFields.add("scope");
    openapiFields.add("sector_identifier_uri");
    openapiFields.add("skip_consent");
    openapiFields.add("subject_type");
    openapiFields.add("token_endpoint_auth_method");
    openapiFields.add("token_endpoint_auth_signing_alg");
    openapiFields.add("tos_uri");
    openapiFields.add("updated_at");
    openapiFields.add("userinfo_signed_response_alg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OAuth2Client
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OAuth2Client.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2Client is not found in the empty JSON string", OAuth2Client.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OAuth2Client.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2Client` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("access_token_strategy") != null && !jsonObj.get("access_token_strategy").isJsonNull()) && !jsonObj.get("access_token_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_strategy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_cors_origins") != null && !jsonObj.get("allowed_cors_origins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_cors_origins` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_cors_origins").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be an array in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("authorization_code_grant_access_token_lifespan") != null && !jsonObj.get("authorization_code_grant_access_token_lifespan").isJsonNull()) && !jsonObj.get("authorization_code_grant_access_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_code_grant_access_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_code_grant_access_token_lifespan").toString()));
      }
      if ((jsonObj.get("authorization_code_grant_id_token_lifespan") != null && !jsonObj.get("authorization_code_grant_id_token_lifespan").isJsonNull()) && !jsonObj.get("authorization_code_grant_id_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_code_grant_id_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_code_grant_id_token_lifespan").toString()));
      }
      if ((jsonObj.get("authorization_code_grant_refresh_token_lifespan") != null && !jsonObj.get("authorization_code_grant_refresh_token_lifespan").isJsonNull()) && !jsonObj.get("authorization_code_grant_refresh_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_code_grant_refresh_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_code_grant_refresh_token_lifespan").toString()));
      }
      if ((jsonObj.get("backchannel_logout_uri") != null && !jsonObj.get("backchannel_logout_uri").isJsonNull()) && !jsonObj.get("backchannel_logout_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backchannel_logout_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backchannel_logout_uri").toString()));
      }
      if ((jsonObj.get("client_credentials_grant_access_token_lifespan") != null && !jsonObj.get("client_credentials_grant_access_token_lifespan").isJsonNull()) && !jsonObj.get("client_credentials_grant_access_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_credentials_grant_access_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_credentials_grant_access_token_lifespan").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_name") != null && !jsonObj.get("client_name").isJsonNull()) && !jsonObj.get("client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_name").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if ((jsonObj.get("client_uri") != null && !jsonObj.get("client_uri").isJsonNull()) && !jsonObj.get("client_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
      }
      if ((jsonObj.get("frontchannel_logout_uri") != null && !jsonObj.get("frontchannel_logout_uri").isJsonNull()) && !jsonObj.get("frontchannel_logout_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontchannel_logout_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontchannel_logout_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grant_types") != null && !jsonObj.get("grant_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_types` to be an array in the JSON string but got `%s`", jsonObj.get("grant_types").toString()));
      }
      if ((jsonObj.get("implicit_grant_access_token_lifespan") != null && !jsonObj.get("implicit_grant_access_token_lifespan").isJsonNull()) && !jsonObj.get("implicit_grant_access_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `implicit_grant_access_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("implicit_grant_access_token_lifespan").toString()));
      }
      if ((jsonObj.get("implicit_grant_id_token_lifespan") != null && !jsonObj.get("implicit_grant_id_token_lifespan").isJsonNull()) && !jsonObj.get("implicit_grant_id_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `implicit_grant_id_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("implicit_grant_id_token_lifespan").toString()));
      }
      if ((jsonObj.get("jwks_uri") != null && !jsonObj.get("jwks_uri").isJsonNull()) && !jsonObj.get("jwks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_uri").toString()));
      }
      if ((jsonObj.get("jwt_bearer_grant_access_token_lifespan") != null && !jsonObj.get("jwt_bearer_grant_access_token_lifespan").isJsonNull()) && !jsonObj.get("jwt_bearer_grant_access_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwt_bearer_grant_access_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwt_bearer_grant_access_token_lifespan").toString()));
      }
      if ((jsonObj.get("logo_uri") != null && !jsonObj.get("logo_uri").isJsonNull()) && !jsonObj.get("logo_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_uri").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("policy_uri") != null && !jsonObj.get("policy_uri").isJsonNull()) && !jsonObj.get("policy_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("post_logout_redirect_uris") != null && !jsonObj.get("post_logout_redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_logout_redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("post_logout_redirect_uris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
      if ((jsonObj.get("refresh_token_grant_access_token_lifespan") != null && !jsonObj.get("refresh_token_grant_access_token_lifespan").isJsonNull()) && !jsonObj.get("refresh_token_grant_access_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token_grant_access_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token_grant_access_token_lifespan").toString()));
      }
      if ((jsonObj.get("refresh_token_grant_id_token_lifespan") != null && !jsonObj.get("refresh_token_grant_id_token_lifespan").isJsonNull()) && !jsonObj.get("refresh_token_grant_id_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token_grant_id_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token_grant_id_token_lifespan").toString()));
      }
      if ((jsonObj.get("refresh_token_grant_refresh_token_lifespan") != null && !jsonObj.get("refresh_token_grant_refresh_token_lifespan").isJsonNull()) && !jsonObj.get("refresh_token_grant_refresh_token_lifespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token_grant_refresh_token_lifespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token_grant_refresh_token_lifespan").toString()));
      }
      if ((jsonObj.get("registration_access_token") != null && !jsonObj.get("registration_access_token").isJsonNull()) && !jsonObj.get("registration_access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_access_token").toString()));
      }
      if ((jsonObj.get("registration_client_uri") != null && !jsonObj.get("registration_client_uri").isJsonNull()) && !jsonObj.get("registration_client_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_client_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_client_uri").toString()));
      }
      if ((jsonObj.get("request_object_signing_alg") != null && !jsonObj.get("request_object_signing_alg").isJsonNull()) && !jsonObj.get("request_object_signing_alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_object_signing_alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_object_signing_alg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("request_uris") != null && !jsonObj.get("request_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_uris` to be an array in the JSON string but got `%s`", jsonObj.get("request_uris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("response_types") != null && !jsonObj.get("response_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_types` to be an array in the JSON string but got `%s`", jsonObj.get("response_types").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("sector_identifier_uri") != null && !jsonObj.get("sector_identifier_uri").isJsonNull()) && !jsonObj.get("sector_identifier_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sector_identifier_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sector_identifier_uri").toString()));
      }
      if ((jsonObj.get("subject_type") != null && !jsonObj.get("subject_type").isJsonNull()) && !jsonObj.get("subject_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_type").toString()));
      }
      if ((jsonObj.get("token_endpoint_auth_method") != null && !jsonObj.get("token_endpoint_auth_method").isJsonNull()) && !jsonObj.get("token_endpoint_auth_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_endpoint_auth_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_endpoint_auth_method").toString()));
      }
      if ((jsonObj.get("token_endpoint_auth_signing_alg") != null && !jsonObj.get("token_endpoint_auth_signing_alg").isJsonNull()) && !jsonObj.get("token_endpoint_auth_signing_alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_endpoint_auth_signing_alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_endpoint_auth_signing_alg").toString()));
      }
      if ((jsonObj.get("tos_uri") != null && !jsonObj.get("tos_uri").isJsonNull()) && !jsonObj.get("tos_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tos_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tos_uri").toString()));
      }
      if ((jsonObj.get("userinfo_signed_response_alg") != null && !jsonObj.get("userinfo_signed_response_alg").isJsonNull()) && !jsonObj.get("userinfo_signed_response_alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userinfo_signed_response_alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userinfo_signed_response_alg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2Client.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2Client' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2Client> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2Client.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2Client>() {
           @Override
           public void write(JsonWriter out, OAuth2Client value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2Client read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OAuth2Client given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OAuth2Client
  * @throws IOException if the JSON string is invalid with respect to OAuth2Client
  */
  public static OAuth2Client fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2Client.class);
  }

 /**
  * Convert an instance of OAuth2Client to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

