/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.1.25
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.api;

import sh.ory.ApiCallback;
import sh.ory.ApiClient;
import sh.ory.ApiException;
import sh.ory.ApiResponse;
import sh.ory.Configuration;
import sh.ory.Pair;
import sh.ory.ProgressRequestBody;
import sh.ory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sh.ory.model.ActiveProjectInConsole;
import sh.ory.model.CloudAccount;
import sh.ory.model.CreateProjectApiKeyRequest;
import sh.ory.model.CreateProjectBody;
import sh.ory.model.ErrorGeneric;
import sh.ory.model.GenericError;
import sh.ory.model.JsonPatch;
import sh.ory.model.Project;
import sh.ory.model.ProjectApiKey;
import sh.ory.model.ProjectMetadata;
import sh.ory.model.SetActiveProjectInConsoleBody;
import sh.ory.model.SetProject;
import sh.ory.model.SuccessfulProjectUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProject
     * @param createProjectBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(CreateProjectBody createProjectBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectBody;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(CreateProjectBody createProjectBody, final ApiCallback _callback) throws ApiException {
        return createProjectCall(createProjectBody, _callback);

    }

    /**
     * Create a Project
     * Creates a new project.
     * @param createProjectBody  (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(CreateProjectBody createProjectBody) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(createProjectBody);
        return localVarResp.getData();
    }

    /**
     * Create a Project
     * Creates a new project.
     * @param createProjectBody  (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(CreateProjectBody createProjectBody) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectBody, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Project (asynchronously)
     * Creates a new project.
     * @param createProjectBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(CreateProjectBody createProjectBody, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectBody, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectApiKey
     * @param project The Project ID or Project slug (required)
     * @param createProjectApiKeyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> projectApiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectApiKeyCall(String project, CreateProjectApiKeyRequest createProjectApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectApiKeyRequest;

        // create path and map variables
        String localVarPath = "/projects/{project}/tokens"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectApiKeyValidateBeforeCall(String project, CreateProjectApiKeyRequest createProjectApiKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling createProjectApiKey(Async)");
        }

        return createProjectApiKeyCall(project, createProjectApiKeyRequest, _callback);

    }

    /**
     * Create project API token
     * Create an API token for a project.
     * @param project The Project ID or Project slug (required)
     * @param createProjectApiKeyRequest  (optional)
     * @return ProjectApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> projectApiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ProjectApiKey createProjectApiKey(String project, CreateProjectApiKeyRequest createProjectApiKeyRequest) throws ApiException {
        ApiResponse<ProjectApiKey> localVarResp = createProjectApiKeyWithHttpInfo(project, createProjectApiKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create project API token
     * Create an API token for a project.
     * @param project The Project ID or Project slug (required)
     * @param createProjectApiKeyRequest  (optional)
     * @return ApiResponse&lt;ProjectApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> projectApiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectApiKey> createProjectApiKeyWithHttpInfo(String project, CreateProjectApiKeyRequest createProjectApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectApiKeyValidateBeforeCall(project, createProjectApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<ProjectApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create project API token (asynchronously)
     * Create an API token for a project.
     * @param project The Project ID or Project slug (required)
     * @param createProjectApiKeyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> projectApiKey </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectApiKeyAsync(String project, CreateProjectApiKeyRequest createProjectApiKeyRequest, final ApiCallback<ProjectApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectApiKeyValidateBeforeCall(project, createProjectApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectApiKey
     * @param project The Project ID or Project slug (required)
     * @param tokenId The Token ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectApiKeyCall(String project, String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project}/tokens/{token_id}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectApiKeyValidateBeforeCall(String project, String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling deleteProjectApiKey(Async)");
        }

        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling deleteProjectApiKey(Async)");
        }

        return deleteProjectApiKeyCall(project, tokenId, _callback);

    }

    /**
     * Delete project API token
     * Deletes an API token and immediately removes it.
     * @param project The Project ID or Project slug (required)
     * @param tokenId The Token ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectApiKey(String project, String tokenId) throws ApiException {
        deleteProjectApiKeyWithHttpInfo(project, tokenId);
    }

    /**
     * Delete project API token
     * Deletes an API token and immediately removes it.
     * @param project The Project ID or Project slug (required)
     * @param tokenId The Token ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectApiKeyWithHttpInfo(String project, String tokenId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectApiKeyValidateBeforeCall(project, tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete project API token (asynchronously)
     * Deletes an API token and immediately removes it.
     * @param project The Project ID or Project slug (required)
     * @param tokenId The Token ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectApiKeyAsync(String project, String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectApiKeyValidateBeforeCall(project, tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveProjectInConsole
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> activeProjectInConsole </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveProjectInConsoleCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/console/active/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveProjectInConsoleValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getActiveProjectInConsoleCall(_callback);

    }

    /**
     * Returns the Ory Network Project selected in the Ory Network Console
     * Use this API to get your active project in the Ory Network Console UI.
     * @return ActiveProjectInConsole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> activeProjectInConsole </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ActiveProjectInConsole getActiveProjectInConsole() throws ApiException {
        ApiResponse<ActiveProjectInConsole> localVarResp = getActiveProjectInConsoleWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the Ory Network Project selected in the Ory Network Console
     * Use this API to get your active project in the Ory Network Console UI.
     * @return ApiResponse&lt;ActiveProjectInConsole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> activeProjectInConsole </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActiveProjectInConsole> getActiveProjectInConsoleWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getActiveProjectInConsoleValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ActiveProjectInConsole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the Ory Network Project selected in the Ory Network Console (asynchronously)
     * Use this API to get your active project in the Ory Network Console UI.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> activeProjectInConsole </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveProjectInConsoleAsync(final ApiCallback<ActiveProjectInConsole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveProjectInConsoleValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ActiveProjectInConsole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }

        return getProjectCall(projectId, _callback);

    }

    /**
     * Get a Project
     * Get a projects you have access to by its ID.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public Project getProject(String projectId) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get a Project
     * Get a projects you have access to by its ID.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Project (asynchronously)
     * Get a projects you have access to by its ID.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> project </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(String projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectMembers
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMembers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectMembersValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectMembers(Async)");
        }

        return getProjectMembersCall(projectId, _callback);

    }

    /**
     * Get all members associated with this project
     * This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @return List&lt;CloudAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMembers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public List<CloudAccount> getProjectMembers(String projectId) throws ApiException {
        ApiResponse<List<CloudAccount>> localVarResp = getProjectMembersWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get all members associated with this project
     * This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @return ApiResponse&lt;List&lt;CloudAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMembers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CloudAccount>> getProjectMembersWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectMembersValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<CloudAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all members associated with this project (asynchronously)
     * This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60; or &#x60;DEVELOPER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMembers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectMembersAsync(String projectId, final ApiCallback<List<CloudAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectMembersValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<CloudAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectApiKeys
     * @param project The Project ID or Project slug (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectApiKeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectApiKeysCall(String project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project}/tokens"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectApiKeysValidateBeforeCall(String project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling listProjectApiKeys(Async)");
        }

        return listProjectApiKeysCall(project, _callback);

    }

    /**
     * List a project&#39;s API Tokens
     * A list of all the project&#39;s API tokens.
     * @param project The Project ID or Project slug (required)
     * @return List&lt;ProjectApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectApiKeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectApiKey> listProjectApiKeys(String project) throws ApiException {
        ApiResponse<List<ProjectApiKey>> localVarResp = listProjectApiKeysWithHttpInfo(project);
        return localVarResp.getData();
    }

    /**
     * List a project&#39;s API Tokens
     * A list of all the project&#39;s API tokens.
     * @param project The Project ID or Project slug (required)
     * @return ApiResponse&lt;List&lt;ProjectApiKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectApiKeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectApiKey>> listProjectApiKeysWithHttpInfo(String project) throws ApiException {
        okhttp3.Call localVarCall = listProjectApiKeysValidateBeforeCall(project, null);
        Type localVarReturnType = new TypeToken<List<ProjectApiKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a project&#39;s API Tokens (asynchronously)
     * A list of all the project&#39;s API tokens.
     * @param project The Project ID or Project slug (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectApiKeys </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectApiKeysAsync(String project, final ApiCallback<List<ProjectApiKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectApiKeysValidateBeforeCall(project, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectApiKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjects
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMetadataList </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listProjectsCall(_callback);

    }

    /**
     * List All Projects
     * Lists all projects you have access to.
     * @return List&lt;ProjectMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMetadataList </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectMetadata> listProjects() throws ApiException {
        ApiResponse<List<ProjectMetadata>> localVarResp = listProjectsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List All Projects
     * Lists all projects you have access to.
     * @return ApiResponse&lt;List&lt;ProjectMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMetadataList </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectMetadata>> listProjectsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProjectMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Projects (asynchronously)
     * Lists all projects you have access to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> projectMetadataList </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsAsync(final ApiCallback<List<ProjectMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProjectMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchProject
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param jsonPatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchProjectCall(String projectId, List<JsonPatch> jsonPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jsonPatch;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchProjectValidateBeforeCall(String projectId, List<JsonPatch> jsonPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling patchProject(Async)");
        }

        return patchProjectCall(projectId, jsonPatch, _callback);

    }

    /**
     * Patch an Ory Network Project Configuration
     * Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param jsonPatch  (optional)
     * @return SuccessfulProjectUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public SuccessfulProjectUpdate patchProject(String projectId, List<JsonPatch> jsonPatch) throws ApiException {
        ApiResponse<SuccessfulProjectUpdate> localVarResp = patchProjectWithHttpInfo(projectId, jsonPatch);
        return localVarResp.getData();
    }

    /**
     * Patch an Ory Network Project Configuration
     * Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param jsonPatch  (optional)
     * @return ApiResponse&lt;SuccessfulProjectUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessfulProjectUpdate> patchProjectWithHttpInfo(String projectId, List<JsonPatch> jsonPatch) throws ApiException {
        okhttp3.Call localVarCall = patchProjectValidateBeforeCall(projectId, jsonPatch, null);
        Type localVarReturnType = new TypeToken<SuccessfulProjectUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an Ory Network Project Configuration (asynchronously)
     * Deprecated: Use the &#x60;patchProjectWithRevision&#x60; endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory&#39;s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param jsonPatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchProjectAsync(String projectId, List<JsonPatch> jsonPatch, final ApiCallback<SuccessfulProjectUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchProjectValidateBeforeCall(projectId, jsonPatch, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulProjectUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purgeProject
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purgeProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling purgeProject(Async)");
        }

        return purgeProjectCall(projectId, _callback);

    }

    /**
     * Irrecoverably purge a project
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public void purgeProject(String projectId) throws ApiException {
        purgeProjectWithHttpInfo(projectId);
    }

    /**
     * Irrecoverably purge a project
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> purgeProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = purgeProjectValidateBeforeCall(projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Irrecoverably purge a project (asynchronously)
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purgeProjectAsync(String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = purgeProjectValidateBeforeCall(projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeProjectMember
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param memberId Member ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectMemberCall(String projectId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members/{member_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "member_id" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectMemberValidateBeforeCall(String projectId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeProjectMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling removeProjectMember(Async)");
        }

        return removeProjectMemberCall(projectId, memberId, _callback);

    }

    /**
     * Remove a member associated with this project
     * This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param memberId Member ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public void removeProjectMember(String projectId, String memberId) throws ApiException {
        removeProjectMemberWithHttpInfo(projectId, memberId);
    }

    /**
     * Remove a member associated with this project
     * This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param memberId Member ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeProjectMemberWithHttpInfo(String projectId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = removeProjectMemberValidateBeforeCall(projectId, memberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member associated with this project (asynchronously)
     * This also sets their invite status to &#x60;REMOVED&#x60;. This endpoint requires the user to be a member of the project with the role &#x60;OWNER&#x60;.
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param memberId Member ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProjectMemberAsync(String projectId, String memberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectMemberValidateBeforeCall(projectId, memberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setActiveProjectInConsole
     * @param setActiveProjectInConsoleBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setActiveProjectInConsoleCall(SetActiveProjectInConsoleBody setActiveProjectInConsoleBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setActiveProjectInConsoleBody;

        // create path and map variables
        String localVarPath = "/console/active/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setActiveProjectInConsoleValidateBeforeCall(SetActiveProjectInConsoleBody setActiveProjectInConsoleBody, final ApiCallback _callback) throws ApiException {
        return setActiveProjectInConsoleCall(setActiveProjectInConsoleBody, _callback);

    }

    /**
     * Sets the Ory Network Project active in the Ory Network Console
     * Use this API to set your active project in the Ory Network Console UI.
     * @param setActiveProjectInConsoleBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public void setActiveProjectInConsole(SetActiveProjectInConsoleBody setActiveProjectInConsoleBody) throws ApiException {
        setActiveProjectInConsoleWithHttpInfo(setActiveProjectInConsoleBody);
    }

    /**
     * Sets the Ory Network Project active in the Ory Network Console
     * Use this API to set your active project in the Ory Network Console UI.
     * @param setActiveProjectInConsoleBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setActiveProjectInConsoleWithHttpInfo(SetActiveProjectInConsoleBody setActiveProjectInConsoleBody) throws ApiException {
        okhttp3.Call localVarCall = setActiveProjectInConsoleValidateBeforeCall(setActiveProjectInConsoleBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets the Ory Network Project active in the Ory Network Console (asynchronously)
     * Use this API to set your active project in the Ory Network Console UI.
     * @param setActiveProjectInConsoleBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> genericError </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setActiveProjectInConsoleAsync(SetActiveProjectInConsoleBody setActiveProjectInConsoleBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setActiveProjectInConsoleValidateBeforeCall(setActiveProjectInConsoleBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setProject
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param setProject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setProjectCall(String projectId, SetProject setProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setProject;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oryAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setProjectValidateBeforeCall(String projectId, SetProject setProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling setProject(Async)");
        }

        return setProjectCall(projectId, setProject, _callback);

    }

    /**
     * Update an Ory Network Project Configuration
     * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param setProject  (optional)
     * @return SuccessfulProjectUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public SuccessfulProjectUpdate setProject(String projectId, SetProject setProject) throws ApiException {
        ApiResponse<SuccessfulProjectUpdate> localVarResp = setProjectWithHttpInfo(projectId, setProject);
        return localVarResp.getData();
    }

    /**
     * Update an Ory Network Project Configuration
     * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param setProject  (optional)
     * @return ApiResponse&lt;SuccessfulProjectUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessfulProjectUpdate> setProjectWithHttpInfo(String projectId, SetProject setProject) throws ApiException {
        okhttp3.Call localVarCall = setProjectValidateBeforeCall(projectId, setProject, null);
        Type localVarReturnType = new TypeToken<SuccessfulProjectUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Ory Network Project Configuration (asynchronously)
     * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the &#x60;version&#x60; key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service&#39;s configuration will completely override your current configuration for that service!
     * @param projectId Project ID  The project&#39;s ID. (required)
     * @param setProject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfulProjectUpdate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> errorGeneric </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorGeneric </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setProjectAsync(String projectId, SetProject setProject, final ApiCallback<SuccessfulProjectUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = setProjectValidateBeforeCall(projectId, setProject, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulProjectUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
