/*
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.15.0
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import sh.ory.JSON;

/**
 * ProjectBrandingColors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-11T14:16:56.042339805Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class ProjectBrandingColors {
  public static final String SERIALIZED_NAME_ACCENT_DEFAULT_COLOR = "accent_default_color";
  @SerializedName(SERIALIZED_NAME_ACCENT_DEFAULT_COLOR)
  private String accentDefaultColor;

  public static final String SERIALIZED_NAME_ACCENT_DISABLED_COLOR = "accent_disabled_color";
  @SerializedName(SERIALIZED_NAME_ACCENT_DISABLED_COLOR)
  private String accentDisabledColor;

  public static final String SERIALIZED_NAME_ACCENT_EMPHASIS_COLOR = "accent_emphasis_color";
  @SerializedName(SERIALIZED_NAME_ACCENT_EMPHASIS_COLOR)
  private String accentEmphasisColor;

  public static final String SERIALIZED_NAME_ACCENT_MUTED_COLOR = "accent_muted_color";
  @SerializedName(SERIALIZED_NAME_ACCENT_MUTED_COLOR)
  private String accentMutedColor;

  public static final String SERIALIZED_NAME_ACCENT_SUBTLE_COLOR = "accent_subtle_color";
  @SerializedName(SERIALIZED_NAME_ACCENT_SUBTLE_COLOR)
  private String accentSubtleColor;

  public static final String SERIALIZED_NAME_BACKGROUND_CANVAS_COLOR = "background_canvas_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_CANVAS_COLOR)
  private String backgroundCanvasColor;

  public static final String SERIALIZED_NAME_BACKGROUND_SUBTLE_COLOR = "background_subtle_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_SUBTLE_COLOR)
  private String backgroundSubtleColor;

  public static final String SERIALIZED_NAME_BACKGROUND_SURFACE_COLOR = "background_surface_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_SURFACE_COLOR)
  private String backgroundSurfaceColor;

  public static final String SERIALIZED_NAME_BORDER_DEFAULT_COLOR = "border_default_color";
  @SerializedName(SERIALIZED_NAME_BORDER_DEFAULT_COLOR)
  private String borderDefaultColor;

  public static final String SERIALIZED_NAME_ERROR_DEFAULT_COLOR = "error_default_color";
  @SerializedName(SERIALIZED_NAME_ERROR_DEFAULT_COLOR)
  private String errorDefaultColor;

  public static final String SERIALIZED_NAME_ERROR_EMPHASIS_COLOR = "error_emphasis_color";
  @SerializedName(SERIALIZED_NAME_ERROR_EMPHASIS_COLOR)
  private String errorEmphasisColor;

  public static final String SERIALIZED_NAME_ERROR_MUTED_COLOR = "error_muted_color";
  @SerializedName(SERIALIZED_NAME_ERROR_MUTED_COLOR)
  private String errorMutedColor;

  public static final String SERIALIZED_NAME_ERROR_SUBTLE_COLOR = "error_subtle_color";
  @SerializedName(SERIALIZED_NAME_ERROR_SUBTLE_COLOR)
  private String errorSubtleColor;

  public static final String SERIALIZED_NAME_FOREGROUND_DEFAULT_COLOR = "foreground_default_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_DEFAULT_COLOR)
  private String foregroundDefaultColor;

  public static final String SERIALIZED_NAME_FOREGROUND_DISABLED_COLOR = "foreground_disabled_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_DISABLED_COLOR)
  private String foregroundDisabledColor;

  public static final String SERIALIZED_NAME_FOREGROUND_MUTED_COLOR = "foreground_muted_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_MUTED_COLOR)
  private String foregroundMutedColor;

  public static final String SERIALIZED_NAME_FOREGROUND_ON_ACCENT_COLOR = "foreground_on_accent_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_ON_ACCENT_COLOR)
  private String foregroundOnAccentColor;

  public static final String SERIALIZED_NAME_FOREGROUND_ON_DARK_COLOR = "foreground_on_dark_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_ON_DARK_COLOR)
  private String foregroundOnDarkColor;

  public static final String SERIALIZED_NAME_FOREGROUND_ON_DISABLED_COLOR = "foreground_on_disabled_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_ON_DISABLED_COLOR)
  private String foregroundOnDisabledColor;

  public static final String SERIALIZED_NAME_FOREGROUND_SUBTLE_COLOR = "foreground_subtle_color";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_SUBTLE_COLOR)
  private String foregroundSubtleColor;

  public static final String SERIALIZED_NAME_INPUT_BACKGROUND_COLOR = "input_background_color";
  @SerializedName(SERIALIZED_NAME_INPUT_BACKGROUND_COLOR)
  private String inputBackgroundColor;

  public static final String SERIALIZED_NAME_INPUT_DISABLED_COLOR = "input_disabled_color";
  @SerializedName(SERIALIZED_NAME_INPUT_DISABLED_COLOR)
  private String inputDisabledColor;

  public static final String SERIALIZED_NAME_INPUT_PLACEHOLDER_COLOR = "input_placeholder_color";
  @SerializedName(SERIALIZED_NAME_INPUT_PLACEHOLDER_COLOR)
  private String inputPlaceholderColor;

  public static final String SERIALIZED_NAME_INPUT_TEXT_COLOR = "input_text_color";
  @SerializedName(SERIALIZED_NAME_INPUT_TEXT_COLOR)
  private String inputTextColor;

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "primary_color";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor;

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "secondary_color";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor;

  public static final String SERIALIZED_NAME_SUCCESS_EMPHASIS_COLOR = "success_emphasis_color";
  @SerializedName(SERIALIZED_NAME_SUCCESS_EMPHASIS_COLOR)
  private String successEmphasisColor;

  public static final String SERIALIZED_NAME_TEXT_DEFAULT_COLOR = "text_default_color";
  @SerializedName(SERIALIZED_NAME_TEXT_DEFAULT_COLOR)
  private String textDefaultColor;

  public static final String SERIALIZED_NAME_TEXT_DISABLED_COLOR = "text_disabled_color";
  @SerializedName(SERIALIZED_NAME_TEXT_DISABLED_COLOR)
  private String textDisabledColor;

  public ProjectBrandingColors() {
  }

  public ProjectBrandingColors accentDefaultColor(String accentDefaultColor) {
    this.accentDefaultColor = accentDefaultColor;
    return this;
  }

  /**
   * AccentDefaultColor is a hex color code used by the Ory Account Experience theme.
   * @return accentDefaultColor
   */
  @javax.annotation.Nullable
  public String getAccentDefaultColor() {
    return accentDefaultColor;
  }

  public void setAccentDefaultColor(String accentDefaultColor) {
    this.accentDefaultColor = accentDefaultColor;
  }


  public ProjectBrandingColors accentDisabledColor(String accentDisabledColor) {
    this.accentDisabledColor = accentDisabledColor;
    return this;
  }

  /**
   * AccentDisabledColor is a hex color code used by the Ory Account Experience theme.
   * @return accentDisabledColor
   */
  @javax.annotation.Nullable
  public String getAccentDisabledColor() {
    return accentDisabledColor;
  }

  public void setAccentDisabledColor(String accentDisabledColor) {
    this.accentDisabledColor = accentDisabledColor;
  }


  public ProjectBrandingColors accentEmphasisColor(String accentEmphasisColor) {
    this.accentEmphasisColor = accentEmphasisColor;
    return this;
  }

  /**
   * AccentEmphasisColor is a hex color code used by the Ory Account Experience theme.
   * @return accentEmphasisColor
   */
  @javax.annotation.Nullable
  public String getAccentEmphasisColor() {
    return accentEmphasisColor;
  }

  public void setAccentEmphasisColor(String accentEmphasisColor) {
    this.accentEmphasisColor = accentEmphasisColor;
  }


  public ProjectBrandingColors accentMutedColor(String accentMutedColor) {
    this.accentMutedColor = accentMutedColor;
    return this;
  }

  /**
   * AccentMutedColor is a hex color code used by the Ory Account Experience theme.
   * @return accentMutedColor
   */
  @javax.annotation.Nullable
  public String getAccentMutedColor() {
    return accentMutedColor;
  }

  public void setAccentMutedColor(String accentMutedColor) {
    this.accentMutedColor = accentMutedColor;
  }


  public ProjectBrandingColors accentSubtleColor(String accentSubtleColor) {
    this.accentSubtleColor = accentSubtleColor;
    return this;
  }

  /**
   * AccentSubtleColor is a hex color code used by the Ory Account Experience theme.
   * @return accentSubtleColor
   */
  @javax.annotation.Nullable
  public String getAccentSubtleColor() {
    return accentSubtleColor;
  }

  public void setAccentSubtleColor(String accentSubtleColor) {
    this.accentSubtleColor = accentSubtleColor;
  }


  public ProjectBrandingColors backgroundCanvasColor(String backgroundCanvasColor) {
    this.backgroundCanvasColor = backgroundCanvasColor;
    return this;
  }

  /**
   * BackgroundCanvasColor is a hex color code used by the Ory Account Experience theme.
   * @return backgroundCanvasColor
   */
  @javax.annotation.Nullable
  public String getBackgroundCanvasColor() {
    return backgroundCanvasColor;
  }

  public void setBackgroundCanvasColor(String backgroundCanvasColor) {
    this.backgroundCanvasColor = backgroundCanvasColor;
  }


  public ProjectBrandingColors backgroundSubtleColor(String backgroundSubtleColor) {
    this.backgroundSubtleColor = backgroundSubtleColor;
    return this;
  }

  /**
   * BackgroundSubtleColor is a hex color code used by the Ory Account Experience theme.
   * @return backgroundSubtleColor
   */
  @javax.annotation.Nullable
  public String getBackgroundSubtleColor() {
    return backgroundSubtleColor;
  }

  public void setBackgroundSubtleColor(String backgroundSubtleColor) {
    this.backgroundSubtleColor = backgroundSubtleColor;
  }


  public ProjectBrandingColors backgroundSurfaceColor(String backgroundSurfaceColor) {
    this.backgroundSurfaceColor = backgroundSurfaceColor;
    return this;
  }

  /**
   * BackgroundSurfaceColor is a hex color code used by the Ory Account Experience theme.
   * @return backgroundSurfaceColor
   */
  @javax.annotation.Nullable
  public String getBackgroundSurfaceColor() {
    return backgroundSurfaceColor;
  }

  public void setBackgroundSurfaceColor(String backgroundSurfaceColor) {
    this.backgroundSurfaceColor = backgroundSurfaceColor;
  }


  public ProjectBrandingColors borderDefaultColor(String borderDefaultColor) {
    this.borderDefaultColor = borderDefaultColor;
    return this;
  }

  /**
   * BorderDefaultColor is a hex color code used by the Ory Account Experience theme.
   * @return borderDefaultColor
   */
  @javax.annotation.Nullable
  public String getBorderDefaultColor() {
    return borderDefaultColor;
  }

  public void setBorderDefaultColor(String borderDefaultColor) {
    this.borderDefaultColor = borderDefaultColor;
  }


  public ProjectBrandingColors errorDefaultColor(String errorDefaultColor) {
    this.errorDefaultColor = errorDefaultColor;
    return this;
  }

  /**
   * ErrorDefaultColor is a hex color code used by the Ory Account Experience theme.
   * @return errorDefaultColor
   */
  @javax.annotation.Nullable
  public String getErrorDefaultColor() {
    return errorDefaultColor;
  }

  public void setErrorDefaultColor(String errorDefaultColor) {
    this.errorDefaultColor = errorDefaultColor;
  }


  public ProjectBrandingColors errorEmphasisColor(String errorEmphasisColor) {
    this.errorEmphasisColor = errorEmphasisColor;
    return this;
  }

  /**
   * ErrorEmphasisColor is a hex color code used by the Ory Account Experience theme.
   * @return errorEmphasisColor
   */
  @javax.annotation.Nullable
  public String getErrorEmphasisColor() {
    return errorEmphasisColor;
  }

  public void setErrorEmphasisColor(String errorEmphasisColor) {
    this.errorEmphasisColor = errorEmphasisColor;
  }


  public ProjectBrandingColors errorMutedColor(String errorMutedColor) {
    this.errorMutedColor = errorMutedColor;
    return this;
  }

  /**
   * ErrorMutedColor is a hex color code used by the Ory Account Experience theme.
   * @return errorMutedColor
   */
  @javax.annotation.Nullable
  public String getErrorMutedColor() {
    return errorMutedColor;
  }

  public void setErrorMutedColor(String errorMutedColor) {
    this.errorMutedColor = errorMutedColor;
  }


  public ProjectBrandingColors errorSubtleColor(String errorSubtleColor) {
    this.errorSubtleColor = errorSubtleColor;
    return this;
  }

  /**
   * ErrorSubtleColor is a hex color code used by the Ory Account Experience theme.
   * @return errorSubtleColor
   */
  @javax.annotation.Nullable
  public String getErrorSubtleColor() {
    return errorSubtleColor;
  }

  public void setErrorSubtleColor(String errorSubtleColor) {
    this.errorSubtleColor = errorSubtleColor;
  }


  public ProjectBrandingColors foregroundDefaultColor(String foregroundDefaultColor) {
    this.foregroundDefaultColor = foregroundDefaultColor;
    return this;
  }

  /**
   * ForegroundDefaultColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundDefaultColor
   */
  @javax.annotation.Nullable
  public String getForegroundDefaultColor() {
    return foregroundDefaultColor;
  }

  public void setForegroundDefaultColor(String foregroundDefaultColor) {
    this.foregroundDefaultColor = foregroundDefaultColor;
  }


  public ProjectBrandingColors foregroundDisabledColor(String foregroundDisabledColor) {
    this.foregroundDisabledColor = foregroundDisabledColor;
    return this;
  }

  /**
   * ForegroundDisabledColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundDisabledColor
   */
  @javax.annotation.Nullable
  public String getForegroundDisabledColor() {
    return foregroundDisabledColor;
  }

  public void setForegroundDisabledColor(String foregroundDisabledColor) {
    this.foregroundDisabledColor = foregroundDisabledColor;
  }


  public ProjectBrandingColors foregroundMutedColor(String foregroundMutedColor) {
    this.foregroundMutedColor = foregroundMutedColor;
    return this;
  }

  /**
   * ForegroundMutedColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundMutedColor
   */
  @javax.annotation.Nullable
  public String getForegroundMutedColor() {
    return foregroundMutedColor;
  }

  public void setForegroundMutedColor(String foregroundMutedColor) {
    this.foregroundMutedColor = foregroundMutedColor;
  }


  public ProjectBrandingColors foregroundOnAccentColor(String foregroundOnAccentColor) {
    this.foregroundOnAccentColor = foregroundOnAccentColor;
    return this;
  }

  /**
   * ForegroundOnAccentColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundOnAccentColor
   */
  @javax.annotation.Nullable
  public String getForegroundOnAccentColor() {
    return foregroundOnAccentColor;
  }

  public void setForegroundOnAccentColor(String foregroundOnAccentColor) {
    this.foregroundOnAccentColor = foregroundOnAccentColor;
  }


  public ProjectBrandingColors foregroundOnDarkColor(String foregroundOnDarkColor) {
    this.foregroundOnDarkColor = foregroundOnDarkColor;
    return this;
  }

  /**
   * ForegroundOnDarkColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundOnDarkColor
   */
  @javax.annotation.Nullable
  public String getForegroundOnDarkColor() {
    return foregroundOnDarkColor;
  }

  public void setForegroundOnDarkColor(String foregroundOnDarkColor) {
    this.foregroundOnDarkColor = foregroundOnDarkColor;
  }


  public ProjectBrandingColors foregroundOnDisabledColor(String foregroundOnDisabledColor) {
    this.foregroundOnDisabledColor = foregroundOnDisabledColor;
    return this;
  }

  /**
   * ForegroundOnDisabledColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundOnDisabledColor
   */
  @javax.annotation.Nullable
  public String getForegroundOnDisabledColor() {
    return foregroundOnDisabledColor;
  }

  public void setForegroundOnDisabledColor(String foregroundOnDisabledColor) {
    this.foregroundOnDisabledColor = foregroundOnDisabledColor;
  }


  public ProjectBrandingColors foregroundSubtleColor(String foregroundSubtleColor) {
    this.foregroundSubtleColor = foregroundSubtleColor;
    return this;
  }

  /**
   * ForegroundSubtleColor is a hex color code used by the Ory Account Experience theme.
   * @return foregroundSubtleColor
   */
  @javax.annotation.Nullable
  public String getForegroundSubtleColor() {
    return foregroundSubtleColor;
  }

  public void setForegroundSubtleColor(String foregroundSubtleColor) {
    this.foregroundSubtleColor = foregroundSubtleColor;
  }


  public ProjectBrandingColors inputBackgroundColor(String inputBackgroundColor) {
    this.inputBackgroundColor = inputBackgroundColor;
    return this;
  }

  /**
   * InputBackgroundColor is a hex color code used by the Ory Account Experience theme.
   * @return inputBackgroundColor
   */
  @javax.annotation.Nullable
  public String getInputBackgroundColor() {
    return inputBackgroundColor;
  }

  public void setInputBackgroundColor(String inputBackgroundColor) {
    this.inputBackgroundColor = inputBackgroundColor;
  }


  public ProjectBrandingColors inputDisabledColor(String inputDisabledColor) {
    this.inputDisabledColor = inputDisabledColor;
    return this;
  }

  /**
   * InputDisabledColor is a hex color code used by the Ory Account Experience theme.
   * @return inputDisabledColor
   */
  @javax.annotation.Nullable
  public String getInputDisabledColor() {
    return inputDisabledColor;
  }

  public void setInputDisabledColor(String inputDisabledColor) {
    this.inputDisabledColor = inputDisabledColor;
  }


  public ProjectBrandingColors inputPlaceholderColor(String inputPlaceholderColor) {
    this.inputPlaceholderColor = inputPlaceholderColor;
    return this;
  }

  /**
   * InputPlaceholderColor is a hex color code used by the Ory Account Experience theme.
   * @return inputPlaceholderColor
   */
  @javax.annotation.Nullable
  public String getInputPlaceholderColor() {
    return inputPlaceholderColor;
  }

  public void setInputPlaceholderColor(String inputPlaceholderColor) {
    this.inputPlaceholderColor = inputPlaceholderColor;
  }


  public ProjectBrandingColors inputTextColor(String inputTextColor) {
    this.inputTextColor = inputTextColor;
    return this;
  }

  /**
   * InputTextColor is a hex color code used by the Ory Account Experience theme.
   * @return inputTextColor
   */
  @javax.annotation.Nullable
  public String getInputTextColor() {
    return inputTextColor;
  }

  public void setInputTextColor(String inputTextColor) {
    this.inputTextColor = inputTextColor;
  }


  public ProjectBrandingColors primaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
    return this;
  }

  /**
   * Primary color is an hsla color value used to derive the other colors from for the Ory Account Experience theme.
   * @return primaryColor
   */
  @javax.annotation.Nullable
  public String getPrimaryColor() {
    return primaryColor;
  }

  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public ProjectBrandingColors secondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
    return this;
  }

  /**
   * Secondary color is a hsla color code used to derive the other colors from for the Ory Account Experience theme.
   * @return secondaryColor
   */
  @javax.annotation.Nullable
  public String getSecondaryColor() {
    return secondaryColor;
  }

  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public ProjectBrandingColors successEmphasisColor(String successEmphasisColor) {
    this.successEmphasisColor = successEmphasisColor;
    return this;
  }

  /**
   * SuccessEmphasisColor is a hex color code used by the Ory Account Experience theme.
   * @return successEmphasisColor
   */
  @javax.annotation.Nullable
  public String getSuccessEmphasisColor() {
    return successEmphasisColor;
  }

  public void setSuccessEmphasisColor(String successEmphasisColor) {
    this.successEmphasisColor = successEmphasisColor;
  }


  public ProjectBrandingColors textDefaultColor(String textDefaultColor) {
    this.textDefaultColor = textDefaultColor;
    return this;
  }

  /**
   * TextDefaultColor is a hex color code used by the Ory Account Experience theme.
   * @return textDefaultColor
   */
  @javax.annotation.Nullable
  public String getTextDefaultColor() {
    return textDefaultColor;
  }

  public void setTextDefaultColor(String textDefaultColor) {
    this.textDefaultColor = textDefaultColor;
  }


  public ProjectBrandingColors textDisabledColor(String textDisabledColor) {
    this.textDisabledColor = textDisabledColor;
    return this;
  }

  /**
   * TextDisabledColor is a hex color code used by the Ory Account Experience theme.
   * @return textDisabledColor
   */
  @javax.annotation.Nullable
  public String getTextDisabledColor() {
    return textDisabledColor;
  }

  public void setTextDisabledColor(String textDisabledColor) {
    this.textDisabledColor = textDisabledColor;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectBrandingColors instance itself
   */
  public ProjectBrandingColors putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectBrandingColors projectBrandingColors = (ProjectBrandingColors) o;
    return Objects.equals(this.accentDefaultColor, projectBrandingColors.accentDefaultColor) &&
        Objects.equals(this.accentDisabledColor, projectBrandingColors.accentDisabledColor) &&
        Objects.equals(this.accentEmphasisColor, projectBrandingColors.accentEmphasisColor) &&
        Objects.equals(this.accentMutedColor, projectBrandingColors.accentMutedColor) &&
        Objects.equals(this.accentSubtleColor, projectBrandingColors.accentSubtleColor) &&
        Objects.equals(this.backgroundCanvasColor, projectBrandingColors.backgroundCanvasColor) &&
        Objects.equals(this.backgroundSubtleColor, projectBrandingColors.backgroundSubtleColor) &&
        Objects.equals(this.backgroundSurfaceColor, projectBrandingColors.backgroundSurfaceColor) &&
        Objects.equals(this.borderDefaultColor, projectBrandingColors.borderDefaultColor) &&
        Objects.equals(this.errorDefaultColor, projectBrandingColors.errorDefaultColor) &&
        Objects.equals(this.errorEmphasisColor, projectBrandingColors.errorEmphasisColor) &&
        Objects.equals(this.errorMutedColor, projectBrandingColors.errorMutedColor) &&
        Objects.equals(this.errorSubtleColor, projectBrandingColors.errorSubtleColor) &&
        Objects.equals(this.foregroundDefaultColor, projectBrandingColors.foregroundDefaultColor) &&
        Objects.equals(this.foregroundDisabledColor, projectBrandingColors.foregroundDisabledColor) &&
        Objects.equals(this.foregroundMutedColor, projectBrandingColors.foregroundMutedColor) &&
        Objects.equals(this.foregroundOnAccentColor, projectBrandingColors.foregroundOnAccentColor) &&
        Objects.equals(this.foregroundOnDarkColor, projectBrandingColors.foregroundOnDarkColor) &&
        Objects.equals(this.foregroundOnDisabledColor, projectBrandingColors.foregroundOnDisabledColor) &&
        Objects.equals(this.foregroundSubtleColor, projectBrandingColors.foregroundSubtleColor) &&
        Objects.equals(this.inputBackgroundColor, projectBrandingColors.inputBackgroundColor) &&
        Objects.equals(this.inputDisabledColor, projectBrandingColors.inputDisabledColor) &&
        Objects.equals(this.inputPlaceholderColor, projectBrandingColors.inputPlaceholderColor) &&
        Objects.equals(this.inputTextColor, projectBrandingColors.inputTextColor) &&
        Objects.equals(this.primaryColor, projectBrandingColors.primaryColor) &&
        Objects.equals(this.secondaryColor, projectBrandingColors.secondaryColor) &&
        Objects.equals(this.successEmphasisColor, projectBrandingColors.successEmphasisColor) &&
        Objects.equals(this.textDefaultColor, projectBrandingColors.textDefaultColor) &&
        Objects.equals(this.textDisabledColor, projectBrandingColors.textDisabledColor)&&
        Objects.equals(this.additionalProperties, projectBrandingColors.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accentDefaultColor, accentDisabledColor, accentEmphasisColor, accentMutedColor, accentSubtleColor, backgroundCanvasColor, backgroundSubtleColor, backgroundSurfaceColor, borderDefaultColor, errorDefaultColor, errorEmphasisColor, errorMutedColor, errorSubtleColor, foregroundDefaultColor, foregroundDisabledColor, foregroundMutedColor, foregroundOnAccentColor, foregroundOnDarkColor, foregroundOnDisabledColor, foregroundSubtleColor, inputBackgroundColor, inputDisabledColor, inputPlaceholderColor, inputTextColor, primaryColor, secondaryColor, successEmphasisColor, textDefaultColor, textDisabledColor, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectBrandingColors {\n");
    sb.append("    accentDefaultColor: ").append(toIndentedString(accentDefaultColor)).append("\n");
    sb.append("    accentDisabledColor: ").append(toIndentedString(accentDisabledColor)).append("\n");
    sb.append("    accentEmphasisColor: ").append(toIndentedString(accentEmphasisColor)).append("\n");
    sb.append("    accentMutedColor: ").append(toIndentedString(accentMutedColor)).append("\n");
    sb.append("    accentSubtleColor: ").append(toIndentedString(accentSubtleColor)).append("\n");
    sb.append("    backgroundCanvasColor: ").append(toIndentedString(backgroundCanvasColor)).append("\n");
    sb.append("    backgroundSubtleColor: ").append(toIndentedString(backgroundSubtleColor)).append("\n");
    sb.append("    backgroundSurfaceColor: ").append(toIndentedString(backgroundSurfaceColor)).append("\n");
    sb.append("    borderDefaultColor: ").append(toIndentedString(borderDefaultColor)).append("\n");
    sb.append("    errorDefaultColor: ").append(toIndentedString(errorDefaultColor)).append("\n");
    sb.append("    errorEmphasisColor: ").append(toIndentedString(errorEmphasisColor)).append("\n");
    sb.append("    errorMutedColor: ").append(toIndentedString(errorMutedColor)).append("\n");
    sb.append("    errorSubtleColor: ").append(toIndentedString(errorSubtleColor)).append("\n");
    sb.append("    foregroundDefaultColor: ").append(toIndentedString(foregroundDefaultColor)).append("\n");
    sb.append("    foregroundDisabledColor: ").append(toIndentedString(foregroundDisabledColor)).append("\n");
    sb.append("    foregroundMutedColor: ").append(toIndentedString(foregroundMutedColor)).append("\n");
    sb.append("    foregroundOnAccentColor: ").append(toIndentedString(foregroundOnAccentColor)).append("\n");
    sb.append("    foregroundOnDarkColor: ").append(toIndentedString(foregroundOnDarkColor)).append("\n");
    sb.append("    foregroundOnDisabledColor: ").append(toIndentedString(foregroundOnDisabledColor)).append("\n");
    sb.append("    foregroundSubtleColor: ").append(toIndentedString(foregroundSubtleColor)).append("\n");
    sb.append("    inputBackgroundColor: ").append(toIndentedString(inputBackgroundColor)).append("\n");
    sb.append("    inputDisabledColor: ").append(toIndentedString(inputDisabledColor)).append("\n");
    sb.append("    inputPlaceholderColor: ").append(toIndentedString(inputPlaceholderColor)).append("\n");
    sb.append("    inputTextColor: ").append(toIndentedString(inputTextColor)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    successEmphasisColor: ").append(toIndentedString(successEmphasisColor)).append("\n");
    sb.append("    textDefaultColor: ").append(toIndentedString(textDefaultColor)).append("\n");
    sb.append("    textDisabledColor: ").append(toIndentedString(textDisabledColor)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accent_default_color");
    openapiFields.add("accent_disabled_color");
    openapiFields.add("accent_emphasis_color");
    openapiFields.add("accent_muted_color");
    openapiFields.add("accent_subtle_color");
    openapiFields.add("background_canvas_color");
    openapiFields.add("background_subtle_color");
    openapiFields.add("background_surface_color");
    openapiFields.add("border_default_color");
    openapiFields.add("error_default_color");
    openapiFields.add("error_emphasis_color");
    openapiFields.add("error_muted_color");
    openapiFields.add("error_subtle_color");
    openapiFields.add("foreground_default_color");
    openapiFields.add("foreground_disabled_color");
    openapiFields.add("foreground_muted_color");
    openapiFields.add("foreground_on_accent_color");
    openapiFields.add("foreground_on_dark_color");
    openapiFields.add("foreground_on_disabled_color");
    openapiFields.add("foreground_subtle_color");
    openapiFields.add("input_background_color");
    openapiFields.add("input_disabled_color");
    openapiFields.add("input_placeholder_color");
    openapiFields.add("input_text_color");
    openapiFields.add("primary_color");
    openapiFields.add("secondary_color");
    openapiFields.add("success_emphasis_color");
    openapiFields.add("text_default_color");
    openapiFields.add("text_disabled_color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectBrandingColors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectBrandingColors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectBrandingColors is not found in the empty JSON string", ProjectBrandingColors.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accent_default_color") != null && !jsonObj.get("accent_default_color").isJsonNull()) && !jsonObj.get("accent_default_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent_default_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent_default_color").toString()));
      }
      if ((jsonObj.get("accent_disabled_color") != null && !jsonObj.get("accent_disabled_color").isJsonNull()) && !jsonObj.get("accent_disabled_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent_disabled_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent_disabled_color").toString()));
      }
      if ((jsonObj.get("accent_emphasis_color") != null && !jsonObj.get("accent_emphasis_color").isJsonNull()) && !jsonObj.get("accent_emphasis_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent_emphasis_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent_emphasis_color").toString()));
      }
      if ((jsonObj.get("accent_muted_color") != null && !jsonObj.get("accent_muted_color").isJsonNull()) && !jsonObj.get("accent_muted_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent_muted_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent_muted_color").toString()));
      }
      if ((jsonObj.get("accent_subtle_color") != null && !jsonObj.get("accent_subtle_color").isJsonNull()) && !jsonObj.get("accent_subtle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accent_subtle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accent_subtle_color").toString()));
      }
      if ((jsonObj.get("background_canvas_color") != null && !jsonObj.get("background_canvas_color").isJsonNull()) && !jsonObj.get("background_canvas_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_canvas_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_canvas_color").toString()));
      }
      if ((jsonObj.get("background_subtle_color") != null && !jsonObj.get("background_subtle_color").isJsonNull()) && !jsonObj.get("background_subtle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_subtle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_subtle_color").toString()));
      }
      if ((jsonObj.get("background_surface_color") != null && !jsonObj.get("background_surface_color").isJsonNull()) && !jsonObj.get("background_surface_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_surface_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_surface_color").toString()));
      }
      if ((jsonObj.get("border_default_color") != null && !jsonObj.get("border_default_color").isJsonNull()) && !jsonObj.get("border_default_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `border_default_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("border_default_color").toString()));
      }
      if ((jsonObj.get("error_default_color") != null && !jsonObj.get("error_default_color").isJsonNull()) && !jsonObj.get("error_default_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_default_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_default_color").toString()));
      }
      if ((jsonObj.get("error_emphasis_color") != null && !jsonObj.get("error_emphasis_color").isJsonNull()) && !jsonObj.get("error_emphasis_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_emphasis_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_emphasis_color").toString()));
      }
      if ((jsonObj.get("error_muted_color") != null && !jsonObj.get("error_muted_color").isJsonNull()) && !jsonObj.get("error_muted_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_muted_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_muted_color").toString()));
      }
      if ((jsonObj.get("error_subtle_color") != null && !jsonObj.get("error_subtle_color").isJsonNull()) && !jsonObj.get("error_subtle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_subtle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_subtle_color").toString()));
      }
      if ((jsonObj.get("foreground_default_color") != null && !jsonObj.get("foreground_default_color").isJsonNull()) && !jsonObj.get("foreground_default_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_default_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_default_color").toString()));
      }
      if ((jsonObj.get("foreground_disabled_color") != null && !jsonObj.get("foreground_disabled_color").isJsonNull()) && !jsonObj.get("foreground_disabled_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_disabled_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_disabled_color").toString()));
      }
      if ((jsonObj.get("foreground_muted_color") != null && !jsonObj.get("foreground_muted_color").isJsonNull()) && !jsonObj.get("foreground_muted_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_muted_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_muted_color").toString()));
      }
      if ((jsonObj.get("foreground_on_accent_color") != null && !jsonObj.get("foreground_on_accent_color").isJsonNull()) && !jsonObj.get("foreground_on_accent_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_on_accent_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_on_accent_color").toString()));
      }
      if ((jsonObj.get("foreground_on_dark_color") != null && !jsonObj.get("foreground_on_dark_color").isJsonNull()) && !jsonObj.get("foreground_on_dark_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_on_dark_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_on_dark_color").toString()));
      }
      if ((jsonObj.get("foreground_on_disabled_color") != null && !jsonObj.get("foreground_on_disabled_color").isJsonNull()) && !jsonObj.get("foreground_on_disabled_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_on_disabled_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_on_disabled_color").toString()));
      }
      if ((jsonObj.get("foreground_subtle_color") != null && !jsonObj.get("foreground_subtle_color").isJsonNull()) && !jsonObj.get("foreground_subtle_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreground_subtle_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreground_subtle_color").toString()));
      }
      if ((jsonObj.get("input_background_color") != null && !jsonObj.get("input_background_color").isJsonNull()) && !jsonObj.get("input_background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_background_color").toString()));
      }
      if ((jsonObj.get("input_disabled_color") != null && !jsonObj.get("input_disabled_color").isJsonNull()) && !jsonObj.get("input_disabled_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_disabled_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_disabled_color").toString()));
      }
      if ((jsonObj.get("input_placeholder_color") != null && !jsonObj.get("input_placeholder_color").isJsonNull()) && !jsonObj.get("input_placeholder_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_placeholder_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_placeholder_color").toString()));
      }
      if ((jsonObj.get("input_text_color") != null && !jsonObj.get("input_text_color").isJsonNull()) && !jsonObj.get("input_text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_text_color").toString()));
      }
      if ((jsonObj.get("primary_color") != null && !jsonObj.get("primary_color").isJsonNull()) && !jsonObj.get("primary_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_color").toString()));
      }
      if ((jsonObj.get("secondary_color") != null && !jsonObj.get("secondary_color").isJsonNull()) && !jsonObj.get("secondary_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_color").toString()));
      }
      if ((jsonObj.get("success_emphasis_color") != null && !jsonObj.get("success_emphasis_color").isJsonNull()) && !jsonObj.get("success_emphasis_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success_emphasis_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success_emphasis_color").toString()));
      }
      if ((jsonObj.get("text_default_color") != null && !jsonObj.get("text_default_color").isJsonNull()) && !jsonObj.get("text_default_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_default_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_default_color").toString()));
      }
      if ((jsonObj.get("text_disabled_color") != null && !jsonObj.get("text_disabled_color").isJsonNull()) && !jsonObj.get("text_disabled_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_disabled_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_disabled_color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectBrandingColors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectBrandingColors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectBrandingColors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectBrandingColors.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectBrandingColors>() {
           @Override
           public void write(JsonWriter out, ProjectBrandingColors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectBrandingColors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ProjectBrandingColors instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectBrandingColors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectBrandingColors
   * @throws IOException if the JSON string is invalid with respect to ProjectBrandingColors
   */
  public static ProjectBrandingColors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectBrandingColors.class);
  }

  /**
   * Convert an instance of ProjectBrandingColors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

