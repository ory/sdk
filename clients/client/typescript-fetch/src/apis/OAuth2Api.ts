/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.12.1
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptOAuth2ConsentRequest,
  AcceptOAuth2LoginRequest,
  ErrorOAuth2,
  GenericError,
  IntrospectedOAuth2Token,
  JsonPatch,
  OAuth2Client,
  OAuth2ClientTokenLifespans,
  OAuth2ConsentRequest,
  OAuth2ConsentSession,
  OAuth2LoginRequest,
  OAuth2LogoutRequest,
  OAuth2RedirectTo,
  OAuth2TokenExchange,
  RejectOAuth2Request,
  TrustOAuth2JwtGrantIssuer,
  TrustedOAuth2JwtGrantIssuer,
} from '../models/index';
import {
    AcceptOAuth2ConsentRequestFromJSON,
    AcceptOAuth2ConsentRequestToJSON,
    AcceptOAuth2LoginRequestFromJSON,
    AcceptOAuth2LoginRequestToJSON,
    ErrorOAuth2FromJSON,
    ErrorOAuth2ToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    IntrospectedOAuth2TokenFromJSON,
    IntrospectedOAuth2TokenToJSON,
    JsonPatchFromJSON,
    JsonPatchToJSON,
    OAuth2ClientFromJSON,
    OAuth2ClientToJSON,
    OAuth2ClientTokenLifespansFromJSON,
    OAuth2ClientTokenLifespansToJSON,
    OAuth2ConsentRequestFromJSON,
    OAuth2ConsentRequestToJSON,
    OAuth2ConsentSessionFromJSON,
    OAuth2ConsentSessionToJSON,
    OAuth2LoginRequestFromJSON,
    OAuth2LoginRequestToJSON,
    OAuth2LogoutRequestFromJSON,
    OAuth2LogoutRequestToJSON,
    OAuth2RedirectToFromJSON,
    OAuth2RedirectToToJSON,
    OAuth2TokenExchangeFromJSON,
    OAuth2TokenExchangeToJSON,
    RejectOAuth2RequestFromJSON,
    RejectOAuth2RequestToJSON,
    TrustOAuth2JwtGrantIssuerFromJSON,
    TrustOAuth2JwtGrantIssuerToJSON,
    TrustedOAuth2JwtGrantIssuerFromJSON,
    TrustedOAuth2JwtGrantIssuerToJSON,
} from '../models/index';

export interface AcceptOAuth2ConsentRequestRequest {
    consentChallenge: string;
    acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest;
}

export interface AcceptOAuth2LoginRequestRequest {
    loginChallenge: string;
    acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest;
}

export interface AcceptOAuth2LogoutRequestRequest {
    logoutChallenge: string;
}

export interface CreateOAuth2ClientRequest {
    oAuth2Client: OAuth2Client;
}

export interface DeleteOAuth2ClientRequest {
    id: string;
}

export interface DeleteOAuth2TokenRequest {
    clientId: string;
}

export interface DeleteTrustedOAuth2JwtGrantIssuerRequest {
    id: string;
}

export interface GetOAuth2ClientRequest {
    id: string;
}

export interface GetOAuth2ConsentRequestRequest {
    consentChallenge: string;
}

export interface GetOAuth2LoginRequestRequest {
    loginChallenge: string;
}

export interface GetOAuth2LogoutRequestRequest {
    logoutChallenge: string;
}

export interface GetTrustedOAuth2JwtGrantIssuerRequest {
    id: string;
}

export interface IntrospectOAuth2TokenRequest {
    token: string;
    scope?: string;
}

export interface ListOAuth2ClientsRequest {
    pageSize?: number;
    pageToken?: string;
    clientName?: string;
    owner?: string;
}

export interface ListOAuth2ConsentSessionsRequest {
    subject: string;
    pageSize?: number;
    pageToken?: string;
    loginSessionId?: string;
}

export interface ListTrustedOAuth2JwtGrantIssuersRequest {
    maxItems?: number;
    defaultItems?: number;
    issuer?: string;
}

export interface Oauth2TokenExchangeRequest {
    grantType: string;
    clientId?: string;
    code?: string;
    redirectUri?: string;
    refreshToken?: string;
}

export interface PatchOAuth2ClientRequest {
    id: string;
    jsonPatch: Array<JsonPatch>;
}

export interface RejectOAuth2ConsentRequestRequest {
    consentChallenge: string;
    rejectOAuth2Request?: RejectOAuth2Request;
}

export interface RejectOAuth2LoginRequestRequest {
    loginChallenge: string;
    rejectOAuth2Request?: RejectOAuth2Request;
}

export interface RejectOAuth2LogoutRequestRequest {
    logoutChallenge: string;
}

export interface RevokeOAuth2ConsentSessionsRequest {
    subject: string;
    client?: string;
    all?: boolean;
}

export interface RevokeOAuth2LoginSessionsRequest {
    subject?: string;
    sid?: string;
}

export interface RevokeOAuth2TokenRequest {
    token: string;
    clientId?: string;
    clientSecret?: string;
}

export interface SetOAuth2ClientRequest {
    id: string;
    oAuth2Client: OAuth2Client;
}

export interface SetOAuth2ClientLifespansRequest {
    id: string;
    oAuth2ClientTokenLifespans?: OAuth2ClientTokenLifespans;
}

export interface TrustOAuth2JwtGrantIssuerRequest {
    trustOAuth2JwtGrantIssuer?: TrustOAuth2JwtGrantIssuer;
}

/**
 * 
 */
export class OAuth2Api extends runtime.BaseAPI {

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Accept OAuth 2.0 Consent Request
     */
    async acceptOAuth2ConsentRequestRaw(requestParameters: AcceptOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2RedirectTo>> {
        if (requestParameters['consentChallenge'] == null) {
            throw new runtime.RequiredError(
                'consentChallenge',
                'Required parameter "consentChallenge" was null or undefined when calling acceptOAuth2ConsentRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['consentChallenge'] != null) {
            queryParameters['consent_challenge'] = requestParameters['consentChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/consent/accept`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptOAuth2ConsentRequestToJSON(requestParameters['acceptOAuth2ConsentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2RedirectToFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Accept OAuth 2.0 Consent Request
     */
    async acceptOAuth2ConsentRequest(requestParameters: AcceptOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2RedirectTo> {
        const response = await this.acceptOAuth2ConsentRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * Accept OAuth 2.0 Login Request
     */
    async acceptOAuth2LoginRequestRaw(requestParameters: AcceptOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2RedirectTo>> {
        if (requestParameters['loginChallenge'] == null) {
            throw new runtime.RequiredError(
                'loginChallenge',
                'Required parameter "loginChallenge" was null or undefined when calling acceptOAuth2LoginRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loginChallenge'] != null) {
            queryParameters['login_challenge'] = requestParameters['loginChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/login/accept`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptOAuth2LoginRequestToJSON(requestParameters['acceptOAuth2LoginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2RedirectToFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * Accept OAuth 2.0 Login Request
     */
    async acceptOAuth2LoginRequest(requestParameters: AcceptOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2RedirectTo> {
        const response = await this.acceptOAuth2LoginRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * Accept OAuth 2.0 Session Logout Request
     */
    async acceptOAuth2LogoutRequestRaw(requestParameters: AcceptOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2RedirectTo>> {
        if (requestParameters['logoutChallenge'] == null) {
            throw new runtime.RequiredError(
                'logoutChallenge',
                'Required parameter "logoutChallenge" was null or undefined when calling acceptOAuth2LogoutRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['logoutChallenge'] != null) {
            queryParameters['logout_challenge'] = requestParameters['logoutChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/logout/accept`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2RedirectToFromJSON(jsonValue));
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * Accept OAuth 2.0 Session Logout Request
     */
    async acceptOAuth2LogoutRequest(requestParameters: AcceptOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2RedirectTo> {
        const response = await this.acceptOAuth2LogoutRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * Create OAuth 2.0 Client
     */
    async createOAuth2ClientRaw(requestParameters: CreateOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Client>> {
        if (requestParameters['oAuth2Client'] == null) {
            throw new runtime.RequiredError(
                'oAuth2Client',
                'Required parameter "oAuth2Client" was null or undefined when calling createOAuth2Client().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2ClientToJSON(requestParameters['oAuth2Client']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ClientFromJSON(jsonValue));
    }

    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * Create OAuth 2.0 Client
     */
    async createOAuth2Client(requestParameters: CreateOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Client> {
        const response = await this.createOAuth2ClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * Delete OAuth 2.0 Client
     */
    async deleteOAuth2ClientRaw(requestParameters: DeleteOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOAuth2Client().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * Delete OAuth 2.0 Client
     */
    async deleteOAuth2Client(requestParameters: DeleteOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOAuth2ClientRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     */
    async deleteOAuth2TokenRaw(requestParameters: DeleteOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling deleteOAuth2Token().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/tokens`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     */
    async deleteOAuth2Token(requestParameters: DeleteOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOAuth2TokenRaw(requestParameters, initOverrides);
    }

    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     */
    async deleteTrustedOAuth2JwtGrantIssuerRaw(requestParameters: DeleteTrustedOAuth2JwtGrantIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTrustedOAuth2JwtGrantIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/trust/grants/jwt-bearer/issuers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     */
    async deleteTrustedOAuth2JwtGrantIssuer(requestParameters: DeleteTrustedOAuth2JwtGrantIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTrustedOAuth2JwtGrantIssuerRaw(requestParameters, initOverrides);
    }

    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Get an OAuth 2.0 Client
     */
    async getOAuth2ClientRaw(requestParameters: GetOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Client>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOAuth2Client().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ClientFromJSON(jsonValue));
    }

    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Get an OAuth 2.0 Client
     */
    async getOAuth2Client(requestParameters: GetOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Client> {
        const response = await this.getOAuth2ClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Get OAuth 2.0 Consent Request
     */
    async getOAuth2ConsentRequestRaw(requestParameters: GetOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2ConsentRequest>> {
        if (requestParameters['consentChallenge'] == null) {
            throw new runtime.RequiredError(
                'consentChallenge',
                'Required parameter "consentChallenge" was null or undefined when calling getOAuth2ConsentRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['consentChallenge'] != null) {
            queryParameters['consent_challenge'] = requestParameters['consentChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/consent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ConsentRequestFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Get OAuth 2.0 Consent Request
     */
    async getOAuth2ConsentRequest(requestParameters: GetOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2ConsentRequest> {
        const response = await this.getOAuth2ConsentRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * Get OAuth 2.0 Login Request
     */
    async getOAuth2LoginRequestRaw(requestParameters: GetOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2LoginRequest>> {
        if (requestParameters['loginChallenge'] == null) {
            throw new runtime.RequiredError(
                'loginChallenge',
                'Required parameter "loginChallenge" was null or undefined when calling getOAuth2LoginRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loginChallenge'] != null) {
            queryParameters['login_challenge'] = requestParameters['loginChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2LoginRequestFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * Get OAuth 2.0 Login Request
     */
    async getOAuth2LoginRequest(requestParameters: GetOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2LoginRequest> {
        const response = await this.getOAuth2LoginRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * Get OAuth 2.0 Session Logout Request
     */
    async getOAuth2LogoutRequestRaw(requestParameters: GetOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2LogoutRequest>> {
        if (requestParameters['logoutChallenge'] == null) {
            throw new runtime.RequiredError(
                'logoutChallenge',
                'Required parameter "logoutChallenge" was null or undefined when calling getOAuth2LogoutRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['logoutChallenge'] != null) {
            queryParameters['logout_challenge'] = requestParameters['logoutChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2LogoutRequestFromJSON(jsonValue));
    }

    /**
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * Get OAuth 2.0 Session Logout Request
     */
    async getOAuth2LogoutRequest(requestParameters: GetOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2LogoutRequest> {
        const response = await this.getOAuth2LogoutRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     */
    async getTrustedOAuth2JwtGrantIssuerRaw(requestParameters: GetTrustedOAuth2JwtGrantIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrustedOAuth2JwtGrantIssuer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTrustedOAuth2JwtGrantIssuer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/trust/grants/jwt-bearer/issuers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrustedOAuth2JwtGrantIssuerFromJSON(jsonValue));
    }

    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     */
    async getTrustedOAuth2JwtGrantIssuer(requestParameters: GetTrustedOAuth2JwtGrantIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrustedOAuth2JwtGrantIssuer> {
        const response = await this.getTrustedOAuth2JwtGrantIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
     * Introspect OAuth2 Access and Refresh Tokens
     */
    async introspectOAuth2TokenRaw(requestParameters: IntrospectOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntrospectedOAuth2Token>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling introspectOAuth2Token().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['token'] != null) {
            formParams.append('token', requestParameters['token'] as any);
        }

        const response = await this.request({
            path: `/admin/oauth2/introspect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntrospectedOAuth2TokenFromJSON(jsonValue));
    }

    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
     * Introspect OAuth2 Access and Refresh Tokens
     */
    async introspectOAuth2Token(requestParameters: IntrospectOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntrospectedOAuth2Token> {
        const response = await this.introspectOAuth2TokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * List OAuth 2.0 Clients
     */
    async listOAuth2ClientsRaw(requestParameters: ListOAuth2ClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OAuth2Client>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['clientName'] != null) {
            queryParameters['client_name'] = requestParameters['clientName'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OAuth2ClientFromJSON));
    }

    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * List OAuth 2.0 Clients
     */
    async listOAuth2Clients(requestParameters: ListOAuth2ClientsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OAuth2Client>> {
        const response = await this.listOAuth2ClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * List OAuth 2.0 Consent Sessions of a Subject
     */
    async listOAuth2ConsentSessionsRaw(requestParameters: ListOAuth2ConsentSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OAuth2ConsentSession>>> {
        if (requestParameters['subject'] == null) {
            throw new runtime.RequiredError(
                'subject',
                'Required parameter "subject" was null or undefined when calling listOAuth2ConsentSessions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        if (requestParameters['loginSessionId'] != null) {
            queryParameters['login_session_id'] = requestParameters['loginSessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/sessions/consent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OAuth2ConsentSessionFromJSON));
    }

    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * List OAuth 2.0 Consent Sessions of a Subject
     */
    async listOAuth2ConsentSessions(requestParameters: ListOAuth2ConsentSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OAuth2ConsentSession>> {
        const response = await this.listOAuth2ConsentSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     */
    async listTrustedOAuth2JwtGrantIssuersRaw(requestParameters: ListTrustedOAuth2JwtGrantIssuersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrustedOAuth2JwtGrantIssuer>>> {
        const queryParameters: any = {};

        if (requestParameters['maxItems'] != null) {
            queryParameters['MaxItems'] = requestParameters['maxItems'];
        }

        if (requestParameters['defaultItems'] != null) {
            queryParameters['DefaultItems'] = requestParameters['defaultItems'];
        }

        if (requestParameters['issuer'] != null) {
            queryParameters['issuer'] = requestParameters['issuer'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/trust/grants/jwt-bearer/issuers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrustedOAuth2JwtGrantIssuerFromJSON));
    }

    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     */
    async listTrustedOAuth2JwtGrantIssuers(requestParameters: ListTrustedOAuth2JwtGrantIssuersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrustedOAuth2JwtGrantIssuer>> {
        const response = await this.listTrustedOAuth2JwtGrantIssuersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * OAuth 2.0 Authorize Endpoint
     */
    async oAuth2AuthorizeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ErrorOAuth2>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ErrorOAuth2FromJSON(jsonValue));
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * OAuth 2.0 Authorize Endpoint
     */
    async oAuth2Authorize(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ErrorOAuth2> {
        const response = await this.oAuth2AuthorizeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * The OAuth 2.0 Token Endpoint
     */
    async oauth2TokenExchangeRaw(requestParameters: Oauth2TokenExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2TokenExchange>> {
        if (requestParameters['grantType'] == null) {
            throw new runtime.RequiredError(
                'grantType',
                'Required parameter "grantType" was null or undefined when calling oauth2TokenExchange().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['code'] != null) {
            formParams.append('code', requestParameters['code'] as any);
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['redirectUri'] != null) {
            formParams.append('redirect_uri', requestParameters['redirectUri'] as any);
        }

        if (requestParameters['refreshToken'] != null) {
            formParams.append('refresh_token', requestParameters['refreshToken'] as any);
        }

        const response = await this.request({
            path: `/oauth2/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2TokenExchangeFromJSON(jsonValue));
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * The OAuth 2.0 Token Endpoint
     */
    async oauth2TokenExchange(requestParameters: Oauth2TokenExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2TokenExchange> {
        const response = await this.oauth2TokenExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Patch OAuth 2.0 Client
     */
    async patchOAuth2ClientRaw(requestParameters: PatchOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Client>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchOAuth2Client().'
            );
        }

        if (requestParameters['jsonPatch'] == null) {
            throw new runtime.RequiredError(
                'jsonPatch',
                'Required parameter "jsonPatch" was null or undefined when calling patchOAuth2Client().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['jsonPatch']!.map(JsonPatchToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ClientFromJSON(jsonValue));
    }

    /**
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Patch OAuth 2.0 Client
     */
    async patchOAuth2Client(requestParameters: PatchOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Client> {
        const response = await this.patchOAuth2ClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Reject OAuth 2.0 Consent Request
     */
    async rejectOAuth2ConsentRequestRaw(requestParameters: RejectOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2RedirectTo>> {
        if (requestParameters['consentChallenge'] == null) {
            throw new runtime.RequiredError(
                'consentChallenge',
                'Required parameter "consentChallenge" was null or undefined when calling rejectOAuth2ConsentRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['consentChallenge'] != null) {
            queryParameters['consent_challenge'] = requestParameters['consentChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/consent/reject`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RejectOAuth2RequestToJSON(requestParameters['rejectOAuth2Request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2RedirectToFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * Reject OAuth 2.0 Consent Request
     */
    async rejectOAuth2ConsentRequest(requestParameters: RejectOAuth2ConsentRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2RedirectTo> {
        const response = await this.rejectOAuth2ConsentRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * Reject OAuth 2.0 Login Request
     */
    async rejectOAuth2LoginRequestRaw(requestParameters: RejectOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2RedirectTo>> {
        if (requestParameters['loginChallenge'] == null) {
            throw new runtime.RequiredError(
                'loginChallenge',
                'Required parameter "loginChallenge" was null or undefined when calling rejectOAuth2LoginRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loginChallenge'] != null) {
            queryParameters['login_challenge'] = requestParameters['loginChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/login/reject`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RejectOAuth2RequestToJSON(requestParameters['rejectOAuth2Request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2RedirectToFromJSON(jsonValue));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * Reject OAuth 2.0 Login Request
     */
    async rejectOAuth2LoginRequest(requestParameters: RejectOAuth2LoginRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2RedirectTo> {
        const response = await this.rejectOAuth2LoginRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * Reject OAuth 2.0 Session Logout Request
     */
    async rejectOAuth2LogoutRequestRaw(requestParameters: RejectOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['logoutChallenge'] == null) {
            throw new runtime.RequiredError(
                'logoutChallenge',
                'Required parameter "logoutChallenge" was null or undefined when calling rejectOAuth2LogoutRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['logoutChallenge'] != null) {
            queryParameters['logout_challenge'] = requestParameters['logoutChallenge'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/requests/logout/reject`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * Reject OAuth 2.0 Session Logout Request
     */
    async rejectOAuth2LogoutRequest(requestParameters: RejectOAuth2LogoutRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectOAuth2LogoutRequestRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * Revoke OAuth 2.0 Consent Sessions of a Subject
     */
    async revokeOAuth2ConsentSessionsRaw(requestParameters: RevokeOAuth2ConsentSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['subject'] == null) {
            throw new runtime.RequiredError(
                'subject',
                'Required parameter "subject" was null or undefined when calling revokeOAuth2ConsentSessions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        if (requestParameters['client'] != null) {
            queryParameters['client'] = requestParameters['client'];
        }

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/sessions/consent`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * Revoke OAuth 2.0 Consent Sessions of a Subject
     */
    async revokeOAuth2ConsentSessions(requestParameters: RevokeOAuth2ConsentSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeOAuth2ConsentSessionsRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     */
    async revokeOAuth2LoginSessionsRaw(requestParameters: RevokeOAuth2LoginSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        if (requestParameters['sid'] != null) {
            queryParameters['sid'] = requestParameters['sid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/oauth2/auth/sessions/login`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpenID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     */
    async revokeOAuth2LoginSessions(requestParameters: RevokeOAuth2LoginSessionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeOAuth2LoginSessionsRaw(requestParameters, initOverrides);
    }

    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * Revoke OAuth 2.0 Access or Refresh Token
     */
    async revokeOAuth2TokenRaw(requestParameters: RevokeOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling revokeOAuth2Token().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        if (requestParameters['token'] != null) {
            formParams.append('token', requestParameters['token'] as any);
        }

        const response = await this.request({
            path: `/oauth2/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * Revoke OAuth 2.0 Access or Refresh Token
     */
    async revokeOAuth2Token(requestParameters: RevokeOAuth2TokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeOAuth2TokenRaw(requestParameters, initOverrides);
    }

    /**
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Set OAuth 2.0 Client
     */
    async setOAuth2ClientRaw(requestParameters: SetOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Client>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setOAuth2Client().'
            );
        }

        if (requestParameters['oAuth2Client'] == null) {
            throw new runtime.RequiredError(
                'oAuth2Client',
                'Required parameter "oAuth2Client" was null or undefined when calling setOAuth2Client().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2ClientToJSON(requestParameters['oAuth2Client']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ClientFromJSON(jsonValue));
    }

    /**
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * Set OAuth 2.0 Client
     */
    async setOAuth2Client(requestParameters: SetOAuth2ClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Client> {
        const response = await this.setOAuth2ClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * Set OAuth2 Client Token Lifespans
     */
    async setOAuth2ClientLifespansRaw(requestParameters: SetOAuth2ClientLifespansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Client>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setOAuth2ClientLifespans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/clients/{id}/lifespans`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2ClientTokenLifespansToJSON(requestParameters['oAuth2ClientTokenLifespans']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ClientFromJSON(jsonValue));
    }

    /**
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * Set OAuth2 Client Token Lifespans
     */
    async setOAuth2ClientLifespans(requestParameters: SetOAuth2ClientLifespansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Client> {
        const response = await this.setOAuth2ClientLifespansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * Trust OAuth2 JWT Bearer Grant Type Issuer
     */
    async trustOAuth2JwtGrantIssuerRaw(requestParameters: TrustOAuth2JwtGrantIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrustedOAuth2JwtGrantIssuer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("oryAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/trust/grants/jwt-bearer/issuers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrustOAuth2JwtGrantIssuerToJSON(requestParameters['trustOAuth2JwtGrantIssuer']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrustedOAuth2JwtGrantIssuerFromJSON(jsonValue));
    }

    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * Trust OAuth2 JWT Bearer Grant Type Issuer
     */
    async trustOAuth2JwtGrantIssuer(requestParameters: TrustOAuth2JwtGrantIssuerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrustedOAuth2JwtGrantIssuer> {
        const response = await this.trustOAuth2JwtGrantIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
