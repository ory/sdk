/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.12.1
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { UpdateLoginFlowWithCodeMethod } from './UpdateLoginFlowWithCodeMethod';
import {
    instanceOfUpdateLoginFlowWithCodeMethod,
    UpdateLoginFlowWithCodeMethodFromJSON,
    UpdateLoginFlowWithCodeMethodFromJSONTyped,
    UpdateLoginFlowWithCodeMethodToJSON,
} from './UpdateLoginFlowWithCodeMethod';
import type { UpdateLoginFlowWithLookupSecretMethod } from './UpdateLoginFlowWithLookupSecretMethod';
import {
    instanceOfUpdateLoginFlowWithLookupSecretMethod,
    UpdateLoginFlowWithLookupSecretMethodFromJSON,
    UpdateLoginFlowWithLookupSecretMethodFromJSONTyped,
    UpdateLoginFlowWithLookupSecretMethodToJSON,
} from './UpdateLoginFlowWithLookupSecretMethod';
import type { UpdateLoginFlowWithOidcMethod } from './UpdateLoginFlowWithOidcMethod';
import {
    instanceOfUpdateLoginFlowWithOidcMethod,
    UpdateLoginFlowWithOidcMethodFromJSON,
    UpdateLoginFlowWithOidcMethodFromJSONTyped,
    UpdateLoginFlowWithOidcMethodToJSON,
} from './UpdateLoginFlowWithOidcMethod';
import type { UpdateLoginFlowWithPasskeyMethod } from './UpdateLoginFlowWithPasskeyMethod';
import {
    instanceOfUpdateLoginFlowWithPasskeyMethod,
    UpdateLoginFlowWithPasskeyMethodFromJSON,
    UpdateLoginFlowWithPasskeyMethodFromJSONTyped,
    UpdateLoginFlowWithPasskeyMethodToJSON,
} from './UpdateLoginFlowWithPasskeyMethod';
import type { UpdateLoginFlowWithPasswordMethod } from './UpdateLoginFlowWithPasswordMethod';
import {
    instanceOfUpdateLoginFlowWithPasswordMethod,
    UpdateLoginFlowWithPasswordMethodFromJSON,
    UpdateLoginFlowWithPasswordMethodFromJSONTyped,
    UpdateLoginFlowWithPasswordMethodToJSON,
} from './UpdateLoginFlowWithPasswordMethod';
import type { UpdateLoginFlowWithTotpMethod } from './UpdateLoginFlowWithTotpMethod';
import {
    instanceOfUpdateLoginFlowWithTotpMethod,
    UpdateLoginFlowWithTotpMethodFromJSON,
    UpdateLoginFlowWithTotpMethodFromJSONTyped,
    UpdateLoginFlowWithTotpMethodToJSON,
} from './UpdateLoginFlowWithTotpMethod';
import type { UpdateLoginFlowWithWebAuthnMethod } from './UpdateLoginFlowWithWebAuthnMethod';
import {
    instanceOfUpdateLoginFlowWithWebAuthnMethod,
    UpdateLoginFlowWithWebAuthnMethodFromJSON,
    UpdateLoginFlowWithWebAuthnMethodFromJSONTyped,
    UpdateLoginFlowWithWebAuthnMethodToJSON,
} from './UpdateLoginFlowWithWebAuthnMethod';

/**
 * @type UpdateLoginFlowBody
 * 
 * @export
 */
export type UpdateLoginFlowBody = { method: 'code' } & UpdateLoginFlowWithCodeMethod | { method: 'lookup_secret' } & UpdateLoginFlowWithLookupSecretMethod | { method: 'oidc' } & UpdateLoginFlowWithOidcMethod | { method: 'passkey' } & UpdateLoginFlowWithPasskeyMethod | { method: 'password' } & UpdateLoginFlowWithPasswordMethod | { method: 'totp' } & UpdateLoginFlowWithTotpMethod | { method: 'webauthn' } & UpdateLoginFlowWithWebAuthnMethod;

export function UpdateLoginFlowBodyFromJSON(json: any): UpdateLoginFlowBody {
    return UpdateLoginFlowBodyFromJSONTyped(json, false);
}

export function UpdateLoginFlowBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateLoginFlowBody {
    if (json == null) {
        return json;
    }
    switch (json['method']) {
        case 'code':
            return {...UpdateLoginFlowWithCodeMethodFromJSONTyped(json, true), method: 'code'};
        case 'lookup_secret':
            return {...UpdateLoginFlowWithLookupSecretMethodFromJSONTyped(json, true), method: 'lookup_secret'};
        case 'oidc':
            return {...UpdateLoginFlowWithOidcMethodFromJSONTyped(json, true), method: 'oidc'};
        case 'passkey':
            return {...UpdateLoginFlowWithPasskeyMethodFromJSONTyped(json, true), method: 'passkey'};
        case 'password':
            return {...UpdateLoginFlowWithPasswordMethodFromJSONTyped(json, true), method: 'password'};
        case 'totp':
            return {...UpdateLoginFlowWithTotpMethodFromJSONTyped(json, true), method: 'totp'};
        case 'webauthn':
            return {...UpdateLoginFlowWithWebAuthnMethodFromJSONTyped(json, true), method: 'webauthn'};
        default:
            throw new Error(`No variant of UpdateLoginFlowBody exists with 'method=${json['method']}'`);
    }
}

export function UpdateLoginFlowBodyToJSON(value?: UpdateLoginFlowBody | null): any {
    if (value == null) {
        return value;
    }
    switch (value['method']) {
        case 'code':
            return UpdateLoginFlowWithCodeMethodToJSON(value);
        case 'lookup_secret':
            return UpdateLoginFlowWithLookupSecretMethodToJSON(value);
        case 'oidc':
            return UpdateLoginFlowWithOidcMethodToJSON(value);
        case 'passkey':
            return UpdateLoginFlowWithPasskeyMethodToJSON(value);
        case 'password':
            return UpdateLoginFlowWithPasswordMethodToJSON(value);
        case 'totp':
            return UpdateLoginFlowWithTotpMethodToJSON(value);
        case 'webauthn':
            return UpdateLoginFlowWithWebAuthnMethodToJSON(value);
        default:
            throw new Error(`No variant of UpdateLoginFlowBody exists with 'method=${value['method']}'`);
    }

}

