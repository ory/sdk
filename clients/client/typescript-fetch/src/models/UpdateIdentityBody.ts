/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       | 
 *
 * The version of the OpenAPI document: v1.20.10
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityWithCredentials } from './IdentityWithCredentials';
import {
    IdentityWithCredentialsFromJSON,
    IdentityWithCredentialsFromJSONTyped,
    IdentityWithCredentialsToJSON,
    IdentityWithCredentialsToJSONTyped,
} from './IdentityWithCredentials';

/**
 * Update Identity Body
 * @export
 * @interface UpdateIdentityBody
 */
export interface UpdateIdentityBody {
    /**
     * 
     * @type {IdentityWithCredentials}
     * @memberof UpdateIdentityBody
     */
    credentials?: IdentityWithCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     * @type {any}
     * @memberof UpdateIdentityBody
     */
    metadata_admin?: any | null;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the
     * session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     * @type {any}
     * @memberof UpdateIdentityBody
     */
    metadata_public?: any | null;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set
     * will update the Identity's SchemaID.
     * @type {string}
     * @memberof UpdateIdentityBody
     */
    schema_id: string;
    /**
     * State is the identity's state.
     * active StateActive
     * inactive StateInactive
     * @type {string}
     * @memberof UpdateIdentityBody
     */
    state: UpdateIdentityBodyStateEnum;
    /**
     * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
     * in a self-service manner. The input will always be validated against the JSON Schema defined
     * in `schema_id`.
     * @type {object}
     * @memberof UpdateIdentityBody
     */
    traits: object;
}


/**
 * @export
 */
export const UpdateIdentityBodyStateEnum = {
    Active: 'active',
    Inactive: 'inactive',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type UpdateIdentityBodyStateEnum = typeof UpdateIdentityBodyStateEnum[keyof typeof UpdateIdentityBodyStateEnum];


/**
 * Check if a given object implements the UpdateIdentityBody interface.
 */
export function instanceOfUpdateIdentityBody(value: object): value is UpdateIdentityBody {
    if (!('schema_id' in value) || value['schema_id'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('traits' in value) || value['traits'] === undefined) return false;
    return true;
}

export function UpdateIdentityBodyFromJSON(json: any): UpdateIdentityBody {
    return UpdateIdentityBodyFromJSONTyped(json, false);
}

export function UpdateIdentityBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateIdentityBody {
    if (json == null) {
        return json;
    }
    return {
        
        'credentials': json['credentials'] == null ? undefined : IdentityWithCredentialsFromJSON(json['credentials']),
        'metadata_admin': json['metadata_admin'] == null ? undefined : json['metadata_admin'],
        'metadata_public': json['metadata_public'] == null ? undefined : json['metadata_public'],
        'schema_id': json['schema_id'],
        'state': json['state'],
        'traits': json['traits'],
    };
}

export function UpdateIdentityBodyToJSON(json: any): UpdateIdentityBody {
    return UpdateIdentityBodyToJSONTyped(json, false);
}

export function UpdateIdentityBodyToJSONTyped(value?: UpdateIdentityBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'credentials': IdentityWithCredentialsToJSON(value['credentials']),
        'metadata_admin': value['metadata_admin'],
        'metadata_public': value['metadata_public'],
        'schema_id': value['schema_id'],
        'state': value['state'],
        'traits': value['traits'],
    };
}

