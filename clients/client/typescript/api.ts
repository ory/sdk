/* tslint:disable */
/* eslint-disable */
/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * The version of the OpenAPI document: v1.1.25
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcceptOAuth2ConsentRequest
 */
export interface AcceptOAuth2ConsentRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'grant_scope'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'handled_at'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'remember_for'?: number;
    /**
     * 
     * @type {AcceptOAuth2ConsentRequestSession}
     * @memberof AcceptOAuth2ConsentRequest
     */
    'session'?: AcceptOAuth2ConsentRequestSession;
}
/**
 * 
 * @export
 * @interface AcceptOAuth2ConsentRequestSession
 */
export interface AcceptOAuth2ConsentRequestSession {
    /**
     * AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection. If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!
     * @type {any}
     * @memberof AcceptOAuth2ConsentRequestSession
     */
    'access_token'?: any;
    /**
     * IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session\'id payloads are readable by anyone that has access to the ID Challenge. Use with care!
     * @type {any}
     * @memberof AcceptOAuth2ConsentRequestSession
     */
    'id_token'?: any;
}
/**
 * 
 * @export
 * @interface AcceptOAuth2LoginRequest
 */
export interface AcceptOAuth2LoginRequest {
    /**
     * ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'acr'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AcceptOAuth2LoginRequest
     */
    'amr'?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof AcceptOAuth2LoginRequest
     */
    'context'?: object;
    /**
     * Extend OAuth2 authentication session lifespan  If set to `true`, the OAuth2 authentication cookie lifespan is extended. This is for example useful if you want the user to be able to use `prompt=none` continuously.  This value can only be set to `true` if the user has an authentication, which is the case if the `skip` value is `true`.
     * @type {boolean}
     * @memberof AcceptOAuth2LoginRequest
     */
    'extend_session_lifespan'?: boolean;
    /**
     * ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the (Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID Connect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.  Please note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the sub claim in the OAuth 2.0 Introspection.  Per default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself you can use this field. Please note that setting this field has no effect if `pairwise` is not configured in ORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client\'s configuration).  Please also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies that you have to compute this value on every authentication process (probably depending on the client ID or some other unique value).  If you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'force_subject_identifier'?: string;
    /**
     * Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store a cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she will not be asked to log in again.
     * @type {boolean}
     * @memberof AcceptOAuth2LoginRequest
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the authorization will be remembered for the duration of the browser session (using a session cookie).
     * @type {number}
     * @memberof AcceptOAuth2LoginRequest
     */
    'remember_for'?: number;
    /**
     * Subject is the user ID of the end-user that authenticated.
     * @type {string}
     * @memberof AcceptOAuth2LoginRequest
     */
    'subject': string;
}
/**
 * The Active Project ID
 * @export
 * @interface ActiveProjectInConsole
 */
export interface ActiveProjectInConsole {
    /**
     * The Active Project ID  format: uuid
     * @type {string}
     * @memberof ActiveProjectInConsole
     */
    'project_id'?: string;
}
/**
 * The authenticator assurance level can be one of \"aal1\", \"aal2\", or \"aal3\". A higher number means that it is harder for an attacker to compromise the account.  Generally, \"aal1\" implies that one authentication factor was used while AAL2 implies that two factors (e.g. password + TOTP) have been used.  To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
 * @export
 * @enum {string}
 */

export const AuthenticatorAssuranceLevel = {
    Aal0: 'aal0',
    Aal1: 'aal1',
    Aal2: 'aal2',
    Aal3: 'aal3'
} as const;

export type AuthenticatorAssuranceLevel = typeof AuthenticatorAssuranceLevel[keyof typeof AuthenticatorAssuranceLevel];


/**
 * Patch identities response
 * @export
 * @interface BatchPatchIdentitiesResponse
 */
export interface BatchPatchIdentitiesResponse {
    /**
     * The patch responses for the individual identities.
     * @type {Array<IdentityPatchResponse>}
     * @memberof BatchPatchIdentitiesResponse
     */
    'identities'?: Array<IdentityPatchResponse>;
}
/**
 * 
 * @export
 * @interface CheckOplSyntaxResult
 */
export interface CheckOplSyntaxResult {
    /**
     * The list of syntax errors
     * @type {Array<ParseError>}
     * @memberof CheckOplSyntaxResult
     */
    'errors'?: Array<ParseError>;
}
/**
 * The content of the allowed field is mirrored in the HTTP status code.
 * @export
 * @interface CheckPermissionResult
 */
export interface CheckPermissionResult {
    /**
     * whether the relation tuple is allowed
     * @type {boolean}
     * @memberof CheckPermissionResult
     */
    'allowed': boolean;
}
/**
 * 
 * @export
 * @interface CloudAccount
 */
export interface CloudAccount {
    /**
     * 
     * @type {string}
     * @memberof CloudAccount
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudAccount
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudAccount
     */
    'name'?: string;
}
/**
 * @type ContinueWith
 * @export
 */
export type ContinueWith = ContinueWithSetOrySessionToken | ContinueWithVerificationUi;

/**
 * Indicates that a session was issued, and the application should use this token for authenticated requests
 * @export
 * @interface ContinueWithSetOrySessionToken
 */
export interface ContinueWithSetOrySessionToken {
    /**
     * Action will always be `set_ory_session_token` set_ory_session_token ContinueWithActionSetOrySessionToken show_verification_ui ContinueWithActionShowVerificationUI
     * @type {string}
     * @memberof ContinueWithSetOrySessionToken
     */
    'action': ContinueWithSetOrySessionTokenActionEnum;
    /**
     * Token is the token of the session
     * @type {string}
     * @memberof ContinueWithSetOrySessionToken
     */
    'ory_session_token': string;
}

export const ContinueWithSetOrySessionTokenActionEnum = {
    SetOrySessionToken: 'set_ory_session_token',
    ShowVerificationUi: 'show_verification_ui'
} as const;

export type ContinueWithSetOrySessionTokenActionEnum = typeof ContinueWithSetOrySessionTokenActionEnum[keyof typeof ContinueWithSetOrySessionTokenActionEnum];

/**
 * Indicates, that the UI flow could be continued by showing a verification ui
 * @export
 * @interface ContinueWithVerificationUi
 */
export interface ContinueWithVerificationUi {
    /**
     * Action will always be `show_verification_ui` set_ory_session_token ContinueWithActionSetOrySessionToken show_verification_ui ContinueWithActionShowVerificationUI
     * @type {string}
     * @memberof ContinueWithVerificationUi
     */
    'action': ContinueWithVerificationUiActionEnum;
    /**
     * 
     * @type {ContinueWithVerificationUiFlow}
     * @memberof ContinueWithVerificationUi
     */
    'flow': ContinueWithVerificationUiFlow;
}

export const ContinueWithVerificationUiActionEnum = {
    SetOrySessionToken: 'set_ory_session_token',
    ShowVerificationUi: 'show_verification_ui'
} as const;

export type ContinueWithVerificationUiActionEnum = typeof ContinueWithVerificationUiActionEnum[keyof typeof ContinueWithVerificationUiActionEnum];

/**
 * 
 * @export
 * @interface ContinueWithVerificationUiFlow
 */
export interface ContinueWithVerificationUiFlow {
    /**
     * The ID of the verification flow
     * @type {string}
     * @memberof ContinueWithVerificationUiFlow
     */
    'id': string;
    /**
     * The URL of the verification flow
     * @type {string}
     * @memberof ContinueWithVerificationUiFlow
     */
    'url'?: string;
    /**
     * The address that should be verified in this flow
     * @type {string}
     * @memberof ContinueWithVerificationUiFlow
     */
    'verifiable_address': string;
}
/**
 * A Message\'s Status
 * @export
 * @enum {string}
 */

export const CourierMessageStatus = {
    Queued: 'queued',
    Sent: 'sent',
    Processing: 'processing',
    Abandoned: 'abandoned'
} as const;

export type CourierMessageStatus = typeof CourierMessageStatus[keyof typeof CourierMessageStatus];


/**
 * It can either be `email` or `phone`
 * @export
 * @enum {string}
 */

export const CourierMessageType = {
    Email: 'email',
    Phone: 'phone'
} as const;

export type CourierMessageType = typeof CourierMessageType[keyof typeof CourierMessageType];


/**
 * Create Custom Hostname Request Body
 * @export
 * @interface CreateCustomDomainBody
 */
export interface CreateCustomDomainBody {
    /**
     * The domain where cookies will be set. Has to be a parent domain of the custom hostname to work.
     * @type {string}
     * @memberof CreateCustomDomainBody
     */
    'cookie_domain'?: string;
    /**
     * CORS Allowed origins for the custom hostname.
     * @type {Array<string>}
     * @memberof CreateCustomDomainBody
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     * CORS Enabled for the custom hostname.
     * @type {boolean}
     * @memberof CreateCustomDomainBody
     */
    'cors_enabled'?: boolean;
    /**
     * The base URL where the custom user interface will be exposed.
     * @type {string}
     * @memberof CreateCustomDomainBody
     */
    'custom_ui_base_url'?: string;
    /**
     * The custom hostname where the API will be exposed.
     * @type {string}
     * @memberof CreateCustomDomainBody
     */
    'hostname'?: string;
}
/**
 * Create Identity Body
 * @export
 * @interface CreateIdentityBody
 */
export interface CreateIdentityBody {
    /**
     * 
     * @type {IdentityWithCredentials}
     * @memberof CreateIdentityBody
     */
    'credentials'?: IdentityWithCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     * @type {any}
     * @memberof CreateIdentityBody
     */
    'metadata_admin'?: any;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     * @type {any}
     * @memberof CreateIdentityBody
     */
    'metadata_public'?: any;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.  Use this structure to import recovery addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof CreateIdentityBody
     */
    'recovery_addresses'?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof CreateIdentityBody
     */
    'schema_id': string;
    /**
     * 
     * @type {IdentityState}
     * @memberof CreateIdentityBody
     */
    'state'?: IdentityState;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {object}
     * @memberof CreateIdentityBody
     */
    'traits': object;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.  Use this structure to import verified addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof CreateIdentityBody
     */
    'verifiable_addresses'?: Array<VerifiableIdentityAddress>;
}
/**
 * Create JSON Web Key Set Request Body
 * @export
 * @interface CreateJsonWebKeySet
 */
export interface CreateJsonWebKeySet {
    /**
     * JSON Web Key Algorithm  The algorithm to be used for creating the key. Supports `RS256`, `ES256`, `ES512`, `HS512`, and `HS256`.
     * @type {string}
     * @memberof CreateJsonWebKeySet
     */
    'alg': string;
    /**
     * JSON Web Key ID  The Key ID of the key to be created.
     * @type {string}
     * @memberof CreateJsonWebKeySet
     */
    'kid': string;
    /**
     * JSON Web Key Use  The \"use\" (public key use) parameter identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Valid values are \"enc\" and \"sig\".
     * @type {string}
     * @memberof CreateJsonWebKeySet
     */
    'use': string;
}
/**
 * Create Project Request Body
 * @export
 * @interface CreateProjectBody
 */
export interface CreateProjectBody {
    /**
     * The name of the project to be created
     * @type {string}
     * @memberof CreateProjectBody
     */
    'name': string;
}
/**
 * Create a Project Branding
 * @export
 * @interface CreateProjectBranding
 */
export interface CreateProjectBranding {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectBranding
     */
    'logo_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectBranding
     */
    'logo_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectBranding
     */
    'name'?: string;
    /**
     * 
     * @type {ProjectBrandingColors}
     * @memberof CreateProjectBranding
     */
    'theme'?: ProjectBrandingColors;
}
/**
 * Create Project Invite Request Body
 * @export
 * @interface CreateProjectInvite
 */
export interface CreateProjectInvite {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectInvite
     */
    'invitee_email'?: string;
}
/**
 * Create Recovery Code for Identity Request Body
 * @export
 * @interface CreateRecoveryCodeForIdentityBody
 */
export interface CreateRecoveryCodeForIdentityBody {
    /**
     * Code Expires In  The recovery code will expire after that amount of time has passed. Defaults to the configuration value of `selfservice.methods.code.config.lifespan`.
     * @type {string}
     * @memberof CreateRecoveryCodeForIdentityBody
     */
    'expires_in'?: string;
    /**
     * Identity to Recover  The identity\'s ID you wish to recover.
     * @type {string}
     * @memberof CreateRecoveryCodeForIdentityBody
     */
    'identity_id': string;
}
/**
 * Create Recovery Link for Identity Request Body
 * @export
 * @interface CreateRecoveryLinkForIdentityBody
 */
export interface CreateRecoveryLinkForIdentityBody {
    /**
     * Link Expires In  The recovery link will expire after that amount of time has passed. Defaults to the configuration value of `selfservice.methods.code.config.lifespan`.
     * @type {string}
     * @memberof CreateRecoveryLinkForIdentityBody
     */
    'expires_in'?: string;
    /**
     * Identity to Recover  The identity\'s ID you wish to recover.
     * @type {string}
     * @memberof CreateRecoveryLinkForIdentityBody
     */
    'identity_id': string;
}
/**
 * Create Relationship Request Body
 * @export
 * @interface CreateRelationshipBody
 */
export interface CreateRelationshipBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof CreateRelationshipBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * Create Subscription Request Body
 * @export
 * @interface CreateSubscriptionBody
 */
export interface CreateSubscriptionBody {
    /**
     *  monthly Monthly yearly Yearly
     * @type {string}
     * @memberof CreateSubscriptionBody
     */
    'interval': CreateSubscriptionBodyIntervalEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSubscriptionBody
     */
    'plan': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubscriptionBody
     */
    'provision_first_project': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubscriptionBody
     */
    'return_to'?: string;
}

export const CreateSubscriptionBodyIntervalEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;

export type CreateSubscriptionBodyIntervalEnum = typeof CreateSubscriptionBodyIntervalEnum[keyof typeof CreateSubscriptionBodyIntervalEnum];

/**
 * Custom Hostname
 * @export
 * @interface CustomDomain
 */
export interface CustomDomain {
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'cookie_domain'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomDomain
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomDomain
     */
    'cors_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'custom_ui_base_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'hostname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'ssl_status'?: CustomDomainSslStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomDomain
     */
    'verification_errors'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomDomain
     */
    'verification_status'?: string;
}

export const CustomDomainSslStatusEnum = {
    Initializing: 'initializing',
    PendingValidation: 'pending_validation',
    Deleted: 'deleted',
    PendingIssuance: 'pending_issuance',
    PendingDeployment: 'pending_deployment',
    PendingDeletion: 'pending_deletion',
    PendingExpiration: 'pending_expiration',
    Expired: 'expired',
    Active: 'active',
    InitializingTimedOut: 'initializing_timed_out',
    ValidationTimedOut: 'validation_timed_out',
    IssuanceTimedOut: 'issuance_timed_out',
    DeploymentTimedOut: 'deployment_timed_out',
    DeletionTimedOut: 'deletion_timed_out',
    PendingCleanup: 'pending_cleanup',
    StagingDeployment: 'staging_deployment',
    StagingActive: 'staging_active',
    Deactivating: 'deactivating',
    Inactive: 'inactive',
    BackupIssued: 'backup_issued',
    HoldingDeployment: 'holding_deployment',
    Empty: ''
} as const;

export type CustomDomainSslStatusEnum = typeof CustomDomainSslStatusEnum[keyof typeof CustomDomainSslStatusEnum];

/**
 * Deleted Session Count
 * @export
 * @interface DeleteMySessionsCount
 */
export interface DeleteMySessionsCount {
    /**
     * The number of sessions that were revoked.
     * @type {number}
     * @memberof DeleteMySessionsCount
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface ErrorAuthenticatorAssuranceLevelNotSatisfied
 */
export interface ErrorAuthenticatorAssuranceLevelNotSatisfied {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'details'?: { [key: string]: any; };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'redirect_browser_to'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface ErrorBrowserLocationChangeRequired
 */
export interface ErrorBrowserLocationChangeRequired {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'details'?: { [key: string]: any; };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'reason'?: string;
    /**
     * Since when the flow has expired
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'redirect_browser_to'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorBrowserLocationChangeRequired
     */
    'status'?: string;
}
/**
 * Is sent when a flow is replaced by a different flow of the same class
 * @export
 * @interface ErrorFlowReplaced
 */
export interface ErrorFlowReplaced {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorFlowReplaced
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorFlowReplaced
     */
    'details'?: { [key: string]: any; };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'status'?: string;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    'use_flow_id'?: string;
}
/**
 * The standard Ory JSON API error format.
 * @export
 * @interface ErrorGeneric
 */
export interface ErrorGeneric {
    /**
     * 
     * @type {GenericErrorContent}
     * @memberof ErrorGeneric
     */
    'error': GenericErrorContent;
}
/**
 * Error
 * @export
 * @interface ErrorOAuth2
 */
export interface ErrorOAuth2 {
    /**
     * Error
     * @type {string}
     * @memberof ErrorOAuth2
     */
    'error'?: string;
    /**
     * Error Debug Information  Only available in dev mode.
     * @type {string}
     * @memberof ErrorOAuth2
     */
    'error_debug'?: string;
    /**
     * Error Description
     * @type {string}
     * @memberof ErrorOAuth2
     */
    'error_description'?: string;
    /**
     * Error Hint  Helps the user identify the error cause.
     * @type {string}
     * @memberof ErrorOAuth2
     */
    'error_hint'?: string;
    /**
     * HTTP Status Code
     * @type {number}
     * @memberof ErrorOAuth2
     */
    'status_code'?: number;
}
/**
 * 
 * @export
 * @interface ExpandedPermissionTree
 */
export interface ExpandedPermissionTree {
    /**
     * The children of the node, possibly none.
     * @type {Array<ExpandedPermissionTree>}
     * @memberof ExpandedPermissionTree
     */
    'children'?: Array<ExpandedPermissionTree>;
    /**
     * 
     * @type {Relationship}
     * @memberof ExpandedPermissionTree
     */
    'tuple'?: Relationship;
    /**
     * The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
     * @type {string}
     * @memberof ExpandedPermissionTree
     */
    'type': ExpandedPermissionTreeTypeEnum;
}

export const ExpandedPermissionTreeTypeEnum = {
    Union: 'union',
    Exclusion: 'exclusion',
    Intersection: 'intersection',
    Leaf: 'leaf',
    TupleToSubjectSet: 'tuple_to_subject_set',
    ComputedSubjectSet: 'computed_subject_set',
    Not: 'not',
    Unspecified: 'unspecified'
} as const;

export type ExpandedPermissionTreeTypeEnum = typeof ExpandedPermissionTreeTypeEnum[keyof typeof ExpandedPermissionTreeTypeEnum];

/**
 * 
 * @export
 * @interface FlowError
 */
export interface FlowError {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof FlowError
     */
    'created_at'?: string;
    /**
     * 
     * @type {object}
     * @memberof FlowError
     */
    'error'?: object;
    /**
     * ID of the error container.
     * @type {string}
     * @memberof FlowError
     */
    'id': string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof FlowError
     */
    'updated_at'?: string;
}
/**
 * Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {any}
     * @memberof GenericError
     */
    'details'?: any;
    /**
     * 
     * @type {GenericErrorContent}
     * @memberof GenericError
     */
    'error'?: GenericErrorContent;
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof GenericError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    'status'?: string;
}
/**
 * Error response
 * @export
 * @interface GenericErrorContent
 */
export interface GenericErrorContent {
    /**
     * Debug contains debug information. This is usually not available and has to be enabled.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'debug'?: string;
    /**
     * Name is the error name.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'error'?: string;
    /**
     * Description contains further information on the nature of the error.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'error_description'?: string;
    /**
     * Message contains the error message.
     * @type {string}
     * @memberof GenericErrorContent
     */
    'message'?: string;
    /**
     * Code represents the error status code (404, 403, 401, ...).
     * @type {number}
     * @memberof GenericErrorContent
     */
    'status_code'?: number;
}
/**
 * 
 * @export
 * @interface GenericUsage
 */
export interface GenericUsage {
    /**
     * AdditionalPrice is the price per-unit exceeding IncludedUsage. A price of 0 means that no other items can be consumed.
     * @type {number}
     * @memberof GenericUsage
     */
    'additional_price': number;
    /**
     * IncludedUsage is the number of included items.
     * @type {number}
     * @memberof GenericUsage
     */
    'included_usage': number;
}
/**
 * Ory Identity Schema Location
 * @export
 * @interface GetManagedIdentitySchemaLocation
 */
export interface GetManagedIdentitySchemaLocation {
    /**
     * 
     * @type {string}
     * @memberof GetManagedIdentitySchemaLocation
     */
    'location'?: string;
}
/**
 * 
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    'errors'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    'status'?: string;
}
/**
 * An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    'created_at'?: string;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     * @type {{ [key: string]: IdentityCredentials; }}
     * @memberof Identity
     */
    'credentials'?: { [key: string]: IdentityCredentials; };
    /**
     * ID is the identity\'s unique identifier.  The Identity ID can not be changed and can not be chosen. This ensures future compatibility and optimization for distributed stores such as CockroachDB.
     * @type {string}
     * @memberof Identity
     */
    'id': string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    'metadata_admin'?: object | null;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    'metadata_public'?: object | null;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof Identity
     */
    'recovery_addresses'?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits.
     * @type {string}
     * @memberof Identity
     */
    'schema_id': string;
    /**
     * SchemaURL is the URL of the endpoint where the identity\'s traits schema can be fetched from.  format: url
     * @type {string}
     * @memberof Identity
     */
    'schema_url': string;
    /**
     * 
     * @type {IdentityState}
     * @memberof Identity
     */
    'state'?: IdentityState;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    'state_changed_at'?: string;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
     * @type {any}
     * @memberof Identity
     */
    'traits': any;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Identity
     */
    'updated_at'?: string;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof Identity
     */
    'verifiable_addresses'?: Array<VerifiableIdentityAddress>;
}
/**
 * Credentials represents a specific credential type
 * @export
 * @interface IdentityCredentials
 */
export interface IdentityCredentials {
    /**
     * 
     * @type {object}
     * @memberof IdentityCredentials
     */
    'config'?: object;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    'created_at'?: string;
    /**
     * Identifiers represents a list of unique identifiers this credential type matches.
     * @type {Array<string>}
     * @memberof IdentityCredentials
     */
    'identifiers'?: Array<string>;
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof IdentityCredentials
     */
    'type'?: IdentityCredentialsType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof IdentityCredentials
     */
    'updated_at'?: string;
    /**
     * Version refers to the version of the credential. Useful when changing the config schema.
     * @type {number}
     * @memberof IdentityCredentials
     */
    'version'?: number;
}
/**
 * 
 * @export
 * @interface IdentityCredentialsOidc
 */
export interface IdentityCredentialsOidc {
    /**
     * 
     * @type {Array<IdentityCredentialsOidcProvider>}
     * @memberof IdentityCredentialsOidc
     */
    'providers'?: Array<IdentityCredentialsOidcProvider>;
}
/**
 * 
 * @export
 * @interface IdentityCredentialsOidcProvider
 */
export interface IdentityCredentialsOidcProvider {
    /**
     * 
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_id_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'initial_refresh_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityCredentialsOidcProvider
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface IdentityCredentialsPassword
 */
export interface IdentityCredentialsPassword {
    /**
     * HashedPassword is a hash-representation of the password.
     * @type {string}
     * @memberof IdentityCredentialsPassword
     */
    'hashed_password'?: string;
}
/**
 * and so on.
 * @export
 * @enum {string}
 */

export const IdentityCredentialsType = {
    Password: 'password',
    Totp: 'totp',
    Oidc: 'oidc',
    Webauthn: 'webauthn',
    LookupSecret: 'lookup_secret'
} as const;

export type IdentityCredentialsType = typeof IdentityCredentialsType[keyof typeof IdentityCredentialsType];


/**
 * Payload for patching an identity
 * @export
 * @interface IdentityPatch
 */
export interface IdentityPatch {
    /**
     * 
     * @type {CreateIdentityBody}
     * @memberof IdentityPatch
     */
    'create'?: CreateIdentityBody;
    /**
     * The ID of this patch.  The patch ID is optional. If specified, the ID will be returned in the response, so consumers of this API can correlate the response with the patch.
     * @type {string}
     * @memberof IdentityPatch
     */
    'patch_id'?: string;
}
/**
 * Response for a single identity patch
 * @export
 * @interface IdentityPatchResponse
 */
export interface IdentityPatchResponse {
    /**
     * The action for this specific patch create ActionCreate  Create this identity.
     * @type {string}
     * @memberof IdentityPatchResponse
     */
    'action'?: IdentityPatchResponseActionEnum;
    /**
     * The identity ID payload of this patch
     * @type {string}
     * @memberof IdentityPatchResponse
     */
    'identity'?: string;
    /**
     * The ID of this patch response, if an ID was specified in the patch.
     * @type {string}
     * @memberof IdentityPatchResponse
     */
    'patch_id'?: string;
}

export const IdentityPatchResponseActionEnum = {
    Create: 'create'
} as const;

export type IdentityPatchResponseActionEnum = typeof IdentityPatchResponseActionEnum[keyof typeof IdentityPatchResponseActionEnum];

/**
 * An Identity JSON Schema Container
 * @export
 * @interface IdentitySchemaContainer
 */
export interface IdentitySchemaContainer {
    /**
     * The ID of the Identity JSON Schema
     * @type {string}
     * @memberof IdentitySchemaContainer
     */
    'id'?: string;
    /**
     * The actual Identity JSON Schema
     * @type {object}
     * @memberof IdentitySchemaContainer
     */
    'schema'?: object;
}
/**
 * 
 * @export
 * @interface IdentitySchemaPreset
 */
export interface IdentitySchemaPreset {
    /**
     * Schema is the Identity JSON Schema
     * @type {object}
     * @memberof IdentitySchemaPreset
     */
    'schema': object;
    /**
     * URL is the preset identifier
     * @type {string}
     * @memberof IdentitySchemaPreset
     */
    'url': string;
}
/**
 * The state can either be `active` or `inactive`.
 * @export
 * @enum {string}
 */

export const IdentityState = {
    Active: 'active',
    Inactive: 'inactive'
} as const;

export type IdentityState = typeof IdentityState[keyof typeof IdentityState];


/**
 * Create Identity and Import Credentials
 * @export
 * @interface IdentityWithCredentials
 */
export interface IdentityWithCredentials {
    /**
     * 
     * @type {IdentityWithCredentialsOidc}
     * @memberof IdentityWithCredentials
     */
    'oidc'?: IdentityWithCredentialsOidc;
    /**
     * 
     * @type {IdentityWithCredentialsPassword}
     * @memberof IdentityWithCredentials
     */
    'password'?: IdentityWithCredentialsPassword;
}
/**
 * Create Identity and Import Social Sign In Credentials
 * @export
 * @interface IdentityWithCredentialsOidc
 */
export interface IdentityWithCredentialsOidc {
    /**
     * 
     * @type {IdentityWithCredentialsOidcConfig}
     * @memberof IdentityWithCredentialsOidc
     */
    'config'?: IdentityWithCredentialsOidcConfig;
}
/**
 * 
 * @export
 * @interface IdentityWithCredentialsOidcConfig
 */
export interface IdentityWithCredentialsOidcConfig {
    /**
     * 
     * @type {IdentityWithCredentialsPasswordConfig}
     * @memberof IdentityWithCredentialsOidcConfig
     */
    'config'?: IdentityWithCredentialsPasswordConfig;
    /**
     * A list of OpenID Connect Providers
     * @type {Array<IdentityWithCredentialsOidcConfigProvider>}
     * @memberof IdentityWithCredentialsOidcConfig
     */
    'providers'?: Array<IdentityWithCredentialsOidcConfigProvider>;
}
/**
 * Create Identity and Import Social Sign In Credentials Configuration
 * @export
 * @interface IdentityWithCredentialsOidcConfigProvider
 */
export interface IdentityWithCredentialsOidcConfigProvider {
    /**
     * The OpenID Connect provider to link the subject to. Usually something like `google` or `github`.
     * @type {string}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    'provider': string;
    /**
     * The subject (`sub`) of the OpenID Connect connection. Usually the `sub` field of the ID Token.
     * @type {string}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    'subject': string;
}
/**
 * Create Identity and Import Password Credentials
 * @export
 * @interface IdentityWithCredentialsPassword
 */
export interface IdentityWithCredentialsPassword {
    /**
     * 
     * @type {IdentityWithCredentialsPasswordConfig}
     * @memberof IdentityWithCredentialsPassword
     */
    'config'?: IdentityWithCredentialsPasswordConfig;
}
/**
 * Create Identity and Import Password Credentials Configuration
 * @export
 * @interface IdentityWithCredentialsPasswordConfig
 */
export interface IdentityWithCredentialsPasswordConfig {
    /**
     * The hashed password in [PHC format]( https://www.ory.sh/docs/kratos/concepts/credentials/username-email-password#hashed-password-format)
     * @type {string}
     * @memberof IdentityWithCredentialsPasswordConfig
     */
    'hashed_password'?: string;
    /**
     * The password in plain text if no hash is available.
     * @type {string}
     * @memberof IdentityWithCredentialsPasswordConfig
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * The Token Name  A descriptive name for the token.  in: body
     * @type {string}
     * @memberof InlineObject3
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Always \"ok\".
     * @type {string}
     * @memberof InlineResponse200
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The version of Ory Kratos.
     * @type {string}
     * @memberof InlineResponse2001
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse503
     */
    'errors': { [key: string]: string; };
}
/**
 * Get Project Branding Request Body
 * @export
 * @interface InternalGetProjectBrandingBody
 */
export interface InternalGetProjectBrandingBody {
    /**
     * 
     * @type {string}
     * @memberof InternalGetProjectBrandingBody
     */
    'hostname'?: string;
}
/**
 * Is Owner For Project By Slug Request Body
 * @export
 * @interface InternalIsOwnerForProjectBySlugBody
 */
export interface InternalIsOwnerForProjectBySlugBody {
    /**
     * Namespace is the namespace of the subject.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    'namespace': InternalIsOwnerForProjectBySlugBodyNamespaceEnum;
    /**
     * ProjectScope is the project_id resolved from the API Token.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    'project_scope'?: string;
    /**
     * ProjectSlug is the project\'s slug.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    'project_slug': string;
    /**
     * Subject is the subject acting (user or API key).
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugBody
     */
    'subject': string;
}

export const InternalIsOwnerForProjectBySlugBodyNamespaceEnum = {
    User: 'User',
    ApiKey: ' ApiKey'
} as const;

export type InternalIsOwnerForProjectBySlugBodyNamespaceEnum = typeof InternalIsOwnerForProjectBySlugBodyNamespaceEnum[keyof typeof InternalIsOwnerForProjectBySlugBodyNamespaceEnum];

/**
 * 
 * @export
 * @interface InternalIsOwnerForProjectBySlugResponse
 */
export interface InternalIsOwnerForProjectBySlugResponse {
    /**
     * ProjectID is the project\'s ID.
     * @type {string}
     * @memberof InternalIsOwnerForProjectBySlugResponse
     */
    'project_id': string;
}
/**
 * Internal Provision Mock Subscription Request Body
 * @export
 * @interface InternalProvisionMockSubscription
 */
export interface InternalProvisionMockSubscription {
    /**
     * Identity ID
     * @type {string}
     * @memberof InternalProvisionMockSubscription
     */
    'identity_id': string;
    /**
     * Billing Interval monthly Monthly yearly Yearly
     * @type {string}
     * @memberof InternalProvisionMockSubscription
     */
    'interval': InternalProvisionMockSubscriptionIntervalEnum;
    /**
     * Plan ID
     * @type {string}
     * @memberof InternalProvisionMockSubscription
     */
    'plan': string;
}

export const InternalProvisionMockSubscriptionIntervalEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;

export type InternalProvisionMockSubscriptionIntervalEnum = typeof InternalProvisionMockSubscriptionIntervalEnum[keyof typeof InternalProvisionMockSubscriptionIntervalEnum];

/**
 * Introspection contains an access token\'s session data as specified by [IETF RFC 7662](https://tools.ietf.org/html/rfc7662)
 * @export
 * @interface IntrospectedOAuth2Token
 */
export interface IntrospectedOAuth2Token {
    /**
     * Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token\'s \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).
     * @type {boolean}
     * @memberof IntrospectedOAuth2Token
     */
    'active': boolean;
    /**
     * Audience contains a list of the token\'s intended audiences.
     * @type {Array<string>}
     * @memberof IntrospectedOAuth2Token
     */
    'aud'?: Array<string>;
    /**
     * ID is aclient identifier for the OAuth 2.0 client that requested this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'client_id'?: string;
    /**
     * Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'exp'?: number;
    /**
     * Extra is arbitrary data set by the session.
     * @type {{ [key: string]: any; }}
     * @memberof IntrospectedOAuth2Token
     */
    'ext'?: { [key: string]: any; };
    /**
     * Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'iat'?: number;
    /**
     * IssuerURL is a string representing the issuer of this token
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'iss'?: string;
    /**
     * NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.
     * @type {number}
     * @memberof IntrospectedOAuth2Token
     */
    'nbf'?: number;
    /**
     * ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'obfuscated_subject'?: string;
    /**
     * Scope is a JSON string containing a space-separated list of scopes associated with this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'scope'?: string;
    /**
     * Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'sub'?: string;
    /**
     * TokenType is the introspected token\'s type, typically `Bearer`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'token_type'?: string;
    /**
     * TokenUse is the introspected token\'s use, for example `access_token` or `refresh_token`.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'token_use'?: string;
    /**
     * Username is a human-readable identifier for the resource owner who authorized this token.
     * @type {string}
     * @memberof IntrospectedOAuth2Token
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface IsOwnerForProjectBySlug
 */
export interface IsOwnerForProjectBySlug {
    /**
     * ProjectSlug is the project\'s slug.
     * @type {string}
     * @memberof IsOwnerForProjectBySlug
     */
    'ProjectSlug': string;
    /**
     * Subject is the subject from the API Token.
     * @type {string}
     * @memberof IsOwnerForProjectBySlug
     */
    'Subject': string;
}
/**
 * A JSONPatch document as defined by RFC 6902
 * @export
 * @interface JsonPatch
 */
export interface JsonPatch {
    /**
     * This field is used together with operation \"move\" and uses JSON Pointer notation.  Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     * @type {string}
     * @memberof JsonPatch
     */
    'from'?: string;
    /**
     * The operation to be performed. One of \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\".
     * @type {string}
     * @memberof JsonPatch
     */
    'op': JsonPatchOpEnum;
    /**
     * The path to the target path. Uses JSON pointer notation.  Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     * @type {string}
     * @memberof JsonPatch
     */
    'path': string;
    /**
     * The value to be used within the operations.  Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     * @type {any}
     * @memberof JsonPatch
     */
    'value'?: any;
}

export const JsonPatchOpEnum = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test'
} as const;

export type JsonPatchOpEnum = typeof JsonPatchOpEnum[keyof typeof JsonPatchOpEnum];

/**
 * 
 * @export
 * @interface JsonWebKey
 */
export interface JsonWebKey {
    /**
     * The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.
     * @type {string}
     * @memberof JsonWebKey
     */
    'alg': string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'crv'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'd'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'dp'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'dq'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'e'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'k'?: string;
    /**
     * The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.
     * @type {string}
     * @memberof JsonWebKey
     */
    'kid': string;
    /**
     * The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.
     * @type {string}
     * @memberof JsonWebKey
     */
    'kty': string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'n'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'p'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'q'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'qi'?: string;
    /**
     * Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).
     * @type {string}
     * @memberof JsonWebKey
     */
    'use': string;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'x'?: string;
    /**
     * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.
     * @type {Array<string>}
     * @memberof JsonWebKey
     */
    'x5c'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof JsonWebKey
     */
    'y'?: string;
}
/**
 * JSON Web Key Set
 * @export
 * @interface JsonWebKeySet
 */
export interface JsonWebKeySet {
    /**
     * List of JSON Web Keys  The value of the \"keys\" parameter is an array of JSON Web Key (JWK) values. By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
     * @type {Array<JsonWebKey>}
     * @memberof JsonWebKeySet
     */
    'keys'?: Array<JsonWebKey>;
}
/**
 * 
 * @export
 * @interface KetoNamespace
 */
export interface KetoNamespace {
    /**
     * 
     * @type {number}
     * @memberof KetoNamespace
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof KetoNamespace
     */
    'name'?: string;
}
/**
 * This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\" endpoint by a client.  Once a login flow is completed successfully, a session cookie or session token will be issued.
 * @export
 * @interface LoginFlow
 */
export interface LoginFlow {
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof LoginFlow
     */
    'active'?: IdentityCredentialsType;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof LoginFlow
     */
    'created_at'?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof LoginFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the login flow, this represents the id in the login UI\'s query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
     * @type {string}
     * @memberof LoginFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     * @type {string}
     * @memberof LoginFlow
     */
    'issued_at': string;
    /**
     * 
     * @type {string}
     * @memberof LoginFlow
     */
    'oauth2_login_challenge'?: string | null;
    /**
     * 
     * @type {OAuth2LoginRequest}
     * @memberof LoginFlow
     */
    'oauth2_login_request'?: OAuth2LoginRequest;
    /**
     * Refresh stores whether this login flow should enforce re-authentication.
     * @type {boolean}
     * @memberof LoginFlow
     */
    'refresh'?: boolean;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof LoginFlow
     */
    'request_url': string;
    /**
     * 
     * @type {AuthenticatorAssuranceLevel}
     * @memberof LoginFlow
     */
    'requested_aal'?: AuthenticatorAssuranceLevel;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof LoginFlow
     */
    'return_to'?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof LoginFlow
     */
    'type': string;
    /**
     * 
     * @type {UiContainer}
     * @memberof LoginFlow
     */
    'ui': UiContainer;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof LoginFlow
     */
    'updated_at'?: string;
}
/**
 * Logout Flow
 * @export
 * @interface LogoutFlow
 */
export interface LogoutFlow {
    /**
     * LogoutToken can be used to perform logout using AJAX.
     * @type {string}
     * @memberof LogoutFlow
     */
    'logout_token': string;
    /**
     * LogoutURL can be opened in a browser to sign the user out.  format: uri
     * @type {string}
     * @memberof LogoutFlow
     */
    'logout_url': string;
}
/**
 * Together the name and identity uuid are a unique index constraint. This prevents a user from having schemas with the same name. This also allows schemas to have the same name across the system.
 * @export
 * @interface ManagedIdentitySchema
 */
export interface ManagedIdentitySchema {
    /**
     * The gcs file name  This is a randomly generated name which is used to uniquely identify the file on the blob storage
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'blob_name': string;
    /**
     * The publicly accessible url of the schema
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'blob_url': string;
    /**
     * The Content Hash  Contains a hash of the schema\'s content.
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'content_hash'?: string;
    /**
     * The Schema\'s Creation Date
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'created_at': string;
    /**
     * The schema\'s ID.
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'id': string;
    /**
     * The schema name  This is set by the user and is for them to easily recognise their schema
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'name': string;
    /**
     * Last Time Schema was Updated
     * @type {string}
     * @memberof ManagedIdentitySchema
     */
    'updated_at': string;
}
/**
 * Ory Identity Schema Validation Result
 * @export
 * @interface ManagedIdentitySchemaValidationResult
 */
export interface ManagedIdentitySchemaValidationResult {
    /**
     * 
     * @type {string}
     * @memberof ManagedIdentitySchemaValidationResult
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ManagedIdentitySchemaValidationResult
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'body': string;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Message
     */
    'created_at': string;
    /**
     * Dispatches store information about the attempts of delivering a message May contain an error if any happened, or just the `success` state.
     * @type {Array<MessageDispatch>}
     * @memberof Message
     */
    'dispatches'?: Array<MessageDispatch>;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'recipient': string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'send_count': number;
    /**
     * 
     * @type {CourierMessageStatus}
     * @memberof Message
     */
    'status': CourierMessageStatus;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'subject': string;
    /**
     *  recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid otp TypeOTP stub TypeTestStub
     * @type {string}
     * @memberof Message
     */
    'template_type': MessageTemplateTypeEnum;
    /**
     * 
     * @type {CourierMessageType}
     * @memberof Message
     */
    'type': CourierMessageType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof Message
     */
    'updated_at': string;
}

export const MessageTemplateTypeEnum = {
    RecoveryInvalid: 'recovery_invalid',
    RecoveryValid: 'recovery_valid',
    RecoveryCodeInvalid: 'recovery_code_invalid',
    RecoveryCodeValid: 'recovery_code_valid',
    VerificationInvalid: 'verification_invalid',
    VerificationValid: 'verification_valid',
    VerificationCodeInvalid: 'verification_code_invalid',
    VerificationCodeValid: 'verification_code_valid',
    Otp: 'otp',
    Stub: 'stub'
} as const;

export type MessageTemplateTypeEnum = typeof MessageTemplateTypeEnum[keyof typeof MessageTemplateTypeEnum];

/**
 * MessageDispatch represents an attempt of sending a courier message It contains the status of the attempt (failed or successful) and the error if any occured
 * @export
 * @interface MessageDispatch
 */
export interface MessageDispatch {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof MessageDispatch
     */
    'created_at': string;
    /**
     * 
     * @type {object}
     * @memberof MessageDispatch
     */
    'error'?: object;
    /**
     * The ID of this message dispatch
     * @type {string}
     * @memberof MessageDispatch
     */
    'id': string;
    /**
     * The ID of the message being dispatched
     * @type {string}
     * @memberof MessageDispatch
     */
    'message_id': string;
    /**
     * The status of this dispatch Either \"failed\" or \"success\" failed CourierMessageDispatchStatusFailed success CourierMessageDispatchStatusSuccess
     * @type {string}
     * @memberof MessageDispatch
     */
    'status': MessageDispatchStatusEnum;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof MessageDispatch
     */
    'updated_at': string;
}

export const MessageDispatchStatusEnum = {
    Failed: 'failed',
    Success: 'success'
} as const;

export type MessageDispatchStatusEnum = typeof MessageDispatchStatusEnum[keyof typeof MessageDispatchStatusEnum];

/**
 * 
 * @export
 * @interface Namespace
 */
export interface Namespace {
    /**
     * Name of the namespace.
     * @type {string}
     * @memberof Namespace
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface NeedsPrivilegedSessionError
 */
export interface NeedsPrivilegedSessionError {
    /**
     * The status code
     * @type {number}
     * @memberof NeedsPrivilegedSessionError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof NeedsPrivilegedSessionError
     */
    'details'?: { [key: string]: any; };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'reason'?: string;
    /**
     * Points to where to redirect the user to next.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'redirect_browser_to': string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof NeedsPrivilegedSessionError
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface NormalizedProject
 */
export interface NormalizedProject {
    /**
     * The Project\'s Creation Date
     * @type {string}
     * @memberof NormalizedProject
     */
    'created_at': string;
    /**
     * 
     * @type {NormalizedProjectRevision}
     * @memberof NormalizedProject
     */
    'current_revision': NormalizedProjectRevision;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProject
     */
    'hosts': Array<string>;
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof NormalizedProject
     */
    'id': string;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof NormalizedProject
     */
    'slug': string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof NormalizedProject
     */
    'state': NormalizedProjectStateEnum;
    /**
     * 
     * @type {string}
     * @memberof NormalizedProject
     */
    'subscription_id'?: string | null;
    /**
     * Last Time Project was Updated
     * @type {string}
     * @memberof NormalizedProject
     */
    'updated_at': string;
}

export const NormalizedProjectStateEnum = {
    Running: 'running',
    Halted: 'halted'
} as const;

export type NormalizedProjectStateEnum = typeof NormalizedProjectStateEnum[keyof typeof NormalizedProjectStateEnum];

/**
 * 
 * @export
 * @interface NormalizedProjectRevision
 */
export interface NormalizedProjectRevision {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'created_at'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_allowed_top_level_claims'?: Array<string>;
    /**
     * Automatically grant authorized OAuth2 Scope in OAuth2 Client Credentials Flow.  Each OAuth2 Client is allowed to request a predefined OAuth2 Scope (for example `read write`). If this option is enabled, the full scope is automatically granted when performing the OAuth2 Client Credentials flow.  If disabled, the OAuth2 Client has to request the scope in the OAuth2 request by providing the `scope` query parameter.  Setting this option to true is common if you need compatibility with MITREid.  This governs the \"oauth2.client_credentials.default_grant_allowed_scope\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_client_credentials_default_grant_allowed_scope'?: boolean;
    /**
     * Set to true if you want to exclude claim `nbf (not before)` part of access token.  This governs the \"oauth2.exclude_not_before_claim\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_exclude_not_before_claim'?: boolean;
    /**
     * Configures if the issued at (`iat`) claim is required in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523).  If set to `false`, the `iat` claim is required. Set this value to `true` only after careful consideration.  This governs the \"oauth2.grant.jwt.iat_optional\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_iat_optional'?: boolean;
    /**
     * Configures if the JSON Web Token ID (`jti`) claim is required in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523).  If set to `false`, the `jti` claim is required. Set this value to `true` only after careful consideration.  This governs the \"oauth2.grant.jwt.jti_optional\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_jti_optional'?: boolean;
    /**
     * Configures what the maximum age of a JWT assertion used in the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC7523) can be.  This feature uses the `exp` claim and `iat` claim to calculate assertion age. Assertions exceeding the max age will be denied.  Useful as a safety measure and recommended to keep below 720h.  This governs the \"oauth2.grant.jwt.max_ttl\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_grant_jwt_max_ttl'?: string;
    /**
     * Configures whether PKCE should be enforced for all OAuth2 Clients.  This governs the \"oauth2.pkce.enforced\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_pkce_enforced'?: boolean;
    /**
     * Configures whether PKCE should be enforced for OAuth2 Clients without a client secret (public clients).  This governs the \"oauth2.pkce.enforced_for_public_clients\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_pkce_enforced_for_public_clients'?: boolean;
    /**
     * Sets the Refresh Token Hook Endpoint. If set this endpoint will be called during the OAuth2 Token Refresh grant update the OAuth2 Access Token claims.  This governs the \"oauth2.refresh_token_hook\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oauth2_refresh_token_hook'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_dynamic_client_registration_default_scope'?: Array<string>;
    /**
     * Configures OpenID Connect Dynamic Client Registration.  This governs the \"oidc.dynamic_client_registration.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_dynamic_client_registration_enabled'?: boolean;
    /**
     * Configures OpenID Connect Discovery and overwrites the pairwise algorithm  This governs the \"oidc.subject_identifiers.pairwise_salt\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_subject_identifiers_pairwise_salt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_oidc_subject_identifiers_supported_types'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_secrets_cookie'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_secrets_system'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_admin_cors_allowed_origins'?: Array<string>;
    /**
     * Configures the Ory Hydra CORS Settings  This governs the \"serve.admin.cors.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_admin_cors_enabled'?: boolean;
    /**
     * Configures the Ory Hydra Cookie Same Site Legacy Workaround  This governs the \"serve.cookies.same_site_legacy_workaround\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_cookies_same_site_legacy_workaround'?: boolean;
    /**
     * Configures the Ory Hydra Cookie Same Site Mode  This governs the \"serve.cookies.same_site_mode\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_cookies_same_site_mode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_public_cors_allowed_origins'?: Array<string>;
    /**
     * Configures the Ory Hydra CORS Settings  This governs the \"serve.public.cors.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'hydra_serve_public_cors_enabled'?: boolean;
    /**
     * Defines access token type. jwt is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens  This governs the \"strategies.access_token\" setting. opaque Oauth2AccessTokenStrategyOpaque jwt Oauth2AccessTokenStrategyJwt
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_strategies_access_token'?: NormalizedProjectRevisionHydraStrategiesAccessTokenEnum;
    /**
     * Defines how scopes are matched. For more details have a look at https://github.com/ory/fosite#scopes  This governs the \"strategies.scope\" setting. exact Oauth2ScopeStrategyExact wildcard Oauth2ScopeStrategyWildcard
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_strategies_scope'?: NormalizedProjectRevisionHydraStrategiesScopeEnum;
    /**
     * This governs the \"ttl.access_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_access_token'?: string;
    /**
     * Configures how long refresh tokens are valid.  Set to -1 for refresh tokens to never expire. This is not recommended!  This governs the \"ttl.auth_code\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_auth_code'?: string;
    /**
     * This governs the \"ttl.id_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_id_token'?: string;
    /**
     * Configures how long a user login and consent flow may take.  This governs the \"ttl.login_consent_request\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_login_consent_request'?: string;
    /**
     * Configures how long refresh tokens are valid.  Set to -1 for refresh tokens to never expire. This is not recommended!  This governs the \"ttl.refresh_token\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_ttl_refresh_token'?: string;
    /**
     * Sets the OAuth2 Consent Endpoint URL of the OAuth2 User Login & Consent flow.  Defaults to the Ory Account Experience if left empty.  This governs the \"urls.consent\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_consent'?: string;
    /**
     * Sets the OAuth2 Error URL of the OAuth2 User Login & Consent flow.  Defaults to the Ory Account Experience if left empty.  This governs the \"urls.error\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_error'?: string;
    /**
     * Sets the OAuth2 Login Endpoint URL of the OAuth2 User Login & Consent flow.  Defaults to the Ory Account Experience if left empty.  This governs the \"urls.login\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_login'?: string;
    /**
     * Sets the logout endpoint.  Defaults to the Ory Account Experience if left empty.  This governs the \"urls.logout\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_logout'?: string;
    /**
     * When an OAuth2-related user agent requests to log out, they will be redirected to this url afterwards per default.  Defaults to the Ory Account Experience in development and your application in production mode when a custom domain is connected.  This governs the \"urls.post_logout_redirect\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_post_logout_redirect'?: string;
    /**
     * This value will be used as the issuer in access and ID tokens. It must be specified and using HTTPS protocol, unless the development mode is enabled.  On the Ory Network it will be very rare that you want to modify this value. If left empty, it will default to the correct value for the Ory Network.  This governs the \"urls.self.issuer\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_urls_self_issuer'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_jwks_broadcast_keys'?: Array<string>;
    /**
     * Configures OpenID Connect Discovery and overwrites the OAuth2 Authorization URL.  This governs the \"webfinger.oidc.discovery.auth_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_auth_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites the OpenID Connect Dynamic Client Registration Endpoint.  This governs the \"webfinger.oidc.discovery.client_registration_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_client_registration_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites the JWKS URL.  This governs the \"webfinger.oidc.discovery.jwks_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_jwks_url'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_supported_claims'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_supported_scope'?: Array<string>;
    /**
     * Configures OpenID Connect Discovery and overwrites the OAuth2 Token URL.  This governs the \"webfinger.oidc.discovery.token_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_token_url'?: string;
    /**
     * Configures OpenID Connect Discovery and overwrites userinfo endpoint to be advertised at the OpenID Connect Discovery endpoint /.well-known/openid-configuration. Defaults to Ory Hydra\'s userinfo endpoint at /userinfo. Set this value if you want to handle this endpoint yourself.  This governs the \"webfinger.oidc.discovery.userinfo_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'hydra_webfinger_oidc_discovery_userinfo_url'?: string;
    /**
     * The revision ID.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'id'?: string;
    /**
     * The Revisions\' Keto Namespace Configuration  The string is a URL pointing to an OPL file with the configuration.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'keto_namespace_configuration'?: string;
    /**
     * 
     * @type {Array<KetoNamespace>}
     * @memberof NormalizedProjectRevision
     */
    'keto_namespaces'?: Array<KetoNamespace>;
    /**
     * 
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'keto_read_max_depth'?: number | null;
    /**
     * Configures the Ory Kratos Cookie SameSite Attribute  This governs the \"cookies.same_site\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_cookies_same_site'?: string;
    /**
     * Configures the Ory Kratos SMTP Connection URI  This governs the \"courier.smtp.connection_uri\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_connection_uri'?: string;
    /**
     * Configures the Ory Kratos SMTP From Address  This governs the \"courier.smtp.from_address\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_from_address'?: string;
    /**
     * Configures the Ory Kratos SMTP From Name  This governs the \"courier.smtp.from_name\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_from_name'?: string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_smtp_headers'?: object | null;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Body HTML Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery via Code Email Subject Template  This governs the \"courier.smtp.templates.recovery_code.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Body HTML Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery via Code Email Subject Template  This governs the \"courier.smtp.templates.recovery_code.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_code_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Body HTML Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Recovery Email Subject Template  This governs the \"courier.smtp.templates.recovery.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Body HTML Template  This governs the \"courier.smtp.templates.recovery.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Body Plaintext Template  This governs the \"courier.smtp.templates.recovery.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Recovery Email Subject Template  This governs the \"courier.smtp.templates.recovery.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_recovery_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification via Code Email Body HTML Template  This governs the \"courier.smtp.templates.verification_code.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.verification_code.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification via Code Email Subject Template  This governs the \"courier.smtp.templates.verification_code.invalid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Verification via Code Email Body HTML Template  This governs the \"courier.smtp.templates.verification_code.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Verification via Code Email Body Plaintext Template  This governs the \"courier.smtp.templates.verification_code.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Verification via Code Email Subject Template  This governs the \"courier.smtp.templates.verification_code.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_code_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Body HTML Template  This governs the \"courier.smtp.templates.verification.invalid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Body Plaintext Template  This governs the \"courier.smtp.templates.verification.invalid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Invalid Verification Email Subject Template  This governs the \"courier.smtp.templates.verification.invalid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_invalid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Body HTML Template  This governs the \"courier.smtp.templates.verification.valid.email.body.html\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_body_html'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Body Plaintext Template  This governs the \"courier.smtp.templates.verification.valid.email.body.plaintext\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_body_plaintext'?: string;
    /**
     * Configures the Ory Kratos Valid Verification Email Subject Template  This governs the \"courier.smtp.templates.verification.valid.email.subject\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_courier_templates_verification_valid_email_subject'?: string;
    /**
     * Configures the Ory Kratos Session caching feature flag  This governs the \"feature_flags.cacheable_sessions\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_feature_flags_cacheable_sessions'?: boolean;
    /**
     * 
     * @type {Array<NormalizedProjectRevisionIdentitySchema>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_identity_schemas'?: Array<NormalizedProjectRevisionIdentitySchema>;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof NormalizedProjectRevision
     */
    'kratos_oauth2_provider_headers'?: object | null;
    /**
     * The Revisions\' OAuth2 Provider Integration URL  This governs the \"oauth2_provider.url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_oauth2_provider_url'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_cipher'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_cookie'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_secrets_default'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_allowed_return_urls'?: Array<string>;
    /**
     * Configures the Ory Kratos Default Return URL  This governs the \"selfservice.allowed_return_urls\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Error UI URL  This governs the \"selfservice.flows.error.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_error_ui_url'?: string;
    /**
     * 
     * @type {Array<NormalizedProjectRevisionHook>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_hooks'?: Array<NormalizedProjectRevisionHook>;
    /**
     * Configures the Ory Kratos Login Default Return URL  This governs the \"selfservice.flows.login.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After OIDC Default Return URL  This governs the \"selfservice.flows.login.after.oidc.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_oidc_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After Password Default Return URL  This governs the \"selfservice.flows.login.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login After WebAuthn Default Return URL  This governs the \"selfservice.flows.login.after.webauthn.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_after_webauthn_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Login Lifespan  This governs the \"selfservice.flows.login.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_lifespan'?: string;
    /**
     * Configures the Ory Kratos Login UI URL  This governs the \"selfservice.flows.login.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_login_ui_url'?: string;
    /**
     * Configures the Ory Kratos Logout Default Return URL  This governs the \"selfservice.flows.logout.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_logout_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Recovery Default Return URL  This governs the \"selfservice.flows.recovery.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Recovery Enabled Setting  This governs the \"selfservice.flows.recovery.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Recovery Lifespan  This governs the \"selfservice.flows.recovery.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_lifespan'?: string;
    /**
     * Configures whether to notify unknown recipients of a Ory Kratos recovery flow  This governs the \"selfservice.flows.recovery.notify_unknown_recipients\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_notify_unknown_recipients'?: boolean;
    /**
     * Configures the Ory Kratos Recovery UI URL  This governs the \"selfservice.flows.recovery.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_ui_url'?: string;
    /**
     * Configures the Ory Kratos Recovery strategy to use (\"link\" or \"code\")  This governs the \"selfservice.flows.recovery.use\" setting. link SelfServiceMessageVerificationStrategyLink code SelfServiceMessageVerificationStrategyCode
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_recovery_use'?: NormalizedProjectRevisionKratosSelfserviceFlowsRecoveryUseEnum;
    /**
     * Configures the Ory Kratos Registration Default Return URL  This governs the \"selfservice.flows.registration.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After OIDC Default Return URL  This governs the \"selfservice.flows.registration.after.oidc.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_oidc_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After Password Default Return URL  This governs the \"selfservice.flows.registration.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Registration After Password Default Return URL  This governs the \"selfservice.flows.registration.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_after_webauthn_default_browser_return_url'?: string;
    /**
     * Configures the Whether Ory Kratos Registration is Enabled  This governs the \"selfservice.flows.registration.enabled\" setting.0
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Registration Lifespan  This governs the \"selfservice.flows.registration.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_lifespan'?: string;
    /**
     * Configures the Ory Kratos Registration UI URL  This governs the \"selfservice.flows.registration.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_registration_ui_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL  This governs the \"selfservice.flows.settings.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL After Updating Passwords  This governs the \"selfservice.flows.settings.after.password.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_password_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Default Return URL After Updating Profiles  This governs the \"selfservice.flows.settings.after.profile.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_after_profile_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Settings Lifespan  This governs the \"selfservice.flows.settings.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_lifespan'?: string;
    /**
     * Configures the Ory Kratos Settings Privileged Session Max Age  This governs the \"selfservice.flows.settings.privileged_session_max_age\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_privileged_session_max_age'?: string;
    /**
     * Configures the Ory Kratos Settings Required AAL  This governs the \"selfservice.flows.settings.required_aal\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_required_aal'?: string;
    /**
     * Configures the Ory Kratos Settings UI URL  This governs the \"selfservice.flows.settings.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_settings_ui_url'?: string;
    /**
     * Configures the Ory Kratos Verification Default Return URL  This governs the \"selfservice.flows.verification.after.default_browser_return_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_after_default_browser_return_url'?: string;
    /**
     * Configures the Ory Kratos Verification Enabled Setting  This governs the \"selfservice.flows.verification.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Verification Lifespan  This governs the \"selfservice.flows.verification.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_lifespan'?: string;
    /**
     * Configures whether to notify unknown recipients of a Ory Kratos verification flow  This governs the \"selfservice.flows.verification.notify_unknown_recipients\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_notify_unknown_recipients'?: boolean;
    /**
     * Configures the Ory Kratos Verification UI URL  This governs the \"selfservice.flows.verification.ui_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_ui_url'?: string;
    /**
     * Configures the Ory Kratos Strategy to use for Verification  This governs the \"selfservice.flows.verification.use\" setting. link SelfServiceMessageVerificationStrategyLink code SelfServiceMessageVerificationStrategyCode
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_flows_verification_use'?: NormalizedProjectRevisionKratosSelfserviceFlowsVerificationUseEnum;
    /**
     * Configures the Ory Kratos Code Method\'s lifespan  This governs the \"selfservice.methods.code.config.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_code_config_lifespan'?: string;
    /**
     * Configures whether Ory Kratos Code Method is enabled  This governs the \"selfservice.methods.code.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_code_enabled'?: boolean;
    /**
     * Configures the Base URL which Recovery, Verification, and Login Links Point to  It is recommended to leave this value empty. It will be appropriately configured to the best matching domain (e.g. when using custom domains) automatically.  This governs the \"selfservice.methods.link.config.base_url\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_config_base_url'?: string;
    /**
     * Configures the Ory Kratos Link Method\'s lifespan  This governs the \"selfservice.methods.link.config.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_config_lifespan'?: string;
    /**
     * Configures whether Ory Kratos Link Method is enabled  This governs the \"selfservice.methods.link.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_link_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos TOTP Lookup Secret is enabled  This governs the \"selfservice.methods.lookup_secret.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_lookup_secret_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Third Party / OpenID Connect base redirect URI  This governs the \"selfservice.methods.oidc.config.base_redirect_uri\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_config_base_redirect_uri'?: string;
    /**
     * 
     * @type {Array<NormalizedProjectRevisionThirdPartyProvider>}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_config_providers'?: Array<NormalizedProjectRevisionThirdPartyProvider>;
    /**
     * Configures whether Ory Kratos Third Party / OpenID Connect Login is enabled  This governs the \"selfservice.methods.oidc.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_oidc_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password HIBP Checks is enabled  This governs the \"selfservice.methods.password.config.haveibeenpwned_enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_haveibeenpwned_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password should disable the similarity policy.  This governs the \"selfservice.methods.password.config.identifier_similarity_check_enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_identifier_similarity_check_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Password Should ignore HIBPWND Network Errors  This governs the \"selfservice.methods.password.config.ignore_network_errors\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_ignore_network_errors'?: boolean;
    /**
     * Configures Ory Kratos Password Max Breaches Detection  This governs the \"selfservice.methods.password.config.max_breaches\" setting.
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_max_breaches'?: number;
    /**
     * Configures the minimum length of passwords.  This governs the \"selfservice.methods.password.config.min_password_length\" setting.
     * @type {number}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_config_min_password_length'?: number;
    /**
     * Configures whether Ory Kratos Password Method is enabled  This governs the \"selfservice.methods.password.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_password_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Profile Method is enabled  This governs the \"selfservice.methods.profile.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_profile_enabled'?: boolean;
    /**
     * Configures Ory Kratos TOTP Issuer  This governs the \"selfservice.methods.totp.config.issuer\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_totp_config_issuer'?: string;
    /**
     * Configures whether Ory Kratos TOTP Method is enabled  This governs the \"selfservice.methods.totp.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_totp_enabled'?: boolean;
    /**
     * Configures whether Ory Kratos Webauthn is used for passwordless flows  This governs the \"selfservice.methods.webauthn.config.passwordless\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_passwordless'?: boolean;
    /**
     * Configures the Ory Kratos Webauthn RP Display Name  This governs the \"selfservice.methods.webauthn.config.rp.display_name\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_display_name'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP Icon  This governs the \"selfservice.methods.webauthn.config.rp.icon\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_icon'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP ID  This governs the \"selfservice.methods.webauthn.config.rp.id\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_id'?: string;
    /**
     * Configures the Ory Kratos Webauthn RP Origin  This governs the \"selfservice.methods.webauthn.config.rp.origin\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_config_rp_origin'?: string;
    /**
     * Configures whether Ory Kratos Webauthn is enabled  This governs the \"selfservice.methods.webauthn.enabled\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_selfservice_methods_webauthn_enabled'?: boolean;
    /**
     * Configures the Ory Kratos Session Cookie Persistent Attribute  This governs the \"session.cookie.persistent\" setting.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_cookie_persistent'?: boolean;
    /**
     * Configures the Ory Kratos Session Cookie SameSite Attribute  This governs the \"session.cookie.same_site\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_cookie_same_site'?: string;
    /**
     * Configures the Ory Kratos Session Lifespan  This governs the \"session.lifespan\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_lifespan'?: string;
    /**
     * Configures the Ory Kratos Session Whoami AAL requirement  This governs the \"session.whoami.required_aal\" setting.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'kratos_session_whoami_required_aal'?: string;
    /**
     * The project\'s name.
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'name': string;
    /**
     * Whether this project is in production mode or not.  In development mode, a low-security profile is used making it easier to develop against your, for example, local environment.
     * @type {boolean}
     * @memberof NormalizedProjectRevision
     */
    'production'?: boolean;
    /**
     * The Revision\'s Project ID
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'project_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevision
     */
    'updated_at'?: string;
}

export const NormalizedProjectRevisionHydraStrategiesAccessTokenEnum = {
    Opaque: 'opaque',
    Jwt: 'jwt'
} as const;

export type NormalizedProjectRevisionHydraStrategiesAccessTokenEnum = typeof NormalizedProjectRevisionHydraStrategiesAccessTokenEnum[keyof typeof NormalizedProjectRevisionHydraStrategiesAccessTokenEnum];
export const NormalizedProjectRevisionHydraStrategiesScopeEnum = {
    Exact: 'exact',
    Wildcard: 'wildcard'
} as const;

export type NormalizedProjectRevisionHydraStrategiesScopeEnum = typeof NormalizedProjectRevisionHydraStrategiesScopeEnum[keyof typeof NormalizedProjectRevisionHydraStrategiesScopeEnum];
export const NormalizedProjectRevisionKratosSelfserviceFlowsRecoveryUseEnum = {
    Link: 'link',
    Code: 'code'
} as const;

export type NormalizedProjectRevisionKratosSelfserviceFlowsRecoveryUseEnum = typeof NormalizedProjectRevisionKratosSelfserviceFlowsRecoveryUseEnum[keyof typeof NormalizedProjectRevisionKratosSelfserviceFlowsRecoveryUseEnum];
export const NormalizedProjectRevisionKratosSelfserviceFlowsVerificationUseEnum = {
    Link: 'link',
    Code: 'code'
} as const;

export type NormalizedProjectRevisionKratosSelfserviceFlowsVerificationUseEnum = typeof NormalizedProjectRevisionKratosSelfserviceFlowsVerificationUseEnum[keyof typeof NormalizedProjectRevisionKratosSelfserviceFlowsVerificationUseEnum];

/**
 * 
 * @export
 * @interface NormalizedProjectRevisionHook
 */
export interface NormalizedProjectRevisionHook {
    /**
     * The Hooks Config Key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'config_key': string;
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'created_at'?: string;
    /**
     * The Hook Type
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'hook': string;
    /**
     * ID of the entry
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'id'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'project_revision_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'updated_at'?: string;
    /**
     * Whether to send the API Key in the HTTP Header or as a HTTP Cookie
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_in'?: string;
    /**
     * The name of the api key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_name'?: string;
    /**
     * The value of the api key
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_api_key_value'?: string;
    /**
     * The password to be sent in the HTTP Basic Auth Header
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_basic_auth_password'?: string;
    /**
     * The username to be sent in the HTTP Basic Auth Header
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_basic_auth_user'?: string;
    /**
     * HTTP Auth Method to use for the Web-Hook
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_auth_type'?: string;
    /**
     * URI pointing to the JsonNet template used for Web-Hook payload generation. Only used for those HTTP methods, which support HTTP body payloads.
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_body'?: string;
    /**
     * If enabled allows the web hook to interrupt / abort the self-service flow. It only applies to certain flows (registration/verification/login/settings) and requires a valid response format.
     * @type {boolean}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_can_interrupt'?: boolean;
    /**
     * The HTTP method to use (GET, POST, etc) for the Web-Hook
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_method'?: string;
    /**
     * Whether to ignore the Web Hook response
     * @type {boolean}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_response_ignore'?: boolean;
    /**
     * Whether to parse the Web Hook response
     * @type {boolean}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_response_parse'?: boolean;
    /**
     * The URL the Web-Hook should call
     * @type {string}
     * @memberof NormalizedProjectRevisionHook
     */
    'web_hook_config_url'?: string;
}
/**
 * 
 * @export
 * @interface NormalizedProjectRevisionIdentitySchema
 */
export interface NormalizedProjectRevisionIdentitySchema {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'created_at'?: string;
    /**
     * The unique ID of this entry.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'id'?: string;
    /**
     * 
     * @type {ManagedIdentitySchema}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'identity_schema'?: ManagedIdentitySchema;
    /**
     * 
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'identity_schema_id'?: string | null;
    /**
     * The imported (named) ID of the Identity Schema referenced in the Ory Kratos config.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'import_id'?: string;
    /**
     * The ImportURL can be used to import an Identity Schema from a bse64 encoded string. In the future, this key also support HTTPS and other sources!  If you import an Ory Kratos configuration, this would be akin to the `identity.schemas.#.url` key.  The configuration will always return the import URL when you fetch it from the API.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'import_url'?: string;
    /**
     * If true sets the default schema for identities  Only one schema can ever be the default schema. If you try to add two schemas with default to true, the request will fail.
     * @type {boolean}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'is_default'?: boolean;
    /**
     * Use a preset instead of a custom identity schema.
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'preset'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'project_revision_id'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionIdentitySchema
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface NormalizedProjectRevisionThirdPartyProvider
 */
export interface NormalizedProjectRevisionThirdPartyProvider {
    /**
     * 
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_private_key'?: string | null;
    /**
     * Apple Private Key Identifier  Sign In with Apple Private Key Identifier needed for generating a JWT token for client secret
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_private_key_id'?: string;
    /**
     * Apple Developer Team ID  Apple Developer Team ID needed for generating a JWT token for client secret
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'apple_team_id'?: string;
    /**
     * AuthURL is the authorize url, typically something like: https://example.org/oauth2/auth Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'auth_url'?: string;
    /**
     * Tenant is the Azure AD Tenant to use for authentication, and must be set when `provider` is set to `microsoft`.  Can be either `common`, `organizations`, `consumers` for a multitenant application or a specific tenant like `8eaef023-2b34-4da1-9baa-8bc8c9d6a490` or `contoso.onmicrosoft.com`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'azure_tenant'?: string;
    /**
     * ClientID is the application\'s Client ID.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'client_secret'?: string | null;
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'id'?: string;
    /**
     * IssuerURL is the OpenID Connect Server URL. You can leave this empty if `provider` is not set to `generic`. If set, neither `auth_url` nor `token_url` are required.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'issuer_url'?: string;
    /**
     * Label represents an optional label which can be used in the UI generation.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'label'?: string;
    /**
     * Mapper specifies the JSONNet code snippet which uses the OpenID Connect Provider\'s data (e.g. GitHub or Google profile information) to hydrate the identity\'s data.  It can be either a URL (file://, http(s)://, base64://) or an inline JSONNet code snippet.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'mapper_url'?: string;
    /**
     * The Revision\'s ID this schema belongs to
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'project_revision_id'?: string;
    /**
     * Provider is either \"generic\" for a generic OAuth 2.0 / OpenID Connect Provider or one of: generic google github gitlab microsoft discord slack facebook vk yandex apple
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'provider'?: string;
    /**
     * ID is the provider\'s ID
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'provider_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'requested_claims'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'scope'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'subject_source'?: string | null;
    /**
     * TokenURL is the token url, typically something like: https://example.org/oauth2/token  Should only be used when the OAuth2 / OpenID Connect server is not supporting OpenID Connect Discovery and when `provider` is set to `generic`.
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'token_url'?: string;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof NormalizedProjectRevisionThirdPartyProvider
     */
    'updated_at'?: string;
}
/**
 * OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 * @export
 * @interface OAuth2Client
 */
export interface OAuth2Client {
    /**
     * OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in `strategies.access_token`.
     * @type {string}
     * @memberof OAuth2Client
     */
    'access_token_strategy'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'allowed_cors_origins'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'audience'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_id_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'authorization_code_grant_refresh_token_lifespan'?: string | null;
    /**
     * OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'backchannel_logout_session_required'?: boolean;
    /**
     * OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     * @type {string}
     * @memberof OAuth2Client
     */
    'backchannel_logout_uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_credentials_grant_access_token_lifespan'?: string | null;
    /**
     * OAuth 2.0 Client ID  The ID is autogenerated and immutable.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_id'?: string;
    /**
     * OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_name'?: string;
    /**
     * OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_secret'?: string;
    /**
     * OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
     * @type {number}
     * @memberof OAuth2Client
     */
    'client_secret_expires_at'?: number;
    /**
     * OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
     * @type {string}
     * @memberof OAuth2Client
     */
    'client_uri'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'contacts'?: Array<string>;
    /**
     * OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client\'s creation.
     * @type {string}
     * @memberof OAuth2Client
     */
    'created_at'?: string;
    /**
     * OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_session_required'?: boolean;
    /**
     * OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
     * @type {string}
     * @memberof OAuth2Client
     */
    'frontchannel_logout_uri'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'grant_types'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'implicit_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'implicit_grant_id_token_lifespan'?: string | null;
    /**
     * OAuth 2.0 Client JSON Web Key Set  Client\'s JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
     * @type {any}
     * @memberof OAuth2Client
     */
    'jwks'?: any;
    /**
     * OAuth 2.0 Client JSON Web Key Set URL  URL for the Client\'s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client\'s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof OAuth2Client
     */
    'jwks_uri'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'jwt_bearer_grant_access_token_lifespan'?: string | null;
    /**
     * OAuth 2.0 Client Logo URI  A URL string referencing the client\'s logo.
     * @type {string}
     * @memberof OAuth2Client
     */
    'logo_uri'?: string;
    /**
     * 
     * @type {object}
     * @memberof OAuth2Client
     */
    'metadata'?: object;
    /**
     * OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'owner'?: string;
    /**
     * OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     * @type {string}
     * @memberof OAuth2Client
     */
    'policy_uri'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'post_logout_redirect_uris'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'redirect_uris'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_id_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    'refresh_token_grant_refresh_token_lifespan'?: string | null;
    /**
     * OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_access_token'?: string;
    /**
     * OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'registration_client_uri'?: string;
    /**
     * OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
     * @type {string}
     * @memberof OAuth2Client
     */
    'request_object_signing_alg'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'request_uris'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    'response_types'?: Array<string>;
    /**
     * OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     * @type {string}
     * @memberof OAuth2Client
     */
    'scope'?: string;
    /**
     * OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
     * @type {string}
     * @memberof OAuth2Client
     */
    'sector_identifier_uri'?: string;
    /**
     * SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
     * @type {boolean}
     * @memberof OAuth2Client
     */
    'skip_consent'?: boolean;
    /**
     * OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
     * @type {string}
     * @memberof OAuth2Client
     */
    'subject_type'?: string;
    /**
     * OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_method'?: string;
    /**
     * OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
     * @type {string}
     * @memberof OAuth2Client
     */
    'token_endpoint_auth_signing_alg'?: string;
    /**
     * OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     * @type {string}
     * @memberof OAuth2Client
     */
    'tos_uri'?: string;
    /**
     * OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
     * @type {string}
     * @memberof OAuth2Client
     */
    'updated_at'?: string;
    /**
     * OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
     * @type {string}
     * @memberof OAuth2Client
     */
    'userinfo_signed_response_alg'?: string;
}
/**
 * Lifespans of different token types issued for this OAuth 2.0 Client.
 * @export
 * @interface OAuth2ClientTokenLifespans
 */
export interface OAuth2ClientTokenLifespans {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'authorization_code_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'authorization_code_grant_id_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'authorization_code_grant_refresh_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'client_credentials_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'implicit_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'implicit_grant_id_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'jwt_bearer_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'refresh_token_grant_access_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'refresh_token_grant_id_token_lifespan'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientTokenLifespans
     */
    'refresh_token_grant_refresh_token_lifespan'?: string | null;
}
/**
 * 
 * @export
 * @interface OAuth2ConsentRequest
 */
export interface OAuth2ConsentRequest {
    /**
     * ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'acr'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'amr'?: Array<string>;
    /**
     * ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'challenge': string;
    /**
     * 
     * @type {OAuth2Client}
     * @memberof OAuth2ConsentRequest
     */
    'client'?: OAuth2Client;
    /**
     * 
     * @type {object}
     * @memberof OAuth2ConsentRequest
     */
    'context'?: object;
    /**
     * LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'login_challenge'?: string;
    /**
     * LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'login_session_id'?: string;
    /**
     * 
     * @type {OAuth2ConsentRequestOpenIDConnectContext}
     * @memberof OAuth2ConsentRequest
     */
    'oidc_context'?: OAuth2ConsentRequestOpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'request_url'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'requested_access_token_audience'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequest
     */
    'requested_scope'?: Array<string>;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
     * @type {boolean}
     * @memberof OAuth2ConsentRequest
     */
    'skip'?: boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
     * @type {string}
     * @memberof OAuth2ConsentRequest
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface OAuth2ConsentRequestOpenIDConnectContext
 */
export interface OAuth2ConsentRequestOpenIDConnectContext {
    /**
     * ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'acr_values'?: Array<string>;
    /**
     * Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
     * @type {string}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'display'?: string;
    /**
     * IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User\'s current or past authenticated session with the Client.
     * @type {{ [key: string]: any; }}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'id_token_hint_claims'?: { [key: string]: any; };
    /**
     * LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
     * @type {string}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'login_hint'?: string;
    /**
     * UILocales is the End-User\'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
     * @type {Array<string>}
     * @memberof OAuth2ConsentRequestOpenIDConnectContext
     */
    'ui_locales'?: Array<string>;
}
/**
 * A completed OAuth 2.0 Consent Session.
 * @export
 * @interface OAuth2ConsentSession
 */
export interface OAuth2ConsentSession {
    /**
     * 
     * @type {OAuth2ConsentRequest}
     * @memberof OAuth2ConsentSession
     */
    'consent_request'?: OAuth2ConsentRequest;
    /**
     * 
     * @type {OAuth2ConsentSessionExpiresAt}
     * @memberof OAuth2ConsentSession
     */
    'expires_at'?: OAuth2ConsentSessionExpiresAt;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2ConsentSession
     */
    'grant_access_token_audience'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2ConsentSession
     */
    'grant_scope'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSession
     */
    'handled_at'?: string;
    /**
     * Remember Consent  Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof OAuth2ConsentSession
     */
    'remember'?: boolean;
    /**
     * Remember Consent For  RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof OAuth2ConsentSession
     */
    'remember_for'?: number;
    /**
     * 
     * @type {AcceptOAuth2ConsentRequestSession}
     * @memberof OAuth2ConsentSession
     */
    'session'?: AcceptOAuth2ConsentRequestSession;
}
/**
 * 
 * @export
 * @interface OAuth2ConsentSessionExpiresAt
 */
export interface OAuth2ConsentSessionExpiresAt {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'authorize_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'id_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'par_context'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ConsentSessionExpiresAt
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface OAuth2LoginRequest
 */
export interface OAuth2LoginRequest {
    /**
     * ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'challenge': string;
    /**
     * 
     * @type {OAuth2Client}
     * @memberof OAuth2LoginRequest
     */
    'client': OAuth2Client;
    /**
     * 
     * @type {OAuth2ConsentRequestOpenIDConnectContext}
     * @memberof OAuth2LoginRequest
     */
    'oidc_context'?: OAuth2ConsentRequestOpenIDConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'request_url': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2LoginRequest
     */
    'requested_access_token_audience': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2LoginRequest
     */
    'requested_scope': Array<string>;
    /**
     * SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It\'s value can generally be used to associate consecutive login requests by a certain user.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'session_id'?: string;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
     * @type {boolean}
     * @memberof OAuth2LoginRequest
     */
    'skip': boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
     * @type {string}
     * @memberof OAuth2LoginRequest
     */
    'subject': string;
}
/**
 * 
 * @export
 * @interface OAuth2LogoutRequest
 */
export interface OAuth2LogoutRequest {
    /**
     * Challenge is the identifier (\"logout challenge\") of the logout authentication request. It is used to identify the session.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'challenge'?: string;
    /**
     * 
     * @type {OAuth2Client}
     * @memberof OAuth2LogoutRequest
     */
    'client'?: OAuth2Client;
    /**
     * RequestURL is the original Logout URL requested.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'request_url'?: string;
    /**
     * RPInitiated is set to true if the request was initiated by a Relying Party (RP), also known as an OAuth 2.0 Client.
     * @type {boolean}
     * @memberof OAuth2LogoutRequest
     */
    'rp_initiated'?: boolean;
    /**
     * SessionID is the login session ID that was requested to log out.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'sid'?: string;
    /**
     * Subject is the user for whom the logout was request.
     * @type {string}
     * @memberof OAuth2LogoutRequest
     */
    'subject'?: string;
}
/**
 * Contains a redirect URL used to complete a login, consent, or logout request.
 * @export
 * @interface OAuth2RedirectTo
 */
export interface OAuth2RedirectTo {
    /**
     * RedirectURL is the URL which you should redirect the user\'s browser to once the authentication process is completed.
     * @type {string}
     * @memberof OAuth2RedirectTo
     */
    'redirect_to': string;
}
/**
 * OAuth2 Token Exchange Result
 * @export
 * @interface OAuth2TokenExchange
 */
export interface OAuth2TokenExchange {
    /**
     * The access token issued by the authorization server.
     * @type {string}
     * @memberof OAuth2TokenExchange
     */
    'access_token'?: string;
    /**
     * The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
     * @type {number}
     * @memberof OAuth2TokenExchange
     */
    'expires_in'?: number;
    /**
     * To retrieve a refresh token request the id_token scope.
     * @type {number}
     * @memberof OAuth2TokenExchange
     */
    'id_token'?: number;
    /**
     * The refresh token, which can be used to obtain new access tokens. To retrieve it add the scope \"offline\" to your access token request.
     * @type {string}
     * @memberof OAuth2TokenExchange
     */
    'refresh_token'?: string;
    /**
     * The scope of the access token
     * @type {string}
     * @memberof OAuth2TokenExchange
     */
    'scope'?: string;
    /**
     * The type of the token issued
     * @type {string}
     * @memberof OAuth2TokenExchange
     */
    'token_type'?: string;
}
/**
 * Includes links to several endpoints (for example `/oauth2/token`) and exposes information on supported signature algorithms among others.
 * @export
 * @interface OidcConfiguration
 */
export interface OidcConfiguration {
    /**
     * OAuth 2.0 Authorization Endpoint URL
     * @type {string}
     * @memberof OidcConfiguration
     */
    'authorization_endpoint': string;
    /**
     * OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'backchannel_logout_session_supported'?: boolean;
    /**
     * OpenID Connect Back-Channel Logout Supported  Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'backchannel_logout_supported'?: boolean;
    /**
     * OpenID Connect Claims Parameter Parameter Supported  Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'claims_parameter_supported'?: boolean;
    /**
     * OpenID Connect Supported Claims  JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'claims_supported'?: Array<string>;
    /**
     * OAuth 2.0 PKCE Supported Code Challenge Methods  JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'code_challenge_methods_supported'?: Array<string>;
    /**
     * OpenID Connect End-Session Endpoint  URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'end_session_endpoint'?: string;
    /**
     * OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'frontchannel_logout_session_supported'?: boolean;
    /**
     * OpenID Connect Front-Channel Logout Supported  Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'frontchannel_logout_supported'?: boolean;
    /**
     * OAuth 2.0 Supported Grant Types  JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'grant_types_supported'?: Array<string>;
    /**
     * OpenID Connect Default ID Token Signing Algorithms  Algorithm used to sign OpenID Connect ID Tokens.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'id_token_signed_response_alg': Array<string>;
    /**
     * OpenID Connect Supported ID Token Signing Algorithms  JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'id_token_signing_alg_values_supported': Array<string>;
    /**
     * OpenID Connect Issuer URL  An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'issuer': string;
    /**
     * OpenID Connect Well-Known JSON Web Keys URL  URL of the OP\'s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server\'s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key\'s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'jwks_uri': string;
    /**
     * OpenID Connect Dynamic Client Registration Endpoint URL
     * @type {string}
     * @memberof OidcConfiguration
     */
    'registration_endpoint'?: string;
    /**
     * OpenID Connect Supported Request Object Signing Algorithms  JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'request_object_signing_alg_values_supported'?: Array<string>;
    /**
     * OpenID Connect Request Parameter Supported  Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'request_parameter_supported'?: boolean;
    /**
     * OpenID Connect Request URI Parameter Supported  Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'request_uri_parameter_supported'?: boolean;
    /**
     * OpenID Connect Requires Request URI Registration  Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
     * @type {boolean}
     * @memberof OidcConfiguration
     */
    'require_request_uri_registration'?: boolean;
    /**
     * OAuth 2.0 Supported Response Modes  JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'response_modes_supported'?: Array<string>;
    /**
     * OAuth 2.0 Supported Response Types  JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'response_types_supported': Array<string>;
    /**
     * OAuth 2.0 Token Revocation URL  URL of the authorization server\'s OAuth 2.0 revocation endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'revocation_endpoint'?: string;
    /**
     * OAuth 2.0 Supported Scope Values  JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'scopes_supported'?: Array<string>;
    /**
     * OpenID Connect Supported Subject Types  JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'subject_types_supported': Array<string>;
    /**
     * OAuth 2.0 Token Endpoint URL
     * @type {string}
     * @memberof OidcConfiguration
     */
    'token_endpoint': string;
    /**
     * OAuth 2.0 Supported Client Authentication Methods  JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'token_endpoint_auth_methods_supported'?: Array<string>;
    /**
     * OpenID Connect Userinfo URL  URL of the OP\'s UserInfo Endpoint.
     * @type {string}
     * @memberof OidcConfiguration
     */
    'userinfo_endpoint'?: string;
    /**
     * OpenID Connect User Userinfo Signing Algorithm  Algorithm used to sign OpenID Connect Userinfo Responses.
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'userinfo_signed_response_alg': Array<string>;
    /**
     * OpenID Connect Supported Userinfo Signing Algorithm  JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
     * @type {Array<string>}
     * @memberof OidcConfiguration
     */
    'userinfo_signing_alg_values_supported'?: Array<string>;
}
/**
 * OpenID Connect Userinfo
 * @export
 * @interface OidcUserInfo
 */
export interface OidcUserInfo {
    /**
     * End-User\'s birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform\'s date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'birthdate'?: string;
    /**
     * End-User\'s preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'email'?: string;
    /**
     * True if the End-User\'s e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'email_verified'?: boolean;
    /**
     * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'family_name'?: string;
    /**
     * End-User\'s gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'gender'?: string;
    /**
     * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'given_name'?: string;
    /**
     * End-User\'s locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'locale'?: string;
    /**
     * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'middle_name'?: string;
    /**
     * End-User\'s full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User\'s locale and preferences.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'name'?: string;
    /**
     * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'nickname'?: string;
    /**
     * End-User\'s preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'phone_number'?: string;
    /**
     * True if the End-User\'s phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'phone_number_verified'?: boolean;
    /**
     * URL of the End-User\'s profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'picture'?: string;
    /**
     * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'preferred_username'?: string;
    /**
     * URL of the End-User\'s profile page. The contents of this Web page SHOULD be about the End-User.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'profile'?: string;
    /**
     * Subject - Identifier for the End-User at the IssuerURL.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'sub'?: string;
    /**
     * Time the End-User\'s information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     * @type {number}
     * @memberof OidcUserInfo
     */
    'updated_at'?: number;
    /**
     * URL of the End-User\'s Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'website'?: string;
    /**
     * String from zoneinfo [zoneinfo] time zone database representing the End-User\'s time zone. For example, Europe/Paris or America/Los_Angeles.
     * @type {string}
     * @memberof OidcUserInfo
     */
    'zoneinfo'?: string;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof Pagination
     */
    'page'?: number;
    /**
     * Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof Pagination
     */
    'page_size'?: number;
    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof Pagination
     */
    'page_token'?: string;
    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof Pagination
     */
    'per_page'?: number;
}
/**
 * 
 * @export
 * @interface PaginationHeaders
 */
export interface PaginationHeaders {
    /**
     * The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).  in: header
     * @type {string}
     * @memberof PaginationHeaders
     */
    'link'?: string;
    /**
     * The total number of clients.  in: header
     * @type {string}
     * @memberof PaginationHeaders
     */
    'x-total-count'?: string;
}
/**
 * 
 * @export
 * @interface ParseError
 */
export interface ParseError {
    /**
     * 
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'end'?: SourcePosition;
    /**
     * 
     * @type {string}
     * @memberof ParseError
     */
    'message'?: string;
    /**
     * 
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'start'?: SourcePosition;
}
/**
 * Patch Identities Body
 * @export
 * @interface PatchIdentitiesBody
 */
export interface PatchIdentitiesBody {
    /**
     * Identities holds the list of patches to apply  required
     * @type {Array<IdentityPatch>}
     * @memberof PatchIdentitiesBody
     */
    'identities'?: Array<IdentityPatch>;
}
/**
 * Perform Native Logout Request Body
 * @export
 * @interface PerformNativeLogoutBody
 */
export interface PerformNativeLogoutBody {
    /**
     * The Session Token  Invalidate this session token.
     * @type {string}
     * @memberof PerformNativeLogoutBody
     */
    'session_token': string;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * Name is the name of the plan.
     * @type {string}
     * @memberof Plan
     */
    'name': string;
    /**
     * Version is the version of the plan. The combination of `name@version` must be unique.
     * @type {number}
     * @memberof Plan
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface PlanDetails
 */
export interface PlanDetails {
    /**
     * BaseFeeMonthly is the monthly base fee for the plan.
     * @type {number}
     * @memberof PlanDetails
     */
    'base_fee_monthly': number;
    /**
     * BaseFeeYearly is the yearly base fee for the plan.
     * @type {number}
     * @memberof PlanDetails
     */
    'base_fee_yearly': number;
    /**
     * Custom is true if the plan is custom. This means it will be hidden from the pricing page.
     * @type {boolean}
     * @memberof PlanDetails
     */
    'custom': boolean;
    /**
     * Description is the description of the plan.
     * @type {string}
     * @memberof PlanDetails
     */
    'description': string;
    /**
     * Features are the feature definitions included in the plan.
     * @type {{ [key: string]: GenericUsage; }}
     * @memberof PlanDetails
     */
    'features': { [key: string]: GenericUsage; };
    /**
     * Name is the name of the plan.
     * @type {string}
     * @memberof PlanDetails
     */
    'name': string;
    /**
     * Version is the version of the plan. The combination of `name@version` must be unique.
     * @type {number}
     * @memberof PlanDetails
     */
    'version': number;
}
/**
 * Check Permission using Post Request Body
 * @export
 * @interface PostCheckPermissionBody
 */
export interface PostCheckPermissionBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof PostCheckPermissionBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * Post Check Permission Or Error Body
 * @export
 * @interface PostCheckPermissionOrErrorBody
 */
export interface PostCheckPermissionOrErrorBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof Project
     */
    'id': string;
    /**
     * The name of the project.
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * The configuration revision ID.
     * @type {string}
     * @memberof Project
     */
    'revision_id': string;
    /**
     * 
     * @type {ProjectServices}
     * @memberof Project
     */
    'services': ProjectServices;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof Project
     */
    'slug': string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof Project
     */
    'state': ProjectStateEnum;
}

export const ProjectStateEnum = {
    Running: 'running',
    Halted: 'halted'
} as const;

export type ProjectStateEnum = typeof ProjectStateEnum[keyof typeof ProjectStateEnum];

/**
 * 
 * @export
 * @interface ProjectApiKey
 */
export interface ProjectApiKey {
    /**
     * The token\'s ID.
     * @type {string}
     * @memberof ProjectApiKey
     */
    'id': string;
    /**
     * The Token\'s Name  Set this to help you remember, for example, where you use the token.
     * @type {string}
     * @memberof ProjectApiKey
     */
    'name': string;
    /**
     * The token\'s owner
     * @type {string}
     * @memberof ProjectApiKey
     */
    'owner_id': string;
    /**
     * The Token\'s Project ID
     * @type {string}
     * @memberof ProjectApiKey
     */
    'project_id'?: string;
    /**
     * The token\'s value
     * @type {string}
     * @memberof ProjectApiKey
     */
    'value'?: string;
}
/**
 * The Project Branding
 * @export
 * @interface ProjectBranding
 */
export interface ProjectBranding {
    /**
     * The Customization Creation Date
     * @type {string}
     * @memberof ProjectBranding
     */
    'created_at': string;
    /**
     * 
     * @type {ProjectBrandingTheme}
     * @memberof ProjectBranding
     */
    'default_theme': ProjectBrandingTheme;
    /**
     * The customization ID.
     * @type {string}
     * @memberof ProjectBranding
     */
    'id': string;
    /**
     * The Project\'s ID this customization is associated with
     * @type {string}
     * @memberof ProjectBranding
     */
    'project_id': string;
    /**
     * The Project Branding Themes
     * @type {Array<ProjectBrandingTheme>}
     * @memberof ProjectBranding
     */
    'themes': Array<ProjectBrandingTheme>;
    /**
     * Last Time Branding was Updated
     * @type {string}
     * @memberof ProjectBranding
     */
    'updated_at': string;
}
/**
 * The Project Branding Colors
 * @export
 * @interface ProjectBrandingColors
 */
export interface ProjectBrandingColors {
    /**
     * AccentDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'accent_default_color'?: string;
    /**
     * AccentDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'accent_disabled_color'?: string;
    /**
     * AccentEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'accent_emphasis_color'?: string;
    /**
     * AccentMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'accent_muted_color'?: string;
    /**
     * AccentSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'accent_subtle_color'?: string;
    /**
     * BackgroundCanvasColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'background_canvas_color'?: string;
    /**
     * BackgroundSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'background_subtle_color'?: string;
    /**
     * BackgroundSurfaceColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'background_surface_color'?: string;
    /**
     * BorderDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'border_default_color'?: string;
    /**
     * ErrorDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'error_default_color'?: string;
    /**
     * ErrorEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'error_emphasis_color'?: string;
    /**
     * ErrorMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'error_muted_color'?: string;
    /**
     * ErrorSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'error_subtle_color'?: string;
    /**
     * ForegroundDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_default_color'?: string;
    /**
     * ForegroundDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_disabled_color'?: string;
    /**
     * ForegroundMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_muted_color'?: string;
    /**
     * ForegroundOnAccentColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_on_accent_color'?: string;
    /**
     * ForegroundOnDarkColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_on_dark_color'?: string;
    /**
     * ForegroundOnDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_on_disabled_color'?: string;
    /**
     * ForegroundSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'foreground_subtle_color'?: string;
    /**
     * InputBackgroundColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'input_background_color'?: string;
    /**
     * InputDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'input_disabled_color'?: string;
    /**
     * InputPlaceholderColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'input_placeholder_color'?: string;
    /**
     * InputTextColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'input_text_color'?: string;
    /**
     * Primary color is an hsla color value used to derive the other colors from for the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'primary_color'?: string;
    /**
     * Secondary color is a hsla color code used to derive the other colors from for the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'secondary_color'?: string;
    /**
     * SuccessEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'success_emphasis_color'?: string;
    /**
     * TextDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'text_default_color'?: string;
    /**
     * TextDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingColors
     */
    'text_disabled_color'?: string;
}
/**
 * The Project Branding Theme
 * @export
 * @interface ProjectBrandingTheme
 */
export interface ProjectBrandingTheme {
    /**
     * AccentDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'accent_default_color'?: string;
    /**
     * AccentDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'accent_disabled_color'?: string;
    /**
     * AccentEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'accent_emphasis_color'?: string;
    /**
     * AccentMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'accent_muted_color'?: string;
    /**
     * AccentSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'accent_subtle_color'?: string;
    /**
     * BackgroundCanvasColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'background_canvas_color'?: string;
    /**
     * BackgroundSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'background_subtle_color'?: string;
    /**
     * BackgroundSurfaceColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'background_surface_color'?: string;
    /**
     * BorderDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'border_default_color'?: string;
    /**
     * The Customiation Creation Date
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'created_at': string;
    /**
     * ErrorDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'error_default_color'?: string;
    /**
     * ErrorEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'error_emphasis_color'?: string;
    /**
     * ErrorMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'error_muted_color'?: string;
    /**
     * ErrorSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'error_subtle_color'?: string;
    /**
     * ForegroundDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_default_color'?: string;
    /**
     * ForegroundDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_disabled_color'?: string;
    /**
     * ForegroundMutedColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_muted_color'?: string;
    /**
     * ForegroundOnAccentColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_on_accent_color'?: string;
    /**
     * ForegroundOnDarkColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_on_dark_color'?: string;
    /**
     * ForegroundOnDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_on_disabled_color'?: string;
    /**
     * ForegroundSubtleColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'foreground_subtle_color'?: string;
    /**
     * The customization theme ID.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'id': string;
    /**
     * InputBackgroundColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'input_background_color'?: string;
    /**
     * InputDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'input_disabled_color'?: string;
    /**
     * InputPlaceholderColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'input_placeholder_color'?: string;
    /**
     * InputTextColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'input_text_color'?: string;
    /**
     * Logo Type The Logo mime type.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'logo_type'?: string;
    /**
     * Logo URL Logo can be an https:// or base64:// URL. If the URL is not allowed, the logo will be stored inside the Ory Network storage bucket.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'logo_url'?: string;
    /**
     * The customization theme name.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'name': string;
    /**
     * Primary color is an hsla color value used to derive the other colors from for the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'primary_color'?: string;
    /**
     * The ProjectBranding ID this customization is associated with
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'project_branding_id': string;
    /**
     * Secondary color is a hsla color code used to derive the other colors from for the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'secondary_color'?: string;
    /**
     * SuccessEmphasisColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'success_emphasis_color'?: string;
    /**
     * TextDefaultColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'text_default_color'?: string;
    /**
     * TextDisabledColor is a hex color code used by the Ory Account Experience theme.
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'text_disabled_color'?: string;
    /**
     * Last Time Branding was Updated
     * @type {string}
     * @memberof ProjectBrandingTheme
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ProjectHost
 */
export interface ProjectHost {
    /**
     * The project\'s host.
     * @type {string}
     * @memberof ProjectHost
     */
    'host': string;
    /**
     * The mapping\'s ID.
     * @type {string}
     * @memberof ProjectHost
     */
    'id': string;
    /**
     * The Revision\'s Project ID
     * @type {string}
     * @memberof ProjectHost
     */
    'project_id': string;
}
/**
 * 
 * @export
 * @interface ProjectInvite
 */
export interface ProjectInvite {
    /**
     * The Project\'s Revision Creation Date
     * @type {string}
     * @memberof ProjectInvite
     */
    'created_at': string;
    /**
     * The invite\'s ID.
     * @type {string}
     * @memberof ProjectInvite
     */
    'id': string;
    /**
     * The invitee\'s email
     * @type {string}
     * @memberof ProjectInvite
     */
    'invitee_email': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'invitee_id'?: string | null;
    /**
     * The invite owner\'s email Usually the project\'s owner email
     * @type {string}
     * @memberof ProjectInvite
     */
    'owner_email': string;
    /**
     * The invite owner\'s ID Usually the project\'s owner
     * @type {string}
     * @memberof ProjectInvite
     */
    'owner_id': string;
    /**
     * The Project\'s ID this invite is associated with
     * @type {string}
     * @memberof ProjectInvite
     */
    'project_id': string;
    /**
     * The invite\'s status Keeps track of the invites status such as pending, accepted, declined, expired pending PENDING accepted ACCEPTED declined DECLINED expired EXPIRED cancelled CANCELLED removed REMOVED
     * @type {string}
     * @memberof ProjectInvite
     */
    'status': ProjectInviteStatusEnum;
    /**
     * Last Time Project\'s Revision was Updated
     * @type {string}
     * @memberof ProjectInvite
     */
    'updated_at': string;
}

export const ProjectInviteStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    Declined: 'declined',
    Expired: 'expired',
    Cancelled: 'cancelled',
    Removed: 'removed'
} as const;

export type ProjectInviteStatusEnum = typeof ProjectInviteStatusEnum[keyof typeof ProjectInviteStatusEnum];

/**
 * 
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
    /**
     * The Project\'s Creation Date
     * @type {string}
     * @memberof ProjectMetadata
     */
    'created_at': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectMetadata
     */
    'hosts': Array<string>;
    /**
     * The project\'s ID.
     * @type {string}
     * @memberof ProjectMetadata
     */
    'id': string;
    /**
     * The project\'s name if set
     * @type {string}
     * @memberof ProjectMetadata
     */
    'name': string;
    /**
     * The project\'s slug
     * @type {string}
     * @memberof ProjectMetadata
     */
    'slug'?: string;
    /**
     * The state of the project. running Running halted Halted
     * @type {string}
     * @memberof ProjectMetadata
     */
    'state': ProjectMetadataStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectMetadata
     */
    'subscription_id'?: string | null;
    /**
     * Last Time Project was Updated
     * @type {string}
     * @memberof ProjectMetadata
     */
    'updated_at': string;
}

export const ProjectMetadataStateEnum = {
    Running: 'running',
    Halted: 'halted'
} as const;

export type ProjectMetadataStateEnum = typeof ProjectMetadataStateEnum[keyof typeof ProjectMetadataStateEnum];

/**
 * 
 * @export
 * @interface ProjectServiceIdentity
 */
export interface ProjectServiceIdentity {
    /**
     * 
     * @type {object}
     * @memberof ProjectServiceIdentity
     */
    'config': object;
}
/**
 * 
 * @export
 * @interface ProjectServiceOAuth2
 */
export interface ProjectServiceOAuth2 {
    /**
     * 
     * @type {object}
     * @memberof ProjectServiceOAuth2
     */
    'config': object;
}
/**
 * 
 * @export
 * @interface ProjectServicePermission
 */
export interface ProjectServicePermission {
    /**
     * 
     * @type {object}
     * @memberof ProjectServicePermission
     */
    'config': object;
}
/**
 * 
 * @export
 * @interface ProjectServices
 */
export interface ProjectServices {
    /**
     * 
     * @type {ProjectServiceIdentity}
     * @memberof ProjectServices
     */
    'identity'?: ProjectServiceIdentity;
    /**
     * 
     * @type {ProjectServiceOAuth2}
     * @memberof ProjectServices
     */
    'oauth2'?: ProjectServiceOAuth2;
    /**
     * 
     * @type {ProjectServicePermission}
     * @memberof ProjectServices
     */
    'permission'?: ProjectServicePermission;
}
/**
 * 
 * @export
 * @interface QuotaUsage
 */
export interface QuotaUsage {
    /**
     * 
     * @type {number}
     * @memberof QuotaUsage
     */
    'additional_price': number;
    /**
     * 
     * @type {boolean}
     * @memberof QuotaUsage
     */
    'can_use_more': boolean;
    /**
     *  region_eu RegionEU region_us RegionUS region_apac RegionAPAC region_global RegionGlobal production_projects ProductionProjects daily_active_users DailyActiveUsers custom_domains CustomDomains sla SLA collaborator_seats CollaboratorSeats edge_cache EdgeCache branding_themes BrandingThemes zendesk_support ZendeskSupport rate_limit_tier RateLimitTier session_rate_limit_tier RateLimitTierSessions
     * @type {string}
     * @memberof QuotaUsage
     */
    'feature': QuotaUsageFeatureEnum;
    /**
     * 
     * @type {boolean}
     * @memberof QuotaUsage
     */
    'feature_available': boolean;
    /**
     * 
     * @type {number}
     * @memberof QuotaUsage
     */
    'included': number;
    /**
     * 
     * @type {number}
     * @memberof QuotaUsage
     */
    'used': number;
}

export const QuotaUsageFeatureEnum = {
    RegionEu: 'region_eu',
    RegionUs: 'region_us',
    RegionApac: 'region_apac',
    RegionGlobal: 'region_global',
    ProductionProjects: 'production_projects',
    DailyActiveUsers: 'daily_active_users',
    CustomDomains: 'custom_domains',
    Sla: 'sla',
    CollaboratorSeats: 'collaborator_seats',
    EdgeCache: 'edge_cache',
    BrandingThemes: 'branding_themes',
    ZendeskSupport: 'zendesk_support',
    RateLimitTier: 'rate_limit_tier',
    SessionRateLimitTier: 'session_rate_limit_tier'
} as const;

export type QuotaUsageFeatureEnum = typeof QuotaUsageFeatureEnum[keyof typeof QuotaUsageFeatureEnum];

/**
 * Used when an administrator creates a recovery code for an identity.
 * @export
 * @interface RecoveryCodeForIdentity
 */
export interface RecoveryCodeForIdentity {
    /**
     * Expires At is the timestamp of when the recovery flow expires  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof RecoveryCodeForIdentity
     */
    'expires_at'?: string;
    /**
     * RecoveryCode is the code that can be used to recover the account
     * @type {string}
     * @memberof RecoveryCodeForIdentity
     */
    'recovery_code': string;
    /**
     * RecoveryLink with flow  This link opens the recovery UI with an empty `code` field.
     * @type {string}
     * @memberof RecoveryCodeForIdentity
     */
    'recovery_link': string;
}
/**
 * This request is used when an identity wants to recover their account.  We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
 * @export
 * @interface RecoveryFlow
 */
export interface RecoveryFlow {
    /**
     * Active, if set, contains the recovery method that is being used. It is initially not set.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'expires_at': string;
    /**
     * ID represents the request\'s unique ID. When performing the recovery flow, this represents the id in the recovery ui\'s query parameter: http://<selfservice.flows.recovery.ui_url>?request=<id>
     * @type {string}
     * @memberof RecoveryFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'issued_at': string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'return_to'?: string;
    /**
     * 
     * @type {RecoveryFlowState}
     * @memberof RecoveryFlow
     */
    'state': RecoveryFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof RecoveryFlow
     */
    'type': string;
    /**
     * 
     * @type {UiContainer}
     * @memberof RecoveryFlow
     */
    'ui': UiContainer;
}
/**
 * The state represents the state of the recovery flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */

export const RecoveryFlowState = {
    ChooseMethod: 'choose_method',
    SentEmail: 'sent_email',
    PassedChallenge: 'passed_challenge'
} as const;

export type RecoveryFlowState = typeof RecoveryFlowState[keyof typeof RecoveryFlowState];


/**
 * 
 * @export
 * @interface RecoveryIdentityAddress
 */
export interface RecoveryIdentityAddress {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'id': string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof RecoveryIdentityAddress
     */
    'via': string;
}
/**
 * Used when an administrator creates a recovery link for an identity.
 * @export
 * @interface RecoveryLinkForIdentity
 */
export interface RecoveryLinkForIdentity {
    /**
     * Recovery Link Expires At  The timestamp when the recovery link expires.
     * @type {string}
     * @memberof RecoveryLinkForIdentity
     */
    'expires_at'?: string;
    /**
     * Recovery Link  This link can be used to recover the account.
     * @type {string}
     * @memberof RecoveryLinkForIdentity
     */
    'recovery_link': string;
}
/**
 * 
 * @export
 * @interface RegistrationFlow
 */
export interface RegistrationFlow {
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof RegistrationFlow
     */
    'active'?: IdentityCredentialsType;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
     * @type {string}
     * @memberof RegistrationFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the registration flow, this represents the id in the registration ui\'s query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id>
     * @type {string}
     * @memberof RegistrationFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof RegistrationFlow
     */
    'issued_at': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationFlow
     */
    'oauth2_login_challenge'?: string | null;
    /**
     * 
     * @type {OAuth2LoginRequest}
     * @memberof RegistrationFlow
     */
    'oauth2_login_request'?: OAuth2LoginRequest;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof RegistrationFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof RegistrationFlow
     */
    'return_to'?: string;
    /**
     * TransientPayload is used to pass data from the registration to a webhook
     * @type {object}
     * @memberof RegistrationFlow
     */
    'transient_payload'?: object;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof RegistrationFlow
     */
    'type': string;
    /**
     * 
     * @type {UiContainer}
     * @memberof RegistrationFlow
     */
    'ui': UiContainer;
}
/**
 * 
 * @export
 * @interface RejectOAuth2Request
 */
export interface RejectOAuth2Request {
    /**
     * The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).  Defaults to `request_denied`.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error'?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_debug'?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_description'?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    'error_hint'?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403)  Defaults to 400
     * @type {number}
     * @memberof RejectOAuth2Request
     */
    'status_code'?: number;
}
/**
 * Relation Query
 * @export
 * @interface RelationQuery
 */
export interface RelationQuery {
    /**
     * Namespace to query
     * @type {string}
     * @memberof RelationQuery
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof RelationQuery
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof RelationQuery
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof RelationQuery
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof RelationQuery
     */
    'subject_set'?: SubjectSet;
}
/**
 * Relationship
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * Namespace of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'namespace': string;
    /**
     * Object of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'object': string;
    /**
     * Relation of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'relation': string;
    /**
     * SubjectID of the Relation Tuple  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof Relationship
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof Relationship
     */
    'subject_set'?: SubjectSet;
}
/**
 * Relationship Namespace List
 * @export
 * @interface RelationshipNamespaces
 */
export interface RelationshipNamespaces {
    /**
     * 
     * @type {Array<Namespace>}
     * @memberof RelationshipNamespaces
     */
    'namespaces'?: Array<Namespace>;
}
/**
 * Payload for patching a relationship
 * @export
 * @interface RelationshipPatch
 */
export interface RelationshipPatch {
    /**
     * 
     * @type {string}
     * @memberof RelationshipPatch
     */
    'action'?: RelationshipPatchActionEnum;
    /**
     * 
     * @type {Relationship}
     * @memberof RelationshipPatch
     */
    'relation_tuple'?: Relationship;
}

export const RelationshipPatchActionEnum = {
    Insert: 'insert',
    Delete: 'delete'
} as const;

export type RelationshipPatchActionEnum = typeof RelationshipPatchActionEnum[keyof typeof RelationshipPatchActionEnum];

/**
 * Paginated Relationship List
 * @export
 * @interface Relationships
 */
export interface Relationships {
    /**
     * The opaque token to provide in a subsequent request to get the next page. It is the empty string iff this is the last page.
     * @type {string}
     * @memberof Relationships
     */
    'next_page_token'?: string;
    /**
     * 
     * @type {Array<Relationship>}
     * @memberof Relationships
     */
    'relation_tuples'?: Array<Relationship>;
}
/**
 * 
 * @export
 * @interface SchemaPatch
 */
export interface SchemaPatch {
    /**
     * The json schema
     * @type {object}
     * @memberof SchemaPatch
     */
    'data': object;
    /**
     * The user defined schema name
     * @type {string}
     * @memberof SchemaPatch
     */
    'name': string;
}
/**
 * Is sent when a flow is expired
 * @export
 * @interface SelfServiceFlowExpiredError
 */
export interface SelfServiceFlowExpiredError {
    /**
     * The status code
     * @type {number}
     * @memberof SelfServiceFlowExpiredError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof SelfServiceFlowExpiredError
     */
    'details'?: { [key: string]: any; };
    /**
     * When the flow has expired
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'expired_at'?: string;
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'request'?: string;
    /**
     * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
     * @type {number}
     * @memberof SelfServiceFlowExpiredError
     */
    'since'?: number;
    /**
     * The status description
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'status'?: string;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     * @type {string}
     * @memberof SelfServiceFlowExpiredError
     */
    'use_flow_id'?: string;
}
/**
 * A Session
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * Active state. If false the session is no longer active.
     * @type {boolean}
     * @memberof Session
     */
    'active'?: boolean;
    /**
     * The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
     * @type {string}
     * @memberof Session
     */
    'authenticated_at'?: string;
    /**
     * A list of authenticators which were used to authenticate the session.
     * @type {Array<SessionAuthenticationMethod>}
     * @memberof Session
     */
    'authentication_methods'?: Array<SessionAuthenticationMethod>;
    /**
     * 
     * @type {AuthenticatorAssuranceLevel}
     * @memberof Session
     */
    'authenticator_assurance_level'?: AuthenticatorAssuranceLevel;
    /**
     * Devices has history of all endpoints where the session was used
     * @type {Array<SessionDevice>}
     * @memberof Session
     */
    'devices'?: Array<SessionDevice>;
    /**
     * The Session Expiry  When this session expires at.
     * @type {string}
     * @memberof Session
     */
    'expires_at'?: string;
    /**
     * Session ID
     * @type {string}
     * @memberof Session
     */
    'id': string;
    /**
     * 
     * @type {Identity}
     * @memberof Session
     */
    'identity': Identity;
    /**
     * The Session Issuance Timestamp  When this session was issued at. Usually equal or close to `authenticated_at`.
     * @type {string}
     * @memberof Session
     */
    'issued_at'?: string;
}
/**
 * A singular authenticator used during authentication / login.
 * @export
 * @interface SessionAuthenticationMethod
 */
export interface SessionAuthenticationMethod {
    /**
     * 
     * @type {AuthenticatorAssuranceLevel}
     * @memberof SessionAuthenticationMethod
     */
    'aal'?: AuthenticatorAssuranceLevel;
    /**
     * When the authentication challenge was completed.
     * @type {string}
     * @memberof SessionAuthenticationMethod
     */
    'completed_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionAuthenticationMethod
     */
    'method'?: SessionAuthenticationMethodMethodEnum;
}

export const SessionAuthenticationMethodMethodEnum = {
    LinkRecovery: 'link_recovery',
    CodeRecovery: 'code_recovery',
    Password: 'password',
    Totp: 'totp',
    Oidc: 'oidc',
    Webauthn: 'webauthn',
    LookupSecret: 'lookup_secret',
    V06LegacySession: 'v0.6_legacy_session'
} as const;

export type SessionAuthenticationMethodMethodEnum = typeof SessionAuthenticationMethodMethodEnum[keyof typeof SessionAuthenticationMethodMethodEnum];

/**
 * Device corresponding to a Session
 * @export
 * @interface SessionDevice
 */
export interface SessionDevice {
    /**
     * Device record ID
     * @type {string}
     * @memberof SessionDevice
     */
    'id': string;
    /**
     * IPAddress of the client
     * @type {string}
     * @memberof SessionDevice
     */
    'ip_address'?: string;
    /**
     * Geo Location corresponding to the IP Address
     * @type {string}
     * @memberof SessionDevice
     */
    'location'?: string;
    /**
     * UserAgent of the client
     * @type {string}
     * @memberof SessionDevice
     */
    'user_agent'?: string;
}
/**
 * Set active project in the Ory Network Console Request Body
 * @export
 * @interface SetActiveProjectInConsoleBody
 */
export interface SetActiveProjectInConsoleBody {
    /**
     * Project ID  The Project ID you want to set active.  format: uuid
     * @type {string}
     * @memberof SetActiveProjectInConsoleBody
     */
    'project_id': string;
}
/**
 * Update Custom Hostname Body
 * @export
 * @interface SetCustomDomainBody
 */
export interface SetCustomDomainBody {
    /**
     * The domain where cookies will be set. Has to be a parent domain of the custom hostname to work.
     * @type {string}
     * @memberof SetCustomDomainBody
     */
    'cookie_domain'?: string;
    /**
     * CORS Allowed origins for the custom hostname.
     * @type {Array<string>}
     * @memberof SetCustomDomainBody
     */
    'cors_allowed_origins'?: Array<string>;
    /**
     * CORS Enabled for the custom hostname.
     * @type {boolean}
     * @memberof SetCustomDomainBody
     */
    'cors_enabled'?: boolean;
    /**
     * The custom UI base URL where the UI will be exposed.
     * @type {string}
     * @memberof SetCustomDomainBody
     */
    'custom_ui_base_url'?: string;
    /**
     * The custom hostname where the API will be exposed.
     * @type {string}
     * @memberof SetCustomDomainBody
     */
    'hostname'?: string;
}
/**
 * 
 * @export
 * @interface SetProject
 */
export interface SetProject {
    /**
     * The name of the project.
     * @type {string}
     * @memberof SetProject
     */
    'name': string;
    /**
     * 
     * @type {ProjectServices}
     * @memberof SetProject
     */
    'services': ProjectServices;
}
/**
 * Set Project Branding Theme Request Parameters
 * @export
 * @interface SetProjectBrandingThemeBody
 */
export interface SetProjectBrandingThemeBody {
    /**
     * Logo type
     * @type {string}
     * @memberof SetProjectBrandingThemeBody
     */
    'logo_type'?: string;
    /**
     * Logo URL
     * @type {string}
     * @memberof SetProjectBrandingThemeBody
     */
    'logo_url'?: string;
    /**
     * Branding name
     * @type {string}
     * @memberof SetProjectBrandingThemeBody
     */
    'name'?: string;
    /**
     * 
     * @type {ProjectBrandingColors}
     * @memberof SetProjectBrandingThemeBody
     */
    'theme'?: ProjectBrandingColors;
}
/**
 * This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 * @export
 * @interface SettingsFlow
 */
export interface SettingsFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof SettingsFlow
     */
    'active'?: string;
    /**
     * Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user\'s registration.
     * @type {Array<ContinueWith>}
     * @memberof SettingsFlow
     */
    'continue_with'?: Array<ContinueWith>;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
     * @type {string}
     * @memberof SettingsFlow
     */
    'expires_at': string;
    /**
     * ID represents the flow\'s unique ID. When performing the settings flow, this represents the id in the settings ui\'s query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
     * @type {string}
     * @memberof SettingsFlow
     */
    'id': string;
    /**
     * 
     * @type {Identity}
     * @memberof SettingsFlow
     */
    'identity': Identity;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {string}
     * @memberof SettingsFlow
     */
    'issued_at': string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof SettingsFlow
     */
    'request_url': string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof SettingsFlow
     */
    'return_to'?: string;
    /**
     * 
     * @type {SettingsFlowState}
     * @memberof SettingsFlow
     */
    'state': SettingsFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof SettingsFlow
     */
    'type': string;
    /**
     * 
     * @type {UiContainer}
     * @memberof SettingsFlow
     */
    'ui': UiContainer;
}
/**
 * show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
 * @export
 * @enum {string}
 */

export const SettingsFlowState = {
    ShowForm: 'show_form',
    Success: 'success'
} as const;

export type SettingsFlowState = typeof SettingsFlowState[keyof typeof SettingsFlowState];


/**
 * 
 * @export
 * @interface SourcePosition
 */
export interface SourcePosition {
    /**
     * 
     * @type {number}
     * @memberof SourcePosition
     */
    'Line'?: number;
    /**
     * 
     * @type {number}
     * @memberof SourcePosition
     */
    'column'?: number;
}
/**
 * 
 * @export
 * @interface StripeCustomer
 */
export interface StripeCustomer {
    /**
     * 
     * @type {string}
     * @memberof StripeCustomer
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface SubjectSet
 */
export interface SubjectSet {
    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'namespace': string;
    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'object': string;
    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'relation': string;
}
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'created_at': string;
    /**
     * The currently active interval of the subscription monthly Monthly yearly Yearly
     * @type {string}
     * @memberof Subscription
     */
    'current_interval': SubscriptionCurrentIntervalEnum;
    /**
     * The currently active plan of the subscription
     * @type {string}
     * @memberof Subscription
     */
    'current_plan': string;
    /**
     * The ID of the stripe customer
     * @type {string}
     * @memberof Subscription
     */
    'customer_id': string;
    /**
     * The ID of the subscription
     * @type {string}
     * @memberof Subscription
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'interval_changes_to': string | null;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'ongoing_stripe_checkout_id'?: string | null;
    /**
     * Until when the subscription is payed
     * @type {string}
     * @memberof Subscription
     */
    'payed_until': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'plan_changes_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'plan_changes_to': string | null;
    /**
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @type {string}
     * @memberof Subscription
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    'updated_at': string;
}

export const SubscriptionCurrentIntervalEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;

export type SubscriptionCurrentIntervalEnum = typeof SubscriptionCurrentIntervalEnum[keyof typeof SubscriptionCurrentIntervalEnum];

/**
 * The Response for Login Flows via API
 * @export
 * @interface SuccessfulNativeLogin
 */
export interface SuccessfulNativeLogin {
    /**
     * 
     * @type {Session}
     * @memberof SuccessfulNativeLogin
     */
    'session': Session;
    /**
     * The Session Token  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulNativeLogin
     */
    'session_token'?: string;
}
/**
 * The Response for Registration Flows via API
 * @export
 * @interface SuccessfulNativeRegistration
 */
export interface SuccessfulNativeRegistration {
    /**
     * Contains a list of actions, that could follow this flow  It can, for example, this will contain a reference to the verification flow, created as part of the user\'s registration or the token of the session.
     * @type {Array<ContinueWith>}
     * @memberof SuccessfulNativeRegistration
     */
    'continue_with'?: Array<ContinueWith>;
    /**
     * 
     * @type {Identity}
     * @memberof SuccessfulNativeRegistration
     */
    'identity': Identity;
    /**
     * 
     * @type {Session}
     * @memberof SuccessfulNativeRegistration
     */
    'session'?: Session;
    /**
     * The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
     * @type {string}
     * @memberof SuccessfulNativeRegistration
     */
    'session_token'?: string;
}
/**
 * 
 * @export
 * @interface SuccessfulProjectUpdate
 */
export interface SuccessfulProjectUpdate {
    /**
     * 
     * @type {Project}
     * @memberof SuccessfulProjectUpdate
     */
    'project': Project;
    /**
     * Import Warnings  Not all configuration items can be imported to the Ory Network. For example, setting the port does not make sense because the Ory Network provides the runtime and networking.  This field contains warnings where configuration keys were found but can not be imported. These keys will be ignored by the Ory Network. This field will help you understand why certain configuration keys might not be respected!
     * @type {Array<Warning>}
     * @memberof SuccessfulProjectUpdate
     */
    'warnings': Array<Warning>;
}
/**
 * 
 * @export
 * @interface TokenPagination
 */
export interface TokenPagination {
    /**
     * Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof TokenPagination
     */
    'page_size'?: number;
    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof TokenPagination
     */
    'page_token'?: string;
}
/**
 * 
 * @export
 * @interface TokenPaginationHeaders
 */
export interface TokenPaginationHeaders {
    /**
     * The link header contains pagination links.  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).  in: header
     * @type {string}
     * @memberof TokenPaginationHeaders
     */
    'link'?: string;
    /**
     * The total number of clients.  in: header
     * @type {string}
     * @memberof TokenPaginationHeaders
     */
    'x-total-count'?: string;
}
/**
 * The `Link` HTTP header contains multiple links (`first`, `next`, `last`, `previous`) formatted as: `<https://{project-slug}.projects.oryapis.com/admin/clients?page_size={limit}&page_token={offset}>; rel=\"{page}\"`  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
 * @export
 * @interface TokenPaginationRequestParameters
 */
export interface TokenPaginationRequestParameters {
    /**
     * Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof TokenPaginationRequestParameters
     */
    'page_size'?: number;
    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof TokenPaginationRequestParameters
     */
    'page_token'?: string;
}
/**
 * The `Link` HTTP header contains multiple links (`first`, `next`, `last`, `previous`) formatted as: `<https://{project-slug}.projects.oryapis.com/admin/clients?page_size={limit}&page_token={offset}>; rel=\"{page}\"`  For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
 * @export
 * @interface TokenPaginationResponseHeaders
 */
export interface TokenPaginationResponseHeaders {
    /**
     * The Link HTTP Header  The `Link` header contains a comma-delimited list of links to the following pages:  first: The first page of results. next: The next page of results. prev: The previous page of results. last: The last page of results.  Pages are omitted if they do not exist. For example, if there is no next page, the `next` link is omitted. Examples:  </clients?page_size=5&page_token=0>; rel=\"first\",</clients?page_size=5&page_token=15>; rel=\"next\",</clients?page_size=5&page_token=5>; rel=\"prev\",</clients?page_size=5&page_token=20>; rel=\"last\"
     * @type {string}
     * @memberof TokenPaginationResponseHeaders
     */
    'link'?: string;
    /**
     * The X-Total-Count HTTP Header  The `X-Total-Count` header contains the total number of items in the collection.
     * @type {number}
     * @memberof TokenPaginationResponseHeaders
     */
    'x-total-count'?: number;
}
/**
 * Trust OAuth2 JWT Bearer Grant Type Issuer Request Body
 * @export
 * @interface TrustOAuth2JwtGrantIssuer
 */
export interface TrustOAuth2JwtGrantIssuer {
    /**
     * The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.
     * @type {boolean}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'allow_any_subject'?: boolean;
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'expires_at': string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'issuer': string;
    /**
     * 
     * @type {JsonWebKey}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'jwk': JsonWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'scope': Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof TrustOAuth2JwtGrantIssuer
     */
    'subject'?: string;
}
/**
 * OAuth2 JWT Bearer Grant Type Issuer Trust Relationship
 * @export
 * @interface TrustedOAuth2JwtGrantIssuer
 */
export interface TrustedOAuth2JwtGrantIssuer {
    /**
     * The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.
     * @type {boolean}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'allow_any_subject'?: boolean;
    /**
     * The \"created_at\" indicates, when grant was created.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'created_at'?: string;
    /**
     * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'id'?: string;
    /**
     * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'issuer'?: string;
    /**
     * 
     * @type {TrustedOAuth2JwtGrantJsonWebKey}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'public_key'?: TrustedOAuth2JwtGrantJsonWebKey;
    /**
     * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
     * @type {Array<string>}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'scope'?: Array<string>;
    /**
     * The \"subject\" identifies the principal that is the subject of the JWT.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantIssuer
     */
    'subject'?: string;
}
/**
 * OAuth2 JWT Bearer Grant Type Issuer Trusted JSON Web Key
 * @export
 * @interface TrustedOAuth2JwtGrantJsonWebKey
 */
export interface TrustedOAuth2JwtGrantJsonWebKey {
    /**
     * The \"key_id\" is key unique identifier (same as kid header in jws/jwt).
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantJsonWebKey
     */
    'kid'?: string;
    /**
     * The \"set\" is basically a name for a group(set) of keys. Will be the same as \"issuer\" in grant.
     * @type {string}
     * @memberof TrustedOAuth2JwtGrantJsonWebKey
     */
    'set'?: string;
}
/**
 * Container represents a HTML Form. The container can work with both HTTP Form and JSON requests
 * @export
 * @interface UiContainer
 */
export interface UiContainer {
    /**
     * Action should be used as the form action URL `<form action=\"{{ .Action }}\" method=\"post\">`.
     * @type {string}
     * @memberof UiContainer
     */
    'action': string;
    /**
     * 
     * @type {Array<UiText>}
     * @memberof UiContainer
     */
    'messages'?: Array<UiText>;
    /**
     * Method is the form method (e.g. POST)
     * @type {string}
     * @memberof UiContainer
     */
    'method': string;
    /**
     * 
     * @type {Array<UiNode>}
     * @memberof UiContainer
     */
    'nodes': Array<UiNode>;
}
/**
 * Nodes are represented as HTML elements or their native UI equivalents. For example, a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
 * @export
 * @interface UiNode
 */
export interface UiNode {
    /**
     * 
     * @type {UiNodeAttributes}
     * @memberof UiNode
     */
    'attributes': UiNodeAttributes;
    /**
     * Group specifies which group (e.g. password authenticator) this node belongs to. default DefaultGroup password PasswordGroup oidc OpenIDConnectGroup profile ProfileGroup link LinkGroup code CodeGroup totp TOTPGroup lookup_secret LookupGroup webauthn WebAuthnGroup
     * @type {string}
     * @memberof UiNode
     */
    'group': UiNodeGroupEnum;
    /**
     * 
     * @type {Array<UiText>}
     * @memberof UiNode
     */
    'messages': Array<UiText>;
    /**
     * 
     * @type {UiNodeMeta}
     * @memberof UiNode
     */
    'meta': UiNodeMeta;
    /**
     * The node\'s type text Text input Input img Image a Anchor script Script
     * @type {string}
     * @memberof UiNode
     */
    'type': UiNodeTypeEnum;
}

export const UiNodeGroupEnum = {
    Default: 'default',
    Password: 'password',
    Oidc: 'oidc',
    Profile: 'profile',
    Link: 'link',
    Code: 'code',
    Totp: 'totp',
    LookupSecret: 'lookup_secret',
    Webauthn: 'webauthn'
} as const;

export type UiNodeGroupEnum = typeof UiNodeGroupEnum[keyof typeof UiNodeGroupEnum];
export const UiNodeTypeEnum = {
    Text: 'text',
    Input: 'input',
    Img: 'img',
    A: 'a',
    Script: 'script'
} as const;

export type UiNodeTypeEnum = typeof UiNodeTypeEnum[keyof typeof UiNodeTypeEnum];

/**
 * 
 * @export
 * @interface UiNodeAnchorAttributes
 */
export interface UiNodeAnchorAttributes {
    /**
     * The link\'s href (destination) URL.  format: uri
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'href': string;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"a\".
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    'node_type': string;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeAnchorAttributes
     */
    'title': UiText;
}
/**
 * @type UiNodeAttributes
 * @export
 */
export type UiNodeAttributes = UiNodeAnchorAttributes | UiNodeImageAttributes | UiNodeInputAttributes | UiNodeScriptAttributes | UiNodeTextAttributes;

/**
 * 
 * @export
 * @interface UiNodeImageAttributes
 */
export interface UiNodeImageAttributes {
    /**
     * Height of the image
     * @type {number}
     * @memberof UiNodeImageAttributes
     */
    'height': number;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"img\".
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'node_type': string;
    /**
     * The image\'s source URL.  format: uri
     * @type {string}
     * @memberof UiNodeImageAttributes
     */
    'src': string;
    /**
     * Width of the image
     * @type {number}
     * @memberof UiNodeImageAttributes
     */
    'width': number;
}
/**
 * InputAttributes represents the attributes of an input node
 * @export
 * @interface UiNodeInputAttributes
 */
export interface UiNodeInputAttributes {
    /**
     * The autocomplete attribute for the input. email InputAttributeAutocompleteEmail tel InputAttributeAutocompleteTel url InputAttributeAutocompleteUrl current-password InputAttributeAutocompleteCurrentPassword new-password InputAttributeAutocompleteNewPassword one-time-code InputAttributeAutocompleteOneTimeCode
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'autocomplete'?: UiNodeInputAttributesAutocompleteEnum;
    /**
     * Sets the input\'s disabled field to true or false.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    'disabled': boolean;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeInputAttributes
     */
    'label'?: UiText;
    /**
     * The input\'s element name.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'name': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"input\".
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'node_type': string;
    /**
     * OnClick may contain javascript which should be executed on click. This is primarily used for WebAuthn.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'onclick'?: string;
    /**
     * The input\'s pattern.
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'pattern'?: string;
    /**
     * Mark this input field as required.
     * @type {boolean}
     * @memberof UiNodeInputAttributes
     */
    'required'?: boolean;
    /**
     * The input\'s element type. text InputAttributeTypeText password InputAttributeTypePassword number InputAttributeTypeNumber checkbox InputAttributeTypeCheckbox hidden InputAttributeTypeHidden email InputAttributeTypeEmail tel InputAttributeTypeTel submit InputAttributeTypeSubmit button InputAttributeTypeButton datetime-local InputAttributeTypeDateTimeLocal date InputAttributeTypeDate url InputAttributeTypeURI
     * @type {string}
     * @memberof UiNodeInputAttributes
     */
    'type': UiNodeInputAttributesTypeEnum;
    /**
     * The input\'s value.
     * @type {any}
     * @memberof UiNodeInputAttributes
     */
    'value'?: any | null;
}

export const UiNodeInputAttributesAutocompleteEnum = {
    Email: 'email',
    Tel: 'tel',
    Url: 'url',
    CurrentPassword: 'current-password',
    NewPassword: 'new-password',
    OneTimeCode: 'one-time-code'
} as const;

export type UiNodeInputAttributesAutocompleteEnum = typeof UiNodeInputAttributesAutocompleteEnum[keyof typeof UiNodeInputAttributesAutocompleteEnum];
export const UiNodeInputAttributesTypeEnum = {
    Text: 'text',
    Password: 'password',
    Number: 'number',
    Checkbox: 'checkbox',
    Hidden: 'hidden',
    Email: 'email',
    Tel: 'tel',
    Submit: 'submit',
    Button: 'button',
    DatetimeLocal: 'datetime-local',
    Date: 'date',
    Url: 'url'
} as const;

export type UiNodeInputAttributesTypeEnum = typeof UiNodeInputAttributesTypeEnum[keyof typeof UiNodeInputAttributesTypeEnum];

/**
 * This might include a label and other information that can optionally be used to render UIs.
 * @export
 * @interface UiNodeMeta
 */
export interface UiNodeMeta {
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeMeta
     */
    'label'?: UiText;
}
/**
 * 
 * @export
 * @interface UiNodeScriptAttributes
 */
export interface UiNodeScriptAttributes {
    /**
     * The script async type
     * @type {boolean}
     * @memberof UiNodeScriptAttributes
     */
    'async': boolean;
    /**
     * The script cross origin policy
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'crossorigin': string;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'id': string;
    /**
     * The script\'s integrity hash
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'integrity': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is \"script\".
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'node_type': string;
    /**
     * Nonce for CSP  A nonce you may want to use to improve your Content Security Policy. You do not have to use this value but if you want to improve your CSP policies you may use it. You can also choose to use your own nonce value!
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'nonce': string;
    /**
     * The script referrer policy
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'referrerpolicy': string;
    /**
     * The script source
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'src': string;
    /**
     * The script MIME type
     * @type {string}
     * @memberof UiNodeScriptAttributes
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface UiNodeTextAttributes
 */
export interface UiNodeTextAttributes {
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    'id': string;
    /**
     * NodeType represents this node\'s types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"text\".
     * @type {string}
     * @memberof UiNodeTextAttributes
     */
    'node_type': string;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeTextAttributes
     */
    'text': UiText;
}
/**
 * 
 * @export
 * @interface UiText
 */
export interface UiText {
    /**
     * The message\'s context. Useful when customizing messages.
     * @type {object}
     * @memberof UiText
     */
    'context'?: object;
    /**
     * 
     * @type {number}
     * @memberof UiText
     */
    'id': number;
    /**
     * The message text. Written in american english.
     * @type {string}
     * @memberof UiText
     */
    'text': string;
    /**
     * The message type. info Info error Error success Success
     * @type {string}
     * @memberof UiText
     */
    'type': UiTextTypeEnum;
}

export const UiTextTypeEnum = {
    Info: 'info',
    Error: 'error',
    Success: 'success'
} as const;

export type UiTextTypeEnum = typeof UiTextTypeEnum[keyof typeof UiTextTypeEnum];

/**
 * Update Identity Body
 * @export
 * @interface UpdateIdentityBody
 */
export interface UpdateIdentityBody {
    /**
     * 
     * @type {IdentityWithCredentials}
     * @memberof UpdateIdentityBody
     */
    'credentials'?: IdentityWithCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     * @type {any}
     * @memberof UpdateIdentityBody
     */
    'metadata_admin'?: any;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     * @type {any}
     * @memberof UpdateIdentityBody
     */
    'metadata_public'?: any;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity\'s traits. If set will update the Identity\'s SchemaID.
     * @type {string}
     * @memberof UpdateIdentityBody
     */
    'schema_id': string;
    /**
     * 
     * @type {IdentityState}
     * @memberof UpdateIdentityBody
     */
    'state': IdentityState;
    /**
     * Traits represent an identity\'s traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_id`.
     * @type {object}
     * @memberof UpdateIdentityBody
     */
    'traits': object;
}
/**
 * @type UpdateLoginFlowBody
 * @export
 */
export type UpdateLoginFlowBody = UpdateLoginFlowWithLookupSecretMethod | UpdateLoginFlowWithOidcMethod | UpdateLoginFlowWithPasswordMethod | UpdateLoginFlowWithTotpMethod | UpdateLoginFlowWithWebAuthnMethod;

/**
 * Update Login Flow with Lookup Secret Method
 * @export
 * @interface UpdateLoginFlowWithLookupSecretMethod
 */
export interface UpdateLoginFlowWithLookupSecretMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateLoginFlowWithLookupSecretMethod
     */
    'csrf_token'?: string;
    /**
     * The lookup secret.
     * @type {string}
     * @memberof UpdateLoginFlowWithLookupSecretMethod
     */
    'lookup_secret': string;
    /**
     * Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy.
     * @type {string}
     * @memberof UpdateLoginFlowWithLookupSecretMethod
     */
    'method': string;
}
/**
 * Update Login Flow with OpenID Connect Method
 * @export
 * @interface UpdateLoginFlowWithOidcMethod
 */
export interface UpdateLoginFlowWithOidcMethod {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof UpdateLoginFlowWithOidcMethod
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof UpdateLoginFlowWithOidcMethod
     */
    'method': string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof UpdateLoginFlowWithOidcMethod
     */
    'provider': string;
    /**
     * The identity traits. This is a placeholder for the registration flow.
     * @type {object}
     * @memberof UpdateLoginFlowWithOidcMethod
     */
    'traits'?: object;
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * @type {object}
     * @memberof UpdateLoginFlowWithOidcMethod
     */
    'upstream_parameters'?: object;
}
/**
 * Update Login Flow with Password Method
 * @export
 * @interface UpdateLoginFlowWithPasswordMethod
 */
export interface UpdateLoginFlowWithPasswordMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateLoginFlowWithPasswordMethod
     */
    'csrf_token'?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof UpdateLoginFlowWithPasswordMethod
     */
    'identifier': string;
    /**
     * Method should be set to \"password\" when logging in using the identifier and password strategy.
     * @type {string}
     * @memberof UpdateLoginFlowWithPasswordMethod
     */
    'method': string;
    /**
     * The user\'s password.
     * @type {string}
     * @memberof UpdateLoginFlowWithPasswordMethod
     */
    'password': string;
    /**
     * Identifier is the email or username of the user trying to log in. This field is deprecated!
     * @type {string}
     * @memberof UpdateLoginFlowWithPasswordMethod
     */
    'password_identifier'?: string;
}
/**
 * Update Login Flow with TOTP Method
 * @export
 * @interface UpdateLoginFlowWithTotpMethod
 */
export interface UpdateLoginFlowWithTotpMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateLoginFlowWithTotpMethod
     */
    'csrf_token'?: string;
    /**
     * Method should be set to \"totp\" when logging in using the TOTP strategy.
     * @type {string}
     * @memberof UpdateLoginFlowWithTotpMethod
     */
    'method': string;
    /**
     * The TOTP code.
     * @type {string}
     * @memberof UpdateLoginFlowWithTotpMethod
     */
    'totp_code': string;
}
/**
 * Update Login Flow with WebAuthn Method
 * @export
 * @interface UpdateLoginFlowWithWebAuthnMethod
 */
export interface UpdateLoginFlowWithWebAuthnMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateLoginFlowWithWebAuthnMethod
     */
    'csrf_token'?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * @type {string}
     * @memberof UpdateLoginFlowWithWebAuthnMethod
     */
    'identifier': string;
    /**
     * Method should be set to \"webAuthn\" when logging in using the WebAuthn strategy.
     * @type {string}
     * @memberof UpdateLoginFlowWithWebAuthnMethod
     */
    'method': string;
    /**
     * Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
     * @type {string}
     * @memberof UpdateLoginFlowWithWebAuthnMethod
     */
    'webauthn_login'?: string;
}
/**
 * @type UpdateRecoveryFlowBody
 * Update Recovery Flow Request Body
 * @export
 */
export type UpdateRecoveryFlowBody = UpdateRecoveryFlowWithCodeMethod | UpdateRecoveryFlowWithLinkMethod;

/**
 * Update Recovery Flow with Code Method
 * @export
 * @interface UpdateRecoveryFlowWithCodeMethod
 */
export interface UpdateRecoveryFlowWithCodeMethod {
    /**
     * Code from recovery email  Sent to the user once a recovery has been initiated and is used to prove that the user is in possession of the email
     * @type {string}
     * @memberof UpdateRecoveryFlowWithCodeMethod
     */
    'code'?: string;
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateRecoveryFlowWithCodeMethod
     */
    'csrf_token'?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof UpdateRecoveryFlowWithCodeMethod
     */
    'email'?: string;
    /**
     * Method supports `link` and `code` only right now.
     * @type {string}
     * @memberof UpdateRecoveryFlowWithCodeMethod
     */
    'method': string;
}
/**
 * Update Recovery Flow with Link Method
 * @export
 * @interface UpdateRecoveryFlowWithLinkMethod
 */
export interface UpdateRecoveryFlowWithLinkMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateRecoveryFlowWithLinkMethod
     */
    'csrf_token'?: string;
    /**
     * Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof UpdateRecoveryFlowWithLinkMethod
     */
    'email': string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof UpdateRecoveryFlowWithLinkMethod
     */
    'method': string;
}
/**
 * @type UpdateRegistrationFlowBody
 * Update Registration Request Body
 * @export
 */
export type UpdateRegistrationFlowBody = UpdateRegistrationFlowWithOidcMethod | UpdateRegistrationFlowWithPasswordMethod | UpdateRegistrationFlowWithWebAuthnMethod;

/**
 * Update Registration Flow with OpenID Connect Method
 * @export
 * @interface UpdateRegistrationFlowWithOidcMethod
 */
export interface UpdateRegistrationFlowWithOidcMethod {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `oidc` when using the oidc method.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'method': string;
    /**
     * The provider to register with
     * @type {string}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'provider': string;
    /**
     * The identity traits
     * @type {object}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'traits'?: object;
    /**
     * Transient data to pass along to any webhooks
     * @type {object}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'transient_payload'?: object;
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * @type {object}
     * @memberof UpdateRegistrationFlowWithOidcMethod
     */
    'upstream_parameters'?: object;
}
/**
 * Update Registration Flow with Password Method
 * @export
 * @interface UpdateRegistrationFlowWithPasswordMethod
 */
export interface UpdateRegistrationFlowWithPasswordMethod {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    'csrf_token'?: string;
    /**
     * Method to use  This field must be set to `password` when using the password method.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    'method': string;
    /**
     * Password to sign the user up with
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    'password': string;
    /**
     * The identity\'s traits
     * @type {object}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    'traits': object;
    /**
     * Transient data to pass along to any webhooks
     * @type {object}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    'transient_payload'?: object;
}
/**
 * Update Registration Flow with WebAuthn Method
 * @export
 * @interface UpdateRegistrationFlowWithWebAuthnMethod
 */
export interface UpdateRegistrationFlowWithWebAuthnMethod {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'method': string;
    /**
     * The identity\'s traits
     * @type {object}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'traits': object;
    /**
     * Transient data to pass along to any webhooks
     * @type {object}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'transient_payload'?: object;
    /**
     * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'webauthn_register'?: string;
    /**
     * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithWebAuthnMethod
     */
    'webauthn_register_displayname'?: string;
}
/**
 * @type UpdateSettingsFlowBody
 * Update Settings Flow Request Body
 * @export
 */
export type UpdateSettingsFlowBody = UpdateSettingsFlowWithLookupMethod | UpdateSettingsFlowWithOidcMethod | UpdateSettingsFlowWithPasswordMethod | UpdateSettingsFlowWithProfileMethod | UpdateSettingsFlowWithTotpMethod | UpdateSettingsFlowWithWebAuthnMethod;

/**
 * Update Settings Flow with Lookup Method
 * @export
 * @interface UpdateSettingsFlowWithLookupMethod
 */
export interface UpdateSettingsFlowWithLookupMethod {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'csrf_token'?: string;
    /**
     * If set to true will save the regenerated lookup secrets
     * @type {boolean}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'lookup_secret_confirm'?: boolean;
    /**
     * Disables this method if true.
     * @type {boolean}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'lookup_secret_disable'?: boolean;
    /**
     * If set to true will regenerate the lookup secrets
     * @type {boolean}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'lookup_secret_regenerate'?: boolean;
    /**
     * If set to true will reveal the lookup secrets
     * @type {boolean}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'lookup_secret_reveal'?: boolean;
    /**
     * Method  Should be set to \"lookup\" when trying to add, update, or remove a lookup pairing.
     * @type {string}
     * @memberof UpdateSettingsFlowWithLookupMethod
     */
    'method': string;
}
/**
 * Update Settings Flow with OpenID Connect Method
 * @export
 * @interface UpdateSettingsFlowWithOidcMethod
 */
export interface UpdateSettingsFlowWithOidcMethod {
    /**
     * Flow ID is the flow\'s ID.  in: query
     * @type {string}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'flow'?: string;
    /**
     * Link this provider  Either this or `unlink` must be set.  type: string in: body
     * @type {string}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'link'?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'method': string;
    /**
     * The identity\'s traits  in: body
     * @type {object}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'traits'?: object;
    /**
     * Unlink this provider  Either this or `link` must be set.  type: string in: body
     * @type {string}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'unlink'?: string;
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * @type {object}
     * @memberof UpdateSettingsFlowWithOidcMethod
     */
    'upstream_parameters'?: object;
}
/**
 * Update Settings Flow with Password Method
 * @export
 * @interface UpdateSettingsFlowWithPasswordMethod
 */
export interface UpdateSettingsFlowWithPasswordMethod {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof UpdateSettingsFlowWithPasswordMethod
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to password when trying to update a password.
     * @type {string}
     * @memberof UpdateSettingsFlowWithPasswordMethod
     */
    'method': string;
    /**
     * Password is the updated password
     * @type {string}
     * @memberof UpdateSettingsFlowWithPasswordMethod
     */
    'password': string;
}
/**
 * Update Settings Flow with Profile Method
 * @export
 * @interface UpdateSettingsFlowWithProfileMethod
 */
export interface UpdateSettingsFlowWithProfileMethod {
    /**
     * The Anti-CSRF Token  This token is only required when performing browser flows.
     * @type {string}
     * @memberof UpdateSettingsFlowWithProfileMethod
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to profile when trying to update a profile.
     * @type {string}
     * @memberof UpdateSettingsFlowWithProfileMethod
     */
    'method': string;
    /**
     * Traits  The identity\'s traits.
     * @type {object}
     * @memberof UpdateSettingsFlowWithProfileMethod
     */
    'traits': object;
}
/**
 * Update Settings Flow with TOTP Method
 * @export
 * @interface UpdateSettingsFlowWithTotpMethod
 */
export interface UpdateSettingsFlowWithTotpMethod {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof UpdateSettingsFlowWithTotpMethod
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"totp\" when trying to add, update, or remove a totp pairing.
     * @type {string}
     * @memberof UpdateSettingsFlowWithTotpMethod
     */
    'method': string;
    /**
     * ValidationTOTP must contain a valid TOTP based on the
     * @type {string}
     * @memberof UpdateSettingsFlowWithTotpMethod
     */
    'totp_code'?: string;
    /**
     * UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
     * @type {boolean}
     * @memberof UpdateSettingsFlowWithTotpMethod
     */
    'totp_unlink'?: boolean;
}
/**
 * Update Settings Flow with WebAuthn Method
 * @export
 * @interface UpdateSettingsFlowWithWebAuthnMethod
 */
export interface UpdateSettingsFlowWithWebAuthnMethod {
    /**
     * CSRFToken is the anti-CSRF token
     * @type {string}
     * @memberof UpdateSettingsFlowWithWebAuthnMethod
     */
    'csrf_token'?: string;
    /**
     * Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing.
     * @type {string}
     * @memberof UpdateSettingsFlowWithWebAuthnMethod
     */
    'method': string;
    /**
     * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     * @type {string}
     * @memberof UpdateSettingsFlowWithWebAuthnMethod
     */
    'webauthn_register'?: string;
    /**
     * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     * @type {string}
     * @memberof UpdateSettingsFlowWithWebAuthnMethod
     */
    'webauthn_register_displayname'?: string;
    /**
     * Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
     * @type {string}
     * @memberof UpdateSettingsFlowWithWebAuthnMethod
     */
    'webauthn_remove'?: string;
}
/**
 * Update Subscription Request Body
 * @export
 * @interface UpdateSubscriptionBody
 */
export interface UpdateSubscriptionBody {
    /**
     *  monthly Monthly yearly Yearly
     * @type {string}
     * @memberof UpdateSubscriptionBody
     */
    'interval': UpdateSubscriptionBodyIntervalEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubscriptionBody
     */
    'plan': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubscriptionBody
     */
    'return_to'?: string;
}

export const UpdateSubscriptionBodyIntervalEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;

export type UpdateSubscriptionBodyIntervalEnum = typeof UpdateSubscriptionBodyIntervalEnum[keyof typeof UpdateSubscriptionBodyIntervalEnum];

/**
 * @type UpdateVerificationFlowBody
 * Update Verification Flow Request Body
 * @export
 */
export type UpdateVerificationFlowBody = UpdateVerificationFlowWithCodeMethod | UpdateVerificationFlowWithLinkMethod;

/**
 * 
 * @export
 * @interface UpdateVerificationFlowWithCodeMethod
 */
export interface UpdateVerificationFlowWithCodeMethod {
    /**
     * The verification code
     * @type {string}
     * @memberof UpdateVerificationFlowWithCodeMethod
     */
    'code'?: string;
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateVerificationFlowWithCodeMethod
     */
    'csrf_token'?: string;
    /**
     * Email to Verify  Needs to be set when initiating the flow. If the email is a registered verification email, a verification link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof UpdateVerificationFlowWithCodeMethod
     */
    'email'?: string;
    /**
     * The id of the flow
     * @type {string}
     * @memberof UpdateVerificationFlowWithCodeMethod
     */
    'flow'?: string;
    /**
     * Method is the recovery method
     * @type {string}
     * @memberof UpdateVerificationFlowWithCodeMethod
     */
    'method'?: string;
}
/**
 * Update Verification Flow with Link Method
 * @export
 * @interface UpdateVerificationFlowWithLinkMethod
 */
export interface UpdateVerificationFlowWithLinkMethod {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     * @type {string}
     * @memberof UpdateVerificationFlowWithLinkMethod
     */
    'csrf_token'?: string;
    /**
     * Email to Verify  Needs to be set when initiating the flow. If the email is a registered verification email, a verification link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
     * @type {string}
     * @memberof UpdateVerificationFlowWithLinkMethod
     */
    'email': string;
    /**
     * Method supports `link` only right now.
     * @type {string}
     * @memberof UpdateVerificationFlowWithLinkMethod
     */
    'method': string;
}
/**
 * 
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     * 
     * @type {GenericUsage}
     * @memberof Usage
     */
    'GenericUsage'?: GenericUsage;
}
/**
 * VerifiableAddress is an identity\'s verifiable address
 * @export
 * @interface VerifiableIdentityAddress
 */
export interface VerifiableIdentityAddress {
    /**
     * When this entry was created
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'created_at'?: string;
    /**
     * The ID
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'id'?: string;
    /**
     * VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'status': string;
    /**
     * When this entry was last updated
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'updated_at'?: string;
    /**
     * The address value  example foo@user.com
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'value': string;
    /**
     * Indicates if the address has already been verified
     * @type {boolean}
     * @memberof VerifiableIdentityAddress
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'verified_at'?: string;
    /**
     * VerifiableAddressType must not exceed 16 characters as that is the limitation in the SQL Schema
     * @type {string}
     * @memberof VerifiableIdentityAddress
     */
    'via': string;
}
/**
 * Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation
 * @export
 * @interface VerificationFlow
 */
export interface VerificationFlow {
    /**
     * Active, if set, contains the registration method that is being used. It is initially not set.
     * @type {string}
     * @memberof VerificationFlow
     */
    'active'?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.
     * @type {string}
     * @memberof VerificationFlow
     */
    'expires_at'?: string;
    /**
     * ID represents the request\'s unique ID. When performing the verification flow, this represents the id in the verify ui\'s query parameter: http://<selfservice.flows.verification.ui_url>?request=<id>  type: string format: uuid
     * @type {string}
     * @memberof VerificationFlow
     */
    'id': string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     * @type {string}
     * @memberof VerificationFlow
     */
    'issued_at'?: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL\'s path or query for example.
     * @type {string}
     * @memberof VerificationFlow
     */
    'request_url'?: string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof VerificationFlow
     */
    'return_to'?: string;
    /**
     * 
     * @type {VerificationFlowState}
     * @memberof VerificationFlow
     */
    'state': VerificationFlowState;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof VerificationFlow
     */
    'type': string;
    /**
     * 
     * @type {UiContainer}
     * @memberof VerificationFlow
     */
    'ui': UiContainer;
}
/**
 * The state represents the state of the verification flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
 * @export
 * @enum {string}
 */

export const VerificationFlowState = {
    ChooseMethod: 'choose_method',
    SentEmail: 'sent_email',
    PassedChallenge: 'passed_challenge'
} as const;

export type VerificationFlowState = typeof VerificationFlowState[keyof typeof VerificationFlowState];


/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface Warning
 */
export interface Warning {
    /**
     * 
     * @type {number}
     * @memberof Warning
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Warning
     */
    'message'?: string;
}

/**
 * CourierApi - axios parameter creator
 * @export
 */
export const CourierApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a specific messages by the given ID.
         * @summary Get a Message
         * @param {string} id MessageID is the ID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourierMessage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourierMessage', 'id', id)
            const localVarPath = `/admin/courier/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all messages by given status and recipient.
         * @summary List Messages
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourierMessages: async (pageSize?: number, pageToken?: string, status?: CourierMessageStatus, recipient?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/courier/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourierApi - functional programming interface
 * @export
 */
export const CourierApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourierApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a specific messages by the given ID.
         * @summary Get a Message
         * @param {string} id MessageID is the ID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourierMessage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourierMessage(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all messages by given status and recipient.
         * @summary List Messages
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCourierMessages(pageSize?: number, pageToken?: string, status?: CourierMessageStatus, recipient?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCourierMessages(pageSize, pageToken, status, recipient, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CourierApi - factory interface
 * @export
 */
export const CourierApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourierApiFp(configuration)
    return {
        /**
         * Gets a specific messages by the given ID.
         * @summary Get a Message
         * @param {string} id MessageID is the ID of the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourierMessage(id: string, options?: any): AxiosPromise<Message> {
            return localVarFp.getCourierMessage(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all messages by given status and recipient.
         * @summary List Messages
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {CourierMessageStatus} [status] Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {string} [recipient] Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourierMessages(pageSize?: number, pageToken?: string, status?: CourierMessageStatus, recipient?: string, options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.listCourierMessages(pageSize, pageToken, status, recipient, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCourierMessage operation in CourierApi.
 * @export
 * @interface CourierApiGetCourierMessageRequest
 */
export interface CourierApiGetCourierMessageRequest {
    /**
     * MessageID is the ID of the message.
     * @type {string}
     * @memberof CourierApiGetCourierMessage
     */
    readonly id: string
}

/**
 * Request parameters for listCourierMessages operation in CourierApi.
 * @export
 * @interface CourierApiListCourierMessagesRequest
 */
export interface CourierApiListCourierMessagesRequest {
    /**
     * Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof CourierApiListCourierMessages
     */
    readonly pageSize?: number

    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof CourierApiListCourierMessages
     */
    readonly pageToken?: string

    /**
     * Status filters out messages based on status. If no value is provided, it doesn\&#39;t take effect on filter.
     * @type {CourierMessageStatus}
     * @memberof CourierApiListCourierMessages
     */
    readonly status?: CourierMessageStatus

    /**
     * Recipient filters out messages based on recipient. If no value is provided, it doesn\&#39;t take effect on filter.
     * @type {string}
     * @memberof CourierApiListCourierMessages
     */
    readonly recipient?: string
}

/**
 * CourierApi - object-oriented interface
 * @export
 * @class CourierApi
 * @extends {BaseAPI}
 */
export class CourierApi extends BaseAPI {
    /**
     * Gets a specific messages by the given ID.
     * @summary Get a Message
     * @param {CourierApiGetCourierMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourierApi
     */
    public getCourierMessage(requestParameters: CourierApiGetCourierMessageRequest, options?: AxiosRequestConfig) {
        return CourierApiFp(this.configuration).getCourierMessage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all messages by given status and recipient.
     * @summary List Messages
     * @param {CourierApiListCourierMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourierApi
     */
    public listCourierMessages(requestParameters: CourierApiListCourierMessagesRequest = {}, options?: AxiosRequestConfig) {
        return CourierApiFp(this.configuration).listCourierMessages(requestParameters.pageSize, requestParameters.pageToken, requestParameters.status, requestParameters.recipient, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FrontendApi - axios parameter creator
 * @export
 */
export const FrontendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Browsers
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {string} [loginChallenge] An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserLoginFlow: async (refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, loginChallenge?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/login/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }

            if (aal !== undefined) {
                localVarQueryParameter['aal'] = aal;
            }

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }

            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
         * @summary Create a Logout URL for Browsers
         * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserLogoutFlow: async (cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/logout/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserRecoveryFlow: async (returnTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/recovery/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [loginChallenge] Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network.
         * @param {string} [afterVerificationReturnTo] The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserRegistrationFlow: async (returnTo?: string, loginChallenge?: string, afterVerificationReturnTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/registration/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }

            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }

            if (afterVerificationReturnTo !== undefined) {
                localVarQueryParameter['after_verification_return_to'] = afterVerificationReturnTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserSettingsFlow: async (returnTo?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/settings/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Browser Clients
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserVerificationFlow: async (returnTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/verification/browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Native Apps
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeLoginFlow: async (refresh?: boolean, aal?: string, xSessionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/login/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }

            if (aal !== undefined) {
                localVarQueryParameter['aal'] = aal;
            }

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeRecoveryFlow: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/recovery/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeRegistrationFlow: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/registration/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Native Apps
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeSettingsFlow: async (xSessionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/settings/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeVerificationFlow: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/verification/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
         * @summary Disable my other sessions
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableMyOtherSessions: async (xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
         * @summary Disable one of my sessions
         * @param {string} id ID is the session\&#39;s ID.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableMySession: async (id: string, xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('disableMySession', 'id', id)
            const localVarPath = `/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
         * @summary Get User-Flow Errors
         * @param {string} id Error is the error\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlowError: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFlowError', 'id', id)
            const localVarPath = `/self-service/errors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Login Flow
         * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginFlow: async (id: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLoginFlow', 'id', id)
            const localVarPath = `/self-service/login/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Get Recovery Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecoveryFlow: async (id: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecoveryFlow', 'id', id)
            const localVarPath = `/self-service/recovery/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Registration Flow
         * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationFlow: async (id: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRegistrationFlow', 'id', id)
            const localVarPath = `/self-service/registration/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Get Settings Flow
         * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsFlow: async (id: string, xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSettingsFlow', 'id', id)
            const localVarPath = `/self-service/settings/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) }) ```  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Get Verification Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationFlow: async (id: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVerificationFlow', 'id', id)
            const localVarPath = `/self-service/verification/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get WebAuthn JavaScript
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAuthnJavaScript: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/ory/webauthn.js`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
         * @summary Get My Active Sessions
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMySessions: async (perPage?: number, page?: number, xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
         * @summary Perform Logout for Native Apps
         * @param {PerformNativeLogoutBody} performNativeLogoutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performNativeLogout: async (performNativeLogoutBody: PerformNativeLogoutBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'performNativeLogoutBody' is not null or undefined
            assertParamExists('performNativeLogout', 'performNativeLogoutBody', performNativeLogoutBody)
            const localVarPath = `/self-service/logout/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(performNativeLogoutBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking:  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
         * @summary Check Who the Current HTTP Session Belongs To
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toSession: async (xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sessions/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Submit a Login Flow
         * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {UpdateLoginFlowBody} updateLoginFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginFlow: async (flow: string, updateLoginFlowBody: UpdateLoginFlowBody, xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('updateLoginFlow', 'flow', flow)
            // verify required parameter 'updateLoginFlowBody' is not null or undefined
            assertParamExists('updateLoginFlow', 'updateLoginFlowBody', updateLoginFlowBody)
            const localVarPath = `/self-service/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLoginFlowBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
         * @summary Update Logout Flow
         * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
         * @param {string} [returnTo] The URL to return to after the logout was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLogoutFlow: async (token?: string, returnTo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/self-service/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (returnTo !== undefined) {
                localVarQueryParameter['return_to'] = returnTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Complete Recovery Flow
         * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {UpdateRecoveryFlowBody} updateRecoveryFlowBody 
         * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecoveryFlow: async (flow: string, updateRecoveryFlowBody: UpdateRecoveryFlowBody, token?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('updateRecoveryFlow', 'flow', flow)
            // verify required parameter 'updateRecoveryFlowBody' is not null or undefined
            assertParamExists('updateRecoveryFlow', 'updateRecoveryFlowBody', updateRecoveryFlowBody)
            const localVarPath = `/self-service/recovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecoveryFlowBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Update Registration Flow
         * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {UpdateRegistrationFlowBody} updateRegistrationFlowBody 
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationFlow: async (flow: string, updateRegistrationFlowBody: UpdateRegistrationFlowBody, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('updateRegistrationFlow', 'flow', flow)
            // verify required parameter 'updateRegistrationFlowBody' is not null or undefined
            assertParamExists('updateRegistrationFlow', 'updateRegistrationFlowBody', updateRegistrationFlowBody)
            const localVarPath = `/self-service/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRegistrationFlowBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Complete Settings Flow
         * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {UpdateSettingsFlowBody} updateSettingsFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsFlow: async (flow: string, updateSettingsFlowBody: UpdateSettingsFlowBody, xSessionToken?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('updateSettingsFlow', 'flow', flow)
            // verify required parameter 'updateSettingsFlowBody' is not null or undefined
            assertParamExists('updateSettingsFlow', 'updateSettingsFlowBody', updateSettingsFlowBody)
            const localVarPath = `/self-service/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (xSessionToken !== undefined && xSessionToken !== null) {
                localVarHeaderParameter['X-Session-Token'] = String(xSessionToken);
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingsFlowBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Complete Verification Flow
         * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {UpdateVerificationFlowBody} updateVerificationFlowBody 
         * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationFlow: async (flow: string, updateVerificationFlowBody: UpdateVerificationFlowBody, token?: string, cookie?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('updateVerificationFlow', 'flow', flow)
            // verify required parameter 'updateVerificationFlowBody' is not null or undefined
            assertParamExists('updateVerificationFlow', 'updateVerificationFlowBody', updateVerificationFlowBody)
            const localVarPath = `/self-service/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (flow !== undefined) {
                localVarQueryParameter['flow'] = flow;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cookie !== undefined && cookie !== null) {
                localVarHeaderParameter['Cookie'] = String(cookie);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVerificationFlowBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FrontendApi - functional programming interface
 * @export
 */
export const FrontendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FrontendApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Browsers
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {string} [loginChallenge] An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserLoginFlow(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, loginChallenge?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserLoginFlow(refresh, aal, returnTo, cookie, loginChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
         * @summary Create a Logout URL for Browsers
         * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserLogoutFlow(cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserLogoutFlow(cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserRecoveryFlow(returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserRecoveryFlow(returnTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [loginChallenge] Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network.
         * @param {string} [afterVerificationReturnTo] The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserRegistrationFlow(returnTo?: string, loginChallenge?: string, afterVerificationReturnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserRegistrationFlow(returnTo, loginChallenge, afterVerificationReturnTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserSettingsFlow(returnTo?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserSettingsFlow(returnTo, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Browser Clients
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrowserVerificationFlow(returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrowserVerificationFlow(returnTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Native Apps
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNativeLoginFlow(refresh?: boolean, aal?: string, xSessionToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNativeLoginFlow(refresh, aal, xSessionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNativeRecoveryFlow(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNativeRecoveryFlow(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNativeRegistrationFlow(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNativeRegistrationFlow(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Native Apps
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNativeSettingsFlow(xSessionToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNativeSettingsFlow(xSessionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNativeVerificationFlow(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNativeVerificationFlow(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
         * @summary Disable my other sessions
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableMyOtherSessions(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMySessionsCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableMyOtherSessions(xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
         * @summary Disable one of my sessions
         * @param {string} id ID is the session\&#39;s ID.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableMySession(id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableMySession(id, xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
         * @summary Get User-Flow Errors
         * @param {string} id Error is the error\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlowError(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlowError(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Login Flow
         * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginFlow(id, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Get Recovery Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecoveryFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecoveryFlow(id, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Registration Flow
         * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistrationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistrationFlow(id, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Get Settings Flow
         * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingsFlow(id, xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) }) ```  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Get Verification Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerificationFlow(id: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerificationFlow(id, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get WebAuthn JavaScript
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebAuthnJavaScript(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebAuthnJavaScript(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
         * @summary Get My Active Sessions
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMySessions(perPage?: number, page?: number, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMySessions(perPage, page, xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
         * @summary Perform Logout for Native Apps
         * @param {PerformNativeLogoutBody} performNativeLogoutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performNativeLogout(performNativeLogoutBody: PerformNativeLogoutBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performNativeLogout(performNativeLogoutBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking:  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
         * @summary Check Who the Current HTTP Session Belongs To
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toSession(xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toSession(xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Submit a Login Flow
         * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {UpdateLoginFlowBody} updateLoginFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLoginFlow(flow: string, updateLoginFlowBody: UpdateLoginFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulNativeLogin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLoginFlow(flow, updateLoginFlowBody, xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
         * @summary Update Logout Flow
         * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
         * @param {string} [returnTo] The URL to return to after the logout was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLogoutFlow(token?: string, returnTo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLogoutFlow(token, returnTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Complete Recovery Flow
         * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {UpdateRecoveryFlowBody} updateRecoveryFlowBody 
         * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecoveryFlow(flow: string, updateRecoveryFlowBody: UpdateRecoveryFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecoveryFlow(flow, updateRecoveryFlowBody, token, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Update Registration Flow
         * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {UpdateRegistrationFlowBody} updateRegistrationFlowBody 
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrationFlow(flow: string, updateRegistrationFlowBody: UpdateRegistrationFlowBody, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulNativeRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrationFlow(flow, updateRegistrationFlowBody, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Complete Settings Flow
         * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {UpdateSettingsFlowBody} updateSettingsFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettingsFlow(flow: string, updateSettingsFlowBody: UpdateSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettingsFlow(flow, updateSettingsFlowBody, xSessionToken, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Complete Verification Flow
         * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {UpdateVerificationFlowBody} updateVerificationFlowBody 
         * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVerificationFlow(flow: string, updateVerificationFlowBody: UpdateVerificationFlowBody, token?: string, cookie?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationFlow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVerificationFlow(flow, updateVerificationFlowBody, token, cookie, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FrontendApi - factory interface
 * @export
 */
export const FrontendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FrontendApiFp(configuration)
    return {
        /**
         * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Browsers
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {string} [loginChallenge] An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserLoginFlow(refresh?: boolean, aal?: string, returnTo?: string, cookie?: string, loginChallenge?: string, options?: any): AxiosPromise<LoginFlow> {
            return localVarFp.createBrowserLoginFlow(refresh, aal, returnTo, cookie, loginChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
         * @summary Create a Logout URL for Browsers
         * @param {string} [cookie] HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserLogoutFlow(cookie?: string, options?: any): AxiosPromise<LogoutFlow> {
            return localVarFp.createBrowserLogoutFlow(cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserRecoveryFlow(returnTo?: string, options?: any): AxiosPromise<RecoveryFlow> {
            return localVarFp.createBrowserRecoveryFlow(returnTo, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [loginChallenge] Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network.
         * @param {string} [afterVerificationReturnTo] The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserRegistrationFlow(returnTo?: string, loginChallenge?: string, afterVerificationReturnTo?: string, options?: any): AxiosPromise<RegistrationFlow> {
            return localVarFp.createBrowserRegistrationFlow(returnTo, loginChallenge, afterVerificationReturnTo, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Browsers
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserSettingsFlow(returnTo?: string, cookie?: string, options?: any): AxiosPromise<SettingsFlow> {
            return localVarFp.createBrowserSettingsFlow(returnTo, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Browser Clients
         * @param {string} [returnTo] The URL to return the browser to after the flow was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrowserVerificationFlow(returnTo?: string, options?: any): AxiosPromise<VerificationFlow> {
            return localVarFp.createBrowserVerificationFlow(returnTo, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Login Flow for Native Apps
         * @param {boolean} [refresh] Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
         * @param {string} [aal] Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeLoginFlow(refresh?: boolean, aal?: string, xSessionToken?: string, options?: any): AxiosPromise<LoginFlow> {
            return localVarFp.createNativeLoginFlow(refresh, aal, xSessionToken, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Create Recovery Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeRecoveryFlow(options?: any): AxiosPromise<RecoveryFlow> {
            return localVarFp.createNativeRecoveryFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Create Registration Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeRegistrationFlow(options?: any): AxiosPromise<RegistrationFlow> {
            return localVarFp.createNativeRegistrationFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Create Settings Flow for Native Apps
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeSettingsFlow(xSessionToken?: string, options?: any): AxiosPromise<SettingsFlow> {
            return localVarFp.createNativeSettingsFlow(xSessionToken, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Create Verification Flow for Native Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNativeVerificationFlow(options?: any): AxiosPromise<VerificationFlow> {
            return localVarFp.createNativeVerificationFlow(options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
         * @summary Disable my other sessions
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableMyOtherSessions(xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<DeleteMySessionsCount> {
            return localVarFp.disableMyOtherSessions(xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
         * @summary Disable one of my sessions
         * @param {string} id ID is the session\&#39;s ID.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableMySession(id: string, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<void> {
            return localVarFp.disableMySession(id, xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
         * @summary Get User-Flow Errors
         * @param {string} id Error is the error\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlowError(id: string, options?: any): AxiosPromise<FlowError> {
            return localVarFp.getFlowError(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Login Flow
         * @param {string} id The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginFlow(id: string, cookie?: string, options?: any): AxiosPromise<LoginFlow> {
            return localVarFp.getLoginFlow(id, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Get Recovery Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecoveryFlow(id: string, cookie?: string, options?: any): AxiosPromise<RecoveryFlow> {
            return localVarFp.getRecoveryFlow(id, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get Registration Flow
         * @param {string} id The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationFlow(id: string, cookie?: string, options?: any): AxiosPromise<RegistrationFlow> {
            return localVarFp.getRegistrationFlow(id, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Get Settings Flow
         * @param {string} id ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {string} [xSessionToken] The Session Token  When using the SDK in an app without a browser, please include the session token here.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsFlow(id: string, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SettingsFlow> {
            return localVarFp.getSettingsFlow(id, xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) }) ```  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Get Verification Flow
         * @param {string} id The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {string} [cookie] HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerificationFlow(id: string, cookie?: string, options?: any): AxiosPromise<VerificationFlow> {
            return localVarFp.getVerificationFlow(id, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Get WebAuthn JavaScript
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAuthnJavaScript(options?: any): AxiosPromise<string> {
            return localVarFp.getWebAuthnJavaScript(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
         * @summary Get My Active Sessions
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMySessions(perPage?: number, page?: number, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.listMySessions(perPage, page, xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
         * @summary Perform Logout for Native Apps
         * @param {PerformNativeLogoutBody} performNativeLogoutBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performNativeLogout(performNativeLogoutBody: PerformNativeLogoutBody, options?: any): AxiosPromise<void> {
            return localVarFp.performNativeLogout(performNativeLogoutBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking:  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
         * @summary Check Who the Current HTTP Session Belongs To
         * @param {string} [xSessionToken] Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
         * @param {string} [cookie] Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toSession(xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<Session> {
            return localVarFp.toSession(xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Submit a Login Flow
         * @param {string} flow The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
         * @param {UpdateLoginFlowBody} updateLoginFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLoginFlow(flow: string, updateLoginFlowBody: UpdateLoginFlowBody, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SuccessfulNativeLogin> {
            return localVarFp.updateLoginFlow(flow, updateLoginFlowBody, xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
         * @summary Update Logout Flow
         * @param {string} [token] A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
         * @param {string} [returnTo] The URL to return to after the logout was completed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLogoutFlow(token?: string, returnTo?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateLogoutFlow(token, returnTo, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
         * @summary Complete Recovery Flow
         * @param {string} flow The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
         * @param {UpdateRecoveryFlowBody} updateRecoveryFlowBody 
         * @param {string} [token] Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecoveryFlow(flow: string, updateRecoveryFlowBody: UpdateRecoveryFlowBody, token?: string, cookie?: string, options?: any): AxiosPromise<RecoveryFlow> {
            return localVarFp.updateRecoveryFlow(flow, updateRecoveryFlowBody, token, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
         * @summary Update Registration Flow
         * @param {string} flow The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
         * @param {UpdateRegistrationFlowBody} updateRegistrationFlowBody 
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationFlow(flow: string, updateRegistrationFlowBody: UpdateRegistrationFlowBody, cookie?: string, options?: any): AxiosPromise<SuccessfulNativeRegistration> {
            return localVarFp.updateRegistrationFlow(flow, updateRegistrationFlowBody, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
         * @summary Complete Settings Flow
         * @param {string} flow The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
         * @param {UpdateSettingsFlowBody} updateSettingsFlowBody 
         * @param {string} [xSessionToken] The Session Token of the Identity performing the settings flow.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingsFlow(flow: string, updateSettingsFlowBody: UpdateSettingsFlowBody, xSessionToken?: string, cookie?: string, options?: any): AxiosPromise<SettingsFlow> {
            return localVarFp.updateSettingsFlow(flow, updateSettingsFlowBody, xSessionToken, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
         * @summary Complete Verification Flow
         * @param {string} flow The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
         * @param {UpdateVerificationFlowBody} updateVerificationFlowBody 
         * @param {string} [token] Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
         * @param {string} [cookie] HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationFlow(flow: string, updateVerificationFlowBody: UpdateVerificationFlowBody, token?: string, cookie?: string, options?: any): AxiosPromise<VerificationFlow> {
            return localVarFp.updateVerificationFlow(flow, updateVerificationFlowBody, token, cookie, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBrowserLoginFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserLoginFlowRequest
 */
export interface FrontendApiCreateBrowserLoginFlowRequest {
    /**
     * Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @type {boolean}
     * @memberof FrontendApiCreateBrowserLoginFlow
     */
    readonly refresh?: boolean

    /**
     * Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @type {string}
     * @memberof FrontendApiCreateBrowserLoginFlow
     */
    readonly aal?: string

    /**
     * The URL to return the browser to after the flow was completed.
     * @type {string}
     * @memberof FrontendApiCreateBrowserLoginFlow
     */
    readonly returnTo?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiCreateBrowserLoginFlow
     */
    readonly cookie?: string

    /**
     * An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiCreateBrowserLoginFlow
     */
    readonly loginChallenge?: string
}

/**
 * Request parameters for createBrowserLogoutFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserLogoutFlowRequest
 */
export interface FrontendApiCreateBrowserLogoutFlowRequest {
    /**
     * HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request.
     * @type {string}
     * @memberof FrontendApiCreateBrowserLogoutFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for createBrowserRecoveryFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserRecoveryFlowRequest
 */
export interface FrontendApiCreateBrowserRecoveryFlowRequest {
    /**
     * The URL to return the browser to after the flow was completed.
     * @type {string}
     * @memberof FrontendApiCreateBrowserRecoveryFlow
     */
    readonly returnTo?: string
}

/**
 * Request parameters for createBrowserRegistrationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserRegistrationFlowRequest
 */
export interface FrontendApiCreateBrowserRegistrationFlowRequest {
    /**
     * The URL to return the browser to after the flow was completed.
     * @type {string}
     * @memberof FrontendApiCreateBrowserRegistrationFlow
     */
    readonly returnTo?: string

    /**
     * Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network.
     * @type {string}
     * @memberof FrontendApiCreateBrowserRegistrationFlow
     */
    readonly loginChallenge?: string

    /**
     * The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value.
     * @type {string}
     * @memberof FrontendApiCreateBrowserRegistrationFlow
     */
    readonly afterVerificationReturnTo?: string
}

/**
 * Request parameters for createBrowserSettingsFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserSettingsFlowRequest
 */
export interface FrontendApiCreateBrowserSettingsFlowRequest {
    /**
     * The URL to return the browser to after the flow was completed.
     * @type {string}
     * @memberof FrontendApiCreateBrowserSettingsFlow
     */
    readonly returnTo?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiCreateBrowserSettingsFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for createBrowserVerificationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateBrowserVerificationFlowRequest
 */
export interface FrontendApiCreateBrowserVerificationFlowRequest {
    /**
     * The URL to return the browser to after the flow was completed.
     * @type {string}
     * @memberof FrontendApiCreateBrowserVerificationFlow
     */
    readonly returnTo?: string
}

/**
 * Request parameters for createNativeLoginFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateNativeLoginFlowRequest
 */
export interface FrontendApiCreateNativeLoginFlowRequest {
    /**
     * Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.
     * @type {boolean}
     * @memberof FrontendApiCreateNativeLoginFlow
     */
    readonly refresh?: boolean

    /**
     * Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session\&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session\&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;.
     * @type {string}
     * @memberof FrontendApiCreateNativeLoginFlow
     */
    readonly aal?: string

    /**
     * The Session Token of the Identity performing the settings flow.
     * @type {string}
     * @memberof FrontendApiCreateNativeLoginFlow
     */
    readonly xSessionToken?: string
}

/**
 * Request parameters for createNativeSettingsFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiCreateNativeSettingsFlowRequest
 */
export interface FrontendApiCreateNativeSettingsFlowRequest {
    /**
     * The Session Token of the Identity performing the settings flow.
     * @type {string}
     * @memberof FrontendApiCreateNativeSettingsFlow
     */
    readonly xSessionToken?: string
}

/**
 * Request parameters for disableMyOtherSessions operation in FrontendApi.
 * @export
 * @interface FrontendApiDisableMyOtherSessionsRequest
 */
export interface FrontendApiDisableMyOtherSessionsRequest {
    /**
     * Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @type {string}
     * @memberof FrontendApiDisableMyOtherSessions
     */
    readonly xSessionToken?: string

    /**
     * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @type {string}
     * @memberof FrontendApiDisableMyOtherSessions
     */
    readonly cookie?: string
}

/**
 * Request parameters for disableMySession operation in FrontendApi.
 * @export
 * @interface FrontendApiDisableMySessionRequest
 */
export interface FrontendApiDisableMySessionRequest {
    /**
     * ID is the session\&#39;s ID.
     * @type {string}
     * @memberof FrontendApiDisableMySession
     */
    readonly id: string

    /**
     * Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @type {string}
     * @memberof FrontendApiDisableMySession
     */
    readonly xSessionToken?: string

    /**
     * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @type {string}
     * @memberof FrontendApiDisableMySession
     */
    readonly cookie?: string
}

/**
 * Request parameters for getFlowError operation in FrontendApi.
 * @export
 * @interface FrontendApiGetFlowErrorRequest
 */
export interface FrontendApiGetFlowErrorRequest {
    /**
     * Error is the error\&#39;s ID
     * @type {string}
     * @memberof FrontendApiGetFlowError
     */
    readonly id: string
}

/**
 * Request parameters for getLoginFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiGetLoginFlowRequest
 */
export interface FrontendApiGetLoginFlowRequest {
    /**
     * The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiGetLoginFlow
     */
    readonly id: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiGetLoginFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for getRecoveryFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiGetRecoveryFlowRequest
 */
export interface FrontendApiGetRecoveryFlowRequest {
    /**
     * The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiGetRecoveryFlow
     */
    readonly id: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiGetRecoveryFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for getRegistrationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiGetRegistrationFlowRequest
 */
export interface FrontendApiGetRegistrationFlowRequest {
    /**
     * The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiGetRegistrationFlow
     */
    readonly id: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiGetRegistrationFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for getSettingsFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiGetSettingsFlowRequest
 */
export interface FrontendApiGetSettingsFlowRequest {
    /**
     * ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiGetSettingsFlow
     */
    readonly id: string

    /**
     * The Session Token  When using the SDK in an app without a browser, please include the session token here.
     * @type {string}
     * @memberof FrontendApiGetSettingsFlow
     */
    readonly xSessionToken?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiGetSettingsFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for getVerificationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiGetVerificationFlowRequest
 */
export interface FrontendApiGetVerificationFlowRequest {
    /**
     * The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiGetVerificationFlow
     */
    readonly id: string

    /**
     * HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here.
     * @type {string}
     * @memberof FrontendApiGetVerificationFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for listMySessions operation in FrontendApi.
 * @export
 * @interface FrontendApiListMySessionsRequest
 */
export interface FrontendApiListMySessionsRequest {
    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof FrontendApiListMySessions
     */
    readonly perPage?: number

    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof FrontendApiListMySessions
     */
    readonly page?: number

    /**
     * Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @type {string}
     * @memberof FrontendApiListMySessions
     */
    readonly xSessionToken?: string

    /**
     * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @type {string}
     * @memberof FrontendApiListMySessions
     */
    readonly cookie?: string
}

/**
 * Request parameters for performNativeLogout operation in FrontendApi.
 * @export
 * @interface FrontendApiPerformNativeLogoutRequest
 */
export interface FrontendApiPerformNativeLogoutRequest {
    /**
     * 
     * @type {PerformNativeLogoutBody}
     * @memberof FrontendApiPerformNativeLogout
     */
    readonly performNativeLogoutBody: PerformNativeLogoutBody
}

/**
 * Request parameters for toSession operation in FrontendApi.
 * @export
 * @interface FrontendApiToSessionRequest
 */
export interface FrontendApiToSessionRequest {
    /**
     * Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;.
     * @type {string}
     * @memberof FrontendApiToSession
     */
    readonly xSessionToken?: string

    /**
     * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored.
     * @type {string}
     * @memberof FrontendApiToSession
     */
    readonly cookie?: string
}

/**
 * Request parameters for updateLoginFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateLoginFlowRequest
 */
export interface FrontendApiUpdateLoginFlowRequest {
    /**
     * The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiUpdateLoginFlow
     */
    readonly flow: string

    /**
     * 
     * @type {UpdateLoginFlowBody}
     * @memberof FrontendApiUpdateLoginFlow
     */
    readonly updateLoginFlowBody: UpdateLoginFlowBody

    /**
     * The Session Token of the Identity performing the settings flow.
     * @type {string}
     * @memberof FrontendApiUpdateLoginFlow
     */
    readonly xSessionToken?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiUpdateLoginFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for updateLogoutFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateLogoutFlowRequest
 */
export interface FrontendApiUpdateLogoutFlowRequest {
    /**
     * A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint.
     * @type {string}
     * @memberof FrontendApiUpdateLogoutFlow
     */
    readonly token?: string

    /**
     * The URL to return to after the logout was completed.
     * @type {string}
     * @memberof FrontendApiUpdateLogoutFlow
     */
    readonly returnTo?: string
}

/**
 * Request parameters for updateRecoveryFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateRecoveryFlowRequest
 */
export interface FrontendApiUpdateRecoveryFlowRequest {
    /**
     * The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiUpdateRecoveryFlow
     */
    readonly flow: string

    /**
     * 
     * @type {UpdateRecoveryFlowBody}
     * @memberof FrontendApiUpdateRecoveryFlow
     */
    readonly updateRecoveryFlowBody: UpdateRecoveryFlowBody

    /**
     * Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @type {string}
     * @memberof FrontendApiUpdateRecoveryFlow
     */
    readonly token?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiUpdateRecoveryFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for updateRegistrationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateRegistrationFlowRequest
 */
export interface FrontendApiUpdateRegistrationFlowRequest {
    /**
     * The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiUpdateRegistrationFlow
     */
    readonly flow: string

    /**
     * 
     * @type {UpdateRegistrationFlowBody}
     * @memberof FrontendApiUpdateRegistrationFlow
     */
    readonly updateRegistrationFlowBody: UpdateRegistrationFlowBody

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiUpdateRegistrationFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for updateSettingsFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateSettingsFlowRequest
 */
export interface FrontendApiUpdateSettingsFlowRequest {
    /**
     * The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiUpdateSettingsFlow
     */
    readonly flow: string

    /**
     * 
     * @type {UpdateSettingsFlowBody}
     * @memberof FrontendApiUpdateSettingsFlow
     */
    readonly updateSettingsFlowBody: UpdateSettingsFlowBody

    /**
     * The Session Token of the Identity performing the settings flow.
     * @type {string}
     * @memberof FrontendApiUpdateSettingsFlow
     */
    readonly xSessionToken?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiUpdateSettingsFlow
     */
    readonly cookie?: string
}

/**
 * Request parameters for updateVerificationFlow operation in FrontendApi.
 * @export
 * @interface FrontendApiUpdateVerificationFlowRequest
 */
export interface FrontendApiUpdateVerificationFlowRequest {
    /**
     * The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).
     * @type {string}
     * @memberof FrontendApiUpdateVerificationFlow
     */
    readonly flow: string

    /**
     * 
     * @type {UpdateVerificationFlowBody}
     * @memberof FrontendApiUpdateVerificationFlow
     */
    readonly updateVerificationFlowBody: UpdateVerificationFlowBody

    /**
     * Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call.
     * @type {string}
     * @memberof FrontendApiUpdateVerificationFlow
     */
    readonly token?: string

    /**
     * HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected.
     * @type {string}
     * @memberof FrontendApiUpdateVerificationFlow
     */
    readonly cookie?: string
}

/**
 * FrontendApi - object-oriented interface
 * @export
 * @class FrontendApi
 * @extends {BaseAPI}
 */
export class FrontendApi extends BaseAPI {
    /**
     * This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter `?refresh=true` was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Create Login Flow for Browsers
     * @param {FrontendApiCreateBrowserLoginFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserLoginFlow(requestParameters: FrontendApiCreateBrowserLoginFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserLoginFlow(requestParameters.refresh, requestParameters.aal, requestParameters.returnTo, requestParameters.cookie, requestParameters.loginChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
     * @summary Create a Logout URL for Browsers
     * @param {FrontendApiCreateBrowserLogoutFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserLogoutFlow(requestParameters: FrontendApiCreateBrowserLogoutFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserLogoutFlow(requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to `selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Create Recovery Flow for Browsers
     * @param {FrontendApiCreateBrowserRecoveryFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserRecoveryFlow(requestParameters: FrontendApiCreateBrowserRecoveryFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserRecoveryFlow(requestParameters.returnTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session exists already, the browser will be redirected to `urls.default_redirect_url`.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Create Registration Flow for Browsers
     * @param {FrontendApiCreateBrowserRegistrationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserRegistrationFlow(requestParameters: FrontendApiCreateBrowserRegistrationFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserRegistrationFlow(requestParameters.returnTo, requestParameters.loginChallenge, requestParameters.afterVerificationReturnTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to `selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Create Settings Flow for Browsers
     * @param {FrontendApiCreateBrowserSettingsFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserSettingsFlow(requestParameters: FrontendApiCreateBrowserSettingsFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserSettingsFlow(requestParameters.returnTo, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to `selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Create Verification Flow for Browser Clients
     * @param {FrontendApiCreateBrowserVerificationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createBrowserVerificationFlow(requestParameters: FrontendApiCreateBrowserVerificationFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createBrowserVerificationFlow(requestParameters.returnTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing login flow call `/self-service/login/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `session_aal1_required`: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Create Login Flow for Native Apps
     * @param {FrontendApiCreateNativeLoginFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createNativeLoginFlow(requestParameters: FrontendApiCreateNativeLoginFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createNativeLoginFlow(requestParameters.refresh, requestParameters.aal, requestParameters.xSessionToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  To fetch an existing recovery flow call `/self-service/recovery/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Create Recovery Flow for Native Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createNativeRecoveryFlow(options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createNativeRecoveryFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter `?refresh=true` is set.  To fetch an existing registration flow call `/self-service/registration/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Create Registration Flow for Native Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createNativeRegistrationFlow(options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createNativeRegistrationFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call `/self-service/settings/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Create Settings Flow for Native Apps
     * @param {FrontendApiCreateNativeSettingsFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createNativeSettingsFlow(requestParameters: FrontendApiCreateNativeSettingsFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createNativeSettingsFlow(requestParameters.xSessionToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call `/self-service/verification/flows?flow=<flow_id>`.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Create Verification Flow for Native Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public createNativeVerificationFlow(options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).createNativeVerificationFlow(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
     * @summary Disable my other sessions
     * @param {FrontendApiDisableMyOtherSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public disableMyOtherSessions(requestParameters: FrontendApiDisableMyOtherSessionsRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).disableMyOtherSessions(requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
     * @summary Disable one of my sessions
     * @param {FrontendApiDisableMySessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public disableMySession(requestParameters: FrontendApiDisableMySessionRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).disableMySession(requestParameters.id, requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  `?id=stub:500` - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
     * @summary Get User-Flow Errors
     * @param {FrontendApiGetFlowErrorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getFlowError(requestParameters: FrontendApiGetFlowErrorRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getFlowError(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a login flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/login\', async function (req, res) { const flow = await client.getLoginFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'login\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Login Flow
     * @param {FrontendApiGetLoginFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getLoginFlow(requestParameters: FrontendApiGetLoginFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getLoginFlow(requestParameters.id, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a recovery flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getRecoveryFlow(req.header(\'Cookie\'), req.query[\'flow\'])  res.render(\'recovery\', flow) }) ```  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Get Recovery Flow
     * @param {FrontendApiGetRecoveryFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getRecoveryFlow(requestParameters: FrontendApiGetRecoveryFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getRecoveryFlow(requestParameters.id, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a registration flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/registration\', async function (req, res) { const flow = await client.getRegistrationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'registration\', flow) }) ```  This request may fail due to several reasons. The `error.id` can be one of:  `session_already_available`: The user is already signed in. `self_service_flow_expired`: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get Registration Flow
     * @param {FrontendApiGetRegistrationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getRegistrationFlow(requestParameters: FrontendApiGetRegistrationFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getRegistrationFlow(requestParameters.id, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When accessing this endpoint through Ory Kratos\' Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos\' Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Get Settings Flow
     * @param {FrontendApiGetSettingsFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getSettingsFlow(requestParameters: FrontendApiGetSettingsFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getSettingsFlow(requestParameters.id, requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a verification flow\'s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request\'s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  ```js pseudo-code example router.get(\'/recovery\', async function (req, res) { const flow = await client.getVerificationFlow(req.header(\'cookie\'), req.query[\'flow\'])  res.render(\'verification\', flow) }) ```  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Get Verification Flow
     * @param {FrontendApiGetVerificationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getVerificationFlow(requestParameters: FrontendApiGetVerificationFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getVerificationFlow(requestParameters.id, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  ```html <script src=\"https://public-kratos.example.org/.well-known/ory/webauthn.js\" type=\"script\" async /> ```  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Get WebAuthn JavaScript
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public getWebAuthnJavaScript(options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).getWebAuthnJavaScript(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the `/sessions/whoami` endpoint.
     * @summary Get My Active Sessions
     * @param {FrontendApiListMySessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public listMySessions(requestParameters: FrontendApiListMySessionsRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).listMySessions(requestParameters.perPage, requestParameters.page, requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
     * @summary Perform Logout for Native Apps
     * @param {FrontendApiPerformNativeLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public performNativeLogout(requestParameters: FrontendApiPerformNativeLogoutRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).performNativeLogout(requestParameters.performNativeLogoutBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the \'X-Kratos-Authenticated-Identity-Id\' header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  ```js pseudo-code example router.get(\'/protected-endpoint\', async function (req, res) { const session = await client.toSession(undefined, req.header(\'cookie\'))  console.log(session) }) ```  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  ```js pseudo-code example ... const session = await client.toSession(\"the-session-token\")  console.log(session) ```  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the `X-Session-Token` header!  This endpoint authenticates users by checking:  if the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie; if the `Authorization: bearer <ory-session-token>` HTTP header was set with a valid Ory Kratos Session Token; if the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The `error.id` can be one of:  `session_inactive`: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). `session_aal2_required`: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
     * @summary Check Who the Current HTTP Session Belongs To
     * @param {FrontendApiToSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public toSession(requestParameters: FrontendApiToSessionRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).toSession(requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * :::info  This endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.  :::  Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Submit a Login Flow
     * @param {FrontendApiUpdateLoginFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateLoginFlow(requestParameters: FrontendApiUpdateLoginFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateLoginFlow(requestParameters.flow, requestParameters.updateLoginFlowBody, requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint logs out an identity in a self-service manner.  If the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 303 See Other) to the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.  If the `Accept` HTTP header is set to `application/json`, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the `/self-service/logout/api` URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
     * @summary Update Logout Flow
     * @param {FrontendApiUpdateLogoutFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateLogoutFlow(requestParameters: FrontendApiUpdateLogoutFlowRequest = {}, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateLogoutFlow(requestParameters.token, requestParameters.returnTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. `sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
     * @summary Complete Recovery Flow
     * @param {FrontendApiUpdateRecoveryFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateRecoveryFlow(requestParameters: FrontendApiUpdateRecoveryFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateRecoveryFlow(requestParameters.flow, requestParameters.updateRecoveryFlowBody, requestParameters.token, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete a registration flow by sending an identity\'s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect `application/json` to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the `session` and `session_token` will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a `use_flow_id` parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of `application/json` will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with `Accept: application/json` in the header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_already_available`: The user is already signed in. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
     * @summary Update Registration Flow
     * @param {FrontendApiUpdateRegistrationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateRegistrationFlow(requestParameters: FrontendApiUpdateRegistrationFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateRegistrationFlow(requestParameters.flow, requestParameters.updateRegistrationFlowBody, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete a settings flow by sending an identity\'s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect `application/json` to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header `Accept` or with `Accept: text/_*` respond with a HTTP 303 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached or the session\'s AAL is too low.  Browser flows with HTTP Header `Accept: application/json` respond with HTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session\'s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a `Accept: application/json` HTTP header, the response contains the flow without a redirect. In the case of an error, the `error.id` of the JSON response body can be one of:  `session_refresh_required`: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters `?refresh=true&return_to=<the-current-browser-url>`, or initiate a refresh login flow otherwise. `security_csrf_violation`: Unable to fetch the flow because a CSRF violation occurred. `session_inactive`: No Ory Session was found - sign in a user first. `security_identity_mismatch`: The flow was interrupted with `session_refresh_required` but apparently some other identity logged in instead. `security_identity_mismatch`: The requested `?return_to` address is not allowed to be used. Adjust this in the configuration! `browser_location_change_required`: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings & Profile Management Documentation](../self-service/flows/user-settings).
     * @summary Complete Settings Flow
     * @param {FrontendApiUpdateSettingsFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateSettingsFlow(requestParameters: FrontendApiUpdateSettingsFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateSettingsFlow(requestParameters.flow, requestParameters.updateSettingsFlowBody, requestParameters.xSessionToken, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  `choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header `Accept` or with `Accept: text/_*` it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. `sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state. `passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\") does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
     * @summary Complete Verification Flow
     * @param {FrontendApiUpdateVerificationFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrontendApi
     */
    public updateVerificationFlow(requestParameters: FrontendApiUpdateVerificationFlowRequest, options?: AxiosRequestConfig) {
        return FrontendApiFp(this.configuration).updateVerificationFlow(requestParameters.flow, requestParameters.updateVerificationFlowBody, requestParameters.token, requestParameters.cookie, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates or delete multiple [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model). This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create and deletes multiple identities
         * @param {PatchIdentitiesBody} [patchIdentitiesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchPatchIdentities: async (patchIdentitiesBody?: PatchIdentitiesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchIdentitiesBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model).  This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create an Identity
         * @param {CreateIdentityBody} [createIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentity: async (createIdentityBody?: CreateIdentityBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIdentityBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Code
         * @param {CreateRecoveryCodeForIdentityBody} [createRecoveryCodeForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecoveryCodeForIdentity: async (createRecoveryCodeForIdentityBody?: CreateRecoveryCodeForIdentityBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/recovery/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecoveryCodeForIdentityBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Link
         * @param {CreateRecoveryLinkForIdentityBody} [createRecoveryLinkForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecoveryLinkForIdentity: async (createRecoveryLinkForIdentityBody?: CreateRecoveryLinkForIdentityBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/recovery/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecoveryLinkForIdentityBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes the [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.
         * @summary Delete an Identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentity: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIdentity', 'id', id)
            const localVarPath = `/admin/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) credential by its type You can only delete second factor (aal2) credentials.
         * @summary Delete a credential for a specific identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {'totp' | 'webauthn' | 'lookup'} type Type is the credential\&#39;s Type. One of totp, webauthn, lookup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityCredentials: async (id: string, type: 'totp' | 'webauthn' | 'lookup', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIdentityCredentials', 'id', id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('deleteIdentityCredentials', 'type', type)
            const localVarPath = `/admin/identities/{id}/credentials/{type}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
         * @summary Delete & Invalidate an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentitySessions: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIdentitySessions', 'id', id)
            const localVarPath = `/admin/identities/{id}/sessions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint deactivates the specified session. Session data is not deleted.
         * @summary Deactivate a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableSession: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('disableSession', 'id', id)
            const localVarPath = `/admin/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.  Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
         * @summary Extend a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendSession: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('extendSession', 'id', id)
            const localVarPath = `/admin/sessions/{id}/extend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) by its ID. You can optionally include credentials (e.g. social sign in connections) in the response by using the `include_credential` query parameter.
         * @summary Get an Identity
         * @param {string} id ID must be set to the ID of identity you want to get
         * @param {Array<string>} [includeCredential] Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: async (id: string, includeCredential?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIdentity', 'id', id)
            const localVarPath = `/admin/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeCredential) {
                localVarQueryParameter['include_credential'] = includeCredential;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific identity schema.
         * @summary Get Identity JSON Schema
         * @param {string} id ID must be set to the ID of schema you want to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySchema: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIdentitySchema', 'id', id)
            const localVarPath = `/schemas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is useful for:  Getting a session object with all specified expandables that exist in an administrative context.
         * @summary Get Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (id: string, expand?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSession', 'id', id)
            const localVarPath = `/admin/sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model) in the system.
         * @summary List Identities
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [credentialsIdentifier] CredentialsIdentifier is the identifier (username, email) of the credentials to look up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities: async (perPage?: number, page?: number, credentialsIdentifier?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (credentialsIdentifier !== undefined) {
                localVarQueryParameter['credentials_identifier'] = credentialsIdentifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all identity schemas currently in use.
         * @summary Get all Identity Schemas
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySchemas: async (perPage?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schemas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all sessions that belong to the given Identity.
         * @summary List an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySessions: async (id: string, perPage?: number, page?: number, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listIdentitySessions', 'id', id)
            const localVarPath = `/admin/identities/{id}/sessions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Listing all sessions that exist.
         * @summary List All Sessions
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions: async (pageSize?: number, pageToken?: string, active?: boolean, expand?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an [identity\'s](https://www.ory.sh/docs/kratos/concepts/identity-user-model) field using [JSON Patch](https://jsonpatch.com/). The fields `id`, `stateChangedAt` and `credentials` can not be updated using this method.
         * @summary Patch an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIdentity: async (id: string, jsonPatch?: Array<JsonPatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchIdentity', 'id', id)
            const localVarPath = `/admin/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model). The full identity payload (except credentials) is expected. It is possible to update the identity\'s credentials as well.
         * @summary Update an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {UpdateIdentityBody} [updateIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentity: async (id: string, updateIdentityBody?: UpdateIdentityBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIdentity', 'id', id)
            const localVarPath = `/admin/identities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIdentityBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentityApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates or delete multiple [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model). This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create and deletes multiple identities
         * @param {PatchIdentitiesBody} [patchIdentitiesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchPatchIdentities(patchIdentitiesBody?: PatchIdentitiesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchPatchIdentitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchPatchIdentities(patchIdentitiesBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model).  This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create an Identity
         * @param {CreateIdentityBody} [createIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIdentity(createIdentityBody?: CreateIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIdentity(createIdentityBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Code
         * @param {CreateRecoveryCodeForIdentityBody} [createRecoveryCodeForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecoveryCodeForIdentity(createRecoveryCodeForIdentityBody?: CreateRecoveryCodeForIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryCodeForIdentity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecoveryCodeForIdentity(createRecoveryCodeForIdentityBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Link
         * @param {CreateRecoveryLinkForIdentityBody} [createRecoveryLinkForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecoveryLinkForIdentity(createRecoveryLinkForIdentityBody?: CreateRecoveryLinkForIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoveryLinkForIdentity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecoveryLinkForIdentity(createRecoveryLinkForIdentityBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes the [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.
         * @summary Delete an Identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdentity(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdentity(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) credential by its type You can only delete second factor (aal2) credentials.
         * @summary Delete a credential for a specific identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {'totp' | 'webauthn' | 'lookup'} type Type is the credential\&#39;s Type. One of totp, webauthn, lookup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdentityCredentials(id: string, type: 'totp' | 'webauthn' | 'lookup', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdentityCredentials(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
         * @summary Delete & Invalidate an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdentitySessions(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdentitySessions(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint deactivates the specified session. Session data is not deleted.
         * @summary Deactivate a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableSession(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableSession(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.  Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
         * @summary Extend a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extendSession(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extendSession(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) by its ID. You can optionally include credentials (e.g. social sign in connections) in the response by using the `include_credential` query parameter.
         * @summary Get an Identity
         * @param {string} id ID must be set to the ID of identity you want to get
         * @param {Array<string>} [includeCredential] Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentity(id: string, includeCredential?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentity(id, includeCredential, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific identity schema.
         * @summary Get Identity JSON Schema
         * @param {string} id ID must be set to the ID of schema you want to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentitySchema(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentitySchema(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is useful for:  Getting a session object with all specified expandables that exist in an administrative context.
         * @summary Get Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(id: string, expand?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(id, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model) in the system.
         * @summary List Identities
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [credentialsIdentifier] CredentialsIdentifier is the identifier (username, email) of the credentials to look up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIdentities(perPage?: number, page?: number, credentialsIdentifier?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Identity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIdentities(perPage, page, credentialsIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all identity schemas currently in use.
         * @summary Get all Identity Schemas
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIdentitySchemas(perPage?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentitySchemaContainer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIdentitySchemas(perPage, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns all sessions that belong to the given Identity.
         * @summary List an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIdentitySessions(id, perPage, page, active, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Listing all sessions that exist.
         * @summary List All Sessions
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessions(pageSize?: number, pageToken?: string, active?: boolean, expand?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessions(pageSize, pageToken, active, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates an [identity\'s](https://www.ory.sh/docs/kratos/concepts/identity-user-model) field using [JSON Patch](https://jsonpatch.com/). The fields `id`, `stateChangedAt` and `credentials` can not be updated using this method.
         * @summary Patch an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIdentity(id, jsonPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model). The full identity payload (except credentials) is expected. It is possible to update the identity\'s credentials as well.
         * @summary Update an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {UpdateIdentityBody} [updateIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdentity(id: string, updateIdentityBody?: UpdateIdentityBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Identity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdentity(id, updateIdentityBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentityApiFp(configuration)
    return {
        /**
         * Creates or delete multiple [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model). This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create and deletes multiple identities
         * @param {PatchIdentitiesBody} [patchIdentitiesBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchPatchIdentities(patchIdentitiesBody?: PatchIdentitiesBody, options?: any): AxiosPromise<BatchPatchIdentitiesResponse> {
            return localVarFp.batchPatchIdentities(patchIdentitiesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model).  This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
         * @summary Create an Identity
         * @param {CreateIdentityBody} [createIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentity(createIdentityBody?: CreateIdentityBody, options?: any): AxiosPromise<Identity> {
            return localVarFp.createIdentity(createIdentityBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Code
         * @param {CreateRecoveryCodeForIdentityBody} [createRecoveryCodeForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecoveryCodeForIdentity(createRecoveryCodeForIdentityBody?: CreateRecoveryCodeForIdentityBody, options?: any): AxiosPromise<RecoveryCodeForIdentity> {
            return localVarFp.createRecoveryCodeForIdentity(createRecoveryCodeForIdentityBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
         * @summary Create a Recovery Link
         * @param {CreateRecoveryLinkForIdentityBody} [createRecoveryLinkForIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecoveryLinkForIdentity(createRecoveryLinkForIdentityBody?: CreateRecoveryLinkForIdentityBody, options?: any): AxiosPromise<RecoveryLinkForIdentity> {
            return localVarFp.createRecoveryLinkForIdentity(createRecoveryLinkForIdentityBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes the [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.
         * @summary Delete an Identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentity(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIdentity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) credential by its type You can only delete second factor (aal2) credentials.
         * @summary Delete a credential for a specific identity
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {'totp' | 'webauthn' | 'lookup'} type Type is the credential\&#39;s Type. One of totp, webauthn, lookup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityCredentials(id: string, type: 'totp' | 'webauthn' | 'lookup', options?: any): AxiosPromise<Identity> {
            return localVarFp.deleteIdentityCredentials(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
         * @summary Delete & Invalidate an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentitySessions(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIdentitySessions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint deactivates the specified session. Session data is not deleted.
         * @summary Deactivate a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableSession(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.disableSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.  Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
         * @summary Extend a Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendSession(id: string, options?: any): AxiosPromise<Session> {
            return localVarFp.extendSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) by its ID. You can optionally include credentials (e.g. social sign in connections) in the response by using the `include_credential` query parameter.
         * @summary Get an Identity
         * @param {string} id ID must be set to the ID of identity you want to get
         * @param {Array<string>} [includeCredential] Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity(id: string, includeCredential?: Array<string>, options?: any): AxiosPromise<Identity> {
            return localVarFp.getIdentity(id, includeCredential, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific identity schema.
         * @summary Get Identity JSON Schema
         * @param {string} id ID must be set to the ID of schema you want to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySchema(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getIdentitySchema(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is useful for:  Getting a session object with all specified expandables that exist in an administrative context.
         * @summary Get Session
         * @param {string} id ID is the session\&#39;s ID.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(id: string, expand?: Array<string>, options?: any): AxiosPromise<Session> {
            return localVarFp.getSession(id, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model) in the system.
         * @summary List Identities
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {string} [credentialsIdentifier] CredentialsIdentifier is the identifier (username, email) of the credentials to look up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities(perPage?: number, page?: number, credentialsIdentifier?: string, options?: any): AxiosPromise<Array<Identity>> {
            return localVarFp.listIdentities(perPage, page, credentialsIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all identity schemas currently in use.
         * @summary Get all Identity Schemas
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySchemas(perPage?: number, page?: number, options?: any): AxiosPromise<Array<IdentitySchemaContainer>> {
            return localVarFp.listIdentitySchemas(perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all sessions that belong to the given Identity.
         * @summary List an Identity\'s Sessions
         * @param {string} id ID is the identity\&#39;s ID.
         * @param {number} [perPage] Items per Page  This is the number of items per page.
         * @param {number} [page] Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySessions(id: string, perPage?: number, page?: number, active?: boolean, options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.listIdentitySessions(id, perPage, page, active, options).then((request) => request(axios, basePath));
        },
        /**
         * Listing all sessions that exist.
         * @summary List All Sessions
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {boolean} [active] Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         * @param {Array<string>} [expand] ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions(pageSize?: number, pageToken?: string, active?: boolean, expand?: Array<string>, options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.listSessions(pageSize, pageToken, active, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an [identity\'s](https://www.ory.sh/docs/kratos/concepts/identity-user-model) field using [JSON Patch](https://jsonpatch.com/). The fields `id`, `stateChangedAt` and `credentials` can not be updated using this method.
         * @summary Patch an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIdentity(id: string, jsonPatch?: Array<JsonPatch>, options?: any): AxiosPromise<Identity> {
            return localVarFp.patchIdentity(id, jsonPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model). The full identity payload (except credentials) is expected. It is possible to update the identity\'s credentials as well.
         * @summary Update an Identity
         * @param {string} id ID must be set to the ID of identity you want to update
         * @param {UpdateIdentityBody} [updateIdentityBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentity(id: string, updateIdentityBody?: UpdateIdentityBody, options?: any): AxiosPromise<Identity> {
            return localVarFp.updateIdentity(id, updateIdentityBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for batchPatchIdentities operation in IdentityApi.
 * @export
 * @interface IdentityApiBatchPatchIdentitiesRequest
 */
export interface IdentityApiBatchPatchIdentitiesRequest {
    /**
     * 
     * @type {PatchIdentitiesBody}
     * @memberof IdentityApiBatchPatchIdentities
     */
    readonly patchIdentitiesBody?: PatchIdentitiesBody
}

/**
 * Request parameters for createIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiCreateIdentityRequest
 */
export interface IdentityApiCreateIdentityRequest {
    /**
     * 
     * @type {CreateIdentityBody}
     * @memberof IdentityApiCreateIdentity
     */
    readonly createIdentityBody?: CreateIdentityBody
}

/**
 * Request parameters for createRecoveryCodeForIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiCreateRecoveryCodeForIdentityRequest
 */
export interface IdentityApiCreateRecoveryCodeForIdentityRequest {
    /**
     * 
     * @type {CreateRecoveryCodeForIdentityBody}
     * @memberof IdentityApiCreateRecoveryCodeForIdentity
     */
    readonly createRecoveryCodeForIdentityBody?: CreateRecoveryCodeForIdentityBody
}

/**
 * Request parameters for createRecoveryLinkForIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiCreateRecoveryLinkForIdentityRequest
 */
export interface IdentityApiCreateRecoveryLinkForIdentityRequest {
    /**
     * 
     * @type {CreateRecoveryLinkForIdentityBody}
     * @memberof IdentityApiCreateRecoveryLinkForIdentity
     */
    readonly createRecoveryLinkForIdentityBody?: CreateRecoveryLinkForIdentityBody
}

/**
 * Request parameters for deleteIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiDeleteIdentityRequest
 */
export interface IdentityApiDeleteIdentityRequest {
    /**
     * ID is the identity\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiDeleteIdentity
     */
    readonly id: string
}

/**
 * Request parameters for deleteIdentityCredentials operation in IdentityApi.
 * @export
 * @interface IdentityApiDeleteIdentityCredentialsRequest
 */
export interface IdentityApiDeleteIdentityCredentialsRequest {
    /**
     * ID is the identity\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiDeleteIdentityCredentials
     */
    readonly id: string

    /**
     * Type is the credential\&#39;s Type. One of totp, webauthn, lookup
     * @type {'totp' | 'webauthn' | 'lookup'}
     * @memberof IdentityApiDeleteIdentityCredentials
     */
    readonly type: 'totp' | 'webauthn' | 'lookup'
}

/**
 * Request parameters for deleteIdentitySessions operation in IdentityApi.
 * @export
 * @interface IdentityApiDeleteIdentitySessionsRequest
 */
export interface IdentityApiDeleteIdentitySessionsRequest {
    /**
     * ID is the identity\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiDeleteIdentitySessions
     */
    readonly id: string
}

/**
 * Request parameters for disableSession operation in IdentityApi.
 * @export
 * @interface IdentityApiDisableSessionRequest
 */
export interface IdentityApiDisableSessionRequest {
    /**
     * ID is the session\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiDisableSession
     */
    readonly id: string
}

/**
 * Request parameters for extendSession operation in IdentityApi.
 * @export
 * @interface IdentityApiExtendSessionRequest
 */
export interface IdentityApiExtendSessionRequest {
    /**
     * ID is the session\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiExtendSession
     */
    readonly id: string
}

/**
 * Request parameters for getIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiGetIdentityRequest
 */
export interface IdentityApiGetIdentityRequest {
    /**
     * ID must be set to the ID of identity you want to get
     * @type {string}
     * @memberof IdentityApiGetIdentity
     */
    readonly id: string

    /**
     * Include Credentials in Response  Currently, only &#x60;oidc&#x60; is supported. This will return the initial OAuth 2.0 Access, Refresh and (optionally) OpenID Connect ID Token.
     * @type {Array<string>}
     * @memberof IdentityApiGetIdentity
     */
    readonly includeCredential?: Array<string>
}

/**
 * Request parameters for getIdentitySchema operation in IdentityApi.
 * @export
 * @interface IdentityApiGetIdentitySchemaRequest
 */
export interface IdentityApiGetIdentitySchemaRequest {
    /**
     * ID must be set to the ID of schema you want to get
     * @type {string}
     * @memberof IdentityApiGetIdentitySchema
     */
    readonly id: string
}

/**
 * Request parameters for getSession operation in IdentityApi.
 * @export
 * @interface IdentityApiGetSessionRequest
 */
export interface IdentityApiGetSessionRequest {
    /**
     * ID is the session\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiGetSession
     */
    readonly id: string

    /**
     * ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. Example - ?expand&#x3D;Identity&amp;expand&#x3D;Devices If no value is provided, the expandable properties are skipped.
     * @type {Array<string>}
     * @memberof IdentityApiGetSession
     */
    readonly expand?: Array<string>
}

/**
 * Request parameters for listIdentities operation in IdentityApi.
 * @export
 * @interface IdentityApiListIdentitiesRequest
 */
export interface IdentityApiListIdentitiesRequest {
    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof IdentityApiListIdentities
     */
    readonly perPage?: number

    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof IdentityApiListIdentities
     */
    readonly page?: number

    /**
     * CredentialsIdentifier is the identifier (username, email) of the credentials to look up.
     * @type {string}
     * @memberof IdentityApiListIdentities
     */
    readonly credentialsIdentifier?: string
}

/**
 * Request parameters for listIdentitySchemas operation in IdentityApi.
 * @export
 * @interface IdentityApiListIdentitySchemasRequest
 */
export interface IdentityApiListIdentitySchemasRequest {
    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof IdentityApiListIdentitySchemas
     */
    readonly perPage?: number

    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof IdentityApiListIdentitySchemas
     */
    readonly page?: number
}

/**
 * Request parameters for listIdentitySessions operation in IdentityApi.
 * @export
 * @interface IdentityApiListIdentitySessionsRequest
 */
export interface IdentityApiListIdentitySessionsRequest {
    /**
     * ID is the identity\&#39;s ID.
     * @type {string}
     * @memberof IdentityApiListIdentitySessions
     */
    readonly id: string

    /**
     * Items per Page  This is the number of items per page.
     * @type {number}
     * @memberof IdentityApiListIdentitySessions
     */
    readonly perPage?: number

    /**
     * Pagination Page  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
     * @type {number}
     * @memberof IdentityApiListIdentitySessions
     */
    readonly page?: number

    /**
     * Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @type {boolean}
     * @memberof IdentityApiListIdentitySessions
     */
    readonly active?: boolean
}

/**
 * Request parameters for listSessions operation in IdentityApi.
 * @export
 * @interface IdentityApiListSessionsRequest
 */
export interface IdentityApiListSessionsRequest {
    /**
     * Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof IdentityApiListSessions
     */
    readonly pageSize?: number

    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof IdentityApiListSessions
     */
    readonly pageToken?: string

    /**
     * Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
     * @type {boolean}
     * @memberof IdentityApiListSessions
     */
    readonly active?: boolean

    /**
     * ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session. If no value is provided, the expandable properties are skipped.
     * @type {Array<string>}
     * @memberof IdentityApiListSessions
     */
    readonly expand?: Array<string>
}

/**
 * Request parameters for patchIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiPatchIdentityRequest
 */
export interface IdentityApiPatchIdentityRequest {
    /**
     * ID must be set to the ID of identity you want to update
     * @type {string}
     * @memberof IdentityApiPatchIdentity
     */
    readonly id: string

    /**
     * 
     * @type {Array<JsonPatch>}
     * @memberof IdentityApiPatchIdentity
     */
    readonly jsonPatch?: Array<JsonPatch>
}

/**
 * Request parameters for updateIdentity operation in IdentityApi.
 * @export
 * @interface IdentityApiUpdateIdentityRequest
 */
export interface IdentityApiUpdateIdentityRequest {
    /**
     * ID must be set to the ID of identity you want to update
     * @type {string}
     * @memberof IdentityApiUpdateIdentity
     */
    readonly id: string

    /**
     * 
     * @type {UpdateIdentityBody}
     * @memberof IdentityApiUpdateIdentity
     */
    readonly updateIdentityBody?: UpdateIdentityBody
}

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * Creates or delete multiple [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model). This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
     * @summary Create and deletes multiple identities
     * @param {IdentityApiBatchPatchIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public batchPatchIdentities(requestParameters: IdentityApiBatchPatchIdentitiesRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).batchPatchIdentities(requestParameters.patchIdentitiesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model).  This endpoint can also be used to [import credentials](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities) for instance passwords, social sign in configurations or multifactor methods.
     * @summary Create an Identity
     * @param {IdentityApiCreateIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public createIdentity(requestParameters: IdentityApiCreateIdentityRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).createIdentity(requestParameters.createIdentityBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates a recovery code which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Code
     * @param {IdentityApiCreateRecoveryCodeForIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public createRecoveryCodeForIdentity(requestParameters: IdentityApiCreateRecoveryCodeForIdentityRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).createRecoveryCodeForIdentity(requestParameters.createRecoveryCodeForIdentityBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates a recovery link which should be given to the user in order for them to recover (or activate) their account.
     * @summary Create a Recovery Link
     * @param {IdentityApiCreateRecoveryLinkForIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public createRecoveryLinkForIdentity(requestParameters: IdentityApiCreateRecoveryLinkForIdentityRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).createRecoveryLinkForIdentity(requestParameters.createRecoveryLinkForIdentityBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint irrecoverably and permanently deletes the [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) given its ID. This action can not be undone. This endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is assumed that is has been deleted already.
     * @summary Delete an Identity
     * @param {IdentityApiDeleteIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public deleteIdentity(requestParameters: IdentityApiDeleteIdentityRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).deleteIdentity(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) credential by its type You can only delete second factor (aal2) credentials.
     * @summary Delete a credential for a specific identity
     * @param {IdentityApiDeleteIdentityCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public deleteIdentityCredentials(requestParameters: IdentityApiDeleteIdentityCredentialsRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).deleteIdentityCredentials(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint irrecoverably and permanently deletes and invalidates all sessions that belong to the given Identity.
     * @summary Delete & Invalidate an Identity\'s Sessions
     * @param {IdentityApiDeleteIdentitySessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public deleteIdentitySessions(requestParameters: IdentityApiDeleteIdentitySessionsRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).deleteIdentitySessions(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint deactivates the specified session. Session data is not deleted.
     * @summary Deactivate a Session
     * @param {IdentityApiDisableSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public disableSession(requestParameters: IdentityApiDisableSessionRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).disableSession(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling this endpoint extends the given session ID. If `session.earliest_possible_extend` is set it will only extend the session after the specified time has passed.  Retrieve the session ID from the `/sessions/whoami` endpoint / `toSession` SDK method.
     * @summary Extend a Session
     * @param {IdentityApiExtendSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public extendSession(requestParameters: IdentityApiExtendSessionRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).extendSession(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) by its ID. You can optionally include credentials (e.g. social sign in connections) in the response by using the `include_credential` query parameter.
     * @summary Get an Identity
     * @param {IdentityApiGetIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public getIdentity(requestParameters: IdentityApiGetIdentityRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).getIdentity(requestParameters.id, requestParameters.includeCredential, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific identity schema.
     * @summary Get Identity JSON Schema
     * @param {IdentityApiGetIdentitySchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public getIdentitySchema(requestParameters: IdentityApiGetIdentitySchemaRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).getIdentitySchema(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is useful for:  Getting a session object with all specified expandables that exist in an administrative context.
     * @summary Get Session
     * @param {IdentityApiGetSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public getSession(requestParameters: IdentityApiGetSessionRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).getSession(requestParameters.id, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all [identities](https://www.ory.sh/docs/kratos/concepts/identity-user-model) in the system.
     * @summary List Identities
     * @param {IdentityApiListIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public listIdentities(requestParameters: IdentityApiListIdentitiesRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).listIdentities(requestParameters.perPage, requestParameters.page, requestParameters.credentialsIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all identity schemas currently in use.
     * @summary Get all Identity Schemas
     * @param {IdentityApiListIdentitySchemasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public listIdentitySchemas(requestParameters: IdentityApiListIdentitySchemasRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).listIdentitySchemas(requestParameters.perPage, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns all sessions that belong to the given Identity.
     * @summary List an Identity\'s Sessions
     * @param {IdentityApiListIdentitySessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public listIdentitySessions(requestParameters: IdentityApiListIdentitySessionsRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).listIdentitySessions(requestParameters.id, requestParameters.perPage, requestParameters.page, requestParameters.active, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Listing all sessions that exist.
     * @summary List All Sessions
     * @param {IdentityApiListSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public listSessions(requestParameters: IdentityApiListSessionsRequest = {}, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).listSessions(requestParameters.pageSize, requestParameters.pageToken, requestParameters.active, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an [identity\'s](https://www.ory.sh/docs/kratos/concepts/identity-user-model) field using [JSON Patch](https://jsonpatch.com/). The fields `id`, `stateChangedAt` and `credentials` can not be updated using this method.
     * @summary Patch an Identity
     * @param {IdentityApiPatchIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public patchIdentity(requestParameters: IdentityApiPatchIdentityRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).patchIdentity(requestParameters.id, requestParameters.jsonPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates an [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model). The full identity payload (except credentials) is expected. It is possible to update the identity\'s credentials as well.
     * @summary Update an Identity
     * @param {IdentityApiUpdateIdentityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public updateIdentity(requestParameters: IdentityApiUpdateIdentityRequest, options?: AxiosRequestConfig) {
        return IdentityApiFp(this.configuration).updateIdentity(requestParameters.id, requestParameters.updateIdentityBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JwkApi - axios parameter creator
 * @export
 */
export const JwkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Create JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {CreateJsonWebKeySet} createJsonWebKeySet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJsonWebKeySet: async (set: string, createJsonWebKeySet: CreateJsonWebKeySet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('createJsonWebKeySet', 'set', set)
            // verify required parameter 'createJsonWebKeySet' is not null or undefined
            assertParamExists('createJsonWebKeySet', 'createJsonWebKeySet', createJsonWebKeySet)
            const localVarPath = `/admin/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJsonWebKeySet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key
         * @param {string} set The JSON Web Key Set
         * @param {string} kid The JSON Web Key ID (kid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKey: async (set: string, kid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('deleteJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('deleteJsonWebKey', 'kid', kid)
            const localVarPath = `/admin/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key Set
         * @param {string} set The JSON Web Key Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKeySet: async (set: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('deleteJsonWebKeySet', 'set', set)
            const localVarPath = `/admin/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
         * @summary Get JSON Web Key
         * @param {string} set JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey: async (set: string, kid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('getJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('getJsonWebKey', 'kid', kid)
            const localVarPath = `/admin/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set JSON Web Key Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKeySet: async (set: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('getJsonWebKeySet', 'set', set)
            const localVarPath = `/admin/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Set JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {JsonWebKey} [jsonWebKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJsonWebKey: async (set: string, kid: string, jsonWebKey?: JsonWebKey, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('setJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('setJsonWebKey', 'kid', kid)
            const localVarPath = `/admin/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonWebKey, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The JSON Web Key Set ID
         * @param {JsonWebKeySet} [jsonWebKeySet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJsonWebKeySet: async (set: string, jsonWebKeySet?: JsonWebKeySet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('setJsonWebKeySet', 'set', set)
            const localVarPath = `/admin/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonWebKeySet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JwkApi - functional programming interface
 * @export
 */
export const JwkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JwkApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Create JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {CreateJsonWebKeySet} createJsonWebKeySet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJsonWebKeySet(set: string, createJsonWebKeySet: CreateJsonWebKeySet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJsonWebKeySet(set, createJsonWebKeySet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key
         * @param {string} set The JSON Web Key Set
         * @param {string} kid The JSON Web Key ID (kid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJsonWebKey(set, kid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key Set
         * @param {string} set The JSON Web Key Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJsonWebKeySet(set, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
         * @summary Get JSON Web Key
         * @param {string} set JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJsonWebKey(set, kid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set JSON Web Key Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJsonWebKeySet(set, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Set JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {JsonWebKey} [jsonWebKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setJsonWebKey(set, kid, jsonWebKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The JSON Web Key Set ID
         * @param {JsonWebKeySet} [jsonWebKeySet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setJsonWebKeySet(set, jsonWebKeySet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JwkApi - factory interface
 * @export
 */
export const JwkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JwkApiFp(configuration)
    return {
        /**
         * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Create JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {CreateJsonWebKeySet} createJsonWebKeySet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJsonWebKeySet(set: string, createJsonWebKeySet: CreateJsonWebKeySet, options?: any): AxiosPromise<JsonWebKeySet> {
            return localVarFp.createJsonWebKeySet(set, createJsonWebKeySet, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key
         * @param {string} set The JSON Web Key Set
         * @param {string} kid The JSON Web Key ID (kid)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKey(set: string, kid: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteJsonWebKey(set, kid, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Delete JSON Web Key Set
         * @param {string} set The JSON Web Key Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJsonWebKeySet(set: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteJsonWebKeySet(set, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
         * @summary Get JSON Web Key
         * @param {string} set JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKey(set: string, kid: string, options?: any): AxiosPromise<JsonWebKeySet> {
            return localVarFp.getJsonWebKey(set, kid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Retrieve a JSON Web Key Set
         * @param {string} set JSON Web Key Set ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJsonWebKeySet(set: string, options?: any): AxiosPromise<JsonWebKeySet> {
            return localVarFp.getJsonWebKeySet(set, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Set JSON Web Key
         * @param {string} set The JSON Web Key Set ID
         * @param {string} kid JSON Web Key ID
         * @param {JsonWebKey} [jsonWebKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJsonWebKey(set: string, kid: string, jsonWebKey?: JsonWebKey, options?: any): AxiosPromise<JsonWebKey> {
            return localVarFp.setJsonWebKey(set, kid, jsonWebKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
         * @summary Update a JSON Web Key Set
         * @param {string} set The JSON Web Key Set ID
         * @param {JsonWebKeySet} [jsonWebKeySet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setJsonWebKeySet(set: string, jsonWebKeySet?: JsonWebKeySet, options?: any): AxiosPromise<JsonWebKeySet> {
            return localVarFp.setJsonWebKeySet(set, jsonWebKeySet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createJsonWebKeySet operation in JwkApi.
 * @export
 * @interface JwkApiCreateJsonWebKeySetRequest
 */
export interface JwkApiCreateJsonWebKeySetRequest {
    /**
     * The JSON Web Key Set ID
     * @type {string}
     * @memberof JwkApiCreateJsonWebKeySet
     */
    readonly set: string

    /**
     * 
     * @type {CreateJsonWebKeySet}
     * @memberof JwkApiCreateJsonWebKeySet
     */
    readonly createJsonWebKeySet: CreateJsonWebKeySet
}

/**
 * Request parameters for deleteJsonWebKey operation in JwkApi.
 * @export
 * @interface JwkApiDeleteJsonWebKeyRequest
 */
export interface JwkApiDeleteJsonWebKeyRequest {
    /**
     * The JSON Web Key Set
     * @type {string}
     * @memberof JwkApiDeleteJsonWebKey
     */
    readonly set: string

    /**
     * The JSON Web Key ID (kid)
     * @type {string}
     * @memberof JwkApiDeleteJsonWebKey
     */
    readonly kid: string
}

/**
 * Request parameters for deleteJsonWebKeySet operation in JwkApi.
 * @export
 * @interface JwkApiDeleteJsonWebKeySetRequest
 */
export interface JwkApiDeleteJsonWebKeySetRequest {
    /**
     * The JSON Web Key Set
     * @type {string}
     * @memberof JwkApiDeleteJsonWebKeySet
     */
    readonly set: string
}

/**
 * Request parameters for getJsonWebKey operation in JwkApi.
 * @export
 * @interface JwkApiGetJsonWebKeyRequest
 */
export interface JwkApiGetJsonWebKeyRequest {
    /**
     * JSON Web Key Set ID
     * @type {string}
     * @memberof JwkApiGetJsonWebKey
     */
    readonly set: string

    /**
     * JSON Web Key ID
     * @type {string}
     * @memberof JwkApiGetJsonWebKey
     */
    readonly kid: string
}

/**
 * Request parameters for getJsonWebKeySet operation in JwkApi.
 * @export
 * @interface JwkApiGetJsonWebKeySetRequest
 */
export interface JwkApiGetJsonWebKeySetRequest {
    /**
     * JSON Web Key Set ID
     * @type {string}
     * @memberof JwkApiGetJsonWebKeySet
     */
    readonly set: string
}

/**
 * Request parameters for setJsonWebKey operation in JwkApi.
 * @export
 * @interface JwkApiSetJsonWebKeyRequest
 */
export interface JwkApiSetJsonWebKeyRequest {
    /**
     * The JSON Web Key Set ID
     * @type {string}
     * @memberof JwkApiSetJsonWebKey
     */
    readonly set: string

    /**
     * JSON Web Key ID
     * @type {string}
     * @memberof JwkApiSetJsonWebKey
     */
    readonly kid: string

    /**
     * 
     * @type {JsonWebKey}
     * @memberof JwkApiSetJsonWebKey
     */
    readonly jsonWebKey?: JsonWebKey
}

/**
 * Request parameters for setJsonWebKeySet operation in JwkApi.
 * @export
 * @interface JwkApiSetJsonWebKeySetRequest
 */
export interface JwkApiSetJsonWebKeySetRequest {
    /**
     * The JSON Web Key Set ID
     * @type {string}
     * @memberof JwkApiSetJsonWebKeySet
     */
    readonly set: string

    /**
     * 
     * @type {JsonWebKeySet}
     * @memberof JwkApiSetJsonWebKeySet
     */
    readonly jsonWebKeySet?: JsonWebKeySet
}

/**
 * JwkApi - object-oriented interface
 * @export
 * @class JwkApi
 * @extends {BaseAPI}
 */
export class JwkApi extends BaseAPI {
    /**
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Create JSON Web Key
     * @param {JwkApiCreateJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public createJsonWebKeySet(requestParameters: JwkApiCreateJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).createJsonWebKeySet(requestParameters.set, requestParameters.createJsonWebKeySet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete JSON Web Key
     * @param {JwkApiDeleteJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public deleteJsonWebKey(requestParameters: JwkApiDeleteJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).deleteJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Delete JSON Web Key Set
     * @param {JwkApiDeleteJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public deleteJsonWebKeySet(requestParameters: JwkApiDeleteJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).deleteJsonWebKeySet(requestParameters.set, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
     * @summary Get JSON Web Key
     * @param {JwkApiGetJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public getJsonWebKey(requestParameters: JwkApiGetJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).getJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Retrieve a JSON Web Key Set
     * @param {JwkApiGetJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public getJsonWebKeySet(requestParameters: JwkApiGetJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).getJsonWebKeySet(requestParameters.set, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Set JSON Web Key
     * @param {JwkApiSetJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public setJsonWebKey(requestParameters: JwkApiSetJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).setJsonWebKey(requestParameters.set, requestParameters.kid, requestParameters.jsonWebKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @summary Update a JSON Web Key Set
     * @param {JwkApiSetJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwkApi
     */
    public setJsonWebKeySet(requestParameters: JwkApiSetJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return JwkApiFp(this.configuration).setJsonWebKeySet(requestParameters.set, requestParameters.jsonWebKeySet, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isAlive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isAlive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isReady(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isReady(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive(options?: any): AxiosPromise<HealthStatus> {
            return localVarFp.isAlive(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.isReady(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * This endpoint returns the version of Ory Kratos.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getVersion(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public isAlive(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).isAlive(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a HTTP 200 status code when Ory Kratos is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Kratos, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public isReady(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).isReady(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OAuth2Api - axios parameter creator
 * @export
 */
export const OAuth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Accept OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2ConsentRequest: async (consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentChallenge' is not null or undefined
            assertParamExists('acceptOAuth2ConsentRequest', 'consentChallenge', consentChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/consent/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptOAuth2ConsentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2LoginRequest: async (loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginChallenge' is not null or undefined
            assertParamExists('acceptOAuth2LoginRequest', 'loginChallenge', loginChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/login/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptOAuth2LoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge OAuth 2.0 Logout Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2LogoutRequest: async (logoutChallenge: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutChallenge' is not null or undefined
            assertParamExists('acceptOAuth2LogoutRequest', 'logoutChallenge', logoutChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/logout/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
         * @summary Create OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client: async (oAuth2Client: OAuth2Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuth2Client' is not null or undefined
            assertParamExists('createOAuth2Client', 'oAuth2Client', oAuth2Client)
            const localVarPath = `/admin/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Delete OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOAuth2Client', 'id', id)
            const localVarPath = `/admin/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
         * @summary Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
         * @param {string} clientId OAuth 2.0 Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Token: async (clientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteOAuth2Token', 'clientId', clientId)
            const localVarPath = `/admin/oauth2/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrustedOAuth2JwtGrantIssuer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrustedOAuth2JwtGrantIssuer', 'id', id)
            const localVarPath = `/admin/trust/grants/jwt-bearer/issuers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOAuth2Client', 'id', id)
            const localVarPath = `/admin/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Get OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2ConsentRequest: async (consentChallenge: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentChallenge' is not null or undefined
            assertParamExists('getOAuth2ConsentRequest', 'consentChallenge', consentChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2LoginRequest: async (loginChallenge: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginChallenge' is not null or undefined
            assertParamExists('getOAuth2LoginRequest', 'loginChallenge', loginChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
         * @summary Get OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2LogoutRequest: async (logoutChallenge: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutChallenge' is not null or undefined
            assertParamExists('getOAuth2LogoutRequest', 'logoutChallenge', logoutChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrustedOAuth2JwtGrantIssuer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrustedOAuth2JwtGrantIssuer', 'id', id)
            const localVarPath = `/admin/trust/grants/jwt-bearer/issuers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
         * @summary Introspect OAuth2 Access and Refresh Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectOAuth2Token: async (token: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('introspectOAuth2Token', 'token', token)
            const localVarPath = `/admin/oauth2/introspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
         * @summary List OAuth 2.0 Clients
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients: async (pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (clientName !== undefined) {
                localVarQueryParameter['client_name'] = clientName;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
         * @summary List OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject The subject to list the consent sessions for.
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [loginSessionId] The login session id to list the consent sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2ConsentSessions: async (subject: string, pageSize?: number, pageToken?: string, loginSessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('listOAuth2ConsentSessions', 'subject', subject)
            const localVarPath = `/admin/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (loginSessionId !== undefined) {
                localVarQueryParameter['login_session_id'] = loginSessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {number} [maxItems] 
         * @param {number} [defaultItems] 
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrustedOAuth2JwtGrantIssuers: async (maxItems?: number, defaultItems?: number, issuer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/trust/grants/jwt-bearer/issuers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxItems !== undefined) {
                localVarQueryParameter['MaxItems'] = maxItems;
            }

            if (defaultItems !== undefined) {
                localVarQueryParameter['DefaultItems'] = defaultItems;
            }

            if (issuer !== undefined) {
                localVarQueryParameter['issuer'] = issuer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Authorize: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType 
         * @param {string} [clientId] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenExchange: async (grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('oauth2TokenExchange', 'grantType', grantType)
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (redirectUri !== undefined) { 
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<JsonPatch>} jsonPatch OAuth 2.0 Client JSON Patch Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOAuth2Client: async (id: string, jsonPatch: Array<JsonPatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOAuth2Client', 'id', id)
            // verify required parameter 'jsonPatch' is not null or undefined
            assertParamExists('patchOAuth2Client', 'jsonPatch', jsonPatch)
            const localVarPath = `/admin/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Reject OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2ConsentRequest: async (consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentChallenge' is not null or undefined
            assertParamExists('rejectOAuth2ConsentRequest', 'consentChallenge', consentChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/consent/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (consentChallenge !== undefined) {
                localVarQueryParameter['consent_challenge'] = consentChallenge;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rejectOAuth2Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2LoginRequest: async (loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginChallenge' is not null or undefined
            assertParamExists('rejectOAuth2LoginRequest', 'loginChallenge', loginChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/login/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (loginChallenge !== undefined) {
                localVarQueryParameter['login_challenge'] = loginChallenge;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rejectOAuth2Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2LogoutRequest: async (logoutChallenge: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutChallenge' is not null or undefined
            assertParamExists('rejectOAuth2LogoutRequest', 'logoutChallenge', logoutChallenge)
            const localVarPath = `/admin/oauth2/auth/requests/logout/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logoutChallenge !== undefined) {
                localVarQueryParameter['logout_challenge'] = logoutChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
         * @summary Revoke OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
         * @param {string} [client] OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID.
         * @param {boolean} [all] Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2ConsentSessions: async (subject: string, client?: string, all?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('revokeOAuth2ConsentSessions', 'subject', subject)
            const localVarPath = `/admin/oauth2/auth/sessions/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (client !== undefined) {
                localVarQueryParameter['client'] = client;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
         * @summary Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
         * @param {string} [subject] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {string} [sid] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2LoginSessions: async (subject?: string, sid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/oauth2/auth/sessions/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (sid !== undefined) {
                localVarQueryParameter['sid'] = sid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth 2.0 Access or Refresh Token
         * @param {string} token 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2Token: async (token: string, clientId?: string, clientSecret?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('revokeOAuth2Token', 'token', token)
            const localVarPath = `/oauth2/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth 2.0 Client
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOAuth2Client: async (id: string, oAuth2Client: OAuth2Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setOAuth2Client', 'id', id)
            // verify required parameter 'oAuth2Client' is not null or undefined
            assertParamExists('setOAuth2Client', 'oAuth2Client', oAuth2Client)
            const localVarPath = `/admin/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
         * @summary Set OAuth2 Client Token Lifespans
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2ClientTokenLifespans} [oAuth2ClientTokenLifespans] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOAuth2ClientLifespans: async (id: string, oAuth2ClientTokenLifespans?: OAuth2ClientTokenLifespans, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setOAuth2ClientLifespans', 'id', id)
            const localVarPath = `/admin/clients/{id}/lifespans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2ClientTokenLifespans, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustOAuth2JwtGrantIssuer} [trustOAuth2JwtGrantIssuer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trustOAuth2JwtGrantIssuer: async (trustOAuth2JwtGrantIssuer?: TrustOAuth2JwtGrantIssuer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/trust/grants/jwt-bearer/issuers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trustOAuth2JwtGrantIssuer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuth2Api - functional programming interface
 * @export
 */
export const OAuth2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuth2ApiAxiosParamCreator(configuration)
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Accept OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2RedirectTo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptOAuth2ConsentRequest(consentChallenge, acceptOAuth2ConsentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2RedirectTo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptOAuth2LoginRequest(loginChallenge, acceptOAuth2LoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge OAuth 2.0 Logout Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2RedirectTo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptOAuth2LogoutRequest(logoutChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
         * @summary Create OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOAuth2Client(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOAuth2Client(oAuth2Client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Delete OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
         * @summary Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
         * @param {string} clientId OAuth 2.0 Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOAuth2Token(clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOAuth2Token(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrustedOAuth2JwtGrantIssuer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOAuth2Client(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuth2Client(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Get OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOAuth2ConsentRequest(consentChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2ConsentRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuth2ConsentRequest(consentChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOAuth2LoginRequest(loginChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2LoginRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuth2LoginRequest(loginChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
         * @summary Get OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2LogoutRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOAuth2LogoutRequest(logoutChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrustedOAuth2JwtGrantIssuer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedOAuth2JwtGrantIssuer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrustedOAuth2JwtGrantIssuer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
         * @summary Introspect OAuth2 Access and Refresh Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async introspectOAuth2Token(token: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectedOAuth2Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.introspectOAuth2Token(token, scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
         * @summary List OAuth 2.0 Clients
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OAuth2Client>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOAuth2Clients(pageSize, pageToken, clientName, owner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
         * @summary List OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject The subject to list the consent sessions for.
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [loginSessionId] The login session id to list the consent sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOAuth2ConsentSessions(subject: string, pageSize?: number, pageToken?: string, loginSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OAuth2ConsentSession>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOAuth2ConsentSessions(subject, pageSize, pageToken, loginSessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {number} [maxItems] 
         * @param {number} [defaultItems] 
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrustedOAuth2JwtGrantIssuer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrustedOAuth2JwtGrantIssuers(maxItems, defaultItems, issuer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuth2Authorize(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorOAuth2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuth2Authorize(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType 
         * @param {string} [clientId] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2TokenExchange(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2TokenExchange>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2TokenExchange(grantType, clientId, code, redirectUri, refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<JsonPatch>} jsonPatch OAuth 2.0 Client JSON Patch Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOAuth2Client(id, jsonPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Reject OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2RedirectTo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectOAuth2ConsentRequest(consentChallenge, rejectOAuth2Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2RedirectTo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectOAuth2LoginRequest(loginChallenge, rejectOAuth2Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectOAuth2LogoutRequest(logoutChallenge: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectOAuth2LogoutRequest(logoutChallenge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
         * @summary Revoke OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
         * @param {string} [client] OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID.
         * @param {boolean} [all] Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOAuth2ConsentSessions(subject, client, all, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
         * @summary Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
         * @param {string} [subject] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {string} [sid] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOAuth2LoginSessions(subject?: string, sid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOAuth2LoginSessions(subject, sid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth 2.0 Access or Refresh Token
         * @param {string} token 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOAuth2Token(token: string, clientId?: string, clientSecret?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOAuth2Token(token, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth 2.0 Client
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOAuth2Client(id, oAuth2Client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
         * @summary Set OAuth2 Client Token Lifespans
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2ClientTokenLifespans} [oAuth2ClientTokenLifespans] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOAuth2ClientLifespans(id: string, oAuth2ClientTokenLifespans?: OAuth2ClientTokenLifespans, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOAuth2ClientLifespans(id, oAuth2ClientTokenLifespans, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustOAuth2JwtGrantIssuer} [trustOAuth2JwtGrantIssuer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer?: TrustOAuth2JwtGrantIssuer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrustedOAuth2JwtGrantIssuer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OAuth2Api - factory interface
 * @export
 */
export const OAuth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuth2ApiFp(configuration)
    return {
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Accept OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {AcceptOAuth2ConsentRequest} [acceptOAuth2ConsentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2ConsentRequest(consentChallenge: string, acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest, options?: any): AxiosPromise<OAuth2RedirectTo> {
            return localVarFp.acceptOAuth2ConsentRequest(consentChallenge, acceptOAuth2ConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {AcceptOAuth2LoginRequest} [acceptOAuth2LoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2LoginRequest(loginChallenge: string, acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest, options?: any): AxiosPromise<OAuth2RedirectTo> {
            return localVarFp.acceptOAuth2LoginRequest(loginChallenge, acceptOAuth2LoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
         * @summary Accept OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge OAuth 2.0 Logout Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptOAuth2LogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<OAuth2RedirectTo> {
            return localVarFp.acceptOAuth2LogoutRequest(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
         * @summary Create OAuth 2.0 Client
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOAuth2Client(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.createOAuth2Client(oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
         * @summary Delete OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Client(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
         * @summary Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
         * @param {string} clientId OAuth 2.0 Client ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOAuth2Token(clientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOAuth2Token(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
         * @summary Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrustedOAuth2JwtGrantIssuer(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTrustedOAuth2JwtGrantIssuer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Get an OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2Client(id: string, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.getOAuth2Client(id, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Get OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2ConsentRequest(consentChallenge: string, options?: any): AxiosPromise<OAuth2ConsentRequest> {
            return localVarFp.getOAuth2ConsentRequest(consentChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
         * @summary Get OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2LoginRequest(loginChallenge: string, options?: any): AxiosPromise<OAuth2LoginRequest> {
            return localVarFp.getOAuth2LoginRequest(loginChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
         * @summary Get OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOAuth2LogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<OAuth2LogoutRequest> {
            return localVarFp.getOAuth2LogoutRequest(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
         * @summary Get Trusted OAuth2 JWT Bearer Grant Type Issuer
         * @param {string} id The id of the desired grant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrustedOAuth2JwtGrantIssuer(id: string, options?: any): AxiosPromise<TrustedOAuth2JwtGrantIssuer> {
            return localVarFp.getTrustedOAuth2JwtGrantIssuer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
         * @summary Introspect OAuth2 Access and Refresh Tokens
         * @param {string} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
         * @param {string} [scope] An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectOAuth2Token(token: string, scope?: string, options?: any): AxiosPromise<IntrospectedOAuth2Token> {
            return localVarFp.introspectOAuth2Token(token, scope, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
         * @summary List OAuth 2.0 Clients
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [clientName] The name of the clients to filter by.
         * @param {string} [owner] The owner of the clients to filter by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2Clients(pageSize?: number, pageToken?: string, clientName?: string, owner?: string, options?: any): AxiosPromise<Array<OAuth2Client>> {
            return localVarFp.listOAuth2Clients(pageSize, pageToken, clientName, owner, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
         * @summary List OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject The subject to list the consent sessions for.
         * @param {number} [pageSize] Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [pageToken] Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         * @param {string} [loginSessionId] The login session id to list the consent sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOAuth2ConsentSessions(subject: string, pageSize?: number, pageToken?: string, loginSessionId?: string, options?: any): AxiosPromise<Array<OAuth2ConsentSession>> {
            return localVarFp.listOAuth2ConsentSessions(subject, pageSize, pageToken, loginSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
         * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
         * @param {number} [maxItems] 
         * @param {number} [defaultItems] 
         * @param {string} [issuer] If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrustedOAuth2JwtGrantIssuers(maxItems?: number, defaultItems?: number, issuer?: string, options?: any): AxiosPromise<Array<TrustedOAuth2JwtGrantIssuer>> {
            return localVarFp.listTrustedOAuth2JwtGrantIssuers(maxItems, defaultItems, issuer, options).then((request) => request(axios, basePath));
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary OAuth 2.0 Authorize Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Authorize(options?: any): AxiosPromise<ErrorOAuth2> {
            return localVarFp.oAuth2Authorize(options).then((request) => request(axios, basePath));
        },
        /**
         * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
         * @summary The OAuth 2.0 Token Endpoint
         * @param {string} grantType 
         * @param {string} [clientId] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenExchange(grantType: string, clientId?: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): AxiosPromise<OAuth2TokenExchange> {
            return localVarFp.oauth2TokenExchange(grantType, clientId, code, redirectUri, refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Patch OAuth 2.0 Client
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {Array<JsonPatch>} jsonPatch OAuth 2.0 Client JSON Patch Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOAuth2Client(id: string, jsonPatch: Array<JsonPatch>, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.patchOAuth2Client(id, jsonPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
         * @summary Reject OAuth 2.0 Consent Request
         * @param {string} consentChallenge OAuth 2.0 Consent Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2ConsentRequest(consentChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: any): AxiosPromise<OAuth2RedirectTo> {
            return localVarFp.rejectOAuth2ConsentRequest(consentChallenge, rejectOAuth2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
         * @summary Reject OAuth 2.0 Login Request
         * @param {string} loginChallenge OAuth 2.0 Login Request Challenge
         * @param {RejectOAuth2Request} [rejectOAuth2Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2LoginRequest(loginChallenge: string, rejectOAuth2Request?: RejectOAuth2Request, options?: any): AxiosPromise<OAuth2RedirectTo> {
            return localVarFp.rejectOAuth2LoginRequest(loginChallenge, rejectOAuth2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
         * @summary Reject OAuth 2.0 Session Logout Request
         * @param {string} logoutChallenge 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOAuth2LogoutRequest(logoutChallenge: string, options?: any): AxiosPromise<void> {
            return localVarFp.rejectOAuth2LogoutRequest(logoutChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
         * @summary Revoke OAuth 2.0 Consent Sessions of a Subject
         * @param {string} subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
         * @param {string} [client] OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID.
         * @param {boolean} [all] Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2ConsentSessions(subject: string, client?: string, all?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.revokeOAuth2ConsentSessions(subject, client, all, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
         * @summary Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
         * @param {string} [subject] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {string} [sid] OAuth 2.0 Subject  The subject to revoke authentication sessions for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2LoginSessions(subject?: string, sid?: string, options?: any): AxiosPromise<void> {
            return localVarFp.revokeOAuth2LoginSessions(subject, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
         * @summary Revoke OAuth 2.0 Access or Refresh Token
         * @param {string} token 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOAuth2Token(token: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<void> {
            return localVarFp.revokeOAuth2Token(token, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth 2.0 Client
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOAuth2Client(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.setOAuth2Client(id, oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
         * @summary Set OAuth2 Client Token Lifespans
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2ClientTokenLifespans} [oAuth2ClientTokenLifespans] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOAuth2ClientLifespans(id: string, oAuth2ClientTokenLifespans?: OAuth2ClientTokenLifespans, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.setOAuth2ClientLifespans(id, oAuth2ClientTokenLifespans, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
         * @summary Trust OAuth2 JWT Bearer Grant Type Issuer
         * @param {TrustOAuth2JwtGrantIssuer} [trustOAuth2JwtGrantIssuer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer?: TrustOAuth2JwtGrantIssuer, options?: any): AxiosPromise<TrustedOAuth2JwtGrantIssuer> {
            return localVarFp.trustOAuth2JwtGrantIssuer(trustOAuth2JwtGrantIssuer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptOAuth2ConsentRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiAcceptOAuth2ConsentRequestRequest
 */
export interface OAuth2ApiAcceptOAuth2ConsentRequestRequest {
    /**
     * OAuth 2.0 Consent Request Challenge
     * @type {string}
     * @memberof OAuth2ApiAcceptOAuth2ConsentRequest
     */
    readonly consentChallenge: string

    /**
     * 
     * @type {AcceptOAuth2ConsentRequest}
     * @memberof OAuth2ApiAcceptOAuth2ConsentRequest
     */
    readonly acceptOAuth2ConsentRequest?: AcceptOAuth2ConsentRequest
}

/**
 * Request parameters for acceptOAuth2LoginRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiAcceptOAuth2LoginRequestRequest
 */
export interface OAuth2ApiAcceptOAuth2LoginRequestRequest {
    /**
     * OAuth 2.0 Login Request Challenge
     * @type {string}
     * @memberof OAuth2ApiAcceptOAuth2LoginRequest
     */
    readonly loginChallenge: string

    /**
     * 
     * @type {AcceptOAuth2LoginRequest}
     * @memberof OAuth2ApiAcceptOAuth2LoginRequest
     */
    readonly acceptOAuth2LoginRequest?: AcceptOAuth2LoginRequest
}

/**
 * Request parameters for acceptOAuth2LogoutRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiAcceptOAuth2LogoutRequestRequest
 */
export interface OAuth2ApiAcceptOAuth2LogoutRequestRequest {
    /**
     * OAuth 2.0 Logout Request Challenge
     * @type {string}
     * @memberof OAuth2ApiAcceptOAuth2LogoutRequest
     */
    readonly logoutChallenge: string
}

/**
 * Request parameters for createOAuth2Client operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiCreateOAuth2ClientRequest
 */
export interface OAuth2ApiCreateOAuth2ClientRequest {
    /**
     * OAuth 2.0 Client Request Body
     * @type {OAuth2Client}
     * @memberof OAuth2ApiCreateOAuth2Client
     */
    readonly oAuth2Client: OAuth2Client
}

/**
 * Request parameters for deleteOAuth2Client operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiDeleteOAuth2ClientRequest
 */
export interface OAuth2ApiDeleteOAuth2ClientRequest {
    /**
     * The id of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2ApiDeleteOAuth2Client
     */
    readonly id: string
}

/**
 * Request parameters for deleteOAuth2Token operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiDeleteOAuth2TokenRequest
 */
export interface OAuth2ApiDeleteOAuth2TokenRequest {
    /**
     * OAuth 2.0 Client ID
     * @type {string}
     * @memberof OAuth2ApiDeleteOAuth2Token
     */
    readonly clientId: string
}

/**
 * Request parameters for deleteTrustedOAuth2JwtGrantIssuer operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiDeleteTrustedOAuth2JwtGrantIssuerRequest
 */
export interface OAuth2ApiDeleteTrustedOAuth2JwtGrantIssuerRequest {
    /**
     * The id of the desired grant
     * @type {string}
     * @memberof OAuth2ApiDeleteTrustedOAuth2JwtGrantIssuer
     */
    readonly id: string
}

/**
 * Request parameters for getOAuth2Client operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiGetOAuth2ClientRequest
 */
export interface OAuth2ApiGetOAuth2ClientRequest {
    /**
     * The id of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2ApiGetOAuth2Client
     */
    readonly id: string
}

/**
 * Request parameters for getOAuth2ConsentRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiGetOAuth2ConsentRequestRequest
 */
export interface OAuth2ApiGetOAuth2ConsentRequestRequest {
    /**
     * OAuth 2.0 Consent Request Challenge
     * @type {string}
     * @memberof OAuth2ApiGetOAuth2ConsentRequest
     */
    readonly consentChallenge: string
}

/**
 * Request parameters for getOAuth2LoginRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiGetOAuth2LoginRequestRequest
 */
export interface OAuth2ApiGetOAuth2LoginRequestRequest {
    /**
     * OAuth 2.0 Login Request Challenge
     * @type {string}
     * @memberof OAuth2ApiGetOAuth2LoginRequest
     */
    readonly loginChallenge: string
}

/**
 * Request parameters for getOAuth2LogoutRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiGetOAuth2LogoutRequestRequest
 */
export interface OAuth2ApiGetOAuth2LogoutRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiGetOAuth2LogoutRequest
     */
    readonly logoutChallenge: string
}

/**
 * Request parameters for getTrustedOAuth2JwtGrantIssuer operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiGetTrustedOAuth2JwtGrantIssuerRequest
 */
export interface OAuth2ApiGetTrustedOAuth2JwtGrantIssuerRequest {
    /**
     * The id of the desired grant
     * @type {string}
     * @memberof OAuth2ApiGetTrustedOAuth2JwtGrantIssuer
     */
    readonly id: string
}

/**
 * Request parameters for introspectOAuth2Token operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiIntrospectOAuth2TokenRequest
 */
export interface OAuth2ApiIntrospectOAuth2TokenRequest {
    /**
     * The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @type {string}
     * @memberof OAuth2ApiIntrospectOAuth2Token
     */
    readonly token: string

    /**
     * An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @type {string}
     * @memberof OAuth2ApiIntrospectOAuth2Token
     */
    readonly scope?: string
}

/**
 * Request parameters for listOAuth2Clients operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiListOAuth2ClientsRequest
 */
export interface OAuth2ApiListOAuth2ClientsRequest {
    /**
     * Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof OAuth2ApiListOAuth2Clients
     */
    readonly pageSize?: number

    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof OAuth2ApiListOAuth2Clients
     */
    readonly pageToken?: string

    /**
     * The name of the clients to filter by.
     * @type {string}
     * @memberof OAuth2ApiListOAuth2Clients
     */
    readonly clientName?: string

    /**
     * The owner of the clients to filter by.
     * @type {string}
     * @memberof OAuth2ApiListOAuth2Clients
     */
    readonly owner?: string
}

/**
 * Request parameters for listOAuth2ConsentSessions operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiListOAuth2ConsentSessionsRequest
 */
export interface OAuth2ApiListOAuth2ConsentSessionsRequest {
    /**
     * The subject to list the consent sessions for.
     * @type {string}
     * @memberof OAuth2ApiListOAuth2ConsentSessions
     */
    readonly subject: string

    /**
     * Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {number}
     * @memberof OAuth2ApiListOAuth2ConsentSessions
     */
    readonly pageSize?: number

    /**
     * Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     * @type {string}
     * @memberof OAuth2ApiListOAuth2ConsentSessions
     */
    readonly pageToken?: string

    /**
     * The login session id to list the consent sessions for.
     * @type {string}
     * @memberof OAuth2ApiListOAuth2ConsentSessions
     */
    readonly loginSessionId?: string
}

/**
 * Request parameters for listTrustedOAuth2JwtGrantIssuers operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiListTrustedOAuth2JwtGrantIssuersRequest
 */
export interface OAuth2ApiListTrustedOAuth2JwtGrantIssuersRequest {
    /**
     * 
     * @type {number}
     * @memberof OAuth2ApiListTrustedOAuth2JwtGrantIssuers
     */
    readonly maxItems?: number

    /**
     * 
     * @type {number}
     * @memberof OAuth2ApiListTrustedOAuth2JwtGrantIssuers
     */
    readonly defaultItems?: number

    /**
     * If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
     * @type {string}
     * @memberof OAuth2ApiListTrustedOAuth2JwtGrantIssuers
     */
    readonly issuer?: string
}

/**
 * Request parameters for oauth2TokenExchange operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiOauth2TokenExchangeRequest
 */
export interface OAuth2ApiOauth2TokenExchangeRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenExchange
     */
    readonly grantType: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenExchange
     */
    readonly clientId?: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenExchange
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenExchange
     */
    readonly redirectUri?: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiOauth2TokenExchange
     */
    readonly refreshToken?: string
}

/**
 * Request parameters for patchOAuth2Client operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiPatchOAuth2ClientRequest
 */
export interface OAuth2ApiPatchOAuth2ClientRequest {
    /**
     * The id of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OAuth2ApiPatchOAuth2Client
     */
    readonly id: string

    /**
     * OAuth 2.0 Client JSON Patch Body
     * @type {Array<JsonPatch>}
     * @memberof OAuth2ApiPatchOAuth2Client
     */
    readonly jsonPatch: Array<JsonPatch>
}

/**
 * Request parameters for rejectOAuth2ConsentRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRejectOAuth2ConsentRequestRequest
 */
export interface OAuth2ApiRejectOAuth2ConsentRequestRequest {
    /**
     * OAuth 2.0 Consent Request Challenge
     * @type {string}
     * @memberof OAuth2ApiRejectOAuth2ConsentRequest
     */
    readonly consentChallenge: string

    /**
     * 
     * @type {RejectOAuth2Request}
     * @memberof OAuth2ApiRejectOAuth2ConsentRequest
     */
    readonly rejectOAuth2Request?: RejectOAuth2Request
}

/**
 * Request parameters for rejectOAuth2LoginRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRejectOAuth2LoginRequestRequest
 */
export interface OAuth2ApiRejectOAuth2LoginRequestRequest {
    /**
     * OAuth 2.0 Login Request Challenge
     * @type {string}
     * @memberof OAuth2ApiRejectOAuth2LoginRequest
     */
    readonly loginChallenge: string

    /**
     * 
     * @type {RejectOAuth2Request}
     * @memberof OAuth2ApiRejectOAuth2LoginRequest
     */
    readonly rejectOAuth2Request?: RejectOAuth2Request
}

/**
 * Request parameters for rejectOAuth2LogoutRequest operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRejectOAuth2LogoutRequestRequest
 */
export interface OAuth2ApiRejectOAuth2LogoutRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiRejectOAuth2LogoutRequest
     */
    readonly logoutChallenge: string
}

/**
 * Request parameters for revokeOAuth2ConsentSessions operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRevokeOAuth2ConsentSessionsRequest
 */
export interface OAuth2ApiRevokeOAuth2ConsentSessionsRequest {
    /**
     * OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2ConsentSessions
     */
    readonly subject: string

    /**
     * OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID.
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2ConsentSessions
     */
    readonly client?: string

    /**
     * Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted.
     * @type {boolean}
     * @memberof OAuth2ApiRevokeOAuth2ConsentSessions
     */
    readonly all?: boolean
}

/**
 * Request parameters for revokeOAuth2LoginSessions operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRevokeOAuth2LoginSessionsRequest
 */
export interface OAuth2ApiRevokeOAuth2LoginSessionsRequest {
    /**
     * OAuth 2.0 Subject  The subject to revoke authentication sessions for.
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2LoginSessions
     */
    readonly subject?: string

    /**
     * OAuth 2.0 Subject  The subject to revoke authentication sessions for.
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2LoginSessions
     */
    readonly sid?: string
}

/**
 * Request parameters for revokeOAuth2Token operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiRevokeOAuth2TokenRequest
 */
export interface OAuth2ApiRevokeOAuth2TokenRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2Token
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2Token
     */
    readonly clientId?: string

    /**
     * 
     * @type {string}
     * @memberof OAuth2ApiRevokeOAuth2Token
     */
    readonly clientSecret?: string
}

/**
 * Request parameters for setOAuth2Client operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiSetOAuth2ClientRequest
 */
export interface OAuth2ApiSetOAuth2ClientRequest {
    /**
     * OAuth 2.0 Client ID
     * @type {string}
     * @memberof OAuth2ApiSetOAuth2Client
     */
    readonly id: string

    /**
     * OAuth 2.0 Client Request Body
     * @type {OAuth2Client}
     * @memberof OAuth2ApiSetOAuth2Client
     */
    readonly oAuth2Client: OAuth2Client
}

/**
 * Request parameters for setOAuth2ClientLifespans operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiSetOAuth2ClientLifespansRequest
 */
export interface OAuth2ApiSetOAuth2ClientLifespansRequest {
    /**
     * OAuth 2.0 Client ID
     * @type {string}
     * @memberof OAuth2ApiSetOAuth2ClientLifespans
     */
    readonly id: string

    /**
     * 
     * @type {OAuth2ClientTokenLifespans}
     * @memberof OAuth2ApiSetOAuth2ClientLifespans
     */
    readonly oAuth2ClientTokenLifespans?: OAuth2ClientTokenLifespans
}

/**
 * Request parameters for trustOAuth2JwtGrantIssuer operation in OAuth2Api.
 * @export
 * @interface OAuth2ApiTrustOAuth2JwtGrantIssuerRequest
 */
export interface OAuth2ApiTrustOAuth2JwtGrantIssuerRequest {
    /**
     * 
     * @type {TrustOAuth2JwtGrantIssuer}
     * @memberof OAuth2ApiTrustOAuth2JwtGrantIssuer
     */
    readonly trustOAuth2JwtGrantIssuer?: TrustOAuth2JwtGrantIssuer
}

/**
 * OAuth2Api - object-oriented interface
 * @export
 * @class OAuth2Api
 * @extends {BaseAPI}
 */
export class OAuth2Api extends BaseAPI {
    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @summary Accept OAuth 2.0 Consent Request
     * @param {OAuth2ApiAcceptOAuth2ConsentRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public acceptOAuth2ConsentRequest(requestParameters: OAuth2ApiAcceptOAuth2ConsentRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).acceptOAuth2ConsentRequest(requestParameters.consentChallenge, requestParameters.acceptOAuth2ConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject\'s ID and if Ory should remember the subject\'s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Accept OAuth 2.0 Login Request
     * @param {OAuth2ApiAcceptOAuth2LoginRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public acceptOAuth2LoginRequest(requestParameters: OAuth2ApiAcceptOAuth2LoginRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).acceptOAuth2LoginRequest(requestParameters.loginChallenge, requestParameters.acceptOAuth2LoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @summary Accept OAuth 2.0 Session Logout Request
     * @param {OAuth2ApiAcceptOAuth2LogoutRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public acceptOAuth2LogoutRequest(requestParameters: OAuth2ApiAcceptOAuth2LogoutRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).acceptOAuth2LogoutRequest(requestParameters.logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * @summary Create OAuth 2.0 Client
     * @param {OAuth2ApiCreateOAuth2ClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public createOAuth2Client(requestParameters: OAuth2ApiCreateOAuth2ClientRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).createOAuth2Client(requestParameters.oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @summary Delete OAuth 2.0 Client
     * @param {OAuth2ApiDeleteOAuth2ClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public deleteOAuth2Client(requestParameters: OAuth2ApiDeleteOAuth2ClientRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).deleteOAuth2Client(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * @summary Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     * @param {OAuth2ApiDeleteOAuth2TokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public deleteOAuth2Token(requestParameters: OAuth2ApiDeleteOAuth2TokenRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).deleteOAuth2Token(requestParameters.clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @summary Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {OAuth2ApiDeleteTrustedOAuth2JwtGrantIssuerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public deleteTrustedOAuth2JwtGrantIssuer(requestParameters: OAuth2ApiDeleteTrustedOAuth2JwtGrantIssuerRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).deleteTrustedOAuth2JwtGrantIssuer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Get an OAuth 2.0 Client
     * @param {OAuth2ApiGetOAuth2ClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public getOAuth2Client(requestParameters: OAuth2ApiGetOAuth2ClientRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).getOAuth2Client(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @summary Get OAuth 2.0 Consent Request
     * @param {OAuth2ApiGetOAuth2ConsentRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public getOAuth2ConsentRequest(requestParameters: OAuth2ApiGetOAuth2ConsentRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).getOAuth2ConsentRequest(requestParameters.consentChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @summary Get OAuth 2.0 Login Request
     * @param {OAuth2ApiGetOAuth2LoginRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public getOAuth2LoginRequest(requestParameters: OAuth2ApiGetOAuth2LoginRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).getOAuth2LoginRequest(requestParameters.loginChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * @summary Get OAuth 2.0 Session Logout Request
     * @param {OAuth2ApiGetOAuth2LogoutRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public getOAuth2LogoutRequest(requestParameters: OAuth2ApiGetOAuth2LogoutRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).getOAuth2LogoutRequest(requestParameters.logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @summary Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     * @param {OAuth2ApiGetTrustedOAuth2JwtGrantIssuerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public getTrustedOAuth2JwtGrantIssuer(requestParameters: OAuth2ApiGetTrustedOAuth2JwtGrantIssuerRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).getTrustedOAuth2JwtGrantIssuer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `session.access_token` during the consent flow.
     * @summary Introspect OAuth2 Access and Refresh Tokens
     * @param {OAuth2ApiIntrospectOAuth2TokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public introspectOAuth2Token(requestParameters: OAuth2ApiIntrospectOAuth2TokenRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).introspectOAuth2Token(requestParameters.token, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * @summary List OAuth 2.0 Clients
     * @param {OAuth2ApiListOAuth2ClientsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public listOAuth2Clients(requestParameters: OAuth2ApiListOAuth2ClientsRequest = {}, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).listOAuth2Clients(requestParameters.pageSize, requestParameters.pageToken, requestParameters.clientName, requestParameters.owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists all subject\'s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * @summary List OAuth 2.0 Consent Sessions of a Subject
     * @param {OAuth2ApiListOAuth2ConsentSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public listOAuth2ConsentSessions(requestParameters: OAuth2ApiListOAuth2ConsentSessionsRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).listOAuth2ConsentSessions(requestParameters.subject, requestParameters.pageSize, requestParameters.pageToken, requestParameters.loginSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @summary List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * @param {OAuth2ApiListTrustedOAuth2JwtGrantIssuersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public listTrustedOAuth2JwtGrantIssuers(requestParameters: OAuth2ApiListTrustedOAuth2JwtGrantIssuersRequest = {}, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).listTrustedOAuth2JwtGrantIssuers(requestParameters.maxItems, requestParameters.defaultItems, requestParameters.issuer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @summary OAuth 2.0 Authorize Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public oAuth2Authorize(options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).oAuth2Authorize(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @summary The OAuth 2.0 Token Endpoint
     * @param {OAuth2ApiOauth2TokenExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public oauth2TokenExchange(requestParameters: OAuth2ApiOauth2TokenExchangeRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).oauth2TokenExchange(requestParameters.grantType, requestParameters.clientId, requestParameters.code, requestParameters.redirectUri, requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Patch OAuth 2.0 Client
     * @param {OAuth2ApiPatchOAuth2ClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public patchOAuth2Client(requestParameters: OAuth2ApiPatchOAuth2ClientRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).patchOAuth2Client(requestParameters.id, requestParameters.jsonPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject\'s behalf.  The consent challenge is appended to the consent provider\'s URL to which the subject\'s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @summary Reject OAuth 2.0 Consent Request
     * @param {OAuth2ApiRejectOAuth2ConsentRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public rejectOAuth2ConsentRequest(requestParameters: OAuth2ApiRejectOAuth2ConsentRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).rejectOAuth2ConsentRequest(requestParameters.consentChallenge, requestParameters.rejectOAuth2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject\'s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @summary Reject OAuth 2.0 Login Request
     * @param {OAuth2ApiRejectOAuth2LoginRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public rejectOAuth2LoginRequest(requestParameters: OAuth2ApiRejectOAuth2LoginRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).rejectOAuth2LoginRequest(requestParameters.loginChallenge, requestParameters.rejectOAuth2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @summary Reject OAuth 2.0 Session Logout Request
     * @param {OAuth2ApiRejectOAuth2LogoutRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public rejectOAuth2LogoutRequest(requestParameters: OAuth2ApiRejectOAuth2LogoutRequestRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).rejectOAuth2LogoutRequest(requestParameters.logoutChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint revokes a subject\'s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * @summary Revoke OAuth 2.0 Consent Sessions of a Subject
     * @param {OAuth2ApiRevokeOAuth2ConsentSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public revokeOAuth2ConsentSessions(requestParameters: OAuth2ApiRevokeOAuth2ConsentSessionsRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).revokeOAuth2ConsentSessions(requestParameters.subject, requestParameters.client, requestParameters.all, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * @summary Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     * @param {OAuth2ApiRevokeOAuth2LoginSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public revokeOAuth2LoginSessions(requestParameters: OAuth2ApiRevokeOAuth2LoginSessionsRequest = {}, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).revokeOAuth2LoginSessions(requestParameters.subject, requestParameters.sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @summary Revoke OAuth 2.0 Access or Refresh Token
     * @param {OAuth2ApiRevokeOAuth2TokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public revokeOAuth2Token(requestParameters: OAuth2ApiRevokeOAuth2TokenRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).revokeOAuth2Token(requestParameters.token, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Set OAuth 2.0 Client
     * @param {OAuth2ApiSetOAuth2ClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public setOAuth2Client(requestParameters: OAuth2ApiSetOAuth2ClientRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).setOAuth2Client(requestParameters.id, requestParameters.oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * @summary Set OAuth2 Client Token Lifespans
     * @param {OAuth2ApiSetOAuth2ClientLifespansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public setOAuth2ClientLifespans(requestParameters: OAuth2ApiSetOAuth2ClientLifespansRequest, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).setOAuth2ClientLifespans(requestParameters.id, requestParameters.oAuth2ClientTokenLifespans, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @summary Trust OAuth2 JWT Bearer Grant Type Issuer
     * @param {OAuth2ApiTrustOAuth2JwtGrantIssuerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public trustOAuth2JwtGrantIssuer(requestParameters: OAuth2ApiTrustOAuth2JwtGrantIssuerRequest = {}, options?: AxiosRequestConfig) {
        return OAuth2ApiFp(this.configuration).trustOAuth2JwtGrantIssuer(requestParameters.trustOAuth2JwtGrantIssuer, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OidcApi - axios parameter creator
 * @export
 */
export const OidcApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register OAuth2 Client using OpenID Dynamic Client Registration
         * @param {OAuth2Client} oAuth2Client Dynamic Client Registration Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOidcDynamicClient: async (oAuth2Client: OAuth2Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuth2Client' is not null or undefined
            assertParamExists('createOidcDynamicClient', 'oAuth2Client', oAuth2Client)
            const localVarPath = `/oauth2/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOidcDynamicClient: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOidcDynamicClient', 'id', id)
            const localVarPath = `/oauth2/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A mechanism for an OpenID Connect Relying Party to discover the End-User\'s OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverOidcConfiguration: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/openid-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
         * @summary Get OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcDynamicClient: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOidcDynamicClient', 'id', id)
            const localVarPath = `/oauth2/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the payload of the ID Token, including `session.id_token` values, of the provided OAuth 2.0 Access Token\'s consent request.  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcUserInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
         * @summary OpenID Connect Front- and Back-channel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOidcSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/sessions/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the public internet directly to be used by third parties. It implements the OpenID Connect Dynamic Client Registration Protocol.  This feature is disabled per default. It can be enabled by a system administrator.  If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOidcDynamicClient: async (id: string, oAuth2Client: OAuth2Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setOidcDynamicClient', 'id', id)
            // verify required parameter 'oAuth2Client' is not null or undefined
            assertParamExists('setOidcDynamicClient', 'oAuth2Client', oAuth2Client)
            const localVarPath = `/oauth2/register/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuth2Client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OidcApi - functional programming interface
 * @export
 */
export const OidcApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OidcApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register OAuth2 Client using OpenID Dynamic Client Registration
         * @param {OAuth2Client} oAuth2Client Dynamic Client Registration Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOidcDynamicClient(oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOidcDynamicClient(oAuth2Client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOidcDynamicClient(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOidcDynamicClient(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A mechanism for an OpenID Connect Relying Party to discover the End-User\'s OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverOidcConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OidcConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverOidcConfiguration(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
         * @summary Get OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOidcDynamicClient(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOidcDynamicClient(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the payload of the ID Token, including `session.id_token` values, of the provided OAuth 2.0 Access Token\'s consent request.  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOidcUserInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OidcUserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOidcUserInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
         * @summary OpenID Connect Front- and Back-channel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOidcSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOidcSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the public internet directly to be used by third parties. It implements the OpenID Connect Dynamic Client Registration Protocol.  This feature is disabled per default. It can be enabled by a system administrator.  If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOidcDynamicClient(id: string, oAuth2Client: OAuth2Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOidcDynamicClient(id, oAuth2Client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OidcApi - factory interface
 * @export
 */
export const OidcApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OidcApiFp(configuration)
    return {
        /**
         * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
         * @summary Register OAuth2 Client using OpenID Dynamic Client Registration
         * @param {OAuth2Client} oAuth2Client Dynamic Client Registration Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOidcDynamicClient(oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.createOidcDynamicClient(oAuth2Client, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOidcDynamicClient(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOidcDynamicClient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A mechanism for an OpenID Connect Relying Party to discover the End-User\'s OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
         * @summary OpenID Connect Discovery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverOidcConfiguration(options?: any): AxiosPromise<OidcConfiguration> {
            return localVarFp.discoverOidcConfiguration(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
         * @summary Get OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id The id of the OAuth 2.0 Client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcDynamicClient(id: string, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.getOidcDynamicClient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the payload of the ID Token, including `session.id_token` values, of the provided OAuth 2.0 Access Token\'s consent request.  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
         * @summary OpenID Connect Userinfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOidcUserInfo(options?: any): AxiosPromise<OidcUserInfo> {
            return localVarFp.getOidcUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
         * @summary OpenID Connect Front- and Back-channel Enabled Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOidcSession(options?: any): AxiosPromise<void> {
            return localVarFp.revokeOidcSession(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the public internet directly to be used by third parties. It implements the OpenID Connect Dynamic Client Registration Protocol.  This feature is disabled per default. It can be enabled by a system administrator.  If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
         * @summary Set OAuth2 Client using OpenID Dynamic Client Registration
         * @param {string} id OAuth 2.0 Client ID
         * @param {OAuth2Client} oAuth2Client OAuth 2.0 Client Request Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOidcDynamicClient(id: string, oAuth2Client: OAuth2Client, options?: any): AxiosPromise<OAuth2Client> {
            return localVarFp.setOidcDynamicClient(id, oAuth2Client, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOidcDynamicClient operation in OidcApi.
 * @export
 * @interface OidcApiCreateOidcDynamicClientRequest
 */
export interface OidcApiCreateOidcDynamicClientRequest {
    /**
     * Dynamic Client Registration Request Body
     * @type {OAuth2Client}
     * @memberof OidcApiCreateOidcDynamicClient
     */
    readonly oAuth2Client: OAuth2Client
}

/**
 * Request parameters for deleteOidcDynamicClient operation in OidcApi.
 * @export
 * @interface OidcApiDeleteOidcDynamicClientRequest
 */
export interface OidcApiDeleteOidcDynamicClientRequest {
    /**
     * The id of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OidcApiDeleteOidcDynamicClient
     */
    readonly id: string
}

/**
 * Request parameters for getOidcDynamicClient operation in OidcApi.
 * @export
 * @interface OidcApiGetOidcDynamicClientRequest
 */
export interface OidcApiGetOidcDynamicClientRequest {
    /**
     * The id of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OidcApiGetOidcDynamicClient
     */
    readonly id: string
}

/**
 * Request parameters for setOidcDynamicClient operation in OidcApi.
 * @export
 * @interface OidcApiSetOidcDynamicClientRequest
 */
export interface OidcApiSetOidcDynamicClientRequest {
    /**
     * OAuth 2.0 Client ID
     * @type {string}
     * @memberof OidcApiSetOidcDynamicClient
     */
    readonly id: string

    /**
     * OAuth 2.0 Client Request Body
     * @type {OAuth2Client}
     * @memberof OidcApiSetOidcDynamicClient
     */
    readonly oAuth2Client: OAuth2Client
}

/**
 * OidcApi - object-oriented interface
 * @export
 * @class OidcApi
 * @extends {BaseAPI}
 */
export class OidcApi extends BaseAPI {
    /**
     * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or `client_secret_post`.  The `client_secret` will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.
     * @summary Register OAuth2 Client using OpenID Dynamic Client Registration
     * @param {OidcApiCreateOidcDynamicClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public createOidcDynamicClient(requestParameters: OidcApiCreateOidcDynamicClientRequest, options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).createOidcDynamicClient(requestParameters.oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint is disabled by default. It can be enabled by an administrator.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
     * @param {OidcApiDeleteOidcDynamicClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public deleteOidcDynamicClient(requestParameters: OidcApiDeleteOidcDynamicClientRequest, options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).deleteOidcDynamicClient(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A mechanism for an OpenID Connect Relying Party to discover the End-User\'s OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     * @summary OpenID Connect Discovery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public discoverOidcConfiguration(options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).discoverOidcConfiguration(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the public internet directly and can be used in self-service. It implements the OpenID Connect Dynamic Client Registration Protocol.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
     * @summary Get OAuth2 Client using OpenID Dynamic Client Registration
     * @param {OidcApiGetOidcDynamicClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public getOidcDynamicClient(requestParameters: OidcApiGetOidcDynamicClientRequest, options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).getOidcDynamicClient(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the payload of the ID Token, including `session.id_token` values, of the provided OAuth 2.0 Access Token\'s consent request.  In the case of authentication error, a WWW-Authenticate header might be set in the response with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3) for more details about header format.
     * @summary OpenID Connect Userinfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public getOidcUserInfo(options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).getOidcUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html  Back-channel logout is performed asynchronously and does not affect logout flow.
     * @summary OpenID Connect Front- and Back-channel Enabled Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public revokeOidcSession(options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).revokeOidcSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the public internet directly to be used by third parties. It implements the OpenID Connect Dynamic Client Registration Protocol.  This feature is disabled per default. It can be enabled by a system administrator.  If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response. It is not possible to retrieve it later on.  To use this endpoint, you will need to present the client\'s authentication credentials. If the OAuth2 Client uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query. If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @summary Set OAuth2 Client using OpenID Dynamic Client Registration
     * @param {OidcApiSetOidcDynamicClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OidcApi
     */
    public setOidcDynamicClient(requestParameters: OidcApiSetOidcDynamicClientRequest, options?: AxiosRequestConfig) {
        return OidcApiFp(this.configuration).setOidcDynamicClient(requestParameters.id, requestParameters.oAuth2Client, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermissionOrError: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expandPermissions: async (namespace: string, object: string, relation: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('expandPermissions', 'namespace', namespace)
            // verify required parameter 'object' is not null or undefined
            assertParamExists('expandPermissions', 'object', object)
            // verify required parameter 'relation' is not null or undefined
            assertParamExists('expandPermissions', 'relation', relation)
            const localVarPath = `/relation-tuples/expand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermission: async (maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCheckPermissionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermissionOrError: async (maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCheckPermissionOrErrorBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionApiAxiosParamCreator(configuration)
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPermission(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPermission(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPermissionOrError(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPermissionOrError(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expandPermissions(namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpandedPermissionTree>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expandPermissions(namespace, object, relation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckPermission(maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCheckPermission(maxDepth, postCheckPermissionBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckPermissionOrError(maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCheckPermissionOrError(maxDepth, postCheckPermissionOrErrorBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionApiFp(configuration)
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.checkPermission(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermissionOrError(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.checkPermissionOrError(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expandPermissions(namespace: string, object: string, relation: string, maxDepth?: number, options?: any): AxiosPromise<ExpandedPermissionTree> {
            return localVarFp.expandPermissions(namespace, object, relation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermission(maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.postCheckPermission(maxDepth, postCheckPermissionBody, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermissionOrError(maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.postCheckPermissionOrError(maxDepth, postCheckPermissionOrErrorBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkPermission operation in PermissionApi.
 * @export
 * @interface PermissionApiCheckPermissionRequest
 */
export interface PermissionApiCheckPermissionRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetRelation?: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiCheckPermission
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for checkPermissionOrError operation in PermissionApi.
 * @export
 * @interface PermissionApiCheckPermissionOrErrorRequest
 */
export interface PermissionApiCheckPermissionOrErrorRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetRelation?: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for expandPermissions operation in PermissionApi.
 * @export
 * @interface PermissionApiExpandPermissionsRequest
 */
export interface PermissionApiExpandPermissionsRequest {
    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly namespace: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly object: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly relation: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiExpandPermissions
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for postCheckPermission operation in PermissionApi.
 * @export
 * @interface PermissionApiPostCheckPermissionRequest
 */
export interface PermissionApiPostCheckPermissionRequest {
    /**
     * 
     * @type {number}
     * @memberof PermissionApiPostCheckPermission
     */
    readonly maxDepth?: number

    /**
     * 
     * @type {PostCheckPermissionBody}
     * @memberof PermissionApiPostCheckPermission
     */
    readonly postCheckPermissionBody?: PostCheckPermissionBody
}

/**
 * Request parameters for postCheckPermissionOrError operation in PermissionApi.
 * @export
 * @interface PermissionApiPostCheckPermissionOrErrorRequest
 */
export interface PermissionApiPostCheckPermissionOrErrorRequest {
    /**
     * nolint:deadcode,unused
     * @type {number}
     * @memberof PermissionApiPostCheckPermissionOrError
     */
    readonly maxDepth?: number

    /**
     * 
     * @type {PostCheckPermissionOrErrorBody}
     * @memberof PermissionApiPostCheckPermissionOrError
     */
    readonly postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody
}

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiCheckPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public checkPermission(requestParameters: PermissionApiCheckPermissionRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).checkPermission(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiCheckPermissionOrErrorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public checkPermissionOrError(requestParameters: PermissionApiCheckPermissionOrErrorRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).checkPermissionOrError(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to expand a relationship tuple into permissions.
     * @summary Expand a Relationship into permissions.
     * @param {PermissionApiExpandPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public expandPermissions(requestParameters: PermissionApiExpandPermissionsRequest, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).expandPermissions(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiPostCheckPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public postCheckPermission(requestParameters: PermissionApiPostCheckPermissionRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).postCheckPermission(requestParameters.maxDepth, requestParameters.postCheckPermissionBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiPostCheckPermissionOrErrorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public postCheckPermissionOrError(requestParameters: PermissionApiPostCheckPermissionOrErrorRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).postCheckPermissionOrError(requestParameters.maxDepth, requestParameters.postCheckPermissionOrErrorBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new project.
         * @summary Create a Project
         * @param {CreateProjectBody} [createProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectBody?: CreateProjectBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an API token for a project.
         * @summary Create project API token
         * @param {string} project The Project ID or Project slug
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectApiKey: async (project: string, inlineObject3?: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('createProjectApiKey', 'project', project)
            const localVarPath = `/projects/{project}/tokens`
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an API token and immediately removes it.
         * @summary Delete project API token
         * @param {string} project The Project ID or Project slug
         * @param {string} tokenId The Token ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectApiKey: async (project: string, tokenId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('deleteProjectApiKey', 'project', project)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('deleteProjectApiKey', 'tokenId', tokenId)
            const localVarPath = `/projects/{project}/tokens/{token_id}`
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"token_id"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get your active project in the Ory Network Console UI.
         * @summary Returns the Ory Network Project selected in the Ory Network Console
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveProjectInConsole: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/console/active/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a projects you have access to by its ID.
         * @summary Get a Project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
         * @summary Get all members associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMembers: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectMembers', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/members`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A list of all the project\'s API tokens.
         * @summary List a project\'s API Tokens
         * @param {string} project The Project ID or Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectApiKeys: async (project: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('listProjectApiKeys', 'project', project)
            const localVarPath = `/projects/{project}/tokens`
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all projects you have access to.
         * @summary List All Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
         * @summary Patch an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProject: async (projectId: string, jsonPatch?: Array<JsonPatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('patchProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
         * @summary Irrecoverably purge a project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purgeProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('purgeProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
         * @summary Remove a member associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {string} memberId Member ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectMember: async (projectId: string, memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeProjectMember', 'projectId', projectId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('removeProjectMember', 'memberId', memberId)
            const localVarPath = `/projects/{project_id}/members/{member_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"member_id"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to set your active project in the Ory Network Console UI.
         * @summary Sets the Ory Network Project active in the Ory Network Console
         * @param {SetActiveProjectInConsoleBody} [setActiveProjectInConsoleBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveProjectInConsole: async (setActiveProjectInConsoleBody?: SetActiveProjectInConsoleBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/console/active/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setActiveProjectInConsoleBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
         * @summary Update an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {SetProject} [setProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProject: async (projectId: string, setProject?: SetProject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('setProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setProject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new project.
         * @summary Create a Project
         * @param {CreateProjectBody} [createProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectBody?: CreateProjectBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an API token for a project.
         * @summary Create project API token
         * @param {string} project The Project ID or Project slug
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectApiKey(project, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an API token and immediately removes it.
         * @summary Delete project API token
         * @param {string} project The Project ID or Project slug
         * @param {string} tokenId The Token ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectApiKey(project: string, tokenId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectApiKey(project, tokenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get your active project in the Ory Network Console UI.
         * @summary Returns the Ory Network Project selected in the Ory Network Console
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveProjectInConsole(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveProjectInConsole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveProjectInConsole(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a projects you have access to by its ID.
         * @summary Get a Project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
         * @summary Get all members associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectMembers(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CloudAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectMembers(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A list of all the project\'s API tokens.
         * @summary List a project\'s API Tokens
         * @param {string} project The Project ID or Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectApiKeys(project: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectApiKey>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectApiKeys(project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all projects you have access to.
         * @summary List All Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
         * @summary Patch an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulProjectUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchProject(projectId, jsonPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
         * @summary Irrecoverably purge a project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purgeProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purgeProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
         * @summary Remove a member associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {string} memberId Member ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProjectMember(projectId: string, memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjectMember(projectId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to set your active project in the Ory Network Console UI.
         * @summary Sets the Ory Network Project active in the Ory Network Console
         * @param {SetActiveProjectInConsoleBody} [setActiveProjectInConsoleBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setActiveProjectInConsole(setActiveProjectInConsoleBody?: SetActiveProjectInConsoleBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setActiveProjectInConsole(setActiveProjectInConsoleBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
         * @summary Update an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {SetProject} [setProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProject(projectId: string, setProject?: SetProject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulProjectUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setProject(projectId, setProject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Creates a new project.
         * @summary Create a Project
         * @param {CreateProjectBody} [createProjectBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectBody?: CreateProjectBody, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(createProjectBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an API token for a project.
         * @summary Create project API token
         * @param {string} project The Project ID or Project slug
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectApiKey(project: string, inlineObject3?: InlineObject3, options?: any): AxiosPromise<ProjectApiKey> {
            return localVarFp.createProjectApiKey(project, inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an API token and immediately removes it.
         * @summary Delete project API token
         * @param {string} project The Project ID or Project slug
         * @param {string} tokenId The Token ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectApiKey(project: string, tokenId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProjectApiKey(project, tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get your active project in the Ory Network Console UI.
         * @summary Returns the Ory Network Project selected in the Ory Network Console
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveProjectInConsole(options?: any): AxiosPromise<ActiveProjectInConsole> {
            return localVarFp.getActiveProjectInConsole(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a projects you have access to by its ID.
         * @summary Get a Project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projectId: string, options?: any): AxiosPromise<Project> {
            return localVarFp.getProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
         * @summary Get all members associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMembers(projectId: string, options?: any): AxiosPromise<Array<CloudAccount>> {
            return localVarFp.getProjectMembers(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * A list of all the project\'s API tokens.
         * @summary List a project\'s API Tokens
         * @param {string} project The Project ID or Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectApiKeys(project: string, options?: any): AxiosPromise<Array<ProjectApiKey>> {
            return localVarFp.listProjectApiKeys(project, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all projects you have access to.
         * @summary List All Projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(options?: any): AxiosPromise<Array<ProjectMetadata>> {
            return localVarFp.listProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
         * @summary Patch an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {Array<JsonPatch>} [jsonPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchProject(projectId: string, jsonPatch?: Array<JsonPatch>, options?: any): AxiosPromise<SuccessfulProjectUpdate> {
            return localVarFp.patchProject(projectId, jsonPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
         * @summary Irrecoverably purge a project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purgeProject(projectId: string, options?: any): AxiosPromise<void> {
            return localVarFp.purgeProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
         * @summary Remove a member associated with this project
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {string} memberId Member ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectMember(projectId: string, memberId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeProjectMember(projectId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to set your active project in the Ory Network Console UI.
         * @summary Sets the Ory Network Project active in the Ory Network Console
         * @param {SetActiveProjectInConsoleBody} [setActiveProjectInConsoleBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveProjectInConsole(setActiveProjectInConsoleBody?: SetActiveProjectInConsoleBody, options?: any): AxiosPromise<void> {
            return localVarFp.setActiveProjectInConsole(setActiveProjectInConsoleBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
         * @summary Update an Ory Network Project Configuration
         * @param {string} projectId Project ID  The project\&#39;s ID.
         * @param {SetProject} [setProject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProject(projectId: string, setProject?: SetProject, options?: any): AxiosPromise<SuccessfulProjectUpdate> {
            return localVarFp.setProject(projectId, setProject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProject operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateProjectRequest
 */
export interface ProjectApiCreateProjectRequest {
    /**
     * 
     * @type {CreateProjectBody}
     * @memberof ProjectApiCreateProject
     */
    readonly createProjectBody?: CreateProjectBody
}

/**
 * Request parameters for createProjectApiKey operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateProjectApiKeyRequest
 */
export interface ProjectApiCreateProjectApiKeyRequest {
    /**
     * The Project ID or Project slug
     * @type {string}
     * @memberof ProjectApiCreateProjectApiKey
     */
    readonly project: string

    /**
     * 
     * @type {InlineObject3}
     * @memberof ProjectApiCreateProjectApiKey
     */
    readonly inlineObject3?: InlineObject3
}

/**
 * Request parameters for deleteProjectApiKey operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteProjectApiKeyRequest
 */
export interface ProjectApiDeleteProjectApiKeyRequest {
    /**
     * The Project ID or Project slug
     * @type {string}
     * @memberof ProjectApiDeleteProjectApiKey
     */
    readonly project: string

    /**
     * The Token ID
     * @type {string}
     * @memberof ProjectApiDeleteProjectApiKey
     */
    readonly tokenId: string
}

/**
 * Request parameters for getProject operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectRequest
 */
export interface ProjectApiGetProjectRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiGetProject
     */
    readonly projectId: string
}

/**
 * Request parameters for getProjectMembers operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectMembersRequest
 */
export interface ProjectApiGetProjectMembersRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiGetProjectMembers
     */
    readonly projectId: string
}

/**
 * Request parameters for listProjectApiKeys operation in ProjectApi.
 * @export
 * @interface ProjectApiListProjectApiKeysRequest
 */
export interface ProjectApiListProjectApiKeysRequest {
    /**
     * The Project ID or Project slug
     * @type {string}
     * @memberof ProjectApiListProjectApiKeys
     */
    readonly project: string
}

/**
 * Request parameters for patchProject operation in ProjectApi.
 * @export
 * @interface ProjectApiPatchProjectRequest
 */
export interface ProjectApiPatchProjectRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiPatchProject
     */
    readonly projectId: string

    /**
     * 
     * @type {Array<JsonPatch>}
     * @memberof ProjectApiPatchProject
     */
    readonly jsonPatch?: Array<JsonPatch>
}

/**
 * Request parameters for purgeProject operation in ProjectApi.
 * @export
 * @interface ProjectApiPurgeProjectRequest
 */
export interface ProjectApiPurgeProjectRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiPurgeProject
     */
    readonly projectId: string
}

/**
 * Request parameters for removeProjectMember operation in ProjectApi.
 * @export
 * @interface ProjectApiRemoveProjectMemberRequest
 */
export interface ProjectApiRemoveProjectMemberRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiRemoveProjectMember
     */
    readonly projectId: string

    /**
     * Member ID
     * @type {string}
     * @memberof ProjectApiRemoveProjectMember
     */
    readonly memberId: string
}

/**
 * Request parameters for setActiveProjectInConsole operation in ProjectApi.
 * @export
 * @interface ProjectApiSetActiveProjectInConsoleRequest
 */
export interface ProjectApiSetActiveProjectInConsoleRequest {
    /**
     * 
     * @type {SetActiveProjectInConsoleBody}
     * @memberof ProjectApiSetActiveProjectInConsole
     */
    readonly setActiveProjectInConsoleBody?: SetActiveProjectInConsoleBody
}

/**
 * Request parameters for setProject operation in ProjectApi.
 * @export
 * @interface ProjectApiSetProjectRequest
 */
export interface ProjectApiSetProjectRequest {
    /**
     * Project ID  The project\&#39;s ID.
     * @type {string}
     * @memberof ProjectApiSetProject
     */
    readonly projectId: string

    /**
     * 
     * @type {SetProject}
     * @memberof ProjectApiSetProject
     */
    readonly setProject?: SetProject
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Creates a new project.
     * @summary Create a Project
     * @param {ProjectApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(requestParameters: ProjectApiCreateProjectRequest = {}, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProject(requestParameters.createProjectBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an API token for a project.
     * @summary Create project API token
     * @param {ProjectApiCreateProjectApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProjectApiKey(requestParameters: ProjectApiCreateProjectApiKeyRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProjectApiKey(requestParameters.project, requestParameters.inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an API token and immediately removes it.
     * @summary Delete project API token
     * @param {ProjectApiDeleteProjectApiKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectApiKey(requestParameters: ProjectApiDeleteProjectApiKeyRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteProjectApiKey(requestParameters.project, requestParameters.tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get your active project in the Ory Network Console UI.
     * @summary Returns the Ory Network Project selected in the Ory Network Console
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getActiveProjectInConsole(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getActiveProjectInConsole(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a projects you have access to by its ID.
     * @summary Get a Project
     * @param {ProjectApiGetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProject(requestParameters: ProjectApiGetProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProject(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     * @summary Get all members associated with this project
     * @param {ProjectApiGetProjectMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectMembers(requestParameters: ProjectApiGetProjectMembersRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjectMembers(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A list of all the project\'s API tokens.
     * @summary List a project\'s API Tokens
     * @param {ProjectApiListProjectApiKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public listProjectApiKeys(requestParameters: ProjectApiListProjectApiKeysRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listProjectApiKeys(requestParameters.project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all projects you have access to.
     * @summary List All Projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public listProjects(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory\'s services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     * @summary Patch an Ory Network Project Configuration
     * @param {ProjectApiPatchProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public patchProject(requestParameters: ProjectApiPatchProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).patchProject(requestParameters.projectId, requestParameters.jsonPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     * @summary Irrecoverably purge a project
     * @param {ProjectApiPurgeProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public purgeProject(requestParameters: ProjectApiPurgeProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).purgeProject(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
     * @summary Remove a member associated with this project
     * @param {ProjectApiRemoveProjectMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public removeProjectMember(requestParameters: ProjectApiRemoveProjectMemberRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).removeProjectMember(requestParameters.projectId, requestParameters.memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to set your active project in the Ory Network Console UI.
     * @summary Sets the Ory Network Project active in the Ory Network Console
     * @param {ProjectApiSetActiveProjectInConsoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setActiveProjectInConsole(requestParameters: ProjectApiSetActiveProjectInConsoleRequest = {}, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).setActiveProjectInConsole(requestParameters.setActiveProjectInConsoleBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service\'s configuration will completely override your current configuration for that service!
     * @summary Update an Ory Network Project Configuration
     * @param {ProjectApiSetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setProject(requestParameters: ProjectApiSetProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).setProject(requestParameters.projectId, requestParameters.setProject, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RelationshipApi - axios parameter creator
 * @export
 */
export const RelationshipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOplSyntax: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/opl/syntax/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationship: async (createRelationshipBody?: CreateRelationshipBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRelationshipBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationships: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationships: async (pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipNamespaces: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRelationships: async (relationshipPatch?: Array<RelationshipPatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oryAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(relationshipPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelationshipApi - functional programming interface
 * @export
 */
export const RelationshipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelationshipApiAxiosParamCreator(configuration)
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkOplSyntax(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckOplSyntaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkOplSyntax(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelationship(createRelationshipBody?: CreateRelationshipBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationship(createRelationshipBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRelationships(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelationships(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationships(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationships>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationships(pageToken, pageSize, namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipNamespaces(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipNamespaces>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipNamespaces(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRelationships(relationshipPatch?: Array<RelationshipPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRelationships(relationshipPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RelationshipApi - factory interface
 * @export
 */
export const RelationshipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelationshipApiFp(configuration)
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOplSyntax(body?: string, options?: any): AxiosPromise<CheckOplSyntaxResult> {
            return localVarFp.checkOplSyntax(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationship(createRelationshipBody?: CreateRelationshipBody, options?: any): AxiosPromise<Relationship> {
            return localVarFp.createRelationship(createRelationshipBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationships(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRelationships(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationships(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<Relationships> {
            return localVarFp.getRelationships(pageToken, pageSize, namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipNamespaces(options?: any): AxiosPromise<RelationshipNamespaces> {
            return localVarFp.listRelationshipNamespaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRelationships(relationshipPatch?: Array<RelationshipPatch>, options?: any): AxiosPromise<void> {
            return localVarFp.patchRelationships(relationshipPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkOplSyntax operation in RelationshipApi.
 * @export
 * @interface RelationshipApiCheckOplSyntaxRequest
 */
export interface RelationshipApiCheckOplSyntaxRequest {
    /**
     * 
     * @type {string}
     * @memberof RelationshipApiCheckOplSyntax
     */
    readonly body?: string
}

/**
 * Request parameters for createRelationship operation in RelationshipApi.
 * @export
 * @interface RelationshipApiCreateRelationshipRequest
 */
export interface RelationshipApiCreateRelationshipRequest {
    /**
     * 
     * @type {CreateRelationshipBody}
     * @memberof RelationshipApiCreateRelationship
     */
    readonly createRelationshipBody?: CreateRelationshipBody
}

/**
 * Request parameters for deleteRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiDeleteRelationshipsRequest
 */
export interface RelationshipApiDeleteRelationshipsRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetRelation?: string
}

/**
 * Request parameters for getRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiGetRelationshipsRequest
 */
export interface RelationshipApiGetRelationshipsRequest {
    /**
     * 
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly pageToken?: string

    /**
     * 
     * @type {number}
     * @memberof RelationshipApiGetRelationships
     */
    readonly pageSize?: number

    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetRelation?: string
}

/**
 * Request parameters for patchRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiPatchRelationshipsRequest
 */
export interface RelationshipApiPatchRelationshipsRequest {
    /**
     * 
     * @type {Array<RelationshipPatch>}
     * @memberof RelationshipApiPatchRelationships
     */
    readonly relationshipPatch?: Array<RelationshipPatch>
}

/**
 * RelationshipApi - object-oriented interface
 * @export
 * @class RelationshipApi
 * @extends {BaseAPI}
 */
export class RelationshipApi extends BaseAPI {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {RelationshipApiCheckOplSyntaxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public checkOplSyntax(requestParameters: RelationshipApiCheckOplSyntaxRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).checkOplSyntax(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a relationship.
     * @summary Create a Relationship
     * @param {RelationshipApiCreateRelationshipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public createRelationship(requestParameters: RelationshipApiCreateRelationshipRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).createRelationship(requestParameters.createRelationshipBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete relationships
     * @summary Delete Relationships
     * @param {RelationshipApiDeleteRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public deleteRelationships(requestParameters: RelationshipApiDeleteRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).deleteRelationships(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all relationships that match the query. Only the namespace field is required.
     * @summary Query relationships
     * @param {RelationshipApiGetRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public getRelationships(requestParameters: RelationshipApiGetRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).getRelationships(requestParameters.pageToken, requestParameters.pageSize, requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public listRelationshipNamespaces(options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).listRelationshipNamespaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to patch one or more relationships.
     * @summary Patch Multiple Relationships
     * @param {RelationshipApiPatchRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public patchRelationships(requestParameters: RelationshipApiPatchRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).patchRelationships(requestParameters.relationshipPatch, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WellknownApi - axios parameter creator
 * @export
 */
export const WellknownApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary Discover Well-Known JSON Web Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverJsonWebKeys: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/jwks.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WellknownApi - functional programming interface
 * @export
 */
export const WellknownApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WellknownApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary Discover Well-Known JSON Web Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverJsonWebKeys(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverJsonWebKeys(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WellknownApi - factory interface
 * @export
 */
export const WellknownApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WellknownApiFp(configuration)
    return {
        /**
         * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
         * @summary Discover Well-Known JSON Web Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverJsonWebKeys(options?: any): AxiosPromise<JsonWebKeySet> {
            return localVarFp.discoverJsonWebKeys(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WellknownApi - object-oriented interface
 * @export
 * @class WellknownApi
 * @extends {BaseAPI}
 */
export class WellknownApi extends BaseAPI {
    /**
     * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     * @summary Discover Well-Known JSON Web Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WellknownApi
     */
    public discoverJsonWebKeys(options?: AxiosRequestConfig) {
        return WellknownApiFp(this.configuration).discoverJsonWebKeys(options).then((request) => request(this.axios, this.basePath));
    }
}


