=begin
#Ory APIs

#Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 

The version of the OpenAPI document: v1.15.0
Contact: support@ory.sh
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OryClient
  class InvoiceDataV1
    attr_accessor :billing_period

    # The currency of the invoice.
    attr_accessor :currency

    # Deleted is true if the invoice has been soft-deleted.
    attr_accessor :deleted

    # The items that are part of this invoice.
    attr_accessor :items

    # The plan that this invoice is based on, in the format \"Name@version\".
    attr_accessor :plan

    attr_accessor :stripe_invoice_item

    # The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    attr_accessor :stripe_invoice_status

    # An optional link to the invoice on Stripe.
    attr_accessor :stripe_link

    # The subtitle of the invoice.
    attr_accessor :subtitle

    attr_accessor :tax

    # The title of the invoice.
    attr_accessor :title

    attr_accessor :total_in_cent

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'billing_period' => :'billing_period',
        :'currency' => :'currency',
        :'deleted' => :'deleted',
        :'items' => :'items',
        :'plan' => :'plan',
        :'stripe_invoice_item' => :'stripe_invoice_item',
        :'stripe_invoice_status' => :'stripe_invoice_status',
        :'stripe_link' => :'stripe_link',
        :'subtitle' => :'subtitle',
        :'tax' => :'tax',
        :'title' => :'title',
        :'total_in_cent' => :'total_in_cent'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'billing_period' => :'TimeInterval',
        :'currency' => :'String',
        :'deleted' => :'Boolean',
        :'items' => :'Array<LineItemV1>',
        :'plan' => :'String',
        :'stripe_invoice_item' => :'String',
        :'stripe_invoice_status' => :'String',
        :'stripe_link' => :'String',
        :'subtitle' => :'String',
        :'tax' => :'TaxLineItem',
        :'title' => :'String',
        :'total_in_cent' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OryClient::InvoiceDataV1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OryClient::InvoiceDataV1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'billing_period')
        self.billing_period = attributes[:'billing_period']
      else
        self.billing_period = nil
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = nil
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      else
        self.items = nil
      end

      if attributes.key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.key?(:'stripe_invoice_item')
        self.stripe_invoice_item = attributes[:'stripe_invoice_item']
      end

      if attributes.key?(:'stripe_invoice_status')
        self.stripe_invoice_status = attributes[:'stripe_invoice_status']
      end

      if attributes.key?(:'stripe_link')
        self.stripe_link = attributes[:'stripe_link']
      end

      if attributes.key?(:'subtitle')
        self.subtitle = attributes[:'subtitle']
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'total_in_cent')
        self.total_in_cent = attributes[:'total_in_cent']
      else
        self.total_in_cent = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @billing_period.nil?
        invalid_properties.push('invalid value for "billing_period", billing_period cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @items.nil?
        invalid_properties.push('invalid value for "items", items cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @total_in_cent.nil?
        invalid_properties.push('invalid value for "total_in_cent", total_in_cent cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @billing_period.nil?
      return false if @currency.nil?
      return false if @items.nil?
      return false if @title.nil?
      return false if @total_in_cent.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billing_period == o.billing_period &&
          currency == o.currency &&
          deleted == o.deleted &&
          items == o.items &&
          plan == o.plan &&
          stripe_invoice_item == o.stripe_invoice_item &&
          stripe_invoice_status == o.stripe_invoice_status &&
          stripe_link == o.stripe_link &&
          subtitle == o.subtitle &&
          tax == o.tax &&
          title == o.title &&
          total_in_cent == o.total_in_cent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [billing_period, currency, deleted, items, plan, stripe_invoice_item, stripe_invoice_status, stripe_link, subtitle, tax, title, total_in_cent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OryClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
