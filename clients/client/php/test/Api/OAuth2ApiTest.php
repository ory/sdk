<?php
/**
 * OAuth2ApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory APIs
 *
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       |
 *
 * The version of the OpenAPI document: v1.15.11
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Ory\Client\Test\Api;

use \Ory\Client\Configuration;
use \Ory\Client\ApiException;
use \Ory\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OAuth2ApiTest Class Doc Comment
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OAuth2ApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for acceptOAuth2ConsentRequest
     *
     * Accept OAuth 2.0 Consent Request.
     *
     */
    public function testAcceptOAuth2ConsentRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for acceptOAuth2LoginRequest
     *
     * Accept OAuth 2.0 Login Request.
     *
     */
    public function testAcceptOAuth2LoginRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for acceptOAuth2LogoutRequest
     *
     * Accept OAuth 2.0 Session Logout Request.
     *
     */
    public function testAcceptOAuth2LogoutRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOAuth2Client
     *
     * Create OAuth 2.0 Client.
     *
     */
    public function testCreateOAuth2Client()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOAuth2Client
     *
     * Delete OAuth 2.0 Client.
     *
     */
    public function testDeleteOAuth2Client()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOAuth2Token
     *
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client.
     *
     */
    public function testDeleteOAuth2Token()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTrustedOAuth2JwtGrantIssuer
     *
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer.
     *
     */
    public function testDeleteTrustedOAuth2JwtGrantIssuer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOAuth2Client
     *
     * Get an OAuth 2.0 Client.
     *
     */
    public function testGetOAuth2Client()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOAuth2ConsentRequest
     *
     * Get OAuth 2.0 Consent Request.
     *
     */
    public function testGetOAuth2ConsentRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOAuth2LoginRequest
     *
     * Get OAuth 2.0 Login Request.
     *
     */
    public function testGetOAuth2LoginRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOAuth2LogoutRequest
     *
     * Get OAuth 2.0 Session Logout Request.
     *
     */
    public function testGetOAuth2LogoutRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTrustedOAuth2JwtGrantIssuer
     *
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer.
     *
     */
    public function testGetTrustedOAuth2JwtGrantIssuer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for introspectOAuth2Token
     *
     * Introspect OAuth2 Access and Refresh Tokens.
     *
     */
    public function testIntrospectOAuth2Token()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOAuth2Clients
     *
     * List OAuth 2.0 Clients.
     *
     */
    public function testListOAuth2Clients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOAuth2ConsentSessions
     *
     * List OAuth 2.0 Consent Sessions of a Subject.
     *
     */
    public function testListOAuth2ConsentSessions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listTrustedOAuth2JwtGrantIssuers
     *
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers.
     *
     */
    public function testListTrustedOAuth2JwtGrantIssuers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for oAuth2Authorize
     *
     * OAuth 2.0 Authorize Endpoint.
     *
     */
    public function testOAuth2Authorize()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for oauth2TokenExchange
     *
     * The OAuth 2.0 Token Endpoint.
     *
     */
    public function testOauth2TokenExchange()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for patchOAuth2Client
     *
     * Patch OAuth 2.0 Client.
     *
     */
    public function testPatchOAuth2Client()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rejectOAuth2ConsentRequest
     *
     * Reject OAuth 2.0 Consent Request.
     *
     */
    public function testRejectOAuth2ConsentRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rejectOAuth2LoginRequest
     *
     * Reject OAuth 2.0 Login Request.
     *
     */
    public function testRejectOAuth2LoginRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rejectOAuth2LogoutRequest
     *
     * Reject OAuth 2.0 Session Logout Request.
     *
     */
    public function testRejectOAuth2LogoutRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for revokeOAuth2ConsentSessions
     *
     * Revoke OAuth 2.0 Consent Sessions of a Subject.
     *
     */
    public function testRevokeOAuth2ConsentSessions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for revokeOAuth2LoginSessions
     *
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID.
     *
     */
    public function testRevokeOAuth2LoginSessions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for revokeOAuth2Token
     *
     * Revoke OAuth 2.0 Access or Refresh Token.
     *
     */
    public function testRevokeOAuth2Token()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOAuth2Client
     *
     * Set OAuth 2.0 Client.
     *
     */
    public function testSetOAuth2Client()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOAuth2ClientLifespans
     *
     * Set OAuth2 Client Token Lifespans.
     *
     */
    public function testSetOAuth2ClientLifespans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for trustOAuth2JwtGrantIssuer
     *
     * Trust OAuth2 JWT Bearer Grant Type Issuer.
     *
     */
    public function testTrustOAuth2JwtGrantIssuer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
