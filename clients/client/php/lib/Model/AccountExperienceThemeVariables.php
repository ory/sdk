<?php
/**
 * AccountExperienceThemeVariables
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * The version of the OpenAPI document: v1.12.1
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Client\Model;

use \ArrayAccess;
use \Ory\Client\ObjectSerializer;

/**
 * AccountExperienceThemeVariables Class Doc Comment
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountExperienceThemeVariables implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'accountExperienceThemeVariables';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accent' => 'string',
        'bgDefault' => 'string',
        'borderRadiusBranding' => 'string',
        'borderRadiusButtons' => 'string',
        'borderRadiusCards' => 'string',
        'borderRadiusForms' => 'string',
        'borderRadiusGeneral' => 'string',
        'buttonPrimaryBgDefault' => 'string',
        'buttonPrimaryBgDisabled' => 'string',
        'buttonPrimaryBgHover' => 'string',
        'buttonPrimaryBorderDefault' => 'string',
        'buttonPrimaryBorderDisabled' => 'string',
        'buttonPrimaryBorderHover' => 'string',
        'buttonPrimaryFgDefault' => 'string',
        'buttonPrimaryFgDisabled' => 'string',
        'buttonPrimaryFgHover' => 'string',
        'buttonSecondaryBgDefault' => 'string',
        'buttonSecondaryBgDisabled' => 'string',
        'buttonSecondaryBgHover' => 'string',
        'buttonSecondaryBorderDefault' => 'string',
        'buttonSecondaryBorderDisabled' => 'string',
        'buttonSecondaryBorderHover' => 'string',
        'buttonSecondaryFgDefault' => 'string',
        'buttonSecondaryFgDisabled' => 'string',
        'buttonSecondaryFgHover' => 'string',
        'buttonSocialBgDefault' => 'string',
        'buttonSocialBgDisabled' => 'string',
        'buttonSocialBgHover' => 'string',
        'buttonSocialBgProvider' => 'string',
        'buttonSocialBorderDefault' => 'string',
        'buttonSocialBorderDisabled' => 'string',
        'buttonSocialBorderHover' => 'string',
        'buttonSocialBorderProvider' => 'string',
        'buttonSocialFgDefault' => 'string',
        'buttonSocialFgDisabled' => 'string',
        'buttonSocialFgHover' => 'string',
        'buttonSocialFgProvider' => 'string',
        'createdAt' => '\DateTime',
        'dialogBgDefault' => 'string',
        'dialogBgSubtle' => 'string',
        'dialogBorderDefault' => 'string',
        'dialogFgDefault' => 'string',
        'dialogFgMute' => 'string',
        'dialogFgSubtle' => 'string',
        'formsBgDefault' => 'string',
        'formsBgDisabled' => 'string',
        'formsBgHover' => 'string',
        'formsBorderDefault' => 'string',
        'formsBorderDisabled' => 'string',
        'formsBorderError' => 'string',
        'formsBorderFocus' => 'string',
        'formsBorderHover' => 'string',
        'formsBorderSuccess' => 'string',
        'formsBorderWarn' => 'string',
        'formsCheckboxBgChecked' => 'string',
        'formsCheckboxBgDefault' => 'string',
        'formsCheckboxBorderChecked' => 'string',
        'formsCheckboxBorderDefault' => 'string',
        'formsCheckboxFgChecked' => 'string',
        'formsCheckboxFgDefault' => 'string',
        'formsFgDefault' => 'string',
        'formsFgError' => 'string',
        'formsFgMute' => 'string',
        'formsFgSubtle' => 'string',
        'formsFgSuccess' => 'string',
        'formsFgWarn' => 'string',
        'formsRadioBgChecked' => 'string',
        'formsRadioBgDefault' => 'string',
        'formsRadioBorderChecked' => 'string',
        'formsRadioBorderDefault' => 'string',
        'formsRadioFgChecked' => 'string',
        'formsRadioFgDefault' => 'string',
        'formsToggleBgChecked' => 'string',
        'formsToggleBgDefault' => 'string',
        'formsToggleBorderChecked' => 'string',
        'formsToggleBorderDefault' => 'string',
        'formsToggleFgChecked' => 'string',
        'formsToggleFgDefault' => 'string',
        'id' => 'string',
        'linksLinkDefault' => 'string',
        'linksLinkDisabled' => 'string',
        'linksLinkHover' => 'string',
        'linksLinkInvertedDefault' => 'string',
        'linksLinkInvertedHover' => 'string',
        'linksLinkMuteDefault' => 'string',
        'linksLinkMuteHover' => 'string',
        'syntaxSyntax' => 'string',
        'syntaxSyntaxKey' => 'string',
        'syntaxSyntaxNum' => 'string',
        'syntaxSyntaxValue' => 'string',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accent' => null,
        'bgDefault' => null,
        'borderRadiusBranding' => null,
        'borderRadiusButtons' => null,
        'borderRadiusCards' => null,
        'borderRadiusForms' => null,
        'borderRadiusGeneral' => null,
        'buttonPrimaryBgDefault' => null,
        'buttonPrimaryBgDisabled' => null,
        'buttonPrimaryBgHover' => null,
        'buttonPrimaryBorderDefault' => null,
        'buttonPrimaryBorderDisabled' => null,
        'buttonPrimaryBorderHover' => null,
        'buttonPrimaryFgDefault' => null,
        'buttonPrimaryFgDisabled' => null,
        'buttonPrimaryFgHover' => null,
        'buttonSecondaryBgDefault' => null,
        'buttonSecondaryBgDisabled' => null,
        'buttonSecondaryBgHover' => null,
        'buttonSecondaryBorderDefault' => null,
        'buttonSecondaryBorderDisabled' => null,
        'buttonSecondaryBorderHover' => null,
        'buttonSecondaryFgDefault' => null,
        'buttonSecondaryFgDisabled' => null,
        'buttonSecondaryFgHover' => null,
        'buttonSocialBgDefault' => null,
        'buttonSocialBgDisabled' => null,
        'buttonSocialBgHover' => null,
        'buttonSocialBgProvider' => null,
        'buttonSocialBorderDefault' => null,
        'buttonSocialBorderDisabled' => null,
        'buttonSocialBorderHover' => null,
        'buttonSocialBorderProvider' => null,
        'buttonSocialFgDefault' => null,
        'buttonSocialFgDisabled' => null,
        'buttonSocialFgHover' => null,
        'buttonSocialFgProvider' => null,
        'createdAt' => 'date-time',
        'dialogBgDefault' => null,
        'dialogBgSubtle' => null,
        'dialogBorderDefault' => null,
        'dialogFgDefault' => null,
        'dialogFgMute' => null,
        'dialogFgSubtle' => null,
        'formsBgDefault' => null,
        'formsBgDisabled' => null,
        'formsBgHover' => null,
        'formsBorderDefault' => null,
        'formsBorderDisabled' => null,
        'formsBorderError' => null,
        'formsBorderFocus' => null,
        'formsBorderHover' => null,
        'formsBorderSuccess' => null,
        'formsBorderWarn' => null,
        'formsCheckboxBgChecked' => null,
        'formsCheckboxBgDefault' => null,
        'formsCheckboxBorderChecked' => null,
        'formsCheckboxBorderDefault' => null,
        'formsCheckboxFgChecked' => null,
        'formsCheckboxFgDefault' => null,
        'formsFgDefault' => null,
        'formsFgError' => null,
        'formsFgMute' => null,
        'formsFgSubtle' => null,
        'formsFgSuccess' => null,
        'formsFgWarn' => null,
        'formsRadioBgChecked' => null,
        'formsRadioBgDefault' => null,
        'formsRadioBorderChecked' => null,
        'formsRadioBorderDefault' => null,
        'formsRadioFgChecked' => null,
        'formsRadioFgDefault' => null,
        'formsToggleBgChecked' => null,
        'formsToggleBgDefault' => null,
        'formsToggleBorderChecked' => null,
        'formsToggleBorderDefault' => null,
        'formsToggleFgChecked' => null,
        'formsToggleFgDefault' => null,
        'id' => 'uuid',
        'linksLinkDefault' => null,
        'linksLinkDisabled' => null,
        'linksLinkHover' => null,
        'linksLinkInvertedDefault' => null,
        'linksLinkInvertedHover' => null,
        'linksLinkMuteDefault' => null,
        'linksLinkMuteHover' => null,
        'syntaxSyntax' => null,
        'syntaxSyntaxKey' => null,
        'syntaxSyntaxNum' => null,
        'syntaxSyntaxValue' => null,
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accent' => false,
        'bgDefault' => false,
        'borderRadiusBranding' => false,
        'borderRadiusButtons' => false,
        'borderRadiusCards' => false,
        'borderRadiusForms' => false,
        'borderRadiusGeneral' => false,
        'buttonPrimaryBgDefault' => false,
        'buttonPrimaryBgDisabled' => false,
        'buttonPrimaryBgHover' => false,
        'buttonPrimaryBorderDefault' => false,
        'buttonPrimaryBorderDisabled' => false,
        'buttonPrimaryBorderHover' => false,
        'buttonPrimaryFgDefault' => false,
        'buttonPrimaryFgDisabled' => false,
        'buttonPrimaryFgHover' => false,
        'buttonSecondaryBgDefault' => false,
        'buttonSecondaryBgDisabled' => false,
        'buttonSecondaryBgHover' => false,
        'buttonSecondaryBorderDefault' => false,
        'buttonSecondaryBorderDisabled' => false,
        'buttonSecondaryBorderHover' => false,
        'buttonSecondaryFgDefault' => false,
        'buttonSecondaryFgDisabled' => false,
        'buttonSecondaryFgHover' => false,
        'buttonSocialBgDefault' => false,
        'buttonSocialBgDisabled' => false,
        'buttonSocialBgHover' => false,
        'buttonSocialBgProvider' => false,
        'buttonSocialBorderDefault' => false,
        'buttonSocialBorderDisabled' => false,
        'buttonSocialBorderHover' => false,
        'buttonSocialBorderProvider' => false,
        'buttonSocialFgDefault' => false,
        'buttonSocialFgDisabled' => false,
        'buttonSocialFgHover' => false,
        'buttonSocialFgProvider' => false,
        'createdAt' => false,
        'dialogBgDefault' => false,
        'dialogBgSubtle' => false,
        'dialogBorderDefault' => false,
        'dialogFgDefault' => false,
        'dialogFgMute' => false,
        'dialogFgSubtle' => false,
        'formsBgDefault' => false,
        'formsBgDisabled' => false,
        'formsBgHover' => false,
        'formsBorderDefault' => false,
        'formsBorderDisabled' => false,
        'formsBorderError' => false,
        'formsBorderFocus' => false,
        'formsBorderHover' => false,
        'formsBorderSuccess' => false,
        'formsBorderWarn' => false,
        'formsCheckboxBgChecked' => false,
        'formsCheckboxBgDefault' => false,
        'formsCheckboxBorderChecked' => false,
        'formsCheckboxBorderDefault' => false,
        'formsCheckboxFgChecked' => false,
        'formsCheckboxFgDefault' => false,
        'formsFgDefault' => false,
        'formsFgError' => false,
        'formsFgMute' => false,
        'formsFgSubtle' => false,
        'formsFgSuccess' => false,
        'formsFgWarn' => false,
        'formsRadioBgChecked' => false,
        'formsRadioBgDefault' => false,
        'formsRadioBorderChecked' => false,
        'formsRadioBorderDefault' => false,
        'formsRadioFgChecked' => false,
        'formsRadioFgDefault' => false,
        'formsToggleBgChecked' => false,
        'formsToggleBgDefault' => false,
        'formsToggleBorderChecked' => false,
        'formsToggleBorderDefault' => false,
        'formsToggleFgChecked' => false,
        'formsToggleFgDefault' => false,
        'id' => false,
        'linksLinkDefault' => false,
        'linksLinkDisabled' => false,
        'linksLinkHover' => false,
        'linksLinkInvertedDefault' => false,
        'linksLinkInvertedHover' => false,
        'linksLinkMuteDefault' => false,
        'linksLinkMuteHover' => false,
        'syntaxSyntax' => false,
        'syntaxSyntaxKey' => false,
        'syntaxSyntaxNum' => false,
        'syntaxSyntaxValue' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accent' => 'accent',
        'bgDefault' => 'bg-default',
        'borderRadiusBranding' => 'border-radius-branding',
        'borderRadiusButtons' => 'border-radius-buttons',
        'borderRadiusCards' => 'border-radius-cards',
        'borderRadiusForms' => 'border-radius-forms',
        'borderRadiusGeneral' => 'border-radius-general',
        'buttonPrimaryBgDefault' => 'button-primary-bg-default',
        'buttonPrimaryBgDisabled' => 'button-primary-bg-disabled',
        'buttonPrimaryBgHover' => 'button-primary-bg-hover',
        'buttonPrimaryBorderDefault' => 'button-primary-border-default',
        'buttonPrimaryBorderDisabled' => 'button-primary-border-disabled',
        'buttonPrimaryBorderHover' => 'button-primary-border-hover',
        'buttonPrimaryFgDefault' => 'button-primary-fg-default',
        'buttonPrimaryFgDisabled' => 'button-primary-fg-disabled',
        'buttonPrimaryFgHover' => 'button-primary-fg-hover',
        'buttonSecondaryBgDefault' => 'button-secondary-bg-default',
        'buttonSecondaryBgDisabled' => 'button-secondary-bg-disabled',
        'buttonSecondaryBgHover' => 'button-secondary-bg-hover',
        'buttonSecondaryBorderDefault' => 'button-secondary-border-default',
        'buttonSecondaryBorderDisabled' => 'button-secondary-border-disabled',
        'buttonSecondaryBorderHover' => 'button-secondary-border-hover',
        'buttonSecondaryFgDefault' => 'button-secondary-fg-default',
        'buttonSecondaryFgDisabled' => 'button-secondary-fg-disabled',
        'buttonSecondaryFgHover' => 'button-secondary-fg-hover',
        'buttonSocialBgDefault' => 'button-social-bg-default',
        'buttonSocialBgDisabled' => 'button-social-bg-disabled',
        'buttonSocialBgHover' => 'button-social-bg-hover',
        'buttonSocialBgProvider' => 'button-social-bg-provider',
        'buttonSocialBorderDefault' => 'button-social-border-default',
        'buttonSocialBorderDisabled' => 'button-social-border-disabled',
        'buttonSocialBorderHover' => 'button-social-border-hover',
        'buttonSocialBorderProvider' => 'button-social-border-provider',
        'buttonSocialFgDefault' => 'button-social-fg-default',
        'buttonSocialFgDisabled' => 'button-social-fg-disabled',
        'buttonSocialFgHover' => 'button-social-fg-hover',
        'buttonSocialFgProvider' => 'button-social-fg-provider',
        'createdAt' => 'created_at',
        'dialogBgDefault' => 'dialog-bg-default',
        'dialogBgSubtle' => 'dialog-bg-subtle',
        'dialogBorderDefault' => 'dialog-border-default',
        'dialogFgDefault' => 'dialog-fg-default',
        'dialogFgMute' => 'dialog-fg-mute',
        'dialogFgSubtle' => 'dialog-fg-subtle',
        'formsBgDefault' => 'forms-bg-default',
        'formsBgDisabled' => 'forms-bg-disabled',
        'formsBgHover' => 'forms-bg-hover',
        'formsBorderDefault' => 'forms-border-default',
        'formsBorderDisabled' => 'forms-border-disabled',
        'formsBorderError' => 'forms-border-error',
        'formsBorderFocus' => 'forms-border-focus',
        'formsBorderHover' => 'forms-border-hover',
        'formsBorderSuccess' => 'forms-border-success',
        'formsBorderWarn' => 'forms-border-warn',
        'formsCheckboxBgChecked' => 'forms-checkbox-bg-checked',
        'formsCheckboxBgDefault' => 'forms-checkbox-bg-default',
        'formsCheckboxBorderChecked' => 'forms-checkbox-border-checked',
        'formsCheckboxBorderDefault' => 'forms-checkbox-border-default',
        'formsCheckboxFgChecked' => 'forms-checkbox-fg-checked',
        'formsCheckboxFgDefault' => 'forms-checkbox-fg-default',
        'formsFgDefault' => 'forms-fg-default',
        'formsFgError' => 'forms-fg-error',
        'formsFgMute' => 'forms-fg-mute',
        'formsFgSubtle' => 'forms-fg-subtle',
        'formsFgSuccess' => 'forms-fg-success',
        'formsFgWarn' => 'forms-fg-warn',
        'formsRadioBgChecked' => 'forms-radio-bg-checked',
        'formsRadioBgDefault' => 'forms-radio-bg-default',
        'formsRadioBorderChecked' => 'forms-radio-border-checked',
        'formsRadioBorderDefault' => 'forms-radio-border-default',
        'formsRadioFgChecked' => 'forms-radio-fg-checked',
        'formsRadioFgDefault' => 'forms-radio-fg-default',
        'formsToggleBgChecked' => 'forms-toggle-bg-checked',
        'formsToggleBgDefault' => 'forms-toggle-bg-default',
        'formsToggleBorderChecked' => 'forms-toggle-border-checked',
        'formsToggleBorderDefault' => 'forms-toggle-border-default',
        'formsToggleFgChecked' => 'forms-toggle-fg-checked',
        'formsToggleFgDefault' => 'forms-toggle-fg-default',
        'id' => 'id',
        'linksLinkDefault' => 'links-link-default',
        'linksLinkDisabled' => 'links-link-disabled',
        'linksLinkHover' => 'links-link-hover',
        'linksLinkInvertedDefault' => 'links-link-inverted-default',
        'linksLinkInvertedHover' => 'links-link-inverted-hover',
        'linksLinkMuteDefault' => 'links-link-mute-default',
        'linksLinkMuteHover' => 'links-link-mute-hover',
        'syntaxSyntax' => 'syntax-syntax',
        'syntaxSyntaxKey' => 'syntax-syntax-key',
        'syntaxSyntaxNum' => 'syntax-syntax-num',
        'syntaxSyntaxValue' => 'syntax-syntax-value',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accent' => 'setAccent',
        'bgDefault' => 'setBgDefault',
        'borderRadiusBranding' => 'setBorderRadiusBranding',
        'borderRadiusButtons' => 'setBorderRadiusButtons',
        'borderRadiusCards' => 'setBorderRadiusCards',
        'borderRadiusForms' => 'setBorderRadiusForms',
        'borderRadiusGeneral' => 'setBorderRadiusGeneral',
        'buttonPrimaryBgDefault' => 'setButtonPrimaryBgDefault',
        'buttonPrimaryBgDisabled' => 'setButtonPrimaryBgDisabled',
        'buttonPrimaryBgHover' => 'setButtonPrimaryBgHover',
        'buttonPrimaryBorderDefault' => 'setButtonPrimaryBorderDefault',
        'buttonPrimaryBorderDisabled' => 'setButtonPrimaryBorderDisabled',
        'buttonPrimaryBorderHover' => 'setButtonPrimaryBorderHover',
        'buttonPrimaryFgDefault' => 'setButtonPrimaryFgDefault',
        'buttonPrimaryFgDisabled' => 'setButtonPrimaryFgDisabled',
        'buttonPrimaryFgHover' => 'setButtonPrimaryFgHover',
        'buttonSecondaryBgDefault' => 'setButtonSecondaryBgDefault',
        'buttonSecondaryBgDisabled' => 'setButtonSecondaryBgDisabled',
        'buttonSecondaryBgHover' => 'setButtonSecondaryBgHover',
        'buttonSecondaryBorderDefault' => 'setButtonSecondaryBorderDefault',
        'buttonSecondaryBorderDisabled' => 'setButtonSecondaryBorderDisabled',
        'buttonSecondaryBorderHover' => 'setButtonSecondaryBorderHover',
        'buttonSecondaryFgDefault' => 'setButtonSecondaryFgDefault',
        'buttonSecondaryFgDisabled' => 'setButtonSecondaryFgDisabled',
        'buttonSecondaryFgHover' => 'setButtonSecondaryFgHover',
        'buttonSocialBgDefault' => 'setButtonSocialBgDefault',
        'buttonSocialBgDisabled' => 'setButtonSocialBgDisabled',
        'buttonSocialBgHover' => 'setButtonSocialBgHover',
        'buttonSocialBgProvider' => 'setButtonSocialBgProvider',
        'buttonSocialBorderDefault' => 'setButtonSocialBorderDefault',
        'buttonSocialBorderDisabled' => 'setButtonSocialBorderDisabled',
        'buttonSocialBorderHover' => 'setButtonSocialBorderHover',
        'buttonSocialBorderProvider' => 'setButtonSocialBorderProvider',
        'buttonSocialFgDefault' => 'setButtonSocialFgDefault',
        'buttonSocialFgDisabled' => 'setButtonSocialFgDisabled',
        'buttonSocialFgHover' => 'setButtonSocialFgHover',
        'buttonSocialFgProvider' => 'setButtonSocialFgProvider',
        'createdAt' => 'setCreatedAt',
        'dialogBgDefault' => 'setDialogBgDefault',
        'dialogBgSubtle' => 'setDialogBgSubtle',
        'dialogBorderDefault' => 'setDialogBorderDefault',
        'dialogFgDefault' => 'setDialogFgDefault',
        'dialogFgMute' => 'setDialogFgMute',
        'dialogFgSubtle' => 'setDialogFgSubtle',
        'formsBgDefault' => 'setFormsBgDefault',
        'formsBgDisabled' => 'setFormsBgDisabled',
        'formsBgHover' => 'setFormsBgHover',
        'formsBorderDefault' => 'setFormsBorderDefault',
        'formsBorderDisabled' => 'setFormsBorderDisabled',
        'formsBorderError' => 'setFormsBorderError',
        'formsBorderFocus' => 'setFormsBorderFocus',
        'formsBorderHover' => 'setFormsBorderHover',
        'formsBorderSuccess' => 'setFormsBorderSuccess',
        'formsBorderWarn' => 'setFormsBorderWarn',
        'formsCheckboxBgChecked' => 'setFormsCheckboxBgChecked',
        'formsCheckboxBgDefault' => 'setFormsCheckboxBgDefault',
        'formsCheckboxBorderChecked' => 'setFormsCheckboxBorderChecked',
        'formsCheckboxBorderDefault' => 'setFormsCheckboxBorderDefault',
        'formsCheckboxFgChecked' => 'setFormsCheckboxFgChecked',
        'formsCheckboxFgDefault' => 'setFormsCheckboxFgDefault',
        'formsFgDefault' => 'setFormsFgDefault',
        'formsFgError' => 'setFormsFgError',
        'formsFgMute' => 'setFormsFgMute',
        'formsFgSubtle' => 'setFormsFgSubtle',
        'formsFgSuccess' => 'setFormsFgSuccess',
        'formsFgWarn' => 'setFormsFgWarn',
        'formsRadioBgChecked' => 'setFormsRadioBgChecked',
        'formsRadioBgDefault' => 'setFormsRadioBgDefault',
        'formsRadioBorderChecked' => 'setFormsRadioBorderChecked',
        'formsRadioBorderDefault' => 'setFormsRadioBorderDefault',
        'formsRadioFgChecked' => 'setFormsRadioFgChecked',
        'formsRadioFgDefault' => 'setFormsRadioFgDefault',
        'formsToggleBgChecked' => 'setFormsToggleBgChecked',
        'formsToggleBgDefault' => 'setFormsToggleBgDefault',
        'formsToggleBorderChecked' => 'setFormsToggleBorderChecked',
        'formsToggleBorderDefault' => 'setFormsToggleBorderDefault',
        'formsToggleFgChecked' => 'setFormsToggleFgChecked',
        'formsToggleFgDefault' => 'setFormsToggleFgDefault',
        'id' => 'setId',
        'linksLinkDefault' => 'setLinksLinkDefault',
        'linksLinkDisabled' => 'setLinksLinkDisabled',
        'linksLinkHover' => 'setLinksLinkHover',
        'linksLinkInvertedDefault' => 'setLinksLinkInvertedDefault',
        'linksLinkInvertedHover' => 'setLinksLinkInvertedHover',
        'linksLinkMuteDefault' => 'setLinksLinkMuteDefault',
        'linksLinkMuteHover' => 'setLinksLinkMuteHover',
        'syntaxSyntax' => 'setSyntaxSyntax',
        'syntaxSyntaxKey' => 'setSyntaxSyntaxKey',
        'syntaxSyntaxNum' => 'setSyntaxSyntaxNum',
        'syntaxSyntaxValue' => 'setSyntaxSyntaxValue',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accent' => 'getAccent',
        'bgDefault' => 'getBgDefault',
        'borderRadiusBranding' => 'getBorderRadiusBranding',
        'borderRadiusButtons' => 'getBorderRadiusButtons',
        'borderRadiusCards' => 'getBorderRadiusCards',
        'borderRadiusForms' => 'getBorderRadiusForms',
        'borderRadiusGeneral' => 'getBorderRadiusGeneral',
        'buttonPrimaryBgDefault' => 'getButtonPrimaryBgDefault',
        'buttonPrimaryBgDisabled' => 'getButtonPrimaryBgDisabled',
        'buttonPrimaryBgHover' => 'getButtonPrimaryBgHover',
        'buttonPrimaryBorderDefault' => 'getButtonPrimaryBorderDefault',
        'buttonPrimaryBorderDisabled' => 'getButtonPrimaryBorderDisabled',
        'buttonPrimaryBorderHover' => 'getButtonPrimaryBorderHover',
        'buttonPrimaryFgDefault' => 'getButtonPrimaryFgDefault',
        'buttonPrimaryFgDisabled' => 'getButtonPrimaryFgDisabled',
        'buttonPrimaryFgHover' => 'getButtonPrimaryFgHover',
        'buttonSecondaryBgDefault' => 'getButtonSecondaryBgDefault',
        'buttonSecondaryBgDisabled' => 'getButtonSecondaryBgDisabled',
        'buttonSecondaryBgHover' => 'getButtonSecondaryBgHover',
        'buttonSecondaryBorderDefault' => 'getButtonSecondaryBorderDefault',
        'buttonSecondaryBorderDisabled' => 'getButtonSecondaryBorderDisabled',
        'buttonSecondaryBorderHover' => 'getButtonSecondaryBorderHover',
        'buttonSecondaryFgDefault' => 'getButtonSecondaryFgDefault',
        'buttonSecondaryFgDisabled' => 'getButtonSecondaryFgDisabled',
        'buttonSecondaryFgHover' => 'getButtonSecondaryFgHover',
        'buttonSocialBgDefault' => 'getButtonSocialBgDefault',
        'buttonSocialBgDisabled' => 'getButtonSocialBgDisabled',
        'buttonSocialBgHover' => 'getButtonSocialBgHover',
        'buttonSocialBgProvider' => 'getButtonSocialBgProvider',
        'buttonSocialBorderDefault' => 'getButtonSocialBorderDefault',
        'buttonSocialBorderDisabled' => 'getButtonSocialBorderDisabled',
        'buttonSocialBorderHover' => 'getButtonSocialBorderHover',
        'buttonSocialBorderProvider' => 'getButtonSocialBorderProvider',
        'buttonSocialFgDefault' => 'getButtonSocialFgDefault',
        'buttonSocialFgDisabled' => 'getButtonSocialFgDisabled',
        'buttonSocialFgHover' => 'getButtonSocialFgHover',
        'buttonSocialFgProvider' => 'getButtonSocialFgProvider',
        'createdAt' => 'getCreatedAt',
        'dialogBgDefault' => 'getDialogBgDefault',
        'dialogBgSubtle' => 'getDialogBgSubtle',
        'dialogBorderDefault' => 'getDialogBorderDefault',
        'dialogFgDefault' => 'getDialogFgDefault',
        'dialogFgMute' => 'getDialogFgMute',
        'dialogFgSubtle' => 'getDialogFgSubtle',
        'formsBgDefault' => 'getFormsBgDefault',
        'formsBgDisabled' => 'getFormsBgDisabled',
        'formsBgHover' => 'getFormsBgHover',
        'formsBorderDefault' => 'getFormsBorderDefault',
        'formsBorderDisabled' => 'getFormsBorderDisabled',
        'formsBorderError' => 'getFormsBorderError',
        'formsBorderFocus' => 'getFormsBorderFocus',
        'formsBorderHover' => 'getFormsBorderHover',
        'formsBorderSuccess' => 'getFormsBorderSuccess',
        'formsBorderWarn' => 'getFormsBorderWarn',
        'formsCheckboxBgChecked' => 'getFormsCheckboxBgChecked',
        'formsCheckboxBgDefault' => 'getFormsCheckboxBgDefault',
        'formsCheckboxBorderChecked' => 'getFormsCheckboxBorderChecked',
        'formsCheckboxBorderDefault' => 'getFormsCheckboxBorderDefault',
        'formsCheckboxFgChecked' => 'getFormsCheckboxFgChecked',
        'formsCheckboxFgDefault' => 'getFormsCheckboxFgDefault',
        'formsFgDefault' => 'getFormsFgDefault',
        'formsFgError' => 'getFormsFgError',
        'formsFgMute' => 'getFormsFgMute',
        'formsFgSubtle' => 'getFormsFgSubtle',
        'formsFgSuccess' => 'getFormsFgSuccess',
        'formsFgWarn' => 'getFormsFgWarn',
        'formsRadioBgChecked' => 'getFormsRadioBgChecked',
        'formsRadioBgDefault' => 'getFormsRadioBgDefault',
        'formsRadioBorderChecked' => 'getFormsRadioBorderChecked',
        'formsRadioBorderDefault' => 'getFormsRadioBorderDefault',
        'formsRadioFgChecked' => 'getFormsRadioFgChecked',
        'formsRadioFgDefault' => 'getFormsRadioFgDefault',
        'formsToggleBgChecked' => 'getFormsToggleBgChecked',
        'formsToggleBgDefault' => 'getFormsToggleBgDefault',
        'formsToggleBorderChecked' => 'getFormsToggleBorderChecked',
        'formsToggleBorderDefault' => 'getFormsToggleBorderDefault',
        'formsToggleFgChecked' => 'getFormsToggleFgChecked',
        'formsToggleFgDefault' => 'getFormsToggleFgDefault',
        'id' => 'getId',
        'linksLinkDefault' => 'getLinksLinkDefault',
        'linksLinkDisabled' => 'getLinksLinkDisabled',
        'linksLinkHover' => 'getLinksLinkHover',
        'linksLinkInvertedDefault' => 'getLinksLinkInvertedDefault',
        'linksLinkInvertedHover' => 'getLinksLinkInvertedHover',
        'linksLinkMuteDefault' => 'getLinksLinkMuteDefault',
        'linksLinkMuteHover' => 'getLinksLinkMuteHover',
        'syntaxSyntax' => 'getSyntaxSyntax',
        'syntaxSyntaxKey' => 'getSyntaxSyntaxKey',
        'syntaxSyntaxNum' => 'getSyntaxSyntaxNum',
        'syntaxSyntaxValue' => 'getSyntaxSyntaxValue',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accent', $data ?? [], null);
        $this->setIfExists('bgDefault', $data ?? [], null);
        $this->setIfExists('borderRadiusBranding', $data ?? [], null);
        $this->setIfExists('borderRadiusButtons', $data ?? [], null);
        $this->setIfExists('borderRadiusCards', $data ?? [], null);
        $this->setIfExists('borderRadiusForms', $data ?? [], null);
        $this->setIfExists('borderRadiusGeneral', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBgDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBgDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBgHover', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderHover', $data ?? [], null);
        $this->setIfExists('buttonPrimaryFgDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryFgDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryFgHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBgDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBgDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBgHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryFgDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryFgDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryFgHover', $data ?? [], null);
        $this->setIfExists('buttonSocialBgDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialBgDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialBgHover', $data ?? [], null);
        $this->setIfExists('buttonSocialBgProvider', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderHover', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderProvider', $data ?? [], null);
        $this->setIfExists('buttonSocialFgDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialFgDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialFgHover', $data ?? [], null);
        $this->setIfExists('buttonSocialFgProvider', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('dialogBgDefault', $data ?? [], null);
        $this->setIfExists('dialogBgSubtle', $data ?? [], null);
        $this->setIfExists('dialogBorderDefault', $data ?? [], null);
        $this->setIfExists('dialogFgDefault', $data ?? [], null);
        $this->setIfExists('dialogFgMute', $data ?? [], null);
        $this->setIfExists('dialogFgSubtle', $data ?? [], null);
        $this->setIfExists('formsBgDefault', $data ?? [], null);
        $this->setIfExists('formsBgDisabled', $data ?? [], null);
        $this->setIfExists('formsBgHover', $data ?? [], null);
        $this->setIfExists('formsBorderDefault', $data ?? [], null);
        $this->setIfExists('formsBorderDisabled', $data ?? [], null);
        $this->setIfExists('formsBorderError', $data ?? [], null);
        $this->setIfExists('formsBorderFocus', $data ?? [], null);
        $this->setIfExists('formsBorderHover', $data ?? [], null);
        $this->setIfExists('formsBorderSuccess', $data ?? [], null);
        $this->setIfExists('formsBorderWarn', $data ?? [], null);
        $this->setIfExists('formsCheckboxBgChecked', $data ?? [], null);
        $this->setIfExists('formsCheckboxBgDefault', $data ?? [], null);
        $this->setIfExists('formsCheckboxBorderChecked', $data ?? [], null);
        $this->setIfExists('formsCheckboxBorderDefault', $data ?? [], null);
        $this->setIfExists('formsCheckboxFgChecked', $data ?? [], null);
        $this->setIfExists('formsCheckboxFgDefault', $data ?? [], null);
        $this->setIfExists('formsFgDefault', $data ?? [], null);
        $this->setIfExists('formsFgError', $data ?? [], null);
        $this->setIfExists('formsFgMute', $data ?? [], null);
        $this->setIfExists('formsFgSubtle', $data ?? [], null);
        $this->setIfExists('formsFgSuccess', $data ?? [], null);
        $this->setIfExists('formsFgWarn', $data ?? [], null);
        $this->setIfExists('formsRadioBgChecked', $data ?? [], null);
        $this->setIfExists('formsRadioBgDefault', $data ?? [], null);
        $this->setIfExists('formsRadioBorderChecked', $data ?? [], null);
        $this->setIfExists('formsRadioBorderDefault', $data ?? [], null);
        $this->setIfExists('formsRadioFgChecked', $data ?? [], null);
        $this->setIfExists('formsRadioFgDefault', $data ?? [], null);
        $this->setIfExists('formsToggleBgChecked', $data ?? [], null);
        $this->setIfExists('formsToggleBgDefault', $data ?? [], null);
        $this->setIfExists('formsToggleBorderChecked', $data ?? [], null);
        $this->setIfExists('formsToggleBorderDefault', $data ?? [], null);
        $this->setIfExists('formsToggleFgChecked', $data ?? [], null);
        $this->setIfExists('formsToggleFgDefault', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('linksLinkDefault', $data ?? [], null);
        $this->setIfExists('linksLinkDisabled', $data ?? [], null);
        $this->setIfExists('linksLinkHover', $data ?? [], null);
        $this->setIfExists('linksLinkInvertedDefault', $data ?? [], null);
        $this->setIfExists('linksLinkInvertedHover', $data ?? [], null);
        $this->setIfExists('linksLinkMuteDefault', $data ?? [], null);
        $this->setIfExists('linksLinkMuteHover', $data ?? [], null);
        $this->setIfExists('syntaxSyntax', $data ?? [], null);
        $this->setIfExists('syntaxSyntaxKey', $data ?? [], null);
        $this->setIfExists('syntaxSyntaxNum', $data ?? [], null);
        $this->setIfExists('syntaxSyntaxValue', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accent
     *
     * @return string|null
     */
    public function getAccent()
    {
        return $this->container['accent'];
    }

    /**
     * Sets accent
     *
     * @param string|null $accent accent
     *
     * @return self
     */
    public function setAccent($accent)
    {
        if (is_null($accent)) {
            throw new \InvalidArgumentException('non-nullable accent cannot be null');
        }
        $this->container['accent'] = $accent;

        return $this;
    }

    /**
     * Gets bgDefault
     *
     * @return string|null
     */
    public function getBgDefault()
    {
        return $this->container['bgDefault'];
    }

    /**
     * Sets bgDefault
     *
     * @param string|null $bgDefault bgDefault
     *
     * @return self
     */
    public function setBgDefault($bgDefault)
    {
        if (is_null($bgDefault)) {
            throw new \InvalidArgumentException('non-nullable bgDefault cannot be null');
        }
        $this->container['bgDefault'] = $bgDefault;

        return $this;
    }

    /**
     * Gets borderRadiusBranding
     *
     * @return string|null
     */
    public function getBorderRadiusBranding()
    {
        return $this->container['borderRadiusBranding'];
    }

    /**
     * Sets borderRadiusBranding
     *
     * @param string|null $borderRadiusBranding borderRadiusBranding
     *
     * @return self
     */
    public function setBorderRadiusBranding($borderRadiusBranding)
    {
        if (is_null($borderRadiusBranding)) {
            throw new \InvalidArgumentException('non-nullable borderRadiusBranding cannot be null');
        }
        $this->container['borderRadiusBranding'] = $borderRadiusBranding;

        return $this;
    }

    /**
     * Gets borderRadiusButtons
     *
     * @return string|null
     */
    public function getBorderRadiusButtons()
    {
        return $this->container['borderRadiusButtons'];
    }

    /**
     * Sets borderRadiusButtons
     *
     * @param string|null $borderRadiusButtons borderRadiusButtons
     *
     * @return self
     */
    public function setBorderRadiusButtons($borderRadiusButtons)
    {
        if (is_null($borderRadiusButtons)) {
            throw new \InvalidArgumentException('non-nullable borderRadiusButtons cannot be null');
        }
        $this->container['borderRadiusButtons'] = $borderRadiusButtons;

        return $this;
    }

    /**
     * Gets borderRadiusCards
     *
     * @return string|null
     */
    public function getBorderRadiusCards()
    {
        return $this->container['borderRadiusCards'];
    }

    /**
     * Sets borderRadiusCards
     *
     * @param string|null $borderRadiusCards borderRadiusCards
     *
     * @return self
     */
    public function setBorderRadiusCards($borderRadiusCards)
    {
        if (is_null($borderRadiusCards)) {
            throw new \InvalidArgumentException('non-nullable borderRadiusCards cannot be null');
        }
        $this->container['borderRadiusCards'] = $borderRadiusCards;

        return $this;
    }

    /**
     * Gets borderRadiusForms
     *
     * @return string|null
     */
    public function getBorderRadiusForms()
    {
        return $this->container['borderRadiusForms'];
    }

    /**
     * Sets borderRadiusForms
     *
     * @param string|null $borderRadiusForms borderRadiusForms
     *
     * @return self
     */
    public function setBorderRadiusForms($borderRadiusForms)
    {
        if (is_null($borderRadiusForms)) {
            throw new \InvalidArgumentException('non-nullable borderRadiusForms cannot be null');
        }
        $this->container['borderRadiusForms'] = $borderRadiusForms;

        return $this;
    }

    /**
     * Gets borderRadiusGeneral
     *
     * @return string|null
     */
    public function getBorderRadiusGeneral()
    {
        return $this->container['borderRadiusGeneral'];
    }

    /**
     * Sets borderRadiusGeneral
     *
     * @param string|null $borderRadiusGeneral borderRadiusGeneral
     *
     * @return self
     */
    public function setBorderRadiusGeneral($borderRadiusGeneral)
    {
        if (is_null($borderRadiusGeneral)) {
            throw new \InvalidArgumentException('non-nullable borderRadiusGeneral cannot be null');
        }
        $this->container['borderRadiusGeneral'] = $borderRadiusGeneral;

        return $this;
    }

    /**
     * Gets buttonPrimaryBgDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryBgDefault()
    {
        return $this->container['buttonPrimaryBgDefault'];
    }

    /**
     * Sets buttonPrimaryBgDefault
     *
     * @param string|null $buttonPrimaryBgDefault buttonPrimaryBgDefault
     *
     * @return self
     */
    public function setButtonPrimaryBgDefault($buttonPrimaryBgDefault)
    {
        if (is_null($buttonPrimaryBgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBgDefault cannot be null');
        }
        $this->container['buttonPrimaryBgDefault'] = $buttonPrimaryBgDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryBgDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryBgDisabled()
    {
        return $this->container['buttonPrimaryBgDisabled'];
    }

    /**
     * Sets buttonPrimaryBgDisabled
     *
     * @param string|null $buttonPrimaryBgDisabled buttonPrimaryBgDisabled
     *
     * @return self
     */
    public function setButtonPrimaryBgDisabled($buttonPrimaryBgDisabled)
    {
        if (is_null($buttonPrimaryBgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBgDisabled cannot be null');
        }
        $this->container['buttonPrimaryBgDisabled'] = $buttonPrimaryBgDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryBgHover
     *
     * @return string|null
     */
    public function getButtonPrimaryBgHover()
    {
        return $this->container['buttonPrimaryBgHover'];
    }

    /**
     * Sets buttonPrimaryBgHover
     *
     * @param string|null $buttonPrimaryBgHover buttonPrimaryBgHover
     *
     * @return self
     */
    public function setButtonPrimaryBgHover($buttonPrimaryBgHover)
    {
        if (is_null($buttonPrimaryBgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBgHover cannot be null');
        }
        $this->container['buttonPrimaryBgHover'] = $buttonPrimaryBgHover;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderDefault()
    {
        return $this->container['buttonPrimaryBorderDefault'];
    }

    /**
     * Sets buttonPrimaryBorderDefault
     *
     * @param string|null $buttonPrimaryBorderDefault buttonPrimaryBorderDefault
     *
     * @return self
     */
    public function setButtonPrimaryBorderDefault($buttonPrimaryBorderDefault)
    {
        if (is_null($buttonPrimaryBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderDefault cannot be null');
        }
        $this->container['buttonPrimaryBorderDefault'] = $buttonPrimaryBorderDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderDisabled()
    {
        return $this->container['buttonPrimaryBorderDisabled'];
    }

    /**
     * Sets buttonPrimaryBorderDisabled
     *
     * @param string|null $buttonPrimaryBorderDisabled buttonPrimaryBorderDisabled
     *
     * @return self
     */
    public function setButtonPrimaryBorderDisabled($buttonPrimaryBorderDisabled)
    {
        if (is_null($buttonPrimaryBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderDisabled cannot be null');
        }
        $this->container['buttonPrimaryBorderDisabled'] = $buttonPrimaryBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderHover
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderHover()
    {
        return $this->container['buttonPrimaryBorderHover'];
    }

    /**
     * Sets buttonPrimaryBorderHover
     *
     * @param string|null $buttonPrimaryBorderHover buttonPrimaryBorderHover
     *
     * @return self
     */
    public function setButtonPrimaryBorderHover($buttonPrimaryBorderHover)
    {
        if (is_null($buttonPrimaryBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderHover cannot be null');
        }
        $this->container['buttonPrimaryBorderHover'] = $buttonPrimaryBorderHover;

        return $this;
    }

    /**
     * Gets buttonPrimaryFgDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryFgDefault()
    {
        return $this->container['buttonPrimaryFgDefault'];
    }

    /**
     * Sets buttonPrimaryFgDefault
     *
     * @param string|null $buttonPrimaryFgDefault buttonPrimaryFgDefault
     *
     * @return self
     */
    public function setButtonPrimaryFgDefault($buttonPrimaryFgDefault)
    {
        if (is_null($buttonPrimaryFgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryFgDefault cannot be null');
        }
        $this->container['buttonPrimaryFgDefault'] = $buttonPrimaryFgDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryFgDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryFgDisabled()
    {
        return $this->container['buttonPrimaryFgDisabled'];
    }

    /**
     * Sets buttonPrimaryFgDisabled
     *
     * @param string|null $buttonPrimaryFgDisabled buttonPrimaryFgDisabled
     *
     * @return self
     */
    public function setButtonPrimaryFgDisabled($buttonPrimaryFgDisabled)
    {
        if (is_null($buttonPrimaryFgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryFgDisabled cannot be null');
        }
        $this->container['buttonPrimaryFgDisabled'] = $buttonPrimaryFgDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryFgHover
     *
     * @return string|null
     */
    public function getButtonPrimaryFgHover()
    {
        return $this->container['buttonPrimaryFgHover'];
    }

    /**
     * Sets buttonPrimaryFgHover
     *
     * @param string|null $buttonPrimaryFgHover buttonPrimaryFgHover
     *
     * @return self
     */
    public function setButtonPrimaryFgHover($buttonPrimaryFgHover)
    {
        if (is_null($buttonPrimaryFgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryFgHover cannot be null');
        }
        $this->container['buttonPrimaryFgHover'] = $buttonPrimaryFgHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryBgDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryBgDefault()
    {
        return $this->container['buttonSecondaryBgDefault'];
    }

    /**
     * Sets buttonSecondaryBgDefault
     *
     * @param string|null $buttonSecondaryBgDefault buttonSecondaryBgDefault
     *
     * @return self
     */
    public function setButtonSecondaryBgDefault($buttonSecondaryBgDefault)
    {
        if (is_null($buttonSecondaryBgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBgDefault cannot be null');
        }
        $this->container['buttonSecondaryBgDefault'] = $buttonSecondaryBgDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryBgDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryBgDisabled()
    {
        return $this->container['buttonSecondaryBgDisabled'];
    }

    /**
     * Sets buttonSecondaryBgDisabled
     *
     * @param string|null $buttonSecondaryBgDisabled buttonSecondaryBgDisabled
     *
     * @return self
     */
    public function setButtonSecondaryBgDisabled($buttonSecondaryBgDisabled)
    {
        if (is_null($buttonSecondaryBgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBgDisabled cannot be null');
        }
        $this->container['buttonSecondaryBgDisabled'] = $buttonSecondaryBgDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryBgHover
     *
     * @return string|null
     */
    public function getButtonSecondaryBgHover()
    {
        return $this->container['buttonSecondaryBgHover'];
    }

    /**
     * Sets buttonSecondaryBgHover
     *
     * @param string|null $buttonSecondaryBgHover buttonSecondaryBgHover
     *
     * @return self
     */
    public function setButtonSecondaryBgHover($buttonSecondaryBgHover)
    {
        if (is_null($buttonSecondaryBgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBgHover cannot be null');
        }
        $this->container['buttonSecondaryBgHover'] = $buttonSecondaryBgHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderDefault()
    {
        return $this->container['buttonSecondaryBorderDefault'];
    }

    /**
     * Sets buttonSecondaryBorderDefault
     *
     * @param string|null $buttonSecondaryBorderDefault buttonSecondaryBorderDefault
     *
     * @return self
     */
    public function setButtonSecondaryBorderDefault($buttonSecondaryBorderDefault)
    {
        if (is_null($buttonSecondaryBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderDefault cannot be null');
        }
        $this->container['buttonSecondaryBorderDefault'] = $buttonSecondaryBorderDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderDisabled()
    {
        return $this->container['buttonSecondaryBorderDisabled'];
    }

    /**
     * Sets buttonSecondaryBorderDisabled
     *
     * @param string|null $buttonSecondaryBorderDisabled buttonSecondaryBorderDisabled
     *
     * @return self
     */
    public function setButtonSecondaryBorderDisabled($buttonSecondaryBorderDisabled)
    {
        if (is_null($buttonSecondaryBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderDisabled cannot be null');
        }
        $this->container['buttonSecondaryBorderDisabled'] = $buttonSecondaryBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderHover
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderHover()
    {
        return $this->container['buttonSecondaryBorderHover'];
    }

    /**
     * Sets buttonSecondaryBorderHover
     *
     * @param string|null $buttonSecondaryBorderHover buttonSecondaryBorderHover
     *
     * @return self
     */
    public function setButtonSecondaryBorderHover($buttonSecondaryBorderHover)
    {
        if (is_null($buttonSecondaryBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderHover cannot be null');
        }
        $this->container['buttonSecondaryBorderHover'] = $buttonSecondaryBorderHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryFgDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryFgDefault()
    {
        return $this->container['buttonSecondaryFgDefault'];
    }

    /**
     * Sets buttonSecondaryFgDefault
     *
     * @param string|null $buttonSecondaryFgDefault buttonSecondaryFgDefault
     *
     * @return self
     */
    public function setButtonSecondaryFgDefault($buttonSecondaryFgDefault)
    {
        if (is_null($buttonSecondaryFgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryFgDefault cannot be null');
        }
        $this->container['buttonSecondaryFgDefault'] = $buttonSecondaryFgDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryFgDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryFgDisabled()
    {
        return $this->container['buttonSecondaryFgDisabled'];
    }

    /**
     * Sets buttonSecondaryFgDisabled
     *
     * @param string|null $buttonSecondaryFgDisabled buttonSecondaryFgDisabled
     *
     * @return self
     */
    public function setButtonSecondaryFgDisabled($buttonSecondaryFgDisabled)
    {
        if (is_null($buttonSecondaryFgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryFgDisabled cannot be null');
        }
        $this->container['buttonSecondaryFgDisabled'] = $buttonSecondaryFgDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryFgHover
     *
     * @return string|null
     */
    public function getButtonSecondaryFgHover()
    {
        return $this->container['buttonSecondaryFgHover'];
    }

    /**
     * Sets buttonSecondaryFgHover
     *
     * @param string|null $buttonSecondaryFgHover buttonSecondaryFgHover
     *
     * @return self
     */
    public function setButtonSecondaryFgHover($buttonSecondaryFgHover)
    {
        if (is_null($buttonSecondaryFgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryFgHover cannot be null');
        }
        $this->container['buttonSecondaryFgHover'] = $buttonSecondaryFgHover;

        return $this;
    }

    /**
     * Gets buttonSocialBgDefault
     *
     * @return string|null
     */
    public function getButtonSocialBgDefault()
    {
        return $this->container['buttonSocialBgDefault'];
    }

    /**
     * Sets buttonSocialBgDefault
     *
     * @param string|null $buttonSocialBgDefault buttonSocialBgDefault
     *
     * @return self
     */
    public function setButtonSocialBgDefault($buttonSocialBgDefault)
    {
        if (is_null($buttonSocialBgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBgDefault cannot be null');
        }
        $this->container['buttonSocialBgDefault'] = $buttonSocialBgDefault;

        return $this;
    }

    /**
     * Gets buttonSocialBgDisabled
     *
     * @return string|null
     */
    public function getButtonSocialBgDisabled()
    {
        return $this->container['buttonSocialBgDisabled'];
    }

    /**
     * Sets buttonSocialBgDisabled
     *
     * @param string|null $buttonSocialBgDisabled buttonSocialBgDisabled
     *
     * @return self
     */
    public function setButtonSocialBgDisabled($buttonSocialBgDisabled)
    {
        if (is_null($buttonSocialBgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBgDisabled cannot be null');
        }
        $this->container['buttonSocialBgDisabled'] = $buttonSocialBgDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialBgHover
     *
     * @return string|null
     */
    public function getButtonSocialBgHover()
    {
        return $this->container['buttonSocialBgHover'];
    }

    /**
     * Sets buttonSocialBgHover
     *
     * @param string|null $buttonSocialBgHover buttonSocialBgHover
     *
     * @return self
     */
    public function setButtonSocialBgHover($buttonSocialBgHover)
    {
        if (is_null($buttonSocialBgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBgHover cannot be null');
        }
        $this->container['buttonSocialBgHover'] = $buttonSocialBgHover;

        return $this;
    }

    /**
     * Gets buttonSocialBgProvider
     *
     * @return string|null
     */
    public function getButtonSocialBgProvider()
    {
        return $this->container['buttonSocialBgProvider'];
    }

    /**
     * Sets buttonSocialBgProvider
     *
     * @param string|null $buttonSocialBgProvider buttonSocialBgProvider
     *
     * @return self
     */
    public function setButtonSocialBgProvider($buttonSocialBgProvider)
    {
        if (is_null($buttonSocialBgProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBgProvider cannot be null');
        }
        $this->container['buttonSocialBgProvider'] = $buttonSocialBgProvider;

        return $this;
    }

    /**
     * Gets buttonSocialBorderDefault
     *
     * @return string|null
     */
    public function getButtonSocialBorderDefault()
    {
        return $this->container['buttonSocialBorderDefault'];
    }

    /**
     * Sets buttonSocialBorderDefault
     *
     * @param string|null $buttonSocialBorderDefault buttonSocialBorderDefault
     *
     * @return self
     */
    public function setButtonSocialBorderDefault($buttonSocialBorderDefault)
    {
        if (is_null($buttonSocialBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderDefault cannot be null');
        }
        $this->container['buttonSocialBorderDefault'] = $buttonSocialBorderDefault;

        return $this;
    }

    /**
     * Gets buttonSocialBorderDisabled
     *
     * @return string|null
     */
    public function getButtonSocialBorderDisabled()
    {
        return $this->container['buttonSocialBorderDisabled'];
    }

    /**
     * Sets buttonSocialBorderDisabled
     *
     * @param string|null $buttonSocialBorderDisabled buttonSocialBorderDisabled
     *
     * @return self
     */
    public function setButtonSocialBorderDisabled($buttonSocialBorderDisabled)
    {
        if (is_null($buttonSocialBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderDisabled cannot be null');
        }
        $this->container['buttonSocialBorderDisabled'] = $buttonSocialBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialBorderHover
     *
     * @return string|null
     */
    public function getButtonSocialBorderHover()
    {
        return $this->container['buttonSocialBorderHover'];
    }

    /**
     * Sets buttonSocialBorderHover
     *
     * @param string|null $buttonSocialBorderHover buttonSocialBorderHover
     *
     * @return self
     */
    public function setButtonSocialBorderHover($buttonSocialBorderHover)
    {
        if (is_null($buttonSocialBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderHover cannot be null');
        }
        $this->container['buttonSocialBorderHover'] = $buttonSocialBorderHover;

        return $this;
    }

    /**
     * Gets buttonSocialBorderProvider
     *
     * @return string|null
     */
    public function getButtonSocialBorderProvider()
    {
        return $this->container['buttonSocialBorderProvider'];
    }

    /**
     * Sets buttonSocialBorderProvider
     *
     * @param string|null $buttonSocialBorderProvider buttonSocialBorderProvider
     *
     * @return self
     */
    public function setButtonSocialBorderProvider($buttonSocialBorderProvider)
    {
        if (is_null($buttonSocialBorderProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderProvider cannot be null');
        }
        $this->container['buttonSocialBorderProvider'] = $buttonSocialBorderProvider;

        return $this;
    }

    /**
     * Gets buttonSocialFgDefault
     *
     * @return string|null
     */
    public function getButtonSocialFgDefault()
    {
        return $this->container['buttonSocialFgDefault'];
    }

    /**
     * Sets buttonSocialFgDefault
     *
     * @param string|null $buttonSocialFgDefault buttonSocialFgDefault
     *
     * @return self
     */
    public function setButtonSocialFgDefault($buttonSocialFgDefault)
    {
        if (is_null($buttonSocialFgDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialFgDefault cannot be null');
        }
        $this->container['buttonSocialFgDefault'] = $buttonSocialFgDefault;

        return $this;
    }

    /**
     * Gets buttonSocialFgDisabled
     *
     * @return string|null
     */
    public function getButtonSocialFgDisabled()
    {
        return $this->container['buttonSocialFgDisabled'];
    }

    /**
     * Sets buttonSocialFgDisabled
     *
     * @param string|null $buttonSocialFgDisabled buttonSocialFgDisabled
     *
     * @return self
     */
    public function setButtonSocialFgDisabled($buttonSocialFgDisabled)
    {
        if (is_null($buttonSocialFgDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialFgDisabled cannot be null');
        }
        $this->container['buttonSocialFgDisabled'] = $buttonSocialFgDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialFgHover
     *
     * @return string|null
     */
    public function getButtonSocialFgHover()
    {
        return $this->container['buttonSocialFgHover'];
    }

    /**
     * Sets buttonSocialFgHover
     *
     * @param string|null $buttonSocialFgHover buttonSocialFgHover
     *
     * @return self
     */
    public function setButtonSocialFgHover($buttonSocialFgHover)
    {
        if (is_null($buttonSocialFgHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialFgHover cannot be null');
        }
        $this->container['buttonSocialFgHover'] = $buttonSocialFgHover;

        return $this;
    }

    /**
     * Gets buttonSocialFgProvider
     *
     * @return string|null
     */
    public function getButtonSocialFgProvider()
    {
        return $this->container['buttonSocialFgProvider'];
    }

    /**
     * Sets buttonSocialFgProvider
     *
     * @param string|null $buttonSocialFgProvider buttonSocialFgProvider
     *
     * @return self
     */
    public function setButtonSocialFgProvider($buttonSocialFgProvider)
    {
        if (is_null($buttonSocialFgProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialFgProvider cannot be null');
        }
        $this->container['buttonSocialFgProvider'] = $buttonSocialFgProvider;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets dialogBgDefault
     *
     * @return string|null
     */
    public function getDialogBgDefault()
    {
        return $this->container['dialogBgDefault'];
    }

    /**
     * Sets dialogBgDefault
     *
     * @param string|null $dialogBgDefault dialogBgDefault
     *
     * @return self
     */
    public function setDialogBgDefault($dialogBgDefault)
    {
        if (is_null($dialogBgDefault)) {
            throw new \InvalidArgumentException('non-nullable dialogBgDefault cannot be null');
        }
        $this->container['dialogBgDefault'] = $dialogBgDefault;

        return $this;
    }

    /**
     * Gets dialogBgSubtle
     *
     * @return string|null
     */
    public function getDialogBgSubtle()
    {
        return $this->container['dialogBgSubtle'];
    }

    /**
     * Sets dialogBgSubtle
     *
     * @param string|null $dialogBgSubtle dialogBgSubtle
     *
     * @return self
     */
    public function setDialogBgSubtle($dialogBgSubtle)
    {
        if (is_null($dialogBgSubtle)) {
            throw new \InvalidArgumentException('non-nullable dialogBgSubtle cannot be null');
        }
        $this->container['dialogBgSubtle'] = $dialogBgSubtle;

        return $this;
    }

    /**
     * Gets dialogBorderDefault
     *
     * @return string|null
     */
    public function getDialogBorderDefault()
    {
        return $this->container['dialogBorderDefault'];
    }

    /**
     * Sets dialogBorderDefault
     *
     * @param string|null $dialogBorderDefault dialogBorderDefault
     *
     * @return self
     */
    public function setDialogBorderDefault($dialogBorderDefault)
    {
        if (is_null($dialogBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable dialogBorderDefault cannot be null');
        }
        $this->container['dialogBorderDefault'] = $dialogBorderDefault;

        return $this;
    }

    /**
     * Gets dialogFgDefault
     *
     * @return string|null
     */
    public function getDialogFgDefault()
    {
        return $this->container['dialogFgDefault'];
    }

    /**
     * Sets dialogFgDefault
     *
     * @param string|null $dialogFgDefault dialogFgDefault
     *
     * @return self
     */
    public function setDialogFgDefault($dialogFgDefault)
    {
        if (is_null($dialogFgDefault)) {
            throw new \InvalidArgumentException('non-nullable dialogFgDefault cannot be null');
        }
        $this->container['dialogFgDefault'] = $dialogFgDefault;

        return $this;
    }

    /**
     * Gets dialogFgMute
     *
     * @return string|null
     */
    public function getDialogFgMute()
    {
        return $this->container['dialogFgMute'];
    }

    /**
     * Sets dialogFgMute
     *
     * @param string|null $dialogFgMute dialogFgMute
     *
     * @return self
     */
    public function setDialogFgMute($dialogFgMute)
    {
        if (is_null($dialogFgMute)) {
            throw new \InvalidArgumentException('non-nullable dialogFgMute cannot be null');
        }
        $this->container['dialogFgMute'] = $dialogFgMute;

        return $this;
    }

    /**
     * Gets dialogFgSubtle
     *
     * @return string|null
     */
    public function getDialogFgSubtle()
    {
        return $this->container['dialogFgSubtle'];
    }

    /**
     * Sets dialogFgSubtle
     *
     * @param string|null $dialogFgSubtle dialogFgSubtle
     *
     * @return self
     */
    public function setDialogFgSubtle($dialogFgSubtle)
    {
        if (is_null($dialogFgSubtle)) {
            throw new \InvalidArgumentException('non-nullable dialogFgSubtle cannot be null');
        }
        $this->container['dialogFgSubtle'] = $dialogFgSubtle;

        return $this;
    }

    /**
     * Gets formsBgDefault
     *
     * @return string|null
     */
    public function getFormsBgDefault()
    {
        return $this->container['formsBgDefault'];
    }

    /**
     * Sets formsBgDefault
     *
     * @param string|null $formsBgDefault formsBgDefault
     *
     * @return self
     */
    public function setFormsBgDefault($formsBgDefault)
    {
        if (is_null($formsBgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsBgDefault cannot be null');
        }
        $this->container['formsBgDefault'] = $formsBgDefault;

        return $this;
    }

    /**
     * Gets formsBgDisabled
     *
     * @return string|null
     */
    public function getFormsBgDisabled()
    {
        return $this->container['formsBgDisabled'];
    }

    /**
     * Sets formsBgDisabled
     *
     * @param string|null $formsBgDisabled formsBgDisabled
     *
     * @return self
     */
    public function setFormsBgDisabled($formsBgDisabled)
    {
        if (is_null($formsBgDisabled)) {
            throw new \InvalidArgumentException('non-nullable formsBgDisabled cannot be null');
        }
        $this->container['formsBgDisabled'] = $formsBgDisabled;

        return $this;
    }

    /**
     * Gets formsBgHover
     *
     * @return string|null
     */
    public function getFormsBgHover()
    {
        return $this->container['formsBgHover'];
    }

    /**
     * Sets formsBgHover
     *
     * @param string|null $formsBgHover formsBgHover
     *
     * @return self
     */
    public function setFormsBgHover($formsBgHover)
    {
        if (is_null($formsBgHover)) {
            throw new \InvalidArgumentException('non-nullable formsBgHover cannot be null');
        }
        $this->container['formsBgHover'] = $formsBgHover;

        return $this;
    }

    /**
     * Gets formsBorderDefault
     *
     * @return string|null
     */
    public function getFormsBorderDefault()
    {
        return $this->container['formsBorderDefault'];
    }

    /**
     * Sets formsBorderDefault
     *
     * @param string|null $formsBorderDefault formsBorderDefault
     *
     * @return self
     */
    public function setFormsBorderDefault($formsBorderDefault)
    {
        if (is_null($formsBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable formsBorderDefault cannot be null');
        }
        $this->container['formsBorderDefault'] = $formsBorderDefault;

        return $this;
    }

    /**
     * Gets formsBorderDisabled
     *
     * @return string|null
     */
    public function getFormsBorderDisabled()
    {
        return $this->container['formsBorderDisabled'];
    }

    /**
     * Sets formsBorderDisabled
     *
     * @param string|null $formsBorderDisabled formsBorderDisabled
     *
     * @return self
     */
    public function setFormsBorderDisabled($formsBorderDisabled)
    {
        if (is_null($formsBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable formsBorderDisabled cannot be null');
        }
        $this->container['formsBorderDisabled'] = $formsBorderDisabled;

        return $this;
    }

    /**
     * Gets formsBorderError
     *
     * @return string|null
     */
    public function getFormsBorderError()
    {
        return $this->container['formsBorderError'];
    }

    /**
     * Sets formsBorderError
     *
     * @param string|null $formsBorderError formsBorderError
     *
     * @return self
     */
    public function setFormsBorderError($formsBorderError)
    {
        if (is_null($formsBorderError)) {
            throw new \InvalidArgumentException('non-nullable formsBorderError cannot be null');
        }
        $this->container['formsBorderError'] = $formsBorderError;

        return $this;
    }

    /**
     * Gets formsBorderFocus
     *
     * @return string|null
     */
    public function getFormsBorderFocus()
    {
        return $this->container['formsBorderFocus'];
    }

    /**
     * Sets formsBorderFocus
     *
     * @param string|null $formsBorderFocus formsBorderFocus
     *
     * @return self
     */
    public function setFormsBorderFocus($formsBorderFocus)
    {
        if (is_null($formsBorderFocus)) {
            throw new \InvalidArgumentException('non-nullable formsBorderFocus cannot be null');
        }
        $this->container['formsBorderFocus'] = $formsBorderFocus;

        return $this;
    }

    /**
     * Gets formsBorderHover
     *
     * @return string|null
     */
    public function getFormsBorderHover()
    {
        return $this->container['formsBorderHover'];
    }

    /**
     * Sets formsBorderHover
     *
     * @param string|null $formsBorderHover formsBorderHover
     *
     * @return self
     */
    public function setFormsBorderHover($formsBorderHover)
    {
        if (is_null($formsBorderHover)) {
            throw new \InvalidArgumentException('non-nullable formsBorderHover cannot be null');
        }
        $this->container['formsBorderHover'] = $formsBorderHover;

        return $this;
    }

    /**
     * Gets formsBorderSuccess
     *
     * @return string|null
     */
    public function getFormsBorderSuccess()
    {
        return $this->container['formsBorderSuccess'];
    }

    /**
     * Sets formsBorderSuccess
     *
     * @param string|null $formsBorderSuccess formsBorderSuccess
     *
     * @return self
     */
    public function setFormsBorderSuccess($formsBorderSuccess)
    {
        if (is_null($formsBorderSuccess)) {
            throw new \InvalidArgumentException('non-nullable formsBorderSuccess cannot be null');
        }
        $this->container['formsBorderSuccess'] = $formsBorderSuccess;

        return $this;
    }

    /**
     * Gets formsBorderWarn
     *
     * @return string|null
     */
    public function getFormsBorderWarn()
    {
        return $this->container['formsBorderWarn'];
    }

    /**
     * Sets formsBorderWarn
     *
     * @param string|null $formsBorderWarn formsBorderWarn
     *
     * @return self
     */
    public function setFormsBorderWarn($formsBorderWarn)
    {
        if (is_null($formsBorderWarn)) {
            throw new \InvalidArgumentException('non-nullable formsBorderWarn cannot be null');
        }
        $this->container['formsBorderWarn'] = $formsBorderWarn;

        return $this;
    }

    /**
     * Gets formsCheckboxBgChecked
     *
     * @return string|null
     */
    public function getFormsCheckboxBgChecked()
    {
        return $this->container['formsCheckboxBgChecked'];
    }

    /**
     * Sets formsCheckboxBgChecked
     *
     * @param string|null $formsCheckboxBgChecked formsCheckboxBgChecked
     *
     * @return self
     */
    public function setFormsCheckboxBgChecked($formsCheckboxBgChecked)
    {
        if (is_null($formsCheckboxBgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxBgChecked cannot be null');
        }
        $this->container['formsCheckboxBgChecked'] = $formsCheckboxBgChecked;

        return $this;
    }

    /**
     * Gets formsCheckboxBgDefault
     *
     * @return string|null
     */
    public function getFormsCheckboxBgDefault()
    {
        return $this->container['formsCheckboxBgDefault'];
    }

    /**
     * Sets formsCheckboxBgDefault
     *
     * @param string|null $formsCheckboxBgDefault formsCheckboxBgDefault
     *
     * @return self
     */
    public function setFormsCheckboxBgDefault($formsCheckboxBgDefault)
    {
        if (is_null($formsCheckboxBgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxBgDefault cannot be null');
        }
        $this->container['formsCheckboxBgDefault'] = $formsCheckboxBgDefault;

        return $this;
    }

    /**
     * Gets formsCheckboxBorderChecked
     *
     * @return string|null
     */
    public function getFormsCheckboxBorderChecked()
    {
        return $this->container['formsCheckboxBorderChecked'];
    }

    /**
     * Sets formsCheckboxBorderChecked
     *
     * @param string|null $formsCheckboxBorderChecked formsCheckboxBorderChecked
     *
     * @return self
     */
    public function setFormsCheckboxBorderChecked($formsCheckboxBorderChecked)
    {
        if (is_null($formsCheckboxBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxBorderChecked cannot be null');
        }
        $this->container['formsCheckboxBorderChecked'] = $formsCheckboxBorderChecked;

        return $this;
    }

    /**
     * Gets formsCheckboxBorderDefault
     *
     * @return string|null
     */
    public function getFormsCheckboxBorderDefault()
    {
        return $this->container['formsCheckboxBorderDefault'];
    }

    /**
     * Sets formsCheckboxBorderDefault
     *
     * @param string|null $formsCheckboxBorderDefault formsCheckboxBorderDefault
     *
     * @return self
     */
    public function setFormsCheckboxBorderDefault($formsCheckboxBorderDefault)
    {
        if (is_null($formsCheckboxBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxBorderDefault cannot be null');
        }
        $this->container['formsCheckboxBorderDefault'] = $formsCheckboxBorderDefault;

        return $this;
    }

    /**
     * Gets formsCheckboxFgChecked
     *
     * @return string|null
     */
    public function getFormsCheckboxFgChecked()
    {
        return $this->container['formsCheckboxFgChecked'];
    }

    /**
     * Sets formsCheckboxFgChecked
     *
     * @param string|null $formsCheckboxFgChecked formsCheckboxFgChecked
     *
     * @return self
     */
    public function setFormsCheckboxFgChecked($formsCheckboxFgChecked)
    {
        if (is_null($formsCheckboxFgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxFgChecked cannot be null');
        }
        $this->container['formsCheckboxFgChecked'] = $formsCheckboxFgChecked;

        return $this;
    }

    /**
     * Gets formsCheckboxFgDefault
     *
     * @return string|null
     */
    public function getFormsCheckboxFgDefault()
    {
        return $this->container['formsCheckboxFgDefault'];
    }

    /**
     * Sets formsCheckboxFgDefault
     *
     * @param string|null $formsCheckboxFgDefault formsCheckboxFgDefault
     *
     * @return self
     */
    public function setFormsCheckboxFgDefault($formsCheckboxFgDefault)
    {
        if (is_null($formsCheckboxFgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsCheckboxFgDefault cannot be null');
        }
        $this->container['formsCheckboxFgDefault'] = $formsCheckboxFgDefault;

        return $this;
    }

    /**
     * Gets formsFgDefault
     *
     * @return string|null
     */
    public function getFormsFgDefault()
    {
        return $this->container['formsFgDefault'];
    }

    /**
     * Sets formsFgDefault
     *
     * @param string|null $formsFgDefault formsFgDefault
     *
     * @return self
     */
    public function setFormsFgDefault($formsFgDefault)
    {
        if (is_null($formsFgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsFgDefault cannot be null');
        }
        $this->container['formsFgDefault'] = $formsFgDefault;

        return $this;
    }

    /**
     * Gets formsFgError
     *
     * @return string|null
     */
    public function getFormsFgError()
    {
        return $this->container['formsFgError'];
    }

    /**
     * Sets formsFgError
     *
     * @param string|null $formsFgError formsFgError
     *
     * @return self
     */
    public function setFormsFgError($formsFgError)
    {
        if (is_null($formsFgError)) {
            throw new \InvalidArgumentException('non-nullable formsFgError cannot be null');
        }
        $this->container['formsFgError'] = $formsFgError;

        return $this;
    }

    /**
     * Gets formsFgMute
     *
     * @return string|null
     */
    public function getFormsFgMute()
    {
        return $this->container['formsFgMute'];
    }

    /**
     * Sets formsFgMute
     *
     * @param string|null $formsFgMute formsFgMute
     *
     * @return self
     */
    public function setFormsFgMute($formsFgMute)
    {
        if (is_null($formsFgMute)) {
            throw new \InvalidArgumentException('non-nullable formsFgMute cannot be null');
        }
        $this->container['formsFgMute'] = $formsFgMute;

        return $this;
    }

    /**
     * Gets formsFgSubtle
     *
     * @return string|null
     */
    public function getFormsFgSubtle()
    {
        return $this->container['formsFgSubtle'];
    }

    /**
     * Sets formsFgSubtle
     *
     * @param string|null $formsFgSubtle formsFgSubtle
     *
     * @return self
     */
    public function setFormsFgSubtle($formsFgSubtle)
    {
        if (is_null($formsFgSubtle)) {
            throw new \InvalidArgumentException('non-nullable formsFgSubtle cannot be null');
        }
        $this->container['formsFgSubtle'] = $formsFgSubtle;

        return $this;
    }

    /**
     * Gets formsFgSuccess
     *
     * @return string|null
     */
    public function getFormsFgSuccess()
    {
        return $this->container['formsFgSuccess'];
    }

    /**
     * Sets formsFgSuccess
     *
     * @param string|null $formsFgSuccess formsFgSuccess
     *
     * @return self
     */
    public function setFormsFgSuccess($formsFgSuccess)
    {
        if (is_null($formsFgSuccess)) {
            throw new \InvalidArgumentException('non-nullable formsFgSuccess cannot be null');
        }
        $this->container['formsFgSuccess'] = $formsFgSuccess;

        return $this;
    }

    /**
     * Gets formsFgWarn
     *
     * @return string|null
     */
    public function getFormsFgWarn()
    {
        return $this->container['formsFgWarn'];
    }

    /**
     * Sets formsFgWarn
     *
     * @param string|null $formsFgWarn formsFgWarn
     *
     * @return self
     */
    public function setFormsFgWarn($formsFgWarn)
    {
        if (is_null($formsFgWarn)) {
            throw new \InvalidArgumentException('non-nullable formsFgWarn cannot be null');
        }
        $this->container['formsFgWarn'] = $formsFgWarn;

        return $this;
    }

    /**
     * Gets formsRadioBgChecked
     *
     * @return string|null
     */
    public function getFormsRadioBgChecked()
    {
        return $this->container['formsRadioBgChecked'];
    }

    /**
     * Sets formsRadioBgChecked
     *
     * @param string|null $formsRadioBgChecked formsRadioBgChecked
     *
     * @return self
     */
    public function setFormsRadioBgChecked($formsRadioBgChecked)
    {
        if (is_null($formsRadioBgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsRadioBgChecked cannot be null');
        }
        $this->container['formsRadioBgChecked'] = $formsRadioBgChecked;

        return $this;
    }

    /**
     * Gets formsRadioBgDefault
     *
     * @return string|null
     */
    public function getFormsRadioBgDefault()
    {
        return $this->container['formsRadioBgDefault'];
    }

    /**
     * Sets formsRadioBgDefault
     *
     * @param string|null $formsRadioBgDefault formsRadioBgDefault
     *
     * @return self
     */
    public function setFormsRadioBgDefault($formsRadioBgDefault)
    {
        if (is_null($formsRadioBgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsRadioBgDefault cannot be null');
        }
        $this->container['formsRadioBgDefault'] = $formsRadioBgDefault;

        return $this;
    }

    /**
     * Gets formsRadioBorderChecked
     *
     * @return string|null
     */
    public function getFormsRadioBorderChecked()
    {
        return $this->container['formsRadioBorderChecked'];
    }

    /**
     * Sets formsRadioBorderChecked
     *
     * @param string|null $formsRadioBorderChecked formsRadioBorderChecked
     *
     * @return self
     */
    public function setFormsRadioBorderChecked($formsRadioBorderChecked)
    {
        if (is_null($formsRadioBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable formsRadioBorderChecked cannot be null');
        }
        $this->container['formsRadioBorderChecked'] = $formsRadioBorderChecked;

        return $this;
    }

    /**
     * Gets formsRadioBorderDefault
     *
     * @return string|null
     */
    public function getFormsRadioBorderDefault()
    {
        return $this->container['formsRadioBorderDefault'];
    }

    /**
     * Sets formsRadioBorderDefault
     *
     * @param string|null $formsRadioBorderDefault formsRadioBorderDefault
     *
     * @return self
     */
    public function setFormsRadioBorderDefault($formsRadioBorderDefault)
    {
        if (is_null($formsRadioBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable formsRadioBorderDefault cannot be null');
        }
        $this->container['formsRadioBorderDefault'] = $formsRadioBorderDefault;

        return $this;
    }

    /**
     * Gets formsRadioFgChecked
     *
     * @return string|null
     */
    public function getFormsRadioFgChecked()
    {
        return $this->container['formsRadioFgChecked'];
    }

    /**
     * Sets formsRadioFgChecked
     *
     * @param string|null $formsRadioFgChecked formsRadioFgChecked
     *
     * @return self
     */
    public function setFormsRadioFgChecked($formsRadioFgChecked)
    {
        if (is_null($formsRadioFgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsRadioFgChecked cannot be null');
        }
        $this->container['formsRadioFgChecked'] = $formsRadioFgChecked;

        return $this;
    }

    /**
     * Gets formsRadioFgDefault
     *
     * @return string|null
     */
    public function getFormsRadioFgDefault()
    {
        return $this->container['formsRadioFgDefault'];
    }

    /**
     * Sets formsRadioFgDefault
     *
     * @param string|null $formsRadioFgDefault formsRadioFgDefault
     *
     * @return self
     */
    public function setFormsRadioFgDefault($formsRadioFgDefault)
    {
        if (is_null($formsRadioFgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsRadioFgDefault cannot be null');
        }
        $this->container['formsRadioFgDefault'] = $formsRadioFgDefault;

        return $this;
    }

    /**
     * Gets formsToggleBgChecked
     *
     * @return string|null
     */
    public function getFormsToggleBgChecked()
    {
        return $this->container['formsToggleBgChecked'];
    }

    /**
     * Sets formsToggleBgChecked
     *
     * @param string|null $formsToggleBgChecked formsToggleBgChecked
     *
     * @return self
     */
    public function setFormsToggleBgChecked($formsToggleBgChecked)
    {
        if (is_null($formsToggleBgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsToggleBgChecked cannot be null');
        }
        $this->container['formsToggleBgChecked'] = $formsToggleBgChecked;

        return $this;
    }

    /**
     * Gets formsToggleBgDefault
     *
     * @return string|null
     */
    public function getFormsToggleBgDefault()
    {
        return $this->container['formsToggleBgDefault'];
    }

    /**
     * Sets formsToggleBgDefault
     *
     * @param string|null $formsToggleBgDefault formsToggleBgDefault
     *
     * @return self
     */
    public function setFormsToggleBgDefault($formsToggleBgDefault)
    {
        if (is_null($formsToggleBgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsToggleBgDefault cannot be null');
        }
        $this->container['formsToggleBgDefault'] = $formsToggleBgDefault;

        return $this;
    }

    /**
     * Gets formsToggleBorderChecked
     *
     * @return string|null
     */
    public function getFormsToggleBorderChecked()
    {
        return $this->container['formsToggleBorderChecked'];
    }

    /**
     * Sets formsToggleBorderChecked
     *
     * @param string|null $formsToggleBorderChecked formsToggleBorderChecked
     *
     * @return self
     */
    public function setFormsToggleBorderChecked($formsToggleBorderChecked)
    {
        if (is_null($formsToggleBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable formsToggleBorderChecked cannot be null');
        }
        $this->container['formsToggleBorderChecked'] = $formsToggleBorderChecked;

        return $this;
    }

    /**
     * Gets formsToggleBorderDefault
     *
     * @return string|null
     */
    public function getFormsToggleBorderDefault()
    {
        return $this->container['formsToggleBorderDefault'];
    }

    /**
     * Sets formsToggleBorderDefault
     *
     * @param string|null $formsToggleBorderDefault formsToggleBorderDefault
     *
     * @return self
     */
    public function setFormsToggleBorderDefault($formsToggleBorderDefault)
    {
        if (is_null($formsToggleBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable formsToggleBorderDefault cannot be null');
        }
        $this->container['formsToggleBorderDefault'] = $formsToggleBorderDefault;

        return $this;
    }

    /**
     * Gets formsToggleFgChecked
     *
     * @return string|null
     */
    public function getFormsToggleFgChecked()
    {
        return $this->container['formsToggleFgChecked'];
    }

    /**
     * Sets formsToggleFgChecked
     *
     * @param string|null $formsToggleFgChecked formsToggleFgChecked
     *
     * @return self
     */
    public function setFormsToggleFgChecked($formsToggleFgChecked)
    {
        if (is_null($formsToggleFgChecked)) {
            throw new \InvalidArgumentException('non-nullable formsToggleFgChecked cannot be null');
        }
        $this->container['formsToggleFgChecked'] = $formsToggleFgChecked;

        return $this;
    }

    /**
     * Gets formsToggleFgDefault
     *
     * @return string|null
     */
    public function getFormsToggleFgDefault()
    {
        return $this->container['formsToggleFgDefault'];
    }

    /**
     * Sets formsToggleFgDefault
     *
     * @param string|null $formsToggleFgDefault formsToggleFgDefault
     *
     * @return self
     */
    public function setFormsToggleFgDefault($formsToggleFgDefault)
    {
        if (is_null($formsToggleFgDefault)) {
            throw new \InvalidArgumentException('non-nullable formsToggleFgDefault cannot be null');
        }
        $this->container['formsToggleFgDefault'] = $formsToggleFgDefault;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linksLinkDefault
     *
     * @return string|null
     */
    public function getLinksLinkDefault()
    {
        return $this->container['linksLinkDefault'];
    }

    /**
     * Sets linksLinkDefault
     *
     * @param string|null $linksLinkDefault linksLinkDefault
     *
     * @return self
     */
    public function setLinksLinkDefault($linksLinkDefault)
    {
        if (is_null($linksLinkDefault)) {
            throw new \InvalidArgumentException('non-nullable linksLinkDefault cannot be null');
        }
        $this->container['linksLinkDefault'] = $linksLinkDefault;

        return $this;
    }

    /**
     * Gets linksLinkDisabled
     *
     * @return string|null
     */
    public function getLinksLinkDisabled()
    {
        return $this->container['linksLinkDisabled'];
    }

    /**
     * Sets linksLinkDisabled
     *
     * @param string|null $linksLinkDisabled linksLinkDisabled
     *
     * @return self
     */
    public function setLinksLinkDisabled($linksLinkDisabled)
    {
        if (is_null($linksLinkDisabled)) {
            throw new \InvalidArgumentException('non-nullable linksLinkDisabled cannot be null');
        }
        $this->container['linksLinkDisabled'] = $linksLinkDisabled;

        return $this;
    }

    /**
     * Gets linksLinkHover
     *
     * @return string|null
     */
    public function getLinksLinkHover()
    {
        return $this->container['linksLinkHover'];
    }

    /**
     * Sets linksLinkHover
     *
     * @param string|null $linksLinkHover linksLinkHover
     *
     * @return self
     */
    public function setLinksLinkHover($linksLinkHover)
    {
        if (is_null($linksLinkHover)) {
            throw new \InvalidArgumentException('non-nullable linksLinkHover cannot be null');
        }
        $this->container['linksLinkHover'] = $linksLinkHover;

        return $this;
    }

    /**
     * Gets linksLinkInvertedDefault
     *
     * @return string|null
     */
    public function getLinksLinkInvertedDefault()
    {
        return $this->container['linksLinkInvertedDefault'];
    }

    /**
     * Sets linksLinkInvertedDefault
     *
     * @param string|null $linksLinkInvertedDefault linksLinkInvertedDefault
     *
     * @return self
     */
    public function setLinksLinkInvertedDefault($linksLinkInvertedDefault)
    {
        if (is_null($linksLinkInvertedDefault)) {
            throw new \InvalidArgumentException('non-nullable linksLinkInvertedDefault cannot be null');
        }
        $this->container['linksLinkInvertedDefault'] = $linksLinkInvertedDefault;

        return $this;
    }

    /**
     * Gets linksLinkInvertedHover
     *
     * @return string|null
     */
    public function getLinksLinkInvertedHover()
    {
        return $this->container['linksLinkInvertedHover'];
    }

    /**
     * Sets linksLinkInvertedHover
     *
     * @param string|null $linksLinkInvertedHover linksLinkInvertedHover
     *
     * @return self
     */
    public function setLinksLinkInvertedHover($linksLinkInvertedHover)
    {
        if (is_null($linksLinkInvertedHover)) {
            throw new \InvalidArgumentException('non-nullable linksLinkInvertedHover cannot be null');
        }
        $this->container['linksLinkInvertedHover'] = $linksLinkInvertedHover;

        return $this;
    }

    /**
     * Gets linksLinkMuteDefault
     *
     * @return string|null
     */
    public function getLinksLinkMuteDefault()
    {
        return $this->container['linksLinkMuteDefault'];
    }

    /**
     * Sets linksLinkMuteDefault
     *
     * @param string|null $linksLinkMuteDefault linksLinkMuteDefault
     *
     * @return self
     */
    public function setLinksLinkMuteDefault($linksLinkMuteDefault)
    {
        if (is_null($linksLinkMuteDefault)) {
            throw new \InvalidArgumentException('non-nullable linksLinkMuteDefault cannot be null');
        }
        $this->container['linksLinkMuteDefault'] = $linksLinkMuteDefault;

        return $this;
    }

    /**
     * Gets linksLinkMuteHover
     *
     * @return string|null
     */
    public function getLinksLinkMuteHover()
    {
        return $this->container['linksLinkMuteHover'];
    }

    /**
     * Sets linksLinkMuteHover
     *
     * @param string|null $linksLinkMuteHover linksLinkMuteHover
     *
     * @return self
     */
    public function setLinksLinkMuteHover($linksLinkMuteHover)
    {
        if (is_null($linksLinkMuteHover)) {
            throw new \InvalidArgumentException('non-nullable linksLinkMuteHover cannot be null');
        }
        $this->container['linksLinkMuteHover'] = $linksLinkMuteHover;

        return $this;
    }

    /**
     * Gets syntaxSyntax
     *
     * @return string|null
     */
    public function getSyntaxSyntax()
    {
        return $this->container['syntaxSyntax'];
    }

    /**
     * Sets syntaxSyntax
     *
     * @param string|null $syntaxSyntax syntaxSyntax
     *
     * @return self
     */
    public function setSyntaxSyntax($syntaxSyntax)
    {
        if (is_null($syntaxSyntax)) {
            throw new \InvalidArgumentException('non-nullable syntaxSyntax cannot be null');
        }
        $this->container['syntaxSyntax'] = $syntaxSyntax;

        return $this;
    }

    /**
     * Gets syntaxSyntaxKey
     *
     * @return string|null
     */
    public function getSyntaxSyntaxKey()
    {
        return $this->container['syntaxSyntaxKey'];
    }

    /**
     * Sets syntaxSyntaxKey
     *
     * @param string|null $syntaxSyntaxKey syntaxSyntaxKey
     *
     * @return self
     */
    public function setSyntaxSyntaxKey($syntaxSyntaxKey)
    {
        if (is_null($syntaxSyntaxKey)) {
            throw new \InvalidArgumentException('non-nullable syntaxSyntaxKey cannot be null');
        }
        $this->container['syntaxSyntaxKey'] = $syntaxSyntaxKey;

        return $this;
    }

    /**
     * Gets syntaxSyntaxNum
     *
     * @return string|null
     */
    public function getSyntaxSyntaxNum()
    {
        return $this->container['syntaxSyntaxNum'];
    }

    /**
     * Sets syntaxSyntaxNum
     *
     * @param string|null $syntaxSyntaxNum syntaxSyntaxNum
     *
     * @return self
     */
    public function setSyntaxSyntaxNum($syntaxSyntaxNum)
    {
        if (is_null($syntaxSyntaxNum)) {
            throw new \InvalidArgumentException('non-nullable syntaxSyntaxNum cannot be null');
        }
        $this->container['syntaxSyntaxNum'] = $syntaxSyntaxNum;

        return $this;
    }

    /**
     * Gets syntaxSyntaxValue
     *
     * @return string|null
     */
    public function getSyntaxSyntaxValue()
    {
        return $this->container['syntaxSyntaxValue'];
    }

    /**
     * Sets syntaxSyntaxValue
     *
     * @param string|null $syntaxSyntaxValue syntaxSyntaxValue
     *
     * @return self
     */
    public function setSyntaxSyntaxValue($syntaxSyntaxValue)
    {
        if (is_null($syntaxSyntaxValue)) {
            throw new \InvalidArgumentException('non-nullable syntaxSyntaxValue cannot be null');
        }
        $this->container['syntaxSyntaxValue'] = $syntaxSyntaxValue;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


