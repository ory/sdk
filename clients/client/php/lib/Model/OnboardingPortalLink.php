<?php
/**
 * OnboardingPortalLink
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory APIs
 *
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       |
 *
 * The version of the OpenAPI document: v1.22.7
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Client\Model;

use \ArrayAccess;
use \Ory\Client\ObjectSerializer;

/**
 * OnboardingPortalLink Class Doc Comment
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OnboardingPortalLink implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'onboardingPortalLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createdAt' => '\DateTime',
        'customHostnameId' => 'string',
        'enableScim' => 'bool',
        'enableSso' => 'bool',
        'expiresAt' => '\DateTime',
        'id' => 'string',
        'organizationId' => 'string',
        'projectId' => 'string',
        'proxyAcsUrl' => 'string',
        'proxyOidcRedirectUrl' => 'string',
        'proxySamlAudienceOverride' => 'string',
        'proxyScimServerUrl' => 'string',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'createdAt' => 'date-time',
        'customHostnameId' => 'uuid4',
        'enableScim' => null,
        'enableSso' => null,
        'expiresAt' => 'date-time',
        'id' => 'uuid',
        'organizationId' => 'uuid',
        'projectId' => 'uuid',
        'proxyAcsUrl' => null,
        'proxyOidcRedirectUrl' => null,
        'proxySamlAudienceOverride' => null,
        'proxyScimServerUrl' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'createdAt' => false,
        'customHostnameId' => true,
        'enableScim' => false,
        'enableSso' => false,
        'expiresAt' => false,
        'id' => false,
        'organizationId' => false,
        'projectId' => false,
        'proxyAcsUrl' => false,
        'proxyOidcRedirectUrl' => false,
        'proxySamlAudienceOverride' => false,
        'proxyScimServerUrl' => false,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdAt' => 'created_at',
        'customHostnameId' => 'custom_hostname_id',
        'enableScim' => 'enable_scim',
        'enableSso' => 'enable_sso',
        'expiresAt' => 'expires_at',
        'id' => 'id',
        'organizationId' => 'organization_id',
        'projectId' => 'project_id',
        'proxyAcsUrl' => 'proxy_acs_url',
        'proxyOidcRedirectUrl' => 'proxy_oidc_redirect_url',
        'proxySamlAudienceOverride' => 'proxy_saml_audience_override',
        'proxyScimServerUrl' => 'proxy_scim_server_url',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdAt' => 'setCreatedAt',
        'customHostnameId' => 'setCustomHostnameId',
        'enableScim' => 'setEnableScim',
        'enableSso' => 'setEnableSso',
        'expiresAt' => 'setExpiresAt',
        'id' => 'setId',
        'organizationId' => 'setOrganizationId',
        'projectId' => 'setProjectId',
        'proxyAcsUrl' => 'setProxyAcsUrl',
        'proxyOidcRedirectUrl' => 'setProxyOidcRedirectUrl',
        'proxySamlAudienceOverride' => 'setProxySamlAudienceOverride',
        'proxyScimServerUrl' => 'setProxyScimServerUrl',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdAt' => 'getCreatedAt',
        'customHostnameId' => 'getCustomHostnameId',
        'enableScim' => 'getEnableScim',
        'enableSso' => 'getEnableSso',
        'expiresAt' => 'getExpiresAt',
        'id' => 'getId',
        'organizationId' => 'getOrganizationId',
        'projectId' => 'getProjectId',
        'proxyAcsUrl' => 'getProxyAcsUrl',
        'proxyOidcRedirectUrl' => 'getProxyOidcRedirectUrl',
        'proxySamlAudienceOverride' => 'getProxySamlAudienceOverride',
        'proxyScimServerUrl' => 'getProxyScimServerUrl',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('customHostnameId', $data ?? [], null);
        $this->setIfExists('enableScim', $data ?? [], null);
        $this->setIfExists('enableSso', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('proxyAcsUrl', $data ?? [], null);
        $this->setIfExists('proxyOidcRedirectUrl', $data ?? [], null);
        $this->setIfExists('proxySamlAudienceOverride', $data ?? [], null);
        $this->setIfExists('proxyScimServerUrl', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['expiresAt'] === null) {
            $invalidProperties[] = "'expiresAt' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['organizationId'] === null) {
            $invalidProperties[] = "'organizationId' can't be null";
        }
        if ($this->container['projectId'] === null) {
            $invalidProperties[] = "'projectId' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The onboarding portal link's creation date
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets customHostnameId
     *
     * @return string|null
     */
    public function getCustomHostnameId()
    {
        return $this->container['customHostnameId'];
    }

    /**
     * Sets customHostnameId
     *
     * @param string|null $customHostnameId customHostnameId
     *
     * @return self
     */
    public function setCustomHostnameId($customHostnameId)
    {
        if (is_null($customHostnameId)) {
            array_push($this->openAPINullablesSetToNull, 'customHostnameId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customHostnameId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customHostnameId'] = $customHostnameId;

        return $this;
    }

    /**
     * Gets enableScim
     *
     * @return bool|null
     */
    public function getEnableScim()
    {
        return $this->container['enableScim'];
    }

    /**
     * Sets enableScim
     *
     * @param bool|null $enableScim Feature flag to enable SCIM configuration
     *
     * @return self
     */
    public function setEnableScim($enableScim)
    {
        if (is_null($enableScim)) {
            throw new \InvalidArgumentException('non-nullable enableScim cannot be null');
        }
        $this->container['enableScim'] = $enableScim;

        return $this;
    }

    /**
     * Gets enableSso
     *
     * @return bool|null
     */
    public function getEnableSso()
    {
        return $this->container['enableSso'];
    }

    /**
     * Sets enableSso
     *
     * @param bool|null $enableSso Feature flag to enable SSO configuration
     *
     * @return self
     */
    public function setEnableSso($enableSso)
    {
        if (is_null($enableSso)) {
            throw new \InvalidArgumentException('non-nullable enableSso cannot be null');
        }
        $this->container['enableSso'] = $enableSso;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime $expiresAt The onboarding portal link's expiry date
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        if (is_null($expiresAt)) {
            throw new \InvalidArgumentException('non-nullable expiresAt cannot be null');
        }
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The onboarding portal link's ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string $organizationId The onboarding portal link's organization ID
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            throw new \InvalidArgumentException('non-nullable organizationId cannot be null');
        }
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId The onboarding portal link's project ID
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            throw new \InvalidArgumentException('non-nullable projectId cannot be null');
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets proxyAcsUrl
     *
     * @return string|null
     */
    public function getProxyAcsUrl()
    {
        return $this->container['proxyAcsUrl'];
    }

    /**
     * Sets proxyAcsUrl
     *
     * @param string|null $proxyAcsUrl Proxy ACS URL if overriding with a customer-controlled URL
     *
     * @return self
     */
    public function setProxyAcsUrl($proxyAcsUrl)
    {
        if (is_null($proxyAcsUrl)) {
            throw new \InvalidArgumentException('non-nullable proxyAcsUrl cannot be null');
        }
        $this->container['proxyAcsUrl'] = $proxyAcsUrl;

        return $this;
    }

    /**
     * Gets proxyOidcRedirectUrl
     *
     * @return string|null
     */
    public function getProxyOidcRedirectUrl()
    {
        return $this->container['proxyOidcRedirectUrl'];
    }

    /**
     * Sets proxyOidcRedirectUrl
     *
     * @param string|null $proxyOidcRedirectUrl Proxy OIDC Redirect URL if overriding with a customer-controlled URL
     *
     * @return self
     */
    public function setProxyOidcRedirectUrl($proxyOidcRedirectUrl)
    {
        if (is_null($proxyOidcRedirectUrl)) {
            throw new \InvalidArgumentException('non-nullable proxyOidcRedirectUrl cannot be null');
        }
        $this->container['proxyOidcRedirectUrl'] = $proxyOidcRedirectUrl;

        return $this;
    }

    /**
     * Gets proxySamlAudienceOverride
     *
     * @return string|null
     */
    public function getProxySamlAudienceOverride()
    {
        return $this->container['proxySamlAudienceOverride'];
    }

    /**
     * Sets proxySamlAudienceOverride
     *
     * @param string|null $proxySamlAudienceOverride SAML Audience Override if overriding with a customer-controlled one
     *
     * @return self
     */
    public function setProxySamlAudienceOverride($proxySamlAudienceOverride)
    {
        if (is_null($proxySamlAudienceOverride)) {
            throw new \InvalidArgumentException('non-nullable proxySamlAudienceOverride cannot be null');
        }
        $this->container['proxySamlAudienceOverride'] = $proxySamlAudienceOverride;

        return $this;
    }

    /**
     * Gets proxyScimServerUrl
     *
     * @return string|null
     */
    public function getProxyScimServerUrl()
    {
        return $this->container['proxyScimServerUrl'];
    }

    /**
     * Sets proxyScimServerUrl
     *
     * @param string|null $proxyScimServerUrl Proxy SCIM Server URL if overriding with a customer-controlled URL
     *
     * @return self
     */
    public function setProxyScimServerUrl($proxyScimServerUrl)
    {
        if (is_null($proxyScimServerUrl)) {
            throw new \InvalidArgumentException('non-nullable proxyScimServerUrl cannot be null');
        }
        $this->container['proxyScimServerUrl'] = $proxyScimServerUrl;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value The onboarding portal link's value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


