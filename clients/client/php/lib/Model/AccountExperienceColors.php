<?php
/**
 * AccountExperienceColors
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory APIs
 *
 * # Introduction Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.  ## SDKs This document describes the APIs available in the Ory Network. The APIs are available as SDKs for the following languages:  | Language       | Download SDK                                                     | Documentation                                                                        | | -------------- | ---------------------------------------------------------------- | ------------------------------------------------------------------------------------ | | Dart           | [pub.dev](https://pub.dev/packages/ory_client)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/dart/README.md)       | | .NET           | [nuget.org](https://www.nuget.org/packages/Ory.Client/)          | [README](https://github.com/ory/sdk/blob/master/clients/client/dotnet/README.md)     | | Elixir         | [hex.pm](https://hex.pm/packages/ory_client)                     | [README](https://github.com/ory/sdk/blob/master/clients/client/elixir/README.md)     | | Go             | [github.com](https://github.com/ory/client-go)                   | [README](https://github.com/ory/sdk/blob/master/clients/client/go/README.md)         | | Java           | [maven.org](https://search.maven.org/artifact/sh.ory/ory-client) | [README](https://github.com/ory/sdk/blob/master/clients/client/java/README.md)       | | JavaScript     | [npmjs.com](https://www.npmjs.com/package/@ory/client)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript/README.md) | | JavaScript (With fetch) | [npmjs.com](https://www.npmjs.com/package/@ory/client-fetch)           | [README](https://github.com/ory/sdk/blob/master/clients/client/typescript-fetch/README.md) |  | PHP            | [packagist.org](https://packagist.org/packages/ory/client)       | [README](https://github.com/ory/sdk/blob/master/clients/client/php/README.md)        | | Python         | [pypi.org](https://pypi.org/project/ory-client/)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/python/README.md)     | | Ruby           | [rubygems.org](https://rubygems.org/gems/ory-client)             | [README](https://github.com/ory/sdk/blob/master/clients/client/ruby/README.md)       | | Rust           | [crates.io](https://crates.io/crates/ory-client)                 | [README](https://github.com/ory/sdk/blob/master/clients/client/rust/README.md)       |
 *
 * The version of the OpenAPI document: v1.21.5
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Client\Model;

use \ArrayAccess;
use \Ory\Client\ObjectSerializer;

/**
 * AccountExperienceColors Class Doc Comment
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountExperienceColors implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountExperienceColors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'axBackgroundDefault' => 'string',
        'brand100' => 'string',
        'brand200' => 'string',
        'brand300' => 'string',
        'brand400' => 'string',
        'brand50' => 'string',
        'brand500' => 'string',
        'brand600' => 'string',
        'brand700' => 'string',
        'brand800' => 'string',
        'brand900' => 'string',
        'brand950' => 'string',
        'buttonIdentifierBackgroundDefault' => 'string',
        'buttonIdentifierBackgroundHover' => 'string',
        'buttonIdentifierBorderBorderDefault' => 'string',
        'buttonIdentifierBorderBorderHover' => 'string',
        'buttonIdentifierForegroundDefault' => 'string',
        'buttonIdentifierForegroundHover' => 'string',
        'buttonLinkBrandBrand' => 'string',
        'buttonLinkBrandBrandHover' => 'string',
        'buttonLinkDefaultPrimary' => 'string',
        'buttonLinkDefaultPrimaryHover' => 'string',
        'buttonLinkDefaultSecondary' => 'string',
        'buttonLinkDefaultSecondaryHover' => 'string',
        'buttonLinkDisabledDisabled' => 'string',
        'buttonPrimaryBackgroundDefault' => 'string',
        'buttonPrimaryBackgroundDisabled' => 'string',
        'buttonPrimaryBackgroundHover' => 'string',
        'buttonPrimaryBorderDefault' => 'string',
        'buttonPrimaryBorderDisabled' => 'string',
        'buttonPrimaryBorderHover' => 'string',
        'buttonPrimaryForegroundDefault' => 'string',
        'buttonPrimaryForegroundDisabled' => 'string',
        'buttonPrimaryForegroundHover' => 'string',
        'buttonSecondaryBackgroundDefault' => 'string',
        'buttonSecondaryBackgroundDisabled' => 'string',
        'buttonSecondaryBackgroundHover' => 'string',
        'buttonSecondaryBorderDefault' => 'string',
        'buttonSecondaryBorderDisabled' => 'string',
        'buttonSecondaryBorderHover' => 'string',
        'buttonSecondaryForegroundDefault' => 'string',
        'buttonSecondaryForegroundDisabled' => 'string',
        'buttonSecondaryForegroundHover' => 'string',
        'buttonSocialBackgroundDefault' => 'string',
        'buttonSocialBackgroundDisabled' => 'string',
        'buttonSocialBackgroundGenericProvider' => 'string',
        'buttonSocialBackgroundHover' => 'string',
        'buttonSocialBorderDefault' => 'string',
        'buttonSocialBorderDisabled' => 'string',
        'buttonSocialBorderGenericProvider' => 'string',
        'buttonSocialBorderHover' => 'string',
        'buttonSocialForegroundDefault' => 'string',
        'buttonSocialForegroundDisabled' => 'string',
        'buttonSocialForegroundGenericProvider' => 'string',
        'buttonSocialForegroundHover' => 'string',
        'checkboxBackgroundChecked' => 'string',
        'checkboxBackgroundDefault' => 'string',
        'checkboxBorderCheckboxBorderChecked' => 'string',
        'checkboxBorderCheckboxBorderDefault' => 'string',
        'checkboxForegroundChecked' => 'string',
        'checkboxForegroundDefault' => 'string',
        'formBackgroundDefault' => 'string',
        'formBorderDefault' => 'string',
        'inputBackgroundDefault' => 'string',
        'inputBackgroundDisabled' => 'string',
        'inputBackgroundHover' => 'string',
        'inputBorderDefault' => 'string',
        'inputBorderDisabled' => 'string',
        'inputBorderFocus' => 'string',
        'inputBorderHover' => 'string',
        'inputForegroundDisabled' => 'string',
        'inputForegroundPrimary' => 'string',
        'inputForegroundSecondary' => 'string',
        'inputForegroundTertiary' => 'string',
        'interfaceBackgroundBrandPrimary' => 'string',
        'interfaceBackgroundBrandPrimaryHover' => 'string',
        'interfaceBackgroundBrandSecondary' => 'string',
        'interfaceBackgroundBrandSecondaryHover' => 'string',
        'interfaceBackgroundDefaultInverted' => 'string',
        'interfaceBackgroundDefaultInvertedHover' => 'string',
        'interfaceBackgroundDefaultNone' => 'string',
        'interfaceBackgroundDefaultPrimary' => 'string',
        'interfaceBackgroundDefaultPrimaryHover' => 'string',
        'interfaceBackgroundDefaultSecondary' => 'string',
        'interfaceBackgroundDefaultSecondaryHover' => 'string',
        'interfaceBackgroundDefaultTertiary' => 'string',
        'interfaceBackgroundDefaultTertiaryHover' => 'string',
        'interfaceBackgroundDisabledDisabled' => 'string',
        'interfaceBackgroundValidationDanger' => 'string',
        'interfaceBackgroundValidationSuccess' => 'string',
        'interfaceBackgroundValidationWarning' => 'string',
        'interfaceBorderBrandBrand' => 'string',
        'interfaceBorderDefaultInverted' => 'string',
        'interfaceBorderDefaultNone' => 'string',
        'interfaceBorderDefaultPrimary' => 'string',
        'interfaceBorderDisabledDisabled' => 'string',
        'interfaceBorderValidationDanger' => 'string',
        'interfaceBorderValidationSuccess' => 'string',
        'interfaceBorderValidationWarning' => 'string',
        'interfaceForegroundBrandOnPrimary' => 'string',
        'interfaceForegroundBrandOnSecondary' => 'string',
        'interfaceForegroundBrandPrimary' => 'string',
        'interfaceForegroundBrandSecondary' => 'string',
        'interfaceForegroundDefaultInverted' => 'string',
        'interfaceForegroundDefaultPrimary' => 'string',
        'interfaceForegroundDefaultSecondary' => 'string',
        'interfaceForegroundDefaultTertiary' => 'string',
        'interfaceForegroundDisabledDisabled' => 'string',
        'interfaceForegroundDisabledOnDisabled' => 'string',
        'interfaceForegroundValidationDanger' => 'string',
        'interfaceForegroundValidationSuccess' => 'string',
        'interfaceForegroundValidationWarning' => 'string',
        'oryBackgroundDefault' => 'string',
        'oryBorderDefault' => 'string',
        'oryForegroundDefault' => 'string',
        'radioBackgroundChecked' => 'string',
        'radioBackgroundDefault' => 'string',
        'radioBorderChecked' => 'string',
        'radioBorderDefault' => 'string',
        'radioForegroundChecked' => 'string',
        'radioForegroundDefault' => 'string',
        'toggleBackgroundChecked' => 'string',
        'toggleBackgroundDefault' => 'string',
        'toggleBorderChecked' => 'string',
        'toggleBorderDefault' => 'string',
        'toggleForegroundChecked' => 'string',
        'toggleForegroundDefault' => 'string',
        'ui100' => 'string',
        'ui200' => 'string',
        'ui300' => 'string',
        'ui400' => 'string',
        'ui50' => 'string',
        'ui500' => 'string',
        'ui600' => 'string',
        'ui700' => 'string',
        'ui800' => 'string',
        'ui900' => 'string',
        'ui950' => 'string',
        'uiBlack' => 'string',
        'uiDanger' => 'string',
        'uiSuccess' => 'string',
        'uiTransparent' => 'string',
        'uiWarning' => 'string',
        'uiWhite' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'axBackgroundDefault' => null,
        'brand100' => null,
        'brand200' => null,
        'brand300' => null,
        'brand400' => null,
        'brand50' => null,
        'brand500' => null,
        'brand600' => null,
        'brand700' => null,
        'brand800' => null,
        'brand900' => null,
        'brand950' => null,
        'buttonIdentifierBackgroundDefault' => null,
        'buttonIdentifierBackgroundHover' => null,
        'buttonIdentifierBorderBorderDefault' => null,
        'buttonIdentifierBorderBorderHover' => null,
        'buttonIdentifierForegroundDefault' => null,
        'buttonIdentifierForegroundHover' => null,
        'buttonLinkBrandBrand' => null,
        'buttonLinkBrandBrandHover' => null,
        'buttonLinkDefaultPrimary' => null,
        'buttonLinkDefaultPrimaryHover' => null,
        'buttonLinkDefaultSecondary' => null,
        'buttonLinkDefaultSecondaryHover' => null,
        'buttonLinkDisabledDisabled' => null,
        'buttonPrimaryBackgroundDefault' => null,
        'buttonPrimaryBackgroundDisabled' => null,
        'buttonPrimaryBackgroundHover' => null,
        'buttonPrimaryBorderDefault' => null,
        'buttonPrimaryBorderDisabled' => null,
        'buttonPrimaryBorderHover' => null,
        'buttonPrimaryForegroundDefault' => null,
        'buttonPrimaryForegroundDisabled' => null,
        'buttonPrimaryForegroundHover' => null,
        'buttonSecondaryBackgroundDefault' => null,
        'buttonSecondaryBackgroundDisabled' => null,
        'buttonSecondaryBackgroundHover' => null,
        'buttonSecondaryBorderDefault' => null,
        'buttonSecondaryBorderDisabled' => null,
        'buttonSecondaryBorderHover' => null,
        'buttonSecondaryForegroundDefault' => null,
        'buttonSecondaryForegroundDisabled' => null,
        'buttonSecondaryForegroundHover' => null,
        'buttonSocialBackgroundDefault' => null,
        'buttonSocialBackgroundDisabled' => null,
        'buttonSocialBackgroundGenericProvider' => null,
        'buttonSocialBackgroundHover' => null,
        'buttonSocialBorderDefault' => null,
        'buttonSocialBorderDisabled' => null,
        'buttonSocialBorderGenericProvider' => null,
        'buttonSocialBorderHover' => null,
        'buttonSocialForegroundDefault' => null,
        'buttonSocialForegroundDisabled' => null,
        'buttonSocialForegroundGenericProvider' => null,
        'buttonSocialForegroundHover' => null,
        'checkboxBackgroundChecked' => null,
        'checkboxBackgroundDefault' => null,
        'checkboxBorderCheckboxBorderChecked' => null,
        'checkboxBorderCheckboxBorderDefault' => null,
        'checkboxForegroundChecked' => null,
        'checkboxForegroundDefault' => null,
        'formBackgroundDefault' => null,
        'formBorderDefault' => null,
        'inputBackgroundDefault' => null,
        'inputBackgroundDisabled' => null,
        'inputBackgroundHover' => null,
        'inputBorderDefault' => null,
        'inputBorderDisabled' => null,
        'inputBorderFocus' => null,
        'inputBorderHover' => null,
        'inputForegroundDisabled' => null,
        'inputForegroundPrimary' => null,
        'inputForegroundSecondary' => null,
        'inputForegroundTertiary' => null,
        'interfaceBackgroundBrandPrimary' => null,
        'interfaceBackgroundBrandPrimaryHover' => null,
        'interfaceBackgroundBrandSecondary' => null,
        'interfaceBackgroundBrandSecondaryHover' => null,
        'interfaceBackgroundDefaultInverted' => null,
        'interfaceBackgroundDefaultInvertedHover' => null,
        'interfaceBackgroundDefaultNone' => null,
        'interfaceBackgroundDefaultPrimary' => null,
        'interfaceBackgroundDefaultPrimaryHover' => null,
        'interfaceBackgroundDefaultSecondary' => null,
        'interfaceBackgroundDefaultSecondaryHover' => null,
        'interfaceBackgroundDefaultTertiary' => null,
        'interfaceBackgroundDefaultTertiaryHover' => null,
        'interfaceBackgroundDisabledDisabled' => null,
        'interfaceBackgroundValidationDanger' => null,
        'interfaceBackgroundValidationSuccess' => null,
        'interfaceBackgroundValidationWarning' => null,
        'interfaceBorderBrandBrand' => null,
        'interfaceBorderDefaultInverted' => null,
        'interfaceBorderDefaultNone' => null,
        'interfaceBorderDefaultPrimary' => null,
        'interfaceBorderDisabledDisabled' => null,
        'interfaceBorderValidationDanger' => null,
        'interfaceBorderValidationSuccess' => null,
        'interfaceBorderValidationWarning' => null,
        'interfaceForegroundBrandOnPrimary' => null,
        'interfaceForegroundBrandOnSecondary' => null,
        'interfaceForegroundBrandPrimary' => null,
        'interfaceForegroundBrandSecondary' => null,
        'interfaceForegroundDefaultInverted' => null,
        'interfaceForegroundDefaultPrimary' => null,
        'interfaceForegroundDefaultSecondary' => null,
        'interfaceForegroundDefaultTertiary' => null,
        'interfaceForegroundDisabledDisabled' => null,
        'interfaceForegroundDisabledOnDisabled' => null,
        'interfaceForegroundValidationDanger' => null,
        'interfaceForegroundValidationSuccess' => null,
        'interfaceForegroundValidationWarning' => null,
        'oryBackgroundDefault' => null,
        'oryBorderDefault' => null,
        'oryForegroundDefault' => null,
        'radioBackgroundChecked' => null,
        'radioBackgroundDefault' => null,
        'radioBorderChecked' => null,
        'radioBorderDefault' => null,
        'radioForegroundChecked' => null,
        'radioForegroundDefault' => null,
        'toggleBackgroundChecked' => null,
        'toggleBackgroundDefault' => null,
        'toggleBorderChecked' => null,
        'toggleBorderDefault' => null,
        'toggleForegroundChecked' => null,
        'toggleForegroundDefault' => null,
        'ui100' => null,
        'ui200' => null,
        'ui300' => null,
        'ui400' => null,
        'ui50' => null,
        'ui500' => null,
        'ui600' => null,
        'ui700' => null,
        'ui800' => null,
        'ui900' => null,
        'ui950' => null,
        'uiBlack' => null,
        'uiDanger' => null,
        'uiSuccess' => null,
        'uiTransparent' => null,
        'uiWarning' => null,
        'uiWhite' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'axBackgroundDefault' => false,
        'brand100' => false,
        'brand200' => false,
        'brand300' => false,
        'brand400' => false,
        'brand50' => false,
        'brand500' => false,
        'brand600' => false,
        'brand700' => false,
        'brand800' => false,
        'brand900' => false,
        'brand950' => false,
        'buttonIdentifierBackgroundDefault' => false,
        'buttonIdentifierBackgroundHover' => false,
        'buttonIdentifierBorderBorderDefault' => false,
        'buttonIdentifierBorderBorderHover' => false,
        'buttonIdentifierForegroundDefault' => false,
        'buttonIdentifierForegroundHover' => false,
        'buttonLinkBrandBrand' => false,
        'buttonLinkBrandBrandHover' => false,
        'buttonLinkDefaultPrimary' => false,
        'buttonLinkDefaultPrimaryHover' => false,
        'buttonLinkDefaultSecondary' => false,
        'buttonLinkDefaultSecondaryHover' => false,
        'buttonLinkDisabledDisabled' => false,
        'buttonPrimaryBackgroundDefault' => false,
        'buttonPrimaryBackgroundDisabled' => false,
        'buttonPrimaryBackgroundHover' => false,
        'buttonPrimaryBorderDefault' => false,
        'buttonPrimaryBorderDisabled' => false,
        'buttonPrimaryBorderHover' => false,
        'buttonPrimaryForegroundDefault' => false,
        'buttonPrimaryForegroundDisabled' => false,
        'buttonPrimaryForegroundHover' => false,
        'buttonSecondaryBackgroundDefault' => false,
        'buttonSecondaryBackgroundDisabled' => false,
        'buttonSecondaryBackgroundHover' => false,
        'buttonSecondaryBorderDefault' => false,
        'buttonSecondaryBorderDisabled' => false,
        'buttonSecondaryBorderHover' => false,
        'buttonSecondaryForegroundDefault' => false,
        'buttonSecondaryForegroundDisabled' => false,
        'buttonSecondaryForegroundHover' => false,
        'buttonSocialBackgroundDefault' => false,
        'buttonSocialBackgroundDisabled' => false,
        'buttonSocialBackgroundGenericProvider' => false,
        'buttonSocialBackgroundHover' => false,
        'buttonSocialBorderDefault' => false,
        'buttonSocialBorderDisabled' => false,
        'buttonSocialBorderGenericProvider' => false,
        'buttonSocialBorderHover' => false,
        'buttonSocialForegroundDefault' => false,
        'buttonSocialForegroundDisabled' => false,
        'buttonSocialForegroundGenericProvider' => false,
        'buttonSocialForegroundHover' => false,
        'checkboxBackgroundChecked' => false,
        'checkboxBackgroundDefault' => false,
        'checkboxBorderCheckboxBorderChecked' => false,
        'checkboxBorderCheckboxBorderDefault' => false,
        'checkboxForegroundChecked' => false,
        'checkboxForegroundDefault' => false,
        'formBackgroundDefault' => false,
        'formBorderDefault' => false,
        'inputBackgroundDefault' => false,
        'inputBackgroundDisabled' => false,
        'inputBackgroundHover' => false,
        'inputBorderDefault' => false,
        'inputBorderDisabled' => false,
        'inputBorderFocus' => false,
        'inputBorderHover' => false,
        'inputForegroundDisabled' => false,
        'inputForegroundPrimary' => false,
        'inputForegroundSecondary' => false,
        'inputForegroundTertiary' => false,
        'interfaceBackgroundBrandPrimary' => false,
        'interfaceBackgroundBrandPrimaryHover' => false,
        'interfaceBackgroundBrandSecondary' => false,
        'interfaceBackgroundBrandSecondaryHover' => false,
        'interfaceBackgroundDefaultInverted' => false,
        'interfaceBackgroundDefaultInvertedHover' => false,
        'interfaceBackgroundDefaultNone' => false,
        'interfaceBackgroundDefaultPrimary' => false,
        'interfaceBackgroundDefaultPrimaryHover' => false,
        'interfaceBackgroundDefaultSecondary' => false,
        'interfaceBackgroundDefaultSecondaryHover' => false,
        'interfaceBackgroundDefaultTertiary' => false,
        'interfaceBackgroundDefaultTertiaryHover' => false,
        'interfaceBackgroundDisabledDisabled' => false,
        'interfaceBackgroundValidationDanger' => false,
        'interfaceBackgroundValidationSuccess' => false,
        'interfaceBackgroundValidationWarning' => false,
        'interfaceBorderBrandBrand' => false,
        'interfaceBorderDefaultInverted' => false,
        'interfaceBorderDefaultNone' => false,
        'interfaceBorderDefaultPrimary' => false,
        'interfaceBorderDisabledDisabled' => false,
        'interfaceBorderValidationDanger' => false,
        'interfaceBorderValidationSuccess' => false,
        'interfaceBorderValidationWarning' => false,
        'interfaceForegroundBrandOnPrimary' => false,
        'interfaceForegroundBrandOnSecondary' => false,
        'interfaceForegroundBrandPrimary' => false,
        'interfaceForegroundBrandSecondary' => false,
        'interfaceForegroundDefaultInverted' => false,
        'interfaceForegroundDefaultPrimary' => false,
        'interfaceForegroundDefaultSecondary' => false,
        'interfaceForegroundDefaultTertiary' => false,
        'interfaceForegroundDisabledDisabled' => false,
        'interfaceForegroundDisabledOnDisabled' => false,
        'interfaceForegroundValidationDanger' => false,
        'interfaceForegroundValidationSuccess' => false,
        'interfaceForegroundValidationWarning' => false,
        'oryBackgroundDefault' => false,
        'oryBorderDefault' => false,
        'oryForegroundDefault' => false,
        'radioBackgroundChecked' => false,
        'radioBackgroundDefault' => false,
        'radioBorderChecked' => false,
        'radioBorderDefault' => false,
        'radioForegroundChecked' => false,
        'radioForegroundDefault' => false,
        'toggleBackgroundChecked' => false,
        'toggleBackgroundDefault' => false,
        'toggleBorderChecked' => false,
        'toggleBorderDefault' => false,
        'toggleForegroundChecked' => false,
        'toggleForegroundDefault' => false,
        'ui100' => false,
        'ui200' => false,
        'ui300' => false,
        'ui400' => false,
        'ui50' => false,
        'ui500' => false,
        'ui600' => false,
        'ui700' => false,
        'ui800' => false,
        'ui900' => false,
        'ui950' => false,
        'uiBlack' => false,
        'uiDanger' => false,
        'uiSuccess' => false,
        'uiTransparent' => false,
        'uiWarning' => false,
        'uiWhite' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'axBackgroundDefault' => 'ax-background-default',
        'brand100' => 'brand-100',
        'brand200' => 'brand-200',
        'brand300' => 'brand-300',
        'brand400' => 'brand-400',
        'brand50' => 'brand-50',
        'brand500' => 'brand-500',
        'brand600' => 'brand-600',
        'brand700' => 'brand-700',
        'brand800' => 'brand-800',
        'brand900' => 'brand-900',
        'brand950' => 'brand-950',
        'buttonIdentifierBackgroundDefault' => 'button-identifier-background-default',
        'buttonIdentifierBackgroundHover' => 'button-identifier-background-hover',
        'buttonIdentifierBorderBorderDefault' => 'button-identifier-border-border-default',
        'buttonIdentifierBorderBorderHover' => 'button-identifier-border-border-hover',
        'buttonIdentifierForegroundDefault' => 'button-identifier-foreground-default',
        'buttonIdentifierForegroundHover' => 'button-identifier-foreground-hover',
        'buttonLinkBrandBrand' => 'button-link-brand-brand',
        'buttonLinkBrandBrandHover' => 'button-link-brand-brand-hover',
        'buttonLinkDefaultPrimary' => 'button-link-default-primary',
        'buttonLinkDefaultPrimaryHover' => 'button-link-default-primary-hover',
        'buttonLinkDefaultSecondary' => 'button-link-default-secondary',
        'buttonLinkDefaultSecondaryHover' => 'button-link-default-secondary-hover',
        'buttonLinkDisabledDisabled' => 'button-link-disabled-disabled',
        'buttonPrimaryBackgroundDefault' => 'button-primary-background-default',
        'buttonPrimaryBackgroundDisabled' => 'button-primary-background-disabled',
        'buttonPrimaryBackgroundHover' => 'button-primary-background-hover',
        'buttonPrimaryBorderDefault' => 'button-primary-border-default',
        'buttonPrimaryBorderDisabled' => 'button-primary-border-disabled',
        'buttonPrimaryBorderHover' => 'button-primary-border-hover',
        'buttonPrimaryForegroundDefault' => 'button-primary-foreground-default',
        'buttonPrimaryForegroundDisabled' => 'button-primary-foreground-disabled',
        'buttonPrimaryForegroundHover' => 'button-primary-foreground-hover',
        'buttonSecondaryBackgroundDefault' => 'button-secondary-background-default',
        'buttonSecondaryBackgroundDisabled' => 'button-secondary-background-disabled',
        'buttonSecondaryBackgroundHover' => 'button-secondary-background-hover',
        'buttonSecondaryBorderDefault' => 'button-secondary-border-default',
        'buttonSecondaryBorderDisabled' => 'button-secondary-border-disabled',
        'buttonSecondaryBorderHover' => 'button-secondary-border-hover',
        'buttonSecondaryForegroundDefault' => 'button-secondary-foreground-default',
        'buttonSecondaryForegroundDisabled' => 'button-secondary-foreground-disabled',
        'buttonSecondaryForegroundHover' => 'button-secondary-foreground-hover',
        'buttonSocialBackgroundDefault' => 'button-social-background-default',
        'buttonSocialBackgroundDisabled' => 'button-social-background-disabled',
        'buttonSocialBackgroundGenericProvider' => 'button-social-background-generic-provider',
        'buttonSocialBackgroundHover' => 'button-social-background-hover',
        'buttonSocialBorderDefault' => 'button-social-border-default',
        'buttonSocialBorderDisabled' => 'button-social-border-disabled',
        'buttonSocialBorderGenericProvider' => 'button-social-border-generic-provider',
        'buttonSocialBorderHover' => 'button-social-border-hover',
        'buttonSocialForegroundDefault' => 'button-social-foreground-default',
        'buttonSocialForegroundDisabled' => 'button-social-foreground-disabled',
        'buttonSocialForegroundGenericProvider' => 'button-social-foreground-generic-provider',
        'buttonSocialForegroundHover' => 'button-social-foreground-hover',
        'checkboxBackgroundChecked' => 'checkbox-background-checked',
        'checkboxBackgroundDefault' => 'checkbox-background-default',
        'checkboxBorderCheckboxBorderChecked' => 'checkbox-border-checkbox-border-checked',
        'checkboxBorderCheckboxBorderDefault' => 'checkbox-border-checkbox-border-default',
        'checkboxForegroundChecked' => 'checkbox-foreground-checked',
        'checkboxForegroundDefault' => 'checkbox-foreground-default',
        'formBackgroundDefault' => 'form-background-default',
        'formBorderDefault' => 'form-border-default',
        'inputBackgroundDefault' => 'input-background-default',
        'inputBackgroundDisabled' => 'input-background-disabled',
        'inputBackgroundHover' => 'input-background-hover',
        'inputBorderDefault' => 'input-border-default',
        'inputBorderDisabled' => 'input-border-disabled',
        'inputBorderFocus' => 'input-border-focus',
        'inputBorderHover' => 'input-border-hover',
        'inputForegroundDisabled' => 'input-foreground-disabled',
        'inputForegroundPrimary' => 'input-foreground-primary',
        'inputForegroundSecondary' => 'input-foreground-secondary',
        'inputForegroundTertiary' => 'input-foreground-tertiary',
        'interfaceBackgroundBrandPrimary' => 'interface-background-brand-primary',
        'interfaceBackgroundBrandPrimaryHover' => 'interface-background-brand-primary-hover',
        'interfaceBackgroundBrandSecondary' => 'interface-background-brand-secondary',
        'interfaceBackgroundBrandSecondaryHover' => 'interface-background-brand-secondary-hover',
        'interfaceBackgroundDefaultInverted' => 'interface-background-default-inverted',
        'interfaceBackgroundDefaultInvertedHover' => 'interface-background-default-inverted-hover',
        'interfaceBackgroundDefaultNone' => 'interface-background-default-none',
        'interfaceBackgroundDefaultPrimary' => 'interface-background-default-primary',
        'interfaceBackgroundDefaultPrimaryHover' => 'interface-background-default-primary-hover',
        'interfaceBackgroundDefaultSecondary' => 'interface-background-default-secondary',
        'interfaceBackgroundDefaultSecondaryHover' => 'interface-background-default-secondary-hover',
        'interfaceBackgroundDefaultTertiary' => 'interface-background-default-tertiary',
        'interfaceBackgroundDefaultTertiaryHover' => 'interface-background-default-tertiary-hover',
        'interfaceBackgroundDisabledDisabled' => 'interface-background-disabled-disabled',
        'interfaceBackgroundValidationDanger' => 'interface-background-validation-danger',
        'interfaceBackgroundValidationSuccess' => 'interface-background-validation-success',
        'interfaceBackgroundValidationWarning' => 'interface-background-validation-warning',
        'interfaceBorderBrandBrand' => 'interface-border-brand-brand',
        'interfaceBorderDefaultInverted' => 'interface-border-default-inverted',
        'interfaceBorderDefaultNone' => 'interface-border-default-none',
        'interfaceBorderDefaultPrimary' => 'interface-border-default-primary',
        'interfaceBorderDisabledDisabled' => 'interface-border-disabled-disabled',
        'interfaceBorderValidationDanger' => 'interface-border-validation-danger',
        'interfaceBorderValidationSuccess' => 'interface-border-validation-success',
        'interfaceBorderValidationWarning' => 'interface-border-validation-warning',
        'interfaceForegroundBrandOnPrimary' => 'interface-foreground-brand-on-primary',
        'interfaceForegroundBrandOnSecondary' => 'interface-foreground-brand-on-secondary',
        'interfaceForegroundBrandPrimary' => 'interface-foreground-brand-primary',
        'interfaceForegroundBrandSecondary' => 'interface-foreground-brand-secondary',
        'interfaceForegroundDefaultInverted' => 'interface-foreground-default-inverted',
        'interfaceForegroundDefaultPrimary' => 'interface-foreground-default-primary',
        'interfaceForegroundDefaultSecondary' => 'interface-foreground-default-secondary',
        'interfaceForegroundDefaultTertiary' => 'interface-foreground-default-tertiary',
        'interfaceForegroundDisabledDisabled' => 'interface-foreground-disabled-disabled',
        'interfaceForegroundDisabledOnDisabled' => 'interface-foreground-disabled-on-disabled',
        'interfaceForegroundValidationDanger' => 'interface-foreground-validation-danger',
        'interfaceForegroundValidationSuccess' => 'interface-foreground-validation-success',
        'interfaceForegroundValidationWarning' => 'interface-foreground-validation-warning',
        'oryBackgroundDefault' => 'ory-background-default',
        'oryBorderDefault' => 'ory-border-default',
        'oryForegroundDefault' => 'ory-foreground-default',
        'radioBackgroundChecked' => 'radio-background-checked',
        'radioBackgroundDefault' => 'radio-background-default',
        'radioBorderChecked' => 'radio-border-checked',
        'radioBorderDefault' => 'radio-border-default',
        'radioForegroundChecked' => 'radio-foreground-checked',
        'radioForegroundDefault' => 'radio-foreground-default',
        'toggleBackgroundChecked' => 'toggle-background-checked',
        'toggleBackgroundDefault' => 'toggle-background-default',
        'toggleBorderChecked' => 'toggle-border-checked',
        'toggleBorderDefault' => 'toggle-border-default',
        'toggleForegroundChecked' => 'toggle-foreground-checked',
        'toggleForegroundDefault' => 'toggle-foreground-default',
        'ui100' => 'ui-100',
        'ui200' => 'ui-200',
        'ui300' => 'ui-300',
        'ui400' => 'ui-400',
        'ui50' => 'ui-50',
        'ui500' => 'ui-500',
        'ui600' => 'ui-600',
        'ui700' => 'ui-700',
        'ui800' => 'ui-800',
        'ui900' => 'ui-900',
        'ui950' => 'ui-950',
        'uiBlack' => 'ui-black',
        'uiDanger' => 'ui-danger',
        'uiSuccess' => 'ui-success',
        'uiTransparent' => 'ui-transparent',
        'uiWarning' => 'ui-warning',
        'uiWhite' => 'ui-white'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'axBackgroundDefault' => 'setAxBackgroundDefault',
        'brand100' => 'setBrand100',
        'brand200' => 'setBrand200',
        'brand300' => 'setBrand300',
        'brand400' => 'setBrand400',
        'brand50' => 'setBrand50',
        'brand500' => 'setBrand500',
        'brand600' => 'setBrand600',
        'brand700' => 'setBrand700',
        'brand800' => 'setBrand800',
        'brand900' => 'setBrand900',
        'brand950' => 'setBrand950',
        'buttonIdentifierBackgroundDefault' => 'setButtonIdentifierBackgroundDefault',
        'buttonIdentifierBackgroundHover' => 'setButtonIdentifierBackgroundHover',
        'buttonIdentifierBorderBorderDefault' => 'setButtonIdentifierBorderBorderDefault',
        'buttonIdentifierBorderBorderHover' => 'setButtonIdentifierBorderBorderHover',
        'buttonIdentifierForegroundDefault' => 'setButtonIdentifierForegroundDefault',
        'buttonIdentifierForegroundHover' => 'setButtonIdentifierForegroundHover',
        'buttonLinkBrandBrand' => 'setButtonLinkBrandBrand',
        'buttonLinkBrandBrandHover' => 'setButtonLinkBrandBrandHover',
        'buttonLinkDefaultPrimary' => 'setButtonLinkDefaultPrimary',
        'buttonLinkDefaultPrimaryHover' => 'setButtonLinkDefaultPrimaryHover',
        'buttonLinkDefaultSecondary' => 'setButtonLinkDefaultSecondary',
        'buttonLinkDefaultSecondaryHover' => 'setButtonLinkDefaultSecondaryHover',
        'buttonLinkDisabledDisabled' => 'setButtonLinkDisabledDisabled',
        'buttonPrimaryBackgroundDefault' => 'setButtonPrimaryBackgroundDefault',
        'buttonPrimaryBackgroundDisabled' => 'setButtonPrimaryBackgroundDisabled',
        'buttonPrimaryBackgroundHover' => 'setButtonPrimaryBackgroundHover',
        'buttonPrimaryBorderDefault' => 'setButtonPrimaryBorderDefault',
        'buttonPrimaryBorderDisabled' => 'setButtonPrimaryBorderDisabled',
        'buttonPrimaryBorderHover' => 'setButtonPrimaryBorderHover',
        'buttonPrimaryForegroundDefault' => 'setButtonPrimaryForegroundDefault',
        'buttonPrimaryForegroundDisabled' => 'setButtonPrimaryForegroundDisabled',
        'buttonPrimaryForegroundHover' => 'setButtonPrimaryForegroundHover',
        'buttonSecondaryBackgroundDefault' => 'setButtonSecondaryBackgroundDefault',
        'buttonSecondaryBackgroundDisabled' => 'setButtonSecondaryBackgroundDisabled',
        'buttonSecondaryBackgroundHover' => 'setButtonSecondaryBackgroundHover',
        'buttonSecondaryBorderDefault' => 'setButtonSecondaryBorderDefault',
        'buttonSecondaryBorderDisabled' => 'setButtonSecondaryBorderDisabled',
        'buttonSecondaryBorderHover' => 'setButtonSecondaryBorderHover',
        'buttonSecondaryForegroundDefault' => 'setButtonSecondaryForegroundDefault',
        'buttonSecondaryForegroundDisabled' => 'setButtonSecondaryForegroundDisabled',
        'buttonSecondaryForegroundHover' => 'setButtonSecondaryForegroundHover',
        'buttonSocialBackgroundDefault' => 'setButtonSocialBackgroundDefault',
        'buttonSocialBackgroundDisabled' => 'setButtonSocialBackgroundDisabled',
        'buttonSocialBackgroundGenericProvider' => 'setButtonSocialBackgroundGenericProvider',
        'buttonSocialBackgroundHover' => 'setButtonSocialBackgroundHover',
        'buttonSocialBorderDefault' => 'setButtonSocialBorderDefault',
        'buttonSocialBorderDisabled' => 'setButtonSocialBorderDisabled',
        'buttonSocialBorderGenericProvider' => 'setButtonSocialBorderGenericProvider',
        'buttonSocialBorderHover' => 'setButtonSocialBorderHover',
        'buttonSocialForegroundDefault' => 'setButtonSocialForegroundDefault',
        'buttonSocialForegroundDisabled' => 'setButtonSocialForegroundDisabled',
        'buttonSocialForegroundGenericProvider' => 'setButtonSocialForegroundGenericProvider',
        'buttonSocialForegroundHover' => 'setButtonSocialForegroundHover',
        'checkboxBackgroundChecked' => 'setCheckboxBackgroundChecked',
        'checkboxBackgroundDefault' => 'setCheckboxBackgroundDefault',
        'checkboxBorderCheckboxBorderChecked' => 'setCheckboxBorderCheckboxBorderChecked',
        'checkboxBorderCheckboxBorderDefault' => 'setCheckboxBorderCheckboxBorderDefault',
        'checkboxForegroundChecked' => 'setCheckboxForegroundChecked',
        'checkboxForegroundDefault' => 'setCheckboxForegroundDefault',
        'formBackgroundDefault' => 'setFormBackgroundDefault',
        'formBorderDefault' => 'setFormBorderDefault',
        'inputBackgroundDefault' => 'setInputBackgroundDefault',
        'inputBackgroundDisabled' => 'setInputBackgroundDisabled',
        'inputBackgroundHover' => 'setInputBackgroundHover',
        'inputBorderDefault' => 'setInputBorderDefault',
        'inputBorderDisabled' => 'setInputBorderDisabled',
        'inputBorderFocus' => 'setInputBorderFocus',
        'inputBorderHover' => 'setInputBorderHover',
        'inputForegroundDisabled' => 'setInputForegroundDisabled',
        'inputForegroundPrimary' => 'setInputForegroundPrimary',
        'inputForegroundSecondary' => 'setInputForegroundSecondary',
        'inputForegroundTertiary' => 'setInputForegroundTertiary',
        'interfaceBackgroundBrandPrimary' => 'setInterfaceBackgroundBrandPrimary',
        'interfaceBackgroundBrandPrimaryHover' => 'setInterfaceBackgroundBrandPrimaryHover',
        'interfaceBackgroundBrandSecondary' => 'setInterfaceBackgroundBrandSecondary',
        'interfaceBackgroundBrandSecondaryHover' => 'setInterfaceBackgroundBrandSecondaryHover',
        'interfaceBackgroundDefaultInverted' => 'setInterfaceBackgroundDefaultInverted',
        'interfaceBackgroundDefaultInvertedHover' => 'setInterfaceBackgroundDefaultInvertedHover',
        'interfaceBackgroundDefaultNone' => 'setInterfaceBackgroundDefaultNone',
        'interfaceBackgroundDefaultPrimary' => 'setInterfaceBackgroundDefaultPrimary',
        'interfaceBackgroundDefaultPrimaryHover' => 'setInterfaceBackgroundDefaultPrimaryHover',
        'interfaceBackgroundDefaultSecondary' => 'setInterfaceBackgroundDefaultSecondary',
        'interfaceBackgroundDefaultSecondaryHover' => 'setInterfaceBackgroundDefaultSecondaryHover',
        'interfaceBackgroundDefaultTertiary' => 'setInterfaceBackgroundDefaultTertiary',
        'interfaceBackgroundDefaultTertiaryHover' => 'setInterfaceBackgroundDefaultTertiaryHover',
        'interfaceBackgroundDisabledDisabled' => 'setInterfaceBackgroundDisabledDisabled',
        'interfaceBackgroundValidationDanger' => 'setInterfaceBackgroundValidationDanger',
        'interfaceBackgroundValidationSuccess' => 'setInterfaceBackgroundValidationSuccess',
        'interfaceBackgroundValidationWarning' => 'setInterfaceBackgroundValidationWarning',
        'interfaceBorderBrandBrand' => 'setInterfaceBorderBrandBrand',
        'interfaceBorderDefaultInverted' => 'setInterfaceBorderDefaultInverted',
        'interfaceBorderDefaultNone' => 'setInterfaceBorderDefaultNone',
        'interfaceBorderDefaultPrimary' => 'setInterfaceBorderDefaultPrimary',
        'interfaceBorderDisabledDisabled' => 'setInterfaceBorderDisabledDisabled',
        'interfaceBorderValidationDanger' => 'setInterfaceBorderValidationDanger',
        'interfaceBorderValidationSuccess' => 'setInterfaceBorderValidationSuccess',
        'interfaceBorderValidationWarning' => 'setInterfaceBorderValidationWarning',
        'interfaceForegroundBrandOnPrimary' => 'setInterfaceForegroundBrandOnPrimary',
        'interfaceForegroundBrandOnSecondary' => 'setInterfaceForegroundBrandOnSecondary',
        'interfaceForegroundBrandPrimary' => 'setInterfaceForegroundBrandPrimary',
        'interfaceForegroundBrandSecondary' => 'setInterfaceForegroundBrandSecondary',
        'interfaceForegroundDefaultInverted' => 'setInterfaceForegroundDefaultInverted',
        'interfaceForegroundDefaultPrimary' => 'setInterfaceForegroundDefaultPrimary',
        'interfaceForegroundDefaultSecondary' => 'setInterfaceForegroundDefaultSecondary',
        'interfaceForegroundDefaultTertiary' => 'setInterfaceForegroundDefaultTertiary',
        'interfaceForegroundDisabledDisabled' => 'setInterfaceForegroundDisabledDisabled',
        'interfaceForegroundDisabledOnDisabled' => 'setInterfaceForegroundDisabledOnDisabled',
        'interfaceForegroundValidationDanger' => 'setInterfaceForegroundValidationDanger',
        'interfaceForegroundValidationSuccess' => 'setInterfaceForegroundValidationSuccess',
        'interfaceForegroundValidationWarning' => 'setInterfaceForegroundValidationWarning',
        'oryBackgroundDefault' => 'setOryBackgroundDefault',
        'oryBorderDefault' => 'setOryBorderDefault',
        'oryForegroundDefault' => 'setOryForegroundDefault',
        'radioBackgroundChecked' => 'setRadioBackgroundChecked',
        'radioBackgroundDefault' => 'setRadioBackgroundDefault',
        'radioBorderChecked' => 'setRadioBorderChecked',
        'radioBorderDefault' => 'setRadioBorderDefault',
        'radioForegroundChecked' => 'setRadioForegroundChecked',
        'radioForegroundDefault' => 'setRadioForegroundDefault',
        'toggleBackgroundChecked' => 'setToggleBackgroundChecked',
        'toggleBackgroundDefault' => 'setToggleBackgroundDefault',
        'toggleBorderChecked' => 'setToggleBorderChecked',
        'toggleBorderDefault' => 'setToggleBorderDefault',
        'toggleForegroundChecked' => 'setToggleForegroundChecked',
        'toggleForegroundDefault' => 'setToggleForegroundDefault',
        'ui100' => 'setUi100',
        'ui200' => 'setUi200',
        'ui300' => 'setUi300',
        'ui400' => 'setUi400',
        'ui50' => 'setUi50',
        'ui500' => 'setUi500',
        'ui600' => 'setUi600',
        'ui700' => 'setUi700',
        'ui800' => 'setUi800',
        'ui900' => 'setUi900',
        'ui950' => 'setUi950',
        'uiBlack' => 'setUiBlack',
        'uiDanger' => 'setUiDanger',
        'uiSuccess' => 'setUiSuccess',
        'uiTransparent' => 'setUiTransparent',
        'uiWarning' => 'setUiWarning',
        'uiWhite' => 'setUiWhite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'axBackgroundDefault' => 'getAxBackgroundDefault',
        'brand100' => 'getBrand100',
        'brand200' => 'getBrand200',
        'brand300' => 'getBrand300',
        'brand400' => 'getBrand400',
        'brand50' => 'getBrand50',
        'brand500' => 'getBrand500',
        'brand600' => 'getBrand600',
        'brand700' => 'getBrand700',
        'brand800' => 'getBrand800',
        'brand900' => 'getBrand900',
        'brand950' => 'getBrand950',
        'buttonIdentifierBackgroundDefault' => 'getButtonIdentifierBackgroundDefault',
        'buttonIdentifierBackgroundHover' => 'getButtonIdentifierBackgroundHover',
        'buttonIdentifierBorderBorderDefault' => 'getButtonIdentifierBorderBorderDefault',
        'buttonIdentifierBorderBorderHover' => 'getButtonIdentifierBorderBorderHover',
        'buttonIdentifierForegroundDefault' => 'getButtonIdentifierForegroundDefault',
        'buttonIdentifierForegroundHover' => 'getButtonIdentifierForegroundHover',
        'buttonLinkBrandBrand' => 'getButtonLinkBrandBrand',
        'buttonLinkBrandBrandHover' => 'getButtonLinkBrandBrandHover',
        'buttonLinkDefaultPrimary' => 'getButtonLinkDefaultPrimary',
        'buttonLinkDefaultPrimaryHover' => 'getButtonLinkDefaultPrimaryHover',
        'buttonLinkDefaultSecondary' => 'getButtonLinkDefaultSecondary',
        'buttonLinkDefaultSecondaryHover' => 'getButtonLinkDefaultSecondaryHover',
        'buttonLinkDisabledDisabled' => 'getButtonLinkDisabledDisabled',
        'buttonPrimaryBackgroundDefault' => 'getButtonPrimaryBackgroundDefault',
        'buttonPrimaryBackgroundDisabled' => 'getButtonPrimaryBackgroundDisabled',
        'buttonPrimaryBackgroundHover' => 'getButtonPrimaryBackgroundHover',
        'buttonPrimaryBorderDefault' => 'getButtonPrimaryBorderDefault',
        'buttonPrimaryBorderDisabled' => 'getButtonPrimaryBorderDisabled',
        'buttonPrimaryBorderHover' => 'getButtonPrimaryBorderHover',
        'buttonPrimaryForegroundDefault' => 'getButtonPrimaryForegroundDefault',
        'buttonPrimaryForegroundDisabled' => 'getButtonPrimaryForegroundDisabled',
        'buttonPrimaryForegroundHover' => 'getButtonPrimaryForegroundHover',
        'buttonSecondaryBackgroundDefault' => 'getButtonSecondaryBackgroundDefault',
        'buttonSecondaryBackgroundDisabled' => 'getButtonSecondaryBackgroundDisabled',
        'buttonSecondaryBackgroundHover' => 'getButtonSecondaryBackgroundHover',
        'buttonSecondaryBorderDefault' => 'getButtonSecondaryBorderDefault',
        'buttonSecondaryBorderDisabled' => 'getButtonSecondaryBorderDisabled',
        'buttonSecondaryBorderHover' => 'getButtonSecondaryBorderHover',
        'buttonSecondaryForegroundDefault' => 'getButtonSecondaryForegroundDefault',
        'buttonSecondaryForegroundDisabled' => 'getButtonSecondaryForegroundDisabled',
        'buttonSecondaryForegroundHover' => 'getButtonSecondaryForegroundHover',
        'buttonSocialBackgroundDefault' => 'getButtonSocialBackgroundDefault',
        'buttonSocialBackgroundDisabled' => 'getButtonSocialBackgroundDisabled',
        'buttonSocialBackgroundGenericProvider' => 'getButtonSocialBackgroundGenericProvider',
        'buttonSocialBackgroundHover' => 'getButtonSocialBackgroundHover',
        'buttonSocialBorderDefault' => 'getButtonSocialBorderDefault',
        'buttonSocialBorderDisabled' => 'getButtonSocialBorderDisabled',
        'buttonSocialBorderGenericProvider' => 'getButtonSocialBorderGenericProvider',
        'buttonSocialBorderHover' => 'getButtonSocialBorderHover',
        'buttonSocialForegroundDefault' => 'getButtonSocialForegroundDefault',
        'buttonSocialForegroundDisabled' => 'getButtonSocialForegroundDisabled',
        'buttonSocialForegroundGenericProvider' => 'getButtonSocialForegroundGenericProvider',
        'buttonSocialForegroundHover' => 'getButtonSocialForegroundHover',
        'checkboxBackgroundChecked' => 'getCheckboxBackgroundChecked',
        'checkboxBackgroundDefault' => 'getCheckboxBackgroundDefault',
        'checkboxBorderCheckboxBorderChecked' => 'getCheckboxBorderCheckboxBorderChecked',
        'checkboxBorderCheckboxBorderDefault' => 'getCheckboxBorderCheckboxBorderDefault',
        'checkboxForegroundChecked' => 'getCheckboxForegroundChecked',
        'checkboxForegroundDefault' => 'getCheckboxForegroundDefault',
        'formBackgroundDefault' => 'getFormBackgroundDefault',
        'formBorderDefault' => 'getFormBorderDefault',
        'inputBackgroundDefault' => 'getInputBackgroundDefault',
        'inputBackgroundDisabled' => 'getInputBackgroundDisabled',
        'inputBackgroundHover' => 'getInputBackgroundHover',
        'inputBorderDefault' => 'getInputBorderDefault',
        'inputBorderDisabled' => 'getInputBorderDisabled',
        'inputBorderFocus' => 'getInputBorderFocus',
        'inputBorderHover' => 'getInputBorderHover',
        'inputForegroundDisabled' => 'getInputForegroundDisabled',
        'inputForegroundPrimary' => 'getInputForegroundPrimary',
        'inputForegroundSecondary' => 'getInputForegroundSecondary',
        'inputForegroundTertiary' => 'getInputForegroundTertiary',
        'interfaceBackgroundBrandPrimary' => 'getInterfaceBackgroundBrandPrimary',
        'interfaceBackgroundBrandPrimaryHover' => 'getInterfaceBackgroundBrandPrimaryHover',
        'interfaceBackgroundBrandSecondary' => 'getInterfaceBackgroundBrandSecondary',
        'interfaceBackgroundBrandSecondaryHover' => 'getInterfaceBackgroundBrandSecondaryHover',
        'interfaceBackgroundDefaultInverted' => 'getInterfaceBackgroundDefaultInverted',
        'interfaceBackgroundDefaultInvertedHover' => 'getInterfaceBackgroundDefaultInvertedHover',
        'interfaceBackgroundDefaultNone' => 'getInterfaceBackgroundDefaultNone',
        'interfaceBackgroundDefaultPrimary' => 'getInterfaceBackgroundDefaultPrimary',
        'interfaceBackgroundDefaultPrimaryHover' => 'getInterfaceBackgroundDefaultPrimaryHover',
        'interfaceBackgroundDefaultSecondary' => 'getInterfaceBackgroundDefaultSecondary',
        'interfaceBackgroundDefaultSecondaryHover' => 'getInterfaceBackgroundDefaultSecondaryHover',
        'interfaceBackgroundDefaultTertiary' => 'getInterfaceBackgroundDefaultTertiary',
        'interfaceBackgroundDefaultTertiaryHover' => 'getInterfaceBackgroundDefaultTertiaryHover',
        'interfaceBackgroundDisabledDisabled' => 'getInterfaceBackgroundDisabledDisabled',
        'interfaceBackgroundValidationDanger' => 'getInterfaceBackgroundValidationDanger',
        'interfaceBackgroundValidationSuccess' => 'getInterfaceBackgroundValidationSuccess',
        'interfaceBackgroundValidationWarning' => 'getInterfaceBackgroundValidationWarning',
        'interfaceBorderBrandBrand' => 'getInterfaceBorderBrandBrand',
        'interfaceBorderDefaultInverted' => 'getInterfaceBorderDefaultInverted',
        'interfaceBorderDefaultNone' => 'getInterfaceBorderDefaultNone',
        'interfaceBorderDefaultPrimary' => 'getInterfaceBorderDefaultPrimary',
        'interfaceBorderDisabledDisabled' => 'getInterfaceBorderDisabledDisabled',
        'interfaceBorderValidationDanger' => 'getInterfaceBorderValidationDanger',
        'interfaceBorderValidationSuccess' => 'getInterfaceBorderValidationSuccess',
        'interfaceBorderValidationWarning' => 'getInterfaceBorderValidationWarning',
        'interfaceForegroundBrandOnPrimary' => 'getInterfaceForegroundBrandOnPrimary',
        'interfaceForegroundBrandOnSecondary' => 'getInterfaceForegroundBrandOnSecondary',
        'interfaceForegroundBrandPrimary' => 'getInterfaceForegroundBrandPrimary',
        'interfaceForegroundBrandSecondary' => 'getInterfaceForegroundBrandSecondary',
        'interfaceForegroundDefaultInverted' => 'getInterfaceForegroundDefaultInverted',
        'interfaceForegroundDefaultPrimary' => 'getInterfaceForegroundDefaultPrimary',
        'interfaceForegroundDefaultSecondary' => 'getInterfaceForegroundDefaultSecondary',
        'interfaceForegroundDefaultTertiary' => 'getInterfaceForegroundDefaultTertiary',
        'interfaceForegroundDisabledDisabled' => 'getInterfaceForegroundDisabledDisabled',
        'interfaceForegroundDisabledOnDisabled' => 'getInterfaceForegroundDisabledOnDisabled',
        'interfaceForegroundValidationDanger' => 'getInterfaceForegroundValidationDanger',
        'interfaceForegroundValidationSuccess' => 'getInterfaceForegroundValidationSuccess',
        'interfaceForegroundValidationWarning' => 'getInterfaceForegroundValidationWarning',
        'oryBackgroundDefault' => 'getOryBackgroundDefault',
        'oryBorderDefault' => 'getOryBorderDefault',
        'oryForegroundDefault' => 'getOryForegroundDefault',
        'radioBackgroundChecked' => 'getRadioBackgroundChecked',
        'radioBackgroundDefault' => 'getRadioBackgroundDefault',
        'radioBorderChecked' => 'getRadioBorderChecked',
        'radioBorderDefault' => 'getRadioBorderDefault',
        'radioForegroundChecked' => 'getRadioForegroundChecked',
        'radioForegroundDefault' => 'getRadioForegroundDefault',
        'toggleBackgroundChecked' => 'getToggleBackgroundChecked',
        'toggleBackgroundDefault' => 'getToggleBackgroundDefault',
        'toggleBorderChecked' => 'getToggleBorderChecked',
        'toggleBorderDefault' => 'getToggleBorderDefault',
        'toggleForegroundChecked' => 'getToggleForegroundChecked',
        'toggleForegroundDefault' => 'getToggleForegroundDefault',
        'ui100' => 'getUi100',
        'ui200' => 'getUi200',
        'ui300' => 'getUi300',
        'ui400' => 'getUi400',
        'ui50' => 'getUi50',
        'ui500' => 'getUi500',
        'ui600' => 'getUi600',
        'ui700' => 'getUi700',
        'ui800' => 'getUi800',
        'ui900' => 'getUi900',
        'ui950' => 'getUi950',
        'uiBlack' => 'getUiBlack',
        'uiDanger' => 'getUiDanger',
        'uiSuccess' => 'getUiSuccess',
        'uiTransparent' => 'getUiTransparent',
        'uiWarning' => 'getUiWarning',
        'uiWhite' => 'getUiWhite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('axBackgroundDefault', $data ?? [], null);
        $this->setIfExists('brand100', $data ?? [], null);
        $this->setIfExists('brand200', $data ?? [], null);
        $this->setIfExists('brand300', $data ?? [], null);
        $this->setIfExists('brand400', $data ?? [], null);
        $this->setIfExists('brand50', $data ?? [], null);
        $this->setIfExists('brand500', $data ?? [], null);
        $this->setIfExists('brand600', $data ?? [], null);
        $this->setIfExists('brand700', $data ?? [], null);
        $this->setIfExists('brand800', $data ?? [], null);
        $this->setIfExists('brand900', $data ?? [], null);
        $this->setIfExists('brand950', $data ?? [], null);
        $this->setIfExists('buttonIdentifierBackgroundDefault', $data ?? [], null);
        $this->setIfExists('buttonIdentifierBackgroundHover', $data ?? [], null);
        $this->setIfExists('buttonIdentifierBorderBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonIdentifierBorderBorderHover', $data ?? [], null);
        $this->setIfExists('buttonIdentifierForegroundDefault', $data ?? [], null);
        $this->setIfExists('buttonIdentifierForegroundHover', $data ?? [], null);
        $this->setIfExists('buttonLinkBrandBrand', $data ?? [], null);
        $this->setIfExists('buttonLinkBrandBrandHover', $data ?? [], null);
        $this->setIfExists('buttonLinkDefaultPrimary', $data ?? [], null);
        $this->setIfExists('buttonLinkDefaultPrimaryHover', $data ?? [], null);
        $this->setIfExists('buttonLinkDefaultSecondary', $data ?? [], null);
        $this->setIfExists('buttonLinkDefaultSecondaryHover', $data ?? [], null);
        $this->setIfExists('buttonLinkDisabledDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBackgroundDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBackgroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBackgroundHover', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryBorderHover', $data ?? [], null);
        $this->setIfExists('buttonPrimaryForegroundDefault', $data ?? [], null);
        $this->setIfExists('buttonPrimaryForegroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonPrimaryForegroundHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBackgroundDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBackgroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBackgroundHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryBorderHover', $data ?? [], null);
        $this->setIfExists('buttonSecondaryForegroundDefault', $data ?? [], null);
        $this->setIfExists('buttonSecondaryForegroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonSecondaryForegroundHover', $data ?? [], null);
        $this->setIfExists('buttonSocialBackgroundDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialBackgroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialBackgroundGenericProvider', $data ?? [], null);
        $this->setIfExists('buttonSocialBackgroundHover', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderGenericProvider', $data ?? [], null);
        $this->setIfExists('buttonSocialBorderHover', $data ?? [], null);
        $this->setIfExists('buttonSocialForegroundDefault', $data ?? [], null);
        $this->setIfExists('buttonSocialForegroundDisabled', $data ?? [], null);
        $this->setIfExists('buttonSocialForegroundGenericProvider', $data ?? [], null);
        $this->setIfExists('buttonSocialForegroundHover', $data ?? [], null);
        $this->setIfExists('checkboxBackgroundChecked', $data ?? [], null);
        $this->setIfExists('checkboxBackgroundDefault', $data ?? [], null);
        $this->setIfExists('checkboxBorderCheckboxBorderChecked', $data ?? [], null);
        $this->setIfExists('checkboxBorderCheckboxBorderDefault', $data ?? [], null);
        $this->setIfExists('checkboxForegroundChecked', $data ?? [], null);
        $this->setIfExists('checkboxForegroundDefault', $data ?? [], null);
        $this->setIfExists('formBackgroundDefault', $data ?? [], null);
        $this->setIfExists('formBorderDefault', $data ?? [], null);
        $this->setIfExists('inputBackgroundDefault', $data ?? [], null);
        $this->setIfExists('inputBackgroundDisabled', $data ?? [], null);
        $this->setIfExists('inputBackgroundHover', $data ?? [], null);
        $this->setIfExists('inputBorderDefault', $data ?? [], null);
        $this->setIfExists('inputBorderDisabled', $data ?? [], null);
        $this->setIfExists('inputBorderFocus', $data ?? [], null);
        $this->setIfExists('inputBorderHover', $data ?? [], null);
        $this->setIfExists('inputForegroundDisabled', $data ?? [], null);
        $this->setIfExists('inputForegroundPrimary', $data ?? [], null);
        $this->setIfExists('inputForegroundSecondary', $data ?? [], null);
        $this->setIfExists('inputForegroundTertiary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundBrandPrimary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundBrandPrimaryHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundBrandSecondary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundBrandSecondaryHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultInverted', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultInvertedHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultNone', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultPrimary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultPrimaryHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultSecondary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultSecondaryHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultTertiary', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDefaultTertiaryHover', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundDisabledDisabled', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundValidationDanger', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundValidationSuccess', $data ?? [], null);
        $this->setIfExists('interfaceBackgroundValidationWarning', $data ?? [], null);
        $this->setIfExists('interfaceBorderBrandBrand', $data ?? [], null);
        $this->setIfExists('interfaceBorderDefaultInverted', $data ?? [], null);
        $this->setIfExists('interfaceBorderDefaultNone', $data ?? [], null);
        $this->setIfExists('interfaceBorderDefaultPrimary', $data ?? [], null);
        $this->setIfExists('interfaceBorderDisabledDisabled', $data ?? [], null);
        $this->setIfExists('interfaceBorderValidationDanger', $data ?? [], null);
        $this->setIfExists('interfaceBorderValidationSuccess', $data ?? [], null);
        $this->setIfExists('interfaceBorderValidationWarning', $data ?? [], null);
        $this->setIfExists('interfaceForegroundBrandOnPrimary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundBrandOnSecondary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundBrandPrimary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundBrandSecondary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDefaultInverted', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDefaultPrimary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDefaultSecondary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDefaultTertiary', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDisabledDisabled', $data ?? [], null);
        $this->setIfExists('interfaceForegroundDisabledOnDisabled', $data ?? [], null);
        $this->setIfExists('interfaceForegroundValidationDanger', $data ?? [], null);
        $this->setIfExists('interfaceForegroundValidationSuccess', $data ?? [], null);
        $this->setIfExists('interfaceForegroundValidationWarning', $data ?? [], null);
        $this->setIfExists('oryBackgroundDefault', $data ?? [], null);
        $this->setIfExists('oryBorderDefault', $data ?? [], null);
        $this->setIfExists('oryForegroundDefault', $data ?? [], null);
        $this->setIfExists('radioBackgroundChecked', $data ?? [], null);
        $this->setIfExists('radioBackgroundDefault', $data ?? [], null);
        $this->setIfExists('radioBorderChecked', $data ?? [], null);
        $this->setIfExists('radioBorderDefault', $data ?? [], null);
        $this->setIfExists('radioForegroundChecked', $data ?? [], null);
        $this->setIfExists('radioForegroundDefault', $data ?? [], null);
        $this->setIfExists('toggleBackgroundChecked', $data ?? [], null);
        $this->setIfExists('toggleBackgroundDefault', $data ?? [], null);
        $this->setIfExists('toggleBorderChecked', $data ?? [], null);
        $this->setIfExists('toggleBorderDefault', $data ?? [], null);
        $this->setIfExists('toggleForegroundChecked', $data ?? [], null);
        $this->setIfExists('toggleForegroundDefault', $data ?? [], null);
        $this->setIfExists('ui100', $data ?? [], null);
        $this->setIfExists('ui200', $data ?? [], null);
        $this->setIfExists('ui300', $data ?? [], null);
        $this->setIfExists('ui400', $data ?? [], null);
        $this->setIfExists('ui50', $data ?? [], null);
        $this->setIfExists('ui500', $data ?? [], null);
        $this->setIfExists('ui600', $data ?? [], null);
        $this->setIfExists('ui700', $data ?? [], null);
        $this->setIfExists('ui800', $data ?? [], null);
        $this->setIfExists('ui900', $data ?? [], null);
        $this->setIfExists('ui950', $data ?? [], null);
        $this->setIfExists('uiBlack', $data ?? [], null);
        $this->setIfExists('uiDanger', $data ?? [], null);
        $this->setIfExists('uiSuccess', $data ?? [], null);
        $this->setIfExists('uiTransparent', $data ?? [], null);
        $this->setIfExists('uiWarning', $data ?? [], null);
        $this->setIfExists('uiWhite', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets axBackgroundDefault
     *
     * @return string|null
     */
    public function getAxBackgroundDefault()
    {
        return $this->container['axBackgroundDefault'];
    }

    /**
     * Sets axBackgroundDefault
     *
     * @param string|null $axBackgroundDefault axBackgroundDefault
     *
     * @return self
     */
    public function setAxBackgroundDefault($axBackgroundDefault)
    {
        if (is_null($axBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable axBackgroundDefault cannot be null');
        }
        $this->container['axBackgroundDefault'] = $axBackgroundDefault;

        return $this;
    }

    /**
     * Gets brand100
     *
     * @return string|null
     */
    public function getBrand100()
    {
        return $this->container['brand100'];
    }

    /**
     * Sets brand100
     *
     * @param string|null $brand100 brand100
     *
     * @return self
     */
    public function setBrand100($brand100)
    {
        if (is_null($brand100)) {
            throw new \InvalidArgumentException('non-nullable brand100 cannot be null');
        }
        $this->container['brand100'] = $brand100;

        return $this;
    }

    /**
     * Gets brand200
     *
     * @return string|null
     */
    public function getBrand200()
    {
        return $this->container['brand200'];
    }

    /**
     * Sets brand200
     *
     * @param string|null $brand200 brand200
     *
     * @return self
     */
    public function setBrand200($brand200)
    {
        if (is_null($brand200)) {
            throw new \InvalidArgumentException('non-nullable brand200 cannot be null');
        }
        $this->container['brand200'] = $brand200;

        return $this;
    }

    /**
     * Gets brand300
     *
     * @return string|null
     */
    public function getBrand300()
    {
        return $this->container['brand300'];
    }

    /**
     * Sets brand300
     *
     * @param string|null $brand300 brand300
     *
     * @return self
     */
    public function setBrand300($brand300)
    {
        if (is_null($brand300)) {
            throw new \InvalidArgumentException('non-nullable brand300 cannot be null');
        }
        $this->container['brand300'] = $brand300;

        return $this;
    }

    /**
     * Gets brand400
     *
     * @return string|null
     */
    public function getBrand400()
    {
        return $this->container['brand400'];
    }

    /**
     * Sets brand400
     *
     * @param string|null $brand400 brand400
     *
     * @return self
     */
    public function setBrand400($brand400)
    {
        if (is_null($brand400)) {
            throw new \InvalidArgumentException('non-nullable brand400 cannot be null');
        }
        $this->container['brand400'] = $brand400;

        return $this;
    }

    /**
     * Gets brand50
     *
     * @return string|null
     */
    public function getBrand50()
    {
        return $this->container['brand50'];
    }

    /**
     * Sets brand50
     *
     * @param string|null $brand50 brand50
     *
     * @return self
     */
    public function setBrand50($brand50)
    {
        if (is_null($brand50)) {
            throw new \InvalidArgumentException('non-nullable brand50 cannot be null');
        }
        $this->container['brand50'] = $brand50;

        return $this;
    }

    /**
     * Gets brand500
     *
     * @return string|null
     */
    public function getBrand500()
    {
        return $this->container['brand500'];
    }

    /**
     * Sets brand500
     *
     * @param string|null $brand500 brand500
     *
     * @return self
     */
    public function setBrand500($brand500)
    {
        if (is_null($brand500)) {
            throw new \InvalidArgumentException('non-nullable brand500 cannot be null');
        }
        $this->container['brand500'] = $brand500;

        return $this;
    }

    /**
     * Gets brand600
     *
     * @return string|null
     */
    public function getBrand600()
    {
        return $this->container['brand600'];
    }

    /**
     * Sets brand600
     *
     * @param string|null $brand600 brand600
     *
     * @return self
     */
    public function setBrand600($brand600)
    {
        if (is_null($brand600)) {
            throw new \InvalidArgumentException('non-nullable brand600 cannot be null');
        }
        $this->container['brand600'] = $brand600;

        return $this;
    }

    /**
     * Gets brand700
     *
     * @return string|null
     */
    public function getBrand700()
    {
        return $this->container['brand700'];
    }

    /**
     * Sets brand700
     *
     * @param string|null $brand700 brand700
     *
     * @return self
     */
    public function setBrand700($brand700)
    {
        if (is_null($brand700)) {
            throw new \InvalidArgumentException('non-nullable brand700 cannot be null');
        }
        $this->container['brand700'] = $brand700;

        return $this;
    }

    /**
     * Gets brand800
     *
     * @return string|null
     */
    public function getBrand800()
    {
        return $this->container['brand800'];
    }

    /**
     * Sets brand800
     *
     * @param string|null $brand800 brand800
     *
     * @return self
     */
    public function setBrand800($brand800)
    {
        if (is_null($brand800)) {
            throw new \InvalidArgumentException('non-nullable brand800 cannot be null');
        }
        $this->container['brand800'] = $brand800;

        return $this;
    }

    /**
     * Gets brand900
     *
     * @return string|null
     */
    public function getBrand900()
    {
        return $this->container['brand900'];
    }

    /**
     * Sets brand900
     *
     * @param string|null $brand900 brand900
     *
     * @return self
     */
    public function setBrand900($brand900)
    {
        if (is_null($brand900)) {
            throw new \InvalidArgumentException('non-nullable brand900 cannot be null');
        }
        $this->container['brand900'] = $brand900;

        return $this;
    }

    /**
     * Gets brand950
     *
     * @return string|null
     */
    public function getBrand950()
    {
        return $this->container['brand950'];
    }

    /**
     * Sets brand950
     *
     * @param string|null $brand950 brand950
     *
     * @return self
     */
    public function setBrand950($brand950)
    {
        if (is_null($brand950)) {
            throw new \InvalidArgumentException('non-nullable brand950 cannot be null');
        }
        $this->container['brand950'] = $brand950;

        return $this;
    }

    /**
     * Gets buttonIdentifierBackgroundDefault
     *
     * @return string|null
     */
    public function getButtonIdentifierBackgroundDefault()
    {
        return $this->container['buttonIdentifierBackgroundDefault'];
    }

    /**
     * Sets buttonIdentifierBackgroundDefault
     *
     * @param string|null $buttonIdentifierBackgroundDefault buttonIdentifierBackgroundDefault
     *
     * @return self
     */
    public function setButtonIdentifierBackgroundDefault($buttonIdentifierBackgroundDefault)
    {
        if (is_null($buttonIdentifierBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierBackgroundDefault cannot be null');
        }
        $this->container['buttonIdentifierBackgroundDefault'] = $buttonIdentifierBackgroundDefault;

        return $this;
    }

    /**
     * Gets buttonIdentifierBackgroundHover
     *
     * @return string|null
     */
    public function getButtonIdentifierBackgroundHover()
    {
        return $this->container['buttonIdentifierBackgroundHover'];
    }

    /**
     * Sets buttonIdentifierBackgroundHover
     *
     * @param string|null $buttonIdentifierBackgroundHover buttonIdentifierBackgroundHover
     *
     * @return self
     */
    public function setButtonIdentifierBackgroundHover($buttonIdentifierBackgroundHover)
    {
        if (is_null($buttonIdentifierBackgroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierBackgroundHover cannot be null');
        }
        $this->container['buttonIdentifierBackgroundHover'] = $buttonIdentifierBackgroundHover;

        return $this;
    }

    /**
     * Gets buttonIdentifierBorderBorderDefault
     *
     * @return string|null
     */
    public function getButtonIdentifierBorderBorderDefault()
    {
        return $this->container['buttonIdentifierBorderBorderDefault'];
    }

    /**
     * Sets buttonIdentifierBorderBorderDefault
     *
     * @param string|null $buttonIdentifierBorderBorderDefault buttonIdentifierBorderBorderDefault
     *
     * @return self
     */
    public function setButtonIdentifierBorderBorderDefault($buttonIdentifierBorderBorderDefault)
    {
        if (is_null($buttonIdentifierBorderBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierBorderBorderDefault cannot be null');
        }
        $this->container['buttonIdentifierBorderBorderDefault'] = $buttonIdentifierBorderBorderDefault;

        return $this;
    }

    /**
     * Gets buttonIdentifierBorderBorderHover
     *
     * @return string|null
     */
    public function getButtonIdentifierBorderBorderHover()
    {
        return $this->container['buttonIdentifierBorderBorderHover'];
    }

    /**
     * Sets buttonIdentifierBorderBorderHover
     *
     * @param string|null $buttonIdentifierBorderBorderHover buttonIdentifierBorderBorderHover
     *
     * @return self
     */
    public function setButtonIdentifierBorderBorderHover($buttonIdentifierBorderBorderHover)
    {
        if (is_null($buttonIdentifierBorderBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierBorderBorderHover cannot be null');
        }
        $this->container['buttonIdentifierBorderBorderHover'] = $buttonIdentifierBorderBorderHover;

        return $this;
    }

    /**
     * Gets buttonIdentifierForegroundDefault
     *
     * @return string|null
     */
    public function getButtonIdentifierForegroundDefault()
    {
        return $this->container['buttonIdentifierForegroundDefault'];
    }

    /**
     * Sets buttonIdentifierForegroundDefault
     *
     * @param string|null $buttonIdentifierForegroundDefault buttonIdentifierForegroundDefault
     *
     * @return self
     */
    public function setButtonIdentifierForegroundDefault($buttonIdentifierForegroundDefault)
    {
        if (is_null($buttonIdentifierForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierForegroundDefault cannot be null');
        }
        $this->container['buttonIdentifierForegroundDefault'] = $buttonIdentifierForegroundDefault;

        return $this;
    }

    /**
     * Gets buttonIdentifierForegroundHover
     *
     * @return string|null
     */
    public function getButtonIdentifierForegroundHover()
    {
        return $this->container['buttonIdentifierForegroundHover'];
    }

    /**
     * Sets buttonIdentifierForegroundHover
     *
     * @param string|null $buttonIdentifierForegroundHover buttonIdentifierForegroundHover
     *
     * @return self
     */
    public function setButtonIdentifierForegroundHover($buttonIdentifierForegroundHover)
    {
        if (is_null($buttonIdentifierForegroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonIdentifierForegroundHover cannot be null');
        }
        $this->container['buttonIdentifierForegroundHover'] = $buttonIdentifierForegroundHover;

        return $this;
    }

    /**
     * Gets buttonLinkBrandBrand
     *
     * @return string|null
     */
    public function getButtonLinkBrandBrand()
    {
        return $this->container['buttonLinkBrandBrand'];
    }

    /**
     * Sets buttonLinkBrandBrand
     *
     * @param string|null $buttonLinkBrandBrand buttonLinkBrandBrand
     *
     * @return self
     */
    public function setButtonLinkBrandBrand($buttonLinkBrandBrand)
    {
        if (is_null($buttonLinkBrandBrand)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkBrandBrand cannot be null');
        }
        $this->container['buttonLinkBrandBrand'] = $buttonLinkBrandBrand;

        return $this;
    }

    /**
     * Gets buttonLinkBrandBrandHover
     *
     * @return string|null
     */
    public function getButtonLinkBrandBrandHover()
    {
        return $this->container['buttonLinkBrandBrandHover'];
    }

    /**
     * Sets buttonLinkBrandBrandHover
     *
     * @param string|null $buttonLinkBrandBrandHover buttonLinkBrandBrandHover
     *
     * @return self
     */
    public function setButtonLinkBrandBrandHover($buttonLinkBrandBrandHover)
    {
        if (is_null($buttonLinkBrandBrandHover)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkBrandBrandHover cannot be null');
        }
        $this->container['buttonLinkBrandBrandHover'] = $buttonLinkBrandBrandHover;

        return $this;
    }

    /**
     * Gets buttonLinkDefaultPrimary
     *
     * @return string|null
     */
    public function getButtonLinkDefaultPrimary()
    {
        return $this->container['buttonLinkDefaultPrimary'];
    }

    /**
     * Sets buttonLinkDefaultPrimary
     *
     * @param string|null $buttonLinkDefaultPrimary buttonLinkDefaultPrimary
     *
     * @return self
     */
    public function setButtonLinkDefaultPrimary($buttonLinkDefaultPrimary)
    {
        if (is_null($buttonLinkDefaultPrimary)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkDefaultPrimary cannot be null');
        }
        $this->container['buttonLinkDefaultPrimary'] = $buttonLinkDefaultPrimary;

        return $this;
    }

    /**
     * Gets buttonLinkDefaultPrimaryHover
     *
     * @return string|null
     */
    public function getButtonLinkDefaultPrimaryHover()
    {
        return $this->container['buttonLinkDefaultPrimaryHover'];
    }

    /**
     * Sets buttonLinkDefaultPrimaryHover
     *
     * @param string|null $buttonLinkDefaultPrimaryHover buttonLinkDefaultPrimaryHover
     *
     * @return self
     */
    public function setButtonLinkDefaultPrimaryHover($buttonLinkDefaultPrimaryHover)
    {
        if (is_null($buttonLinkDefaultPrimaryHover)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkDefaultPrimaryHover cannot be null');
        }
        $this->container['buttonLinkDefaultPrimaryHover'] = $buttonLinkDefaultPrimaryHover;

        return $this;
    }

    /**
     * Gets buttonLinkDefaultSecondary
     *
     * @return string|null
     */
    public function getButtonLinkDefaultSecondary()
    {
        return $this->container['buttonLinkDefaultSecondary'];
    }

    /**
     * Sets buttonLinkDefaultSecondary
     *
     * @param string|null $buttonLinkDefaultSecondary buttonLinkDefaultSecondary
     *
     * @return self
     */
    public function setButtonLinkDefaultSecondary($buttonLinkDefaultSecondary)
    {
        if (is_null($buttonLinkDefaultSecondary)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkDefaultSecondary cannot be null');
        }
        $this->container['buttonLinkDefaultSecondary'] = $buttonLinkDefaultSecondary;

        return $this;
    }

    /**
     * Gets buttonLinkDefaultSecondaryHover
     *
     * @return string|null
     */
    public function getButtonLinkDefaultSecondaryHover()
    {
        return $this->container['buttonLinkDefaultSecondaryHover'];
    }

    /**
     * Sets buttonLinkDefaultSecondaryHover
     *
     * @param string|null $buttonLinkDefaultSecondaryHover buttonLinkDefaultSecondaryHover
     *
     * @return self
     */
    public function setButtonLinkDefaultSecondaryHover($buttonLinkDefaultSecondaryHover)
    {
        if (is_null($buttonLinkDefaultSecondaryHover)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkDefaultSecondaryHover cannot be null');
        }
        $this->container['buttonLinkDefaultSecondaryHover'] = $buttonLinkDefaultSecondaryHover;

        return $this;
    }

    /**
     * Gets buttonLinkDisabledDisabled
     *
     * @return string|null
     */
    public function getButtonLinkDisabledDisabled()
    {
        return $this->container['buttonLinkDisabledDisabled'];
    }

    /**
     * Sets buttonLinkDisabledDisabled
     *
     * @param string|null $buttonLinkDisabledDisabled buttonLinkDisabledDisabled
     *
     * @return self
     */
    public function setButtonLinkDisabledDisabled($buttonLinkDisabledDisabled)
    {
        if (is_null($buttonLinkDisabledDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonLinkDisabledDisabled cannot be null');
        }
        $this->container['buttonLinkDisabledDisabled'] = $buttonLinkDisabledDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryBackgroundDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryBackgroundDefault()
    {
        return $this->container['buttonPrimaryBackgroundDefault'];
    }

    /**
     * Sets buttonPrimaryBackgroundDefault
     *
     * @param string|null $buttonPrimaryBackgroundDefault buttonPrimaryBackgroundDefault
     *
     * @return self
     */
    public function setButtonPrimaryBackgroundDefault($buttonPrimaryBackgroundDefault)
    {
        if (is_null($buttonPrimaryBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBackgroundDefault cannot be null');
        }
        $this->container['buttonPrimaryBackgroundDefault'] = $buttonPrimaryBackgroundDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryBackgroundDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryBackgroundDisabled()
    {
        return $this->container['buttonPrimaryBackgroundDisabled'];
    }

    /**
     * Sets buttonPrimaryBackgroundDisabled
     *
     * @param string|null $buttonPrimaryBackgroundDisabled buttonPrimaryBackgroundDisabled
     *
     * @return self
     */
    public function setButtonPrimaryBackgroundDisabled($buttonPrimaryBackgroundDisabled)
    {
        if (is_null($buttonPrimaryBackgroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBackgroundDisabled cannot be null');
        }
        $this->container['buttonPrimaryBackgroundDisabled'] = $buttonPrimaryBackgroundDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryBackgroundHover
     *
     * @return string|null
     */
    public function getButtonPrimaryBackgroundHover()
    {
        return $this->container['buttonPrimaryBackgroundHover'];
    }

    /**
     * Sets buttonPrimaryBackgroundHover
     *
     * @param string|null $buttonPrimaryBackgroundHover buttonPrimaryBackgroundHover
     *
     * @return self
     */
    public function setButtonPrimaryBackgroundHover($buttonPrimaryBackgroundHover)
    {
        if (is_null($buttonPrimaryBackgroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBackgroundHover cannot be null');
        }
        $this->container['buttonPrimaryBackgroundHover'] = $buttonPrimaryBackgroundHover;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderDefault()
    {
        return $this->container['buttonPrimaryBorderDefault'];
    }

    /**
     * Sets buttonPrimaryBorderDefault
     *
     * @param string|null $buttonPrimaryBorderDefault buttonPrimaryBorderDefault
     *
     * @return self
     */
    public function setButtonPrimaryBorderDefault($buttonPrimaryBorderDefault)
    {
        if (is_null($buttonPrimaryBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderDefault cannot be null');
        }
        $this->container['buttonPrimaryBorderDefault'] = $buttonPrimaryBorderDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderDisabled()
    {
        return $this->container['buttonPrimaryBorderDisabled'];
    }

    /**
     * Sets buttonPrimaryBorderDisabled
     *
     * @param string|null $buttonPrimaryBorderDisabled buttonPrimaryBorderDisabled
     *
     * @return self
     */
    public function setButtonPrimaryBorderDisabled($buttonPrimaryBorderDisabled)
    {
        if (is_null($buttonPrimaryBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderDisabled cannot be null');
        }
        $this->container['buttonPrimaryBorderDisabled'] = $buttonPrimaryBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryBorderHover
     *
     * @return string|null
     */
    public function getButtonPrimaryBorderHover()
    {
        return $this->container['buttonPrimaryBorderHover'];
    }

    /**
     * Sets buttonPrimaryBorderHover
     *
     * @param string|null $buttonPrimaryBorderHover buttonPrimaryBorderHover
     *
     * @return self
     */
    public function setButtonPrimaryBorderHover($buttonPrimaryBorderHover)
    {
        if (is_null($buttonPrimaryBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryBorderHover cannot be null');
        }
        $this->container['buttonPrimaryBorderHover'] = $buttonPrimaryBorderHover;

        return $this;
    }

    /**
     * Gets buttonPrimaryForegroundDefault
     *
     * @return string|null
     */
    public function getButtonPrimaryForegroundDefault()
    {
        return $this->container['buttonPrimaryForegroundDefault'];
    }

    /**
     * Sets buttonPrimaryForegroundDefault
     *
     * @param string|null $buttonPrimaryForegroundDefault buttonPrimaryForegroundDefault
     *
     * @return self
     */
    public function setButtonPrimaryForegroundDefault($buttonPrimaryForegroundDefault)
    {
        if (is_null($buttonPrimaryForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryForegroundDefault cannot be null');
        }
        $this->container['buttonPrimaryForegroundDefault'] = $buttonPrimaryForegroundDefault;

        return $this;
    }

    /**
     * Gets buttonPrimaryForegroundDisabled
     *
     * @return string|null
     */
    public function getButtonPrimaryForegroundDisabled()
    {
        return $this->container['buttonPrimaryForegroundDisabled'];
    }

    /**
     * Sets buttonPrimaryForegroundDisabled
     *
     * @param string|null $buttonPrimaryForegroundDisabled buttonPrimaryForegroundDisabled
     *
     * @return self
     */
    public function setButtonPrimaryForegroundDisabled($buttonPrimaryForegroundDisabled)
    {
        if (is_null($buttonPrimaryForegroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryForegroundDisabled cannot be null');
        }
        $this->container['buttonPrimaryForegroundDisabled'] = $buttonPrimaryForegroundDisabled;

        return $this;
    }

    /**
     * Gets buttonPrimaryForegroundHover
     *
     * @return string|null
     */
    public function getButtonPrimaryForegroundHover()
    {
        return $this->container['buttonPrimaryForegroundHover'];
    }

    /**
     * Sets buttonPrimaryForegroundHover
     *
     * @param string|null $buttonPrimaryForegroundHover buttonPrimaryForegroundHover
     *
     * @return self
     */
    public function setButtonPrimaryForegroundHover($buttonPrimaryForegroundHover)
    {
        if (is_null($buttonPrimaryForegroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonPrimaryForegroundHover cannot be null');
        }
        $this->container['buttonPrimaryForegroundHover'] = $buttonPrimaryForegroundHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryBackgroundDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryBackgroundDefault()
    {
        return $this->container['buttonSecondaryBackgroundDefault'];
    }

    /**
     * Sets buttonSecondaryBackgroundDefault
     *
     * @param string|null $buttonSecondaryBackgroundDefault buttonSecondaryBackgroundDefault
     *
     * @return self
     */
    public function setButtonSecondaryBackgroundDefault($buttonSecondaryBackgroundDefault)
    {
        if (is_null($buttonSecondaryBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBackgroundDefault cannot be null');
        }
        $this->container['buttonSecondaryBackgroundDefault'] = $buttonSecondaryBackgroundDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryBackgroundDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryBackgroundDisabled()
    {
        return $this->container['buttonSecondaryBackgroundDisabled'];
    }

    /**
     * Sets buttonSecondaryBackgroundDisabled
     *
     * @param string|null $buttonSecondaryBackgroundDisabled buttonSecondaryBackgroundDisabled
     *
     * @return self
     */
    public function setButtonSecondaryBackgroundDisabled($buttonSecondaryBackgroundDisabled)
    {
        if (is_null($buttonSecondaryBackgroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBackgroundDisabled cannot be null');
        }
        $this->container['buttonSecondaryBackgroundDisabled'] = $buttonSecondaryBackgroundDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryBackgroundHover
     *
     * @return string|null
     */
    public function getButtonSecondaryBackgroundHover()
    {
        return $this->container['buttonSecondaryBackgroundHover'];
    }

    /**
     * Sets buttonSecondaryBackgroundHover
     *
     * @param string|null $buttonSecondaryBackgroundHover buttonSecondaryBackgroundHover
     *
     * @return self
     */
    public function setButtonSecondaryBackgroundHover($buttonSecondaryBackgroundHover)
    {
        if (is_null($buttonSecondaryBackgroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBackgroundHover cannot be null');
        }
        $this->container['buttonSecondaryBackgroundHover'] = $buttonSecondaryBackgroundHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderDefault()
    {
        return $this->container['buttonSecondaryBorderDefault'];
    }

    /**
     * Sets buttonSecondaryBorderDefault
     *
     * @param string|null $buttonSecondaryBorderDefault buttonSecondaryBorderDefault
     *
     * @return self
     */
    public function setButtonSecondaryBorderDefault($buttonSecondaryBorderDefault)
    {
        if (is_null($buttonSecondaryBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderDefault cannot be null');
        }
        $this->container['buttonSecondaryBorderDefault'] = $buttonSecondaryBorderDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderDisabled()
    {
        return $this->container['buttonSecondaryBorderDisabled'];
    }

    /**
     * Sets buttonSecondaryBorderDisabled
     *
     * @param string|null $buttonSecondaryBorderDisabled buttonSecondaryBorderDisabled
     *
     * @return self
     */
    public function setButtonSecondaryBorderDisabled($buttonSecondaryBorderDisabled)
    {
        if (is_null($buttonSecondaryBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderDisabled cannot be null');
        }
        $this->container['buttonSecondaryBorderDisabled'] = $buttonSecondaryBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryBorderHover
     *
     * @return string|null
     */
    public function getButtonSecondaryBorderHover()
    {
        return $this->container['buttonSecondaryBorderHover'];
    }

    /**
     * Sets buttonSecondaryBorderHover
     *
     * @param string|null $buttonSecondaryBorderHover buttonSecondaryBorderHover
     *
     * @return self
     */
    public function setButtonSecondaryBorderHover($buttonSecondaryBorderHover)
    {
        if (is_null($buttonSecondaryBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryBorderHover cannot be null');
        }
        $this->container['buttonSecondaryBorderHover'] = $buttonSecondaryBorderHover;

        return $this;
    }

    /**
     * Gets buttonSecondaryForegroundDefault
     *
     * @return string|null
     */
    public function getButtonSecondaryForegroundDefault()
    {
        return $this->container['buttonSecondaryForegroundDefault'];
    }

    /**
     * Sets buttonSecondaryForegroundDefault
     *
     * @param string|null $buttonSecondaryForegroundDefault buttonSecondaryForegroundDefault
     *
     * @return self
     */
    public function setButtonSecondaryForegroundDefault($buttonSecondaryForegroundDefault)
    {
        if (is_null($buttonSecondaryForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryForegroundDefault cannot be null');
        }
        $this->container['buttonSecondaryForegroundDefault'] = $buttonSecondaryForegroundDefault;

        return $this;
    }

    /**
     * Gets buttonSecondaryForegroundDisabled
     *
     * @return string|null
     */
    public function getButtonSecondaryForegroundDisabled()
    {
        return $this->container['buttonSecondaryForegroundDisabled'];
    }

    /**
     * Sets buttonSecondaryForegroundDisabled
     *
     * @param string|null $buttonSecondaryForegroundDisabled buttonSecondaryForegroundDisabled
     *
     * @return self
     */
    public function setButtonSecondaryForegroundDisabled($buttonSecondaryForegroundDisabled)
    {
        if (is_null($buttonSecondaryForegroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryForegroundDisabled cannot be null');
        }
        $this->container['buttonSecondaryForegroundDisabled'] = $buttonSecondaryForegroundDisabled;

        return $this;
    }

    /**
     * Gets buttonSecondaryForegroundHover
     *
     * @return string|null
     */
    public function getButtonSecondaryForegroundHover()
    {
        return $this->container['buttonSecondaryForegroundHover'];
    }

    /**
     * Sets buttonSecondaryForegroundHover
     *
     * @param string|null $buttonSecondaryForegroundHover buttonSecondaryForegroundHover
     *
     * @return self
     */
    public function setButtonSecondaryForegroundHover($buttonSecondaryForegroundHover)
    {
        if (is_null($buttonSecondaryForegroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSecondaryForegroundHover cannot be null');
        }
        $this->container['buttonSecondaryForegroundHover'] = $buttonSecondaryForegroundHover;

        return $this;
    }

    /**
     * Gets buttonSocialBackgroundDefault
     *
     * @return string|null
     */
    public function getButtonSocialBackgroundDefault()
    {
        return $this->container['buttonSocialBackgroundDefault'];
    }

    /**
     * Sets buttonSocialBackgroundDefault
     *
     * @param string|null $buttonSocialBackgroundDefault buttonSocialBackgroundDefault
     *
     * @return self
     */
    public function setButtonSocialBackgroundDefault($buttonSocialBackgroundDefault)
    {
        if (is_null($buttonSocialBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBackgroundDefault cannot be null');
        }
        $this->container['buttonSocialBackgroundDefault'] = $buttonSocialBackgroundDefault;

        return $this;
    }

    /**
     * Gets buttonSocialBackgroundDisabled
     *
     * @return string|null
     */
    public function getButtonSocialBackgroundDisabled()
    {
        return $this->container['buttonSocialBackgroundDisabled'];
    }

    /**
     * Sets buttonSocialBackgroundDisabled
     *
     * @param string|null $buttonSocialBackgroundDisabled buttonSocialBackgroundDisabled
     *
     * @return self
     */
    public function setButtonSocialBackgroundDisabled($buttonSocialBackgroundDisabled)
    {
        if (is_null($buttonSocialBackgroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBackgroundDisabled cannot be null');
        }
        $this->container['buttonSocialBackgroundDisabled'] = $buttonSocialBackgroundDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialBackgroundGenericProvider
     *
     * @return string|null
     */
    public function getButtonSocialBackgroundGenericProvider()
    {
        return $this->container['buttonSocialBackgroundGenericProvider'];
    }

    /**
     * Sets buttonSocialBackgroundGenericProvider
     *
     * @param string|null $buttonSocialBackgroundGenericProvider buttonSocialBackgroundGenericProvider
     *
     * @return self
     */
    public function setButtonSocialBackgroundGenericProvider($buttonSocialBackgroundGenericProvider)
    {
        if (is_null($buttonSocialBackgroundGenericProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBackgroundGenericProvider cannot be null');
        }
        $this->container['buttonSocialBackgroundGenericProvider'] = $buttonSocialBackgroundGenericProvider;

        return $this;
    }

    /**
     * Gets buttonSocialBackgroundHover
     *
     * @return string|null
     */
    public function getButtonSocialBackgroundHover()
    {
        return $this->container['buttonSocialBackgroundHover'];
    }

    /**
     * Sets buttonSocialBackgroundHover
     *
     * @param string|null $buttonSocialBackgroundHover buttonSocialBackgroundHover
     *
     * @return self
     */
    public function setButtonSocialBackgroundHover($buttonSocialBackgroundHover)
    {
        if (is_null($buttonSocialBackgroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBackgroundHover cannot be null');
        }
        $this->container['buttonSocialBackgroundHover'] = $buttonSocialBackgroundHover;

        return $this;
    }

    /**
     * Gets buttonSocialBorderDefault
     *
     * @return string|null
     */
    public function getButtonSocialBorderDefault()
    {
        return $this->container['buttonSocialBorderDefault'];
    }

    /**
     * Sets buttonSocialBorderDefault
     *
     * @param string|null $buttonSocialBorderDefault buttonSocialBorderDefault
     *
     * @return self
     */
    public function setButtonSocialBorderDefault($buttonSocialBorderDefault)
    {
        if (is_null($buttonSocialBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderDefault cannot be null');
        }
        $this->container['buttonSocialBorderDefault'] = $buttonSocialBorderDefault;

        return $this;
    }

    /**
     * Gets buttonSocialBorderDisabled
     *
     * @return string|null
     */
    public function getButtonSocialBorderDisabled()
    {
        return $this->container['buttonSocialBorderDisabled'];
    }

    /**
     * Sets buttonSocialBorderDisabled
     *
     * @param string|null $buttonSocialBorderDisabled buttonSocialBorderDisabled
     *
     * @return self
     */
    public function setButtonSocialBorderDisabled($buttonSocialBorderDisabled)
    {
        if (is_null($buttonSocialBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderDisabled cannot be null');
        }
        $this->container['buttonSocialBorderDisabled'] = $buttonSocialBorderDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialBorderGenericProvider
     *
     * @return string|null
     */
    public function getButtonSocialBorderGenericProvider()
    {
        return $this->container['buttonSocialBorderGenericProvider'];
    }

    /**
     * Sets buttonSocialBorderGenericProvider
     *
     * @param string|null $buttonSocialBorderGenericProvider buttonSocialBorderGenericProvider
     *
     * @return self
     */
    public function setButtonSocialBorderGenericProvider($buttonSocialBorderGenericProvider)
    {
        if (is_null($buttonSocialBorderGenericProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderGenericProvider cannot be null');
        }
        $this->container['buttonSocialBorderGenericProvider'] = $buttonSocialBorderGenericProvider;

        return $this;
    }

    /**
     * Gets buttonSocialBorderHover
     *
     * @return string|null
     */
    public function getButtonSocialBorderHover()
    {
        return $this->container['buttonSocialBorderHover'];
    }

    /**
     * Sets buttonSocialBorderHover
     *
     * @param string|null $buttonSocialBorderHover buttonSocialBorderHover
     *
     * @return self
     */
    public function setButtonSocialBorderHover($buttonSocialBorderHover)
    {
        if (is_null($buttonSocialBorderHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialBorderHover cannot be null');
        }
        $this->container['buttonSocialBorderHover'] = $buttonSocialBorderHover;

        return $this;
    }

    /**
     * Gets buttonSocialForegroundDefault
     *
     * @return string|null
     */
    public function getButtonSocialForegroundDefault()
    {
        return $this->container['buttonSocialForegroundDefault'];
    }

    /**
     * Sets buttonSocialForegroundDefault
     *
     * @param string|null $buttonSocialForegroundDefault buttonSocialForegroundDefault
     *
     * @return self
     */
    public function setButtonSocialForegroundDefault($buttonSocialForegroundDefault)
    {
        if (is_null($buttonSocialForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialForegroundDefault cannot be null');
        }
        $this->container['buttonSocialForegroundDefault'] = $buttonSocialForegroundDefault;

        return $this;
    }

    /**
     * Gets buttonSocialForegroundDisabled
     *
     * @return string|null
     */
    public function getButtonSocialForegroundDisabled()
    {
        return $this->container['buttonSocialForegroundDisabled'];
    }

    /**
     * Sets buttonSocialForegroundDisabled
     *
     * @param string|null $buttonSocialForegroundDisabled buttonSocialForegroundDisabled
     *
     * @return self
     */
    public function setButtonSocialForegroundDisabled($buttonSocialForegroundDisabled)
    {
        if (is_null($buttonSocialForegroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialForegroundDisabled cannot be null');
        }
        $this->container['buttonSocialForegroundDisabled'] = $buttonSocialForegroundDisabled;

        return $this;
    }

    /**
     * Gets buttonSocialForegroundGenericProvider
     *
     * @return string|null
     */
    public function getButtonSocialForegroundGenericProvider()
    {
        return $this->container['buttonSocialForegroundGenericProvider'];
    }

    /**
     * Sets buttonSocialForegroundGenericProvider
     *
     * @param string|null $buttonSocialForegroundGenericProvider buttonSocialForegroundGenericProvider
     *
     * @return self
     */
    public function setButtonSocialForegroundGenericProvider($buttonSocialForegroundGenericProvider)
    {
        if (is_null($buttonSocialForegroundGenericProvider)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialForegroundGenericProvider cannot be null');
        }
        $this->container['buttonSocialForegroundGenericProvider'] = $buttonSocialForegroundGenericProvider;

        return $this;
    }

    /**
     * Gets buttonSocialForegroundHover
     *
     * @return string|null
     */
    public function getButtonSocialForegroundHover()
    {
        return $this->container['buttonSocialForegroundHover'];
    }

    /**
     * Sets buttonSocialForegroundHover
     *
     * @param string|null $buttonSocialForegroundHover buttonSocialForegroundHover
     *
     * @return self
     */
    public function setButtonSocialForegroundHover($buttonSocialForegroundHover)
    {
        if (is_null($buttonSocialForegroundHover)) {
            throw new \InvalidArgumentException('non-nullable buttonSocialForegroundHover cannot be null');
        }
        $this->container['buttonSocialForegroundHover'] = $buttonSocialForegroundHover;

        return $this;
    }

    /**
     * Gets checkboxBackgroundChecked
     *
     * @return string|null
     */
    public function getCheckboxBackgroundChecked()
    {
        return $this->container['checkboxBackgroundChecked'];
    }

    /**
     * Sets checkboxBackgroundChecked
     *
     * @param string|null $checkboxBackgroundChecked checkboxBackgroundChecked
     *
     * @return self
     */
    public function setCheckboxBackgroundChecked($checkboxBackgroundChecked)
    {
        if (is_null($checkboxBackgroundChecked)) {
            throw new \InvalidArgumentException('non-nullable checkboxBackgroundChecked cannot be null');
        }
        $this->container['checkboxBackgroundChecked'] = $checkboxBackgroundChecked;

        return $this;
    }

    /**
     * Gets checkboxBackgroundDefault
     *
     * @return string|null
     */
    public function getCheckboxBackgroundDefault()
    {
        return $this->container['checkboxBackgroundDefault'];
    }

    /**
     * Sets checkboxBackgroundDefault
     *
     * @param string|null $checkboxBackgroundDefault checkboxBackgroundDefault
     *
     * @return self
     */
    public function setCheckboxBackgroundDefault($checkboxBackgroundDefault)
    {
        if (is_null($checkboxBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable checkboxBackgroundDefault cannot be null');
        }
        $this->container['checkboxBackgroundDefault'] = $checkboxBackgroundDefault;

        return $this;
    }

    /**
     * Gets checkboxBorderCheckboxBorderChecked
     *
     * @return string|null
     */
    public function getCheckboxBorderCheckboxBorderChecked()
    {
        return $this->container['checkboxBorderCheckboxBorderChecked'];
    }

    /**
     * Sets checkboxBorderCheckboxBorderChecked
     *
     * @param string|null $checkboxBorderCheckboxBorderChecked checkboxBorderCheckboxBorderChecked
     *
     * @return self
     */
    public function setCheckboxBorderCheckboxBorderChecked($checkboxBorderCheckboxBorderChecked)
    {
        if (is_null($checkboxBorderCheckboxBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable checkboxBorderCheckboxBorderChecked cannot be null');
        }
        $this->container['checkboxBorderCheckboxBorderChecked'] = $checkboxBorderCheckboxBorderChecked;

        return $this;
    }

    /**
     * Gets checkboxBorderCheckboxBorderDefault
     *
     * @return string|null
     */
    public function getCheckboxBorderCheckboxBorderDefault()
    {
        return $this->container['checkboxBorderCheckboxBorderDefault'];
    }

    /**
     * Sets checkboxBorderCheckboxBorderDefault
     *
     * @param string|null $checkboxBorderCheckboxBorderDefault checkboxBorderCheckboxBorderDefault
     *
     * @return self
     */
    public function setCheckboxBorderCheckboxBorderDefault($checkboxBorderCheckboxBorderDefault)
    {
        if (is_null($checkboxBorderCheckboxBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable checkboxBorderCheckboxBorderDefault cannot be null');
        }
        $this->container['checkboxBorderCheckboxBorderDefault'] = $checkboxBorderCheckboxBorderDefault;

        return $this;
    }

    /**
     * Gets checkboxForegroundChecked
     *
     * @return string|null
     */
    public function getCheckboxForegroundChecked()
    {
        return $this->container['checkboxForegroundChecked'];
    }

    /**
     * Sets checkboxForegroundChecked
     *
     * @param string|null $checkboxForegroundChecked checkboxForegroundChecked
     *
     * @return self
     */
    public function setCheckboxForegroundChecked($checkboxForegroundChecked)
    {
        if (is_null($checkboxForegroundChecked)) {
            throw new \InvalidArgumentException('non-nullable checkboxForegroundChecked cannot be null');
        }
        $this->container['checkboxForegroundChecked'] = $checkboxForegroundChecked;

        return $this;
    }

    /**
     * Gets checkboxForegroundDefault
     *
     * @return string|null
     */
    public function getCheckboxForegroundDefault()
    {
        return $this->container['checkboxForegroundDefault'];
    }

    /**
     * Sets checkboxForegroundDefault
     *
     * @param string|null $checkboxForegroundDefault checkboxForegroundDefault
     *
     * @return self
     */
    public function setCheckboxForegroundDefault($checkboxForegroundDefault)
    {
        if (is_null($checkboxForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable checkboxForegroundDefault cannot be null');
        }
        $this->container['checkboxForegroundDefault'] = $checkboxForegroundDefault;

        return $this;
    }

    /**
     * Gets formBackgroundDefault
     *
     * @return string|null
     */
    public function getFormBackgroundDefault()
    {
        return $this->container['formBackgroundDefault'];
    }

    /**
     * Sets formBackgroundDefault
     *
     * @param string|null $formBackgroundDefault formBackgroundDefault
     *
     * @return self
     */
    public function setFormBackgroundDefault($formBackgroundDefault)
    {
        if (is_null($formBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable formBackgroundDefault cannot be null');
        }
        $this->container['formBackgroundDefault'] = $formBackgroundDefault;

        return $this;
    }

    /**
     * Gets formBorderDefault
     *
     * @return string|null
     */
    public function getFormBorderDefault()
    {
        return $this->container['formBorderDefault'];
    }

    /**
     * Sets formBorderDefault
     *
     * @param string|null $formBorderDefault formBorderDefault
     *
     * @return self
     */
    public function setFormBorderDefault($formBorderDefault)
    {
        if (is_null($formBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable formBorderDefault cannot be null');
        }
        $this->container['formBorderDefault'] = $formBorderDefault;

        return $this;
    }

    /**
     * Gets inputBackgroundDefault
     *
     * @return string|null
     */
    public function getInputBackgroundDefault()
    {
        return $this->container['inputBackgroundDefault'];
    }

    /**
     * Sets inputBackgroundDefault
     *
     * @param string|null $inputBackgroundDefault inputBackgroundDefault
     *
     * @return self
     */
    public function setInputBackgroundDefault($inputBackgroundDefault)
    {
        if (is_null($inputBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable inputBackgroundDefault cannot be null');
        }
        $this->container['inputBackgroundDefault'] = $inputBackgroundDefault;

        return $this;
    }

    /**
     * Gets inputBackgroundDisabled
     *
     * @return string|null
     */
    public function getInputBackgroundDisabled()
    {
        return $this->container['inputBackgroundDisabled'];
    }

    /**
     * Sets inputBackgroundDisabled
     *
     * @param string|null $inputBackgroundDisabled inputBackgroundDisabled
     *
     * @return self
     */
    public function setInputBackgroundDisabled($inputBackgroundDisabled)
    {
        if (is_null($inputBackgroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable inputBackgroundDisabled cannot be null');
        }
        $this->container['inputBackgroundDisabled'] = $inputBackgroundDisabled;

        return $this;
    }

    /**
     * Gets inputBackgroundHover
     *
     * @return string|null
     */
    public function getInputBackgroundHover()
    {
        return $this->container['inputBackgroundHover'];
    }

    /**
     * Sets inputBackgroundHover
     *
     * @param string|null $inputBackgroundHover inputBackgroundHover
     *
     * @return self
     */
    public function setInputBackgroundHover($inputBackgroundHover)
    {
        if (is_null($inputBackgroundHover)) {
            throw new \InvalidArgumentException('non-nullable inputBackgroundHover cannot be null');
        }
        $this->container['inputBackgroundHover'] = $inputBackgroundHover;

        return $this;
    }

    /**
     * Gets inputBorderDefault
     *
     * @return string|null
     */
    public function getInputBorderDefault()
    {
        return $this->container['inputBorderDefault'];
    }

    /**
     * Sets inputBorderDefault
     *
     * @param string|null $inputBorderDefault inputBorderDefault
     *
     * @return self
     */
    public function setInputBorderDefault($inputBorderDefault)
    {
        if (is_null($inputBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable inputBorderDefault cannot be null');
        }
        $this->container['inputBorderDefault'] = $inputBorderDefault;

        return $this;
    }

    /**
     * Gets inputBorderDisabled
     *
     * @return string|null
     */
    public function getInputBorderDisabled()
    {
        return $this->container['inputBorderDisabled'];
    }

    /**
     * Sets inputBorderDisabled
     *
     * @param string|null $inputBorderDisabled inputBorderDisabled
     *
     * @return self
     */
    public function setInputBorderDisabled($inputBorderDisabled)
    {
        if (is_null($inputBorderDisabled)) {
            throw new \InvalidArgumentException('non-nullable inputBorderDisabled cannot be null');
        }
        $this->container['inputBorderDisabled'] = $inputBorderDisabled;

        return $this;
    }

    /**
     * Gets inputBorderFocus
     *
     * @return string|null
     */
    public function getInputBorderFocus()
    {
        return $this->container['inputBorderFocus'];
    }

    /**
     * Sets inputBorderFocus
     *
     * @param string|null $inputBorderFocus inputBorderFocus
     *
     * @return self
     */
    public function setInputBorderFocus($inputBorderFocus)
    {
        if (is_null($inputBorderFocus)) {
            throw new \InvalidArgumentException('non-nullable inputBorderFocus cannot be null');
        }
        $this->container['inputBorderFocus'] = $inputBorderFocus;

        return $this;
    }

    /**
     * Gets inputBorderHover
     *
     * @return string|null
     */
    public function getInputBorderHover()
    {
        return $this->container['inputBorderHover'];
    }

    /**
     * Sets inputBorderHover
     *
     * @param string|null $inputBorderHover inputBorderHover
     *
     * @return self
     */
    public function setInputBorderHover($inputBorderHover)
    {
        if (is_null($inputBorderHover)) {
            throw new \InvalidArgumentException('non-nullable inputBorderHover cannot be null');
        }
        $this->container['inputBorderHover'] = $inputBorderHover;

        return $this;
    }

    /**
     * Gets inputForegroundDisabled
     *
     * @return string|null
     */
    public function getInputForegroundDisabled()
    {
        return $this->container['inputForegroundDisabled'];
    }

    /**
     * Sets inputForegroundDisabled
     *
     * @param string|null $inputForegroundDisabled inputForegroundDisabled
     *
     * @return self
     */
    public function setInputForegroundDisabled($inputForegroundDisabled)
    {
        if (is_null($inputForegroundDisabled)) {
            throw new \InvalidArgumentException('non-nullable inputForegroundDisabled cannot be null');
        }
        $this->container['inputForegroundDisabled'] = $inputForegroundDisabled;

        return $this;
    }

    /**
     * Gets inputForegroundPrimary
     *
     * @return string|null
     */
    public function getInputForegroundPrimary()
    {
        return $this->container['inputForegroundPrimary'];
    }

    /**
     * Sets inputForegroundPrimary
     *
     * @param string|null $inputForegroundPrimary inputForegroundPrimary
     *
     * @return self
     */
    public function setInputForegroundPrimary($inputForegroundPrimary)
    {
        if (is_null($inputForegroundPrimary)) {
            throw new \InvalidArgumentException('non-nullable inputForegroundPrimary cannot be null');
        }
        $this->container['inputForegroundPrimary'] = $inputForegroundPrimary;

        return $this;
    }

    /**
     * Gets inputForegroundSecondary
     *
     * @return string|null
     */
    public function getInputForegroundSecondary()
    {
        return $this->container['inputForegroundSecondary'];
    }

    /**
     * Sets inputForegroundSecondary
     *
     * @param string|null $inputForegroundSecondary inputForegroundSecondary
     *
     * @return self
     */
    public function setInputForegroundSecondary($inputForegroundSecondary)
    {
        if (is_null($inputForegroundSecondary)) {
            throw new \InvalidArgumentException('non-nullable inputForegroundSecondary cannot be null');
        }
        $this->container['inputForegroundSecondary'] = $inputForegroundSecondary;

        return $this;
    }

    /**
     * Gets inputForegroundTertiary
     *
     * @return string|null
     */
    public function getInputForegroundTertiary()
    {
        return $this->container['inputForegroundTertiary'];
    }

    /**
     * Sets inputForegroundTertiary
     *
     * @param string|null $inputForegroundTertiary inputForegroundTertiary
     *
     * @return self
     */
    public function setInputForegroundTertiary($inputForegroundTertiary)
    {
        if (is_null($inputForegroundTertiary)) {
            throw new \InvalidArgumentException('non-nullable inputForegroundTertiary cannot be null');
        }
        $this->container['inputForegroundTertiary'] = $inputForegroundTertiary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundBrandPrimary
     *
     * @return string|null
     */
    public function getInterfaceBackgroundBrandPrimary()
    {
        return $this->container['interfaceBackgroundBrandPrimary'];
    }

    /**
     * Sets interfaceBackgroundBrandPrimary
     *
     * @param string|null $interfaceBackgroundBrandPrimary interfaceBackgroundBrandPrimary
     *
     * @return self
     */
    public function setInterfaceBackgroundBrandPrimary($interfaceBackgroundBrandPrimary)
    {
        if (is_null($interfaceBackgroundBrandPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundBrandPrimary cannot be null');
        }
        $this->container['interfaceBackgroundBrandPrimary'] = $interfaceBackgroundBrandPrimary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundBrandPrimaryHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundBrandPrimaryHover()
    {
        return $this->container['interfaceBackgroundBrandPrimaryHover'];
    }

    /**
     * Sets interfaceBackgroundBrandPrimaryHover
     *
     * @param string|null $interfaceBackgroundBrandPrimaryHover interfaceBackgroundBrandPrimaryHover
     *
     * @return self
     */
    public function setInterfaceBackgroundBrandPrimaryHover($interfaceBackgroundBrandPrimaryHover)
    {
        if (is_null($interfaceBackgroundBrandPrimaryHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundBrandPrimaryHover cannot be null');
        }
        $this->container['interfaceBackgroundBrandPrimaryHover'] = $interfaceBackgroundBrandPrimaryHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundBrandSecondary
     *
     * @return string|null
     */
    public function getInterfaceBackgroundBrandSecondary()
    {
        return $this->container['interfaceBackgroundBrandSecondary'];
    }

    /**
     * Sets interfaceBackgroundBrandSecondary
     *
     * @param string|null $interfaceBackgroundBrandSecondary interfaceBackgroundBrandSecondary
     *
     * @return self
     */
    public function setInterfaceBackgroundBrandSecondary($interfaceBackgroundBrandSecondary)
    {
        if (is_null($interfaceBackgroundBrandSecondary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundBrandSecondary cannot be null');
        }
        $this->container['interfaceBackgroundBrandSecondary'] = $interfaceBackgroundBrandSecondary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundBrandSecondaryHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundBrandSecondaryHover()
    {
        return $this->container['interfaceBackgroundBrandSecondaryHover'];
    }

    /**
     * Sets interfaceBackgroundBrandSecondaryHover
     *
     * @param string|null $interfaceBackgroundBrandSecondaryHover interfaceBackgroundBrandSecondaryHover
     *
     * @return self
     */
    public function setInterfaceBackgroundBrandSecondaryHover($interfaceBackgroundBrandSecondaryHover)
    {
        if (is_null($interfaceBackgroundBrandSecondaryHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundBrandSecondaryHover cannot be null');
        }
        $this->container['interfaceBackgroundBrandSecondaryHover'] = $interfaceBackgroundBrandSecondaryHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultInverted
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultInverted()
    {
        return $this->container['interfaceBackgroundDefaultInverted'];
    }

    /**
     * Sets interfaceBackgroundDefaultInverted
     *
     * @param string|null $interfaceBackgroundDefaultInverted interfaceBackgroundDefaultInverted
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultInverted($interfaceBackgroundDefaultInverted)
    {
        if (is_null($interfaceBackgroundDefaultInverted)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultInverted cannot be null');
        }
        $this->container['interfaceBackgroundDefaultInverted'] = $interfaceBackgroundDefaultInverted;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultInvertedHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultInvertedHover()
    {
        return $this->container['interfaceBackgroundDefaultInvertedHover'];
    }

    /**
     * Sets interfaceBackgroundDefaultInvertedHover
     *
     * @param string|null $interfaceBackgroundDefaultInvertedHover interfaceBackgroundDefaultInvertedHover
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultInvertedHover($interfaceBackgroundDefaultInvertedHover)
    {
        if (is_null($interfaceBackgroundDefaultInvertedHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultInvertedHover cannot be null');
        }
        $this->container['interfaceBackgroundDefaultInvertedHover'] = $interfaceBackgroundDefaultInvertedHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultNone
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultNone()
    {
        return $this->container['interfaceBackgroundDefaultNone'];
    }

    /**
     * Sets interfaceBackgroundDefaultNone
     *
     * @param string|null $interfaceBackgroundDefaultNone interfaceBackgroundDefaultNone
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultNone($interfaceBackgroundDefaultNone)
    {
        if (is_null($interfaceBackgroundDefaultNone)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultNone cannot be null');
        }
        $this->container['interfaceBackgroundDefaultNone'] = $interfaceBackgroundDefaultNone;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultPrimary
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultPrimary()
    {
        return $this->container['interfaceBackgroundDefaultPrimary'];
    }

    /**
     * Sets interfaceBackgroundDefaultPrimary
     *
     * @param string|null $interfaceBackgroundDefaultPrimary interfaceBackgroundDefaultPrimary
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultPrimary($interfaceBackgroundDefaultPrimary)
    {
        if (is_null($interfaceBackgroundDefaultPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultPrimary cannot be null');
        }
        $this->container['interfaceBackgroundDefaultPrimary'] = $interfaceBackgroundDefaultPrimary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultPrimaryHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultPrimaryHover()
    {
        return $this->container['interfaceBackgroundDefaultPrimaryHover'];
    }

    /**
     * Sets interfaceBackgroundDefaultPrimaryHover
     *
     * @param string|null $interfaceBackgroundDefaultPrimaryHover interfaceBackgroundDefaultPrimaryHover
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultPrimaryHover($interfaceBackgroundDefaultPrimaryHover)
    {
        if (is_null($interfaceBackgroundDefaultPrimaryHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultPrimaryHover cannot be null');
        }
        $this->container['interfaceBackgroundDefaultPrimaryHover'] = $interfaceBackgroundDefaultPrimaryHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultSecondary
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultSecondary()
    {
        return $this->container['interfaceBackgroundDefaultSecondary'];
    }

    /**
     * Sets interfaceBackgroundDefaultSecondary
     *
     * @param string|null $interfaceBackgroundDefaultSecondary interfaceBackgroundDefaultSecondary
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultSecondary($interfaceBackgroundDefaultSecondary)
    {
        if (is_null($interfaceBackgroundDefaultSecondary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultSecondary cannot be null');
        }
        $this->container['interfaceBackgroundDefaultSecondary'] = $interfaceBackgroundDefaultSecondary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultSecondaryHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultSecondaryHover()
    {
        return $this->container['interfaceBackgroundDefaultSecondaryHover'];
    }

    /**
     * Sets interfaceBackgroundDefaultSecondaryHover
     *
     * @param string|null $interfaceBackgroundDefaultSecondaryHover interfaceBackgroundDefaultSecondaryHover
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultSecondaryHover($interfaceBackgroundDefaultSecondaryHover)
    {
        if (is_null($interfaceBackgroundDefaultSecondaryHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultSecondaryHover cannot be null');
        }
        $this->container['interfaceBackgroundDefaultSecondaryHover'] = $interfaceBackgroundDefaultSecondaryHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultTertiary
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultTertiary()
    {
        return $this->container['interfaceBackgroundDefaultTertiary'];
    }

    /**
     * Sets interfaceBackgroundDefaultTertiary
     *
     * @param string|null $interfaceBackgroundDefaultTertiary interfaceBackgroundDefaultTertiary
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultTertiary($interfaceBackgroundDefaultTertiary)
    {
        if (is_null($interfaceBackgroundDefaultTertiary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultTertiary cannot be null');
        }
        $this->container['interfaceBackgroundDefaultTertiary'] = $interfaceBackgroundDefaultTertiary;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDefaultTertiaryHover
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDefaultTertiaryHover()
    {
        return $this->container['interfaceBackgroundDefaultTertiaryHover'];
    }

    /**
     * Sets interfaceBackgroundDefaultTertiaryHover
     *
     * @param string|null $interfaceBackgroundDefaultTertiaryHover interfaceBackgroundDefaultTertiaryHover
     *
     * @return self
     */
    public function setInterfaceBackgroundDefaultTertiaryHover($interfaceBackgroundDefaultTertiaryHover)
    {
        if (is_null($interfaceBackgroundDefaultTertiaryHover)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDefaultTertiaryHover cannot be null');
        }
        $this->container['interfaceBackgroundDefaultTertiaryHover'] = $interfaceBackgroundDefaultTertiaryHover;

        return $this;
    }

    /**
     * Gets interfaceBackgroundDisabledDisabled
     *
     * @return string|null
     */
    public function getInterfaceBackgroundDisabledDisabled()
    {
        return $this->container['interfaceBackgroundDisabledDisabled'];
    }

    /**
     * Sets interfaceBackgroundDisabledDisabled
     *
     * @param string|null $interfaceBackgroundDisabledDisabled interfaceBackgroundDisabledDisabled
     *
     * @return self
     */
    public function setInterfaceBackgroundDisabledDisabled($interfaceBackgroundDisabledDisabled)
    {
        if (is_null($interfaceBackgroundDisabledDisabled)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundDisabledDisabled cannot be null');
        }
        $this->container['interfaceBackgroundDisabledDisabled'] = $interfaceBackgroundDisabledDisabled;

        return $this;
    }

    /**
     * Gets interfaceBackgroundValidationDanger
     *
     * @return string|null
     */
    public function getInterfaceBackgroundValidationDanger()
    {
        return $this->container['interfaceBackgroundValidationDanger'];
    }

    /**
     * Sets interfaceBackgroundValidationDanger
     *
     * @param string|null $interfaceBackgroundValidationDanger interfaceBackgroundValidationDanger
     *
     * @return self
     */
    public function setInterfaceBackgroundValidationDanger($interfaceBackgroundValidationDanger)
    {
        if (is_null($interfaceBackgroundValidationDanger)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundValidationDanger cannot be null');
        }
        $this->container['interfaceBackgroundValidationDanger'] = $interfaceBackgroundValidationDanger;

        return $this;
    }

    /**
     * Gets interfaceBackgroundValidationSuccess
     *
     * @return string|null
     */
    public function getInterfaceBackgroundValidationSuccess()
    {
        return $this->container['interfaceBackgroundValidationSuccess'];
    }

    /**
     * Sets interfaceBackgroundValidationSuccess
     *
     * @param string|null $interfaceBackgroundValidationSuccess interfaceBackgroundValidationSuccess
     *
     * @return self
     */
    public function setInterfaceBackgroundValidationSuccess($interfaceBackgroundValidationSuccess)
    {
        if (is_null($interfaceBackgroundValidationSuccess)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundValidationSuccess cannot be null');
        }
        $this->container['interfaceBackgroundValidationSuccess'] = $interfaceBackgroundValidationSuccess;

        return $this;
    }

    /**
     * Gets interfaceBackgroundValidationWarning
     *
     * @return string|null
     */
    public function getInterfaceBackgroundValidationWarning()
    {
        return $this->container['interfaceBackgroundValidationWarning'];
    }

    /**
     * Sets interfaceBackgroundValidationWarning
     *
     * @param string|null $interfaceBackgroundValidationWarning interfaceBackgroundValidationWarning
     *
     * @return self
     */
    public function setInterfaceBackgroundValidationWarning($interfaceBackgroundValidationWarning)
    {
        if (is_null($interfaceBackgroundValidationWarning)) {
            throw new \InvalidArgumentException('non-nullable interfaceBackgroundValidationWarning cannot be null');
        }
        $this->container['interfaceBackgroundValidationWarning'] = $interfaceBackgroundValidationWarning;

        return $this;
    }

    /**
     * Gets interfaceBorderBrandBrand
     *
     * @return string|null
     */
    public function getInterfaceBorderBrandBrand()
    {
        return $this->container['interfaceBorderBrandBrand'];
    }

    /**
     * Sets interfaceBorderBrandBrand
     *
     * @param string|null $interfaceBorderBrandBrand interfaceBorderBrandBrand
     *
     * @return self
     */
    public function setInterfaceBorderBrandBrand($interfaceBorderBrandBrand)
    {
        if (is_null($interfaceBorderBrandBrand)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderBrandBrand cannot be null');
        }
        $this->container['interfaceBorderBrandBrand'] = $interfaceBorderBrandBrand;

        return $this;
    }

    /**
     * Gets interfaceBorderDefaultInverted
     *
     * @return string|null
     */
    public function getInterfaceBorderDefaultInverted()
    {
        return $this->container['interfaceBorderDefaultInverted'];
    }

    /**
     * Sets interfaceBorderDefaultInverted
     *
     * @param string|null $interfaceBorderDefaultInverted interfaceBorderDefaultInverted
     *
     * @return self
     */
    public function setInterfaceBorderDefaultInverted($interfaceBorderDefaultInverted)
    {
        if (is_null($interfaceBorderDefaultInverted)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderDefaultInverted cannot be null');
        }
        $this->container['interfaceBorderDefaultInverted'] = $interfaceBorderDefaultInverted;

        return $this;
    }

    /**
     * Gets interfaceBorderDefaultNone
     *
     * @return string|null
     */
    public function getInterfaceBorderDefaultNone()
    {
        return $this->container['interfaceBorderDefaultNone'];
    }

    /**
     * Sets interfaceBorderDefaultNone
     *
     * @param string|null $interfaceBorderDefaultNone interfaceBorderDefaultNone
     *
     * @return self
     */
    public function setInterfaceBorderDefaultNone($interfaceBorderDefaultNone)
    {
        if (is_null($interfaceBorderDefaultNone)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderDefaultNone cannot be null');
        }
        $this->container['interfaceBorderDefaultNone'] = $interfaceBorderDefaultNone;

        return $this;
    }

    /**
     * Gets interfaceBorderDefaultPrimary
     *
     * @return string|null
     */
    public function getInterfaceBorderDefaultPrimary()
    {
        return $this->container['interfaceBorderDefaultPrimary'];
    }

    /**
     * Sets interfaceBorderDefaultPrimary
     *
     * @param string|null $interfaceBorderDefaultPrimary interfaceBorderDefaultPrimary
     *
     * @return self
     */
    public function setInterfaceBorderDefaultPrimary($interfaceBorderDefaultPrimary)
    {
        if (is_null($interfaceBorderDefaultPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderDefaultPrimary cannot be null');
        }
        $this->container['interfaceBorderDefaultPrimary'] = $interfaceBorderDefaultPrimary;

        return $this;
    }

    /**
     * Gets interfaceBorderDisabledDisabled
     *
     * @return string|null
     */
    public function getInterfaceBorderDisabledDisabled()
    {
        return $this->container['interfaceBorderDisabledDisabled'];
    }

    /**
     * Sets interfaceBorderDisabledDisabled
     *
     * @param string|null $interfaceBorderDisabledDisabled interfaceBorderDisabledDisabled
     *
     * @return self
     */
    public function setInterfaceBorderDisabledDisabled($interfaceBorderDisabledDisabled)
    {
        if (is_null($interfaceBorderDisabledDisabled)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderDisabledDisabled cannot be null');
        }
        $this->container['interfaceBorderDisabledDisabled'] = $interfaceBorderDisabledDisabled;

        return $this;
    }

    /**
     * Gets interfaceBorderValidationDanger
     *
     * @return string|null
     */
    public function getInterfaceBorderValidationDanger()
    {
        return $this->container['interfaceBorderValidationDanger'];
    }

    /**
     * Sets interfaceBorderValidationDanger
     *
     * @param string|null $interfaceBorderValidationDanger interfaceBorderValidationDanger
     *
     * @return self
     */
    public function setInterfaceBorderValidationDanger($interfaceBorderValidationDanger)
    {
        if (is_null($interfaceBorderValidationDanger)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderValidationDanger cannot be null');
        }
        $this->container['interfaceBorderValidationDanger'] = $interfaceBorderValidationDanger;

        return $this;
    }

    /**
     * Gets interfaceBorderValidationSuccess
     *
     * @return string|null
     */
    public function getInterfaceBorderValidationSuccess()
    {
        return $this->container['interfaceBorderValidationSuccess'];
    }

    /**
     * Sets interfaceBorderValidationSuccess
     *
     * @param string|null $interfaceBorderValidationSuccess interfaceBorderValidationSuccess
     *
     * @return self
     */
    public function setInterfaceBorderValidationSuccess($interfaceBorderValidationSuccess)
    {
        if (is_null($interfaceBorderValidationSuccess)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderValidationSuccess cannot be null');
        }
        $this->container['interfaceBorderValidationSuccess'] = $interfaceBorderValidationSuccess;

        return $this;
    }

    /**
     * Gets interfaceBorderValidationWarning
     *
     * @return string|null
     */
    public function getInterfaceBorderValidationWarning()
    {
        return $this->container['interfaceBorderValidationWarning'];
    }

    /**
     * Sets interfaceBorderValidationWarning
     *
     * @param string|null $interfaceBorderValidationWarning interfaceBorderValidationWarning
     *
     * @return self
     */
    public function setInterfaceBorderValidationWarning($interfaceBorderValidationWarning)
    {
        if (is_null($interfaceBorderValidationWarning)) {
            throw new \InvalidArgumentException('non-nullable interfaceBorderValidationWarning cannot be null');
        }
        $this->container['interfaceBorderValidationWarning'] = $interfaceBorderValidationWarning;

        return $this;
    }

    /**
     * Gets interfaceForegroundBrandOnPrimary
     *
     * @return string|null
     */
    public function getInterfaceForegroundBrandOnPrimary()
    {
        return $this->container['interfaceForegroundBrandOnPrimary'];
    }

    /**
     * Sets interfaceForegroundBrandOnPrimary
     *
     * @param string|null $interfaceForegroundBrandOnPrimary interfaceForegroundBrandOnPrimary
     *
     * @return self
     */
    public function setInterfaceForegroundBrandOnPrimary($interfaceForegroundBrandOnPrimary)
    {
        if (is_null($interfaceForegroundBrandOnPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundBrandOnPrimary cannot be null');
        }
        $this->container['interfaceForegroundBrandOnPrimary'] = $interfaceForegroundBrandOnPrimary;

        return $this;
    }

    /**
     * Gets interfaceForegroundBrandOnSecondary
     *
     * @return string|null
     */
    public function getInterfaceForegroundBrandOnSecondary()
    {
        return $this->container['interfaceForegroundBrandOnSecondary'];
    }

    /**
     * Sets interfaceForegroundBrandOnSecondary
     *
     * @param string|null $interfaceForegroundBrandOnSecondary interfaceForegroundBrandOnSecondary
     *
     * @return self
     */
    public function setInterfaceForegroundBrandOnSecondary($interfaceForegroundBrandOnSecondary)
    {
        if (is_null($interfaceForegroundBrandOnSecondary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundBrandOnSecondary cannot be null');
        }
        $this->container['interfaceForegroundBrandOnSecondary'] = $interfaceForegroundBrandOnSecondary;

        return $this;
    }

    /**
     * Gets interfaceForegroundBrandPrimary
     *
     * @return string|null
     */
    public function getInterfaceForegroundBrandPrimary()
    {
        return $this->container['interfaceForegroundBrandPrimary'];
    }

    /**
     * Sets interfaceForegroundBrandPrimary
     *
     * @param string|null $interfaceForegroundBrandPrimary interfaceForegroundBrandPrimary
     *
     * @return self
     */
    public function setInterfaceForegroundBrandPrimary($interfaceForegroundBrandPrimary)
    {
        if (is_null($interfaceForegroundBrandPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundBrandPrimary cannot be null');
        }
        $this->container['interfaceForegroundBrandPrimary'] = $interfaceForegroundBrandPrimary;

        return $this;
    }

    /**
     * Gets interfaceForegroundBrandSecondary
     *
     * @return string|null
     */
    public function getInterfaceForegroundBrandSecondary()
    {
        return $this->container['interfaceForegroundBrandSecondary'];
    }

    /**
     * Sets interfaceForegroundBrandSecondary
     *
     * @param string|null $interfaceForegroundBrandSecondary interfaceForegroundBrandSecondary
     *
     * @return self
     */
    public function setInterfaceForegroundBrandSecondary($interfaceForegroundBrandSecondary)
    {
        if (is_null($interfaceForegroundBrandSecondary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundBrandSecondary cannot be null');
        }
        $this->container['interfaceForegroundBrandSecondary'] = $interfaceForegroundBrandSecondary;

        return $this;
    }

    /**
     * Gets interfaceForegroundDefaultInverted
     *
     * @return string|null
     */
    public function getInterfaceForegroundDefaultInverted()
    {
        return $this->container['interfaceForegroundDefaultInverted'];
    }

    /**
     * Sets interfaceForegroundDefaultInverted
     *
     * @param string|null $interfaceForegroundDefaultInverted interfaceForegroundDefaultInverted
     *
     * @return self
     */
    public function setInterfaceForegroundDefaultInverted($interfaceForegroundDefaultInverted)
    {
        if (is_null($interfaceForegroundDefaultInverted)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDefaultInverted cannot be null');
        }
        $this->container['interfaceForegroundDefaultInverted'] = $interfaceForegroundDefaultInverted;

        return $this;
    }

    /**
     * Gets interfaceForegroundDefaultPrimary
     *
     * @return string|null
     */
    public function getInterfaceForegroundDefaultPrimary()
    {
        return $this->container['interfaceForegroundDefaultPrimary'];
    }

    /**
     * Sets interfaceForegroundDefaultPrimary
     *
     * @param string|null $interfaceForegroundDefaultPrimary interfaceForegroundDefaultPrimary
     *
     * @return self
     */
    public function setInterfaceForegroundDefaultPrimary($interfaceForegroundDefaultPrimary)
    {
        if (is_null($interfaceForegroundDefaultPrimary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDefaultPrimary cannot be null');
        }
        $this->container['interfaceForegroundDefaultPrimary'] = $interfaceForegroundDefaultPrimary;

        return $this;
    }

    /**
     * Gets interfaceForegroundDefaultSecondary
     *
     * @return string|null
     */
    public function getInterfaceForegroundDefaultSecondary()
    {
        return $this->container['interfaceForegroundDefaultSecondary'];
    }

    /**
     * Sets interfaceForegroundDefaultSecondary
     *
     * @param string|null $interfaceForegroundDefaultSecondary interfaceForegroundDefaultSecondary
     *
     * @return self
     */
    public function setInterfaceForegroundDefaultSecondary($interfaceForegroundDefaultSecondary)
    {
        if (is_null($interfaceForegroundDefaultSecondary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDefaultSecondary cannot be null');
        }
        $this->container['interfaceForegroundDefaultSecondary'] = $interfaceForegroundDefaultSecondary;

        return $this;
    }

    /**
     * Gets interfaceForegroundDefaultTertiary
     *
     * @return string|null
     */
    public function getInterfaceForegroundDefaultTertiary()
    {
        return $this->container['interfaceForegroundDefaultTertiary'];
    }

    /**
     * Sets interfaceForegroundDefaultTertiary
     *
     * @param string|null $interfaceForegroundDefaultTertiary interfaceForegroundDefaultTertiary
     *
     * @return self
     */
    public function setInterfaceForegroundDefaultTertiary($interfaceForegroundDefaultTertiary)
    {
        if (is_null($interfaceForegroundDefaultTertiary)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDefaultTertiary cannot be null');
        }
        $this->container['interfaceForegroundDefaultTertiary'] = $interfaceForegroundDefaultTertiary;

        return $this;
    }

    /**
     * Gets interfaceForegroundDisabledDisabled
     *
     * @return string|null
     */
    public function getInterfaceForegroundDisabledDisabled()
    {
        return $this->container['interfaceForegroundDisabledDisabled'];
    }

    /**
     * Sets interfaceForegroundDisabledDisabled
     *
     * @param string|null $interfaceForegroundDisabledDisabled interfaceForegroundDisabledDisabled
     *
     * @return self
     */
    public function setInterfaceForegroundDisabledDisabled($interfaceForegroundDisabledDisabled)
    {
        if (is_null($interfaceForegroundDisabledDisabled)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDisabledDisabled cannot be null');
        }
        $this->container['interfaceForegroundDisabledDisabled'] = $interfaceForegroundDisabledDisabled;

        return $this;
    }

    /**
     * Gets interfaceForegroundDisabledOnDisabled
     *
     * @return string|null
     */
    public function getInterfaceForegroundDisabledOnDisabled()
    {
        return $this->container['interfaceForegroundDisabledOnDisabled'];
    }

    /**
     * Sets interfaceForegroundDisabledOnDisabled
     *
     * @param string|null $interfaceForegroundDisabledOnDisabled interfaceForegroundDisabledOnDisabled
     *
     * @return self
     */
    public function setInterfaceForegroundDisabledOnDisabled($interfaceForegroundDisabledOnDisabled)
    {
        if (is_null($interfaceForegroundDisabledOnDisabled)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundDisabledOnDisabled cannot be null');
        }
        $this->container['interfaceForegroundDisabledOnDisabled'] = $interfaceForegroundDisabledOnDisabled;

        return $this;
    }

    /**
     * Gets interfaceForegroundValidationDanger
     *
     * @return string|null
     */
    public function getInterfaceForegroundValidationDanger()
    {
        return $this->container['interfaceForegroundValidationDanger'];
    }

    /**
     * Sets interfaceForegroundValidationDanger
     *
     * @param string|null $interfaceForegroundValidationDanger interfaceForegroundValidationDanger
     *
     * @return self
     */
    public function setInterfaceForegroundValidationDanger($interfaceForegroundValidationDanger)
    {
        if (is_null($interfaceForegroundValidationDanger)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundValidationDanger cannot be null');
        }
        $this->container['interfaceForegroundValidationDanger'] = $interfaceForegroundValidationDanger;

        return $this;
    }

    /**
     * Gets interfaceForegroundValidationSuccess
     *
     * @return string|null
     */
    public function getInterfaceForegroundValidationSuccess()
    {
        return $this->container['interfaceForegroundValidationSuccess'];
    }

    /**
     * Sets interfaceForegroundValidationSuccess
     *
     * @param string|null $interfaceForegroundValidationSuccess interfaceForegroundValidationSuccess
     *
     * @return self
     */
    public function setInterfaceForegroundValidationSuccess($interfaceForegroundValidationSuccess)
    {
        if (is_null($interfaceForegroundValidationSuccess)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundValidationSuccess cannot be null');
        }
        $this->container['interfaceForegroundValidationSuccess'] = $interfaceForegroundValidationSuccess;

        return $this;
    }

    /**
     * Gets interfaceForegroundValidationWarning
     *
     * @return string|null
     */
    public function getInterfaceForegroundValidationWarning()
    {
        return $this->container['interfaceForegroundValidationWarning'];
    }

    /**
     * Sets interfaceForegroundValidationWarning
     *
     * @param string|null $interfaceForegroundValidationWarning interfaceForegroundValidationWarning
     *
     * @return self
     */
    public function setInterfaceForegroundValidationWarning($interfaceForegroundValidationWarning)
    {
        if (is_null($interfaceForegroundValidationWarning)) {
            throw new \InvalidArgumentException('non-nullable interfaceForegroundValidationWarning cannot be null');
        }
        $this->container['interfaceForegroundValidationWarning'] = $interfaceForegroundValidationWarning;

        return $this;
    }

    /**
     * Gets oryBackgroundDefault
     *
     * @return string|null
     */
    public function getOryBackgroundDefault()
    {
        return $this->container['oryBackgroundDefault'];
    }

    /**
     * Sets oryBackgroundDefault
     *
     * @param string|null $oryBackgroundDefault oryBackgroundDefault
     *
     * @return self
     */
    public function setOryBackgroundDefault($oryBackgroundDefault)
    {
        if (is_null($oryBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable oryBackgroundDefault cannot be null');
        }
        $this->container['oryBackgroundDefault'] = $oryBackgroundDefault;

        return $this;
    }

    /**
     * Gets oryBorderDefault
     *
     * @return string|null
     */
    public function getOryBorderDefault()
    {
        return $this->container['oryBorderDefault'];
    }

    /**
     * Sets oryBorderDefault
     *
     * @param string|null $oryBorderDefault oryBorderDefault
     *
     * @return self
     */
    public function setOryBorderDefault($oryBorderDefault)
    {
        if (is_null($oryBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable oryBorderDefault cannot be null');
        }
        $this->container['oryBorderDefault'] = $oryBorderDefault;

        return $this;
    }

    /**
     * Gets oryForegroundDefault
     *
     * @return string|null
     */
    public function getOryForegroundDefault()
    {
        return $this->container['oryForegroundDefault'];
    }

    /**
     * Sets oryForegroundDefault
     *
     * @param string|null $oryForegroundDefault oryForegroundDefault
     *
     * @return self
     */
    public function setOryForegroundDefault($oryForegroundDefault)
    {
        if (is_null($oryForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable oryForegroundDefault cannot be null');
        }
        $this->container['oryForegroundDefault'] = $oryForegroundDefault;

        return $this;
    }

    /**
     * Gets radioBackgroundChecked
     *
     * @return string|null
     */
    public function getRadioBackgroundChecked()
    {
        return $this->container['radioBackgroundChecked'];
    }

    /**
     * Sets radioBackgroundChecked
     *
     * @param string|null $radioBackgroundChecked radioBackgroundChecked
     *
     * @return self
     */
    public function setRadioBackgroundChecked($radioBackgroundChecked)
    {
        if (is_null($radioBackgroundChecked)) {
            throw new \InvalidArgumentException('non-nullable radioBackgroundChecked cannot be null');
        }
        $this->container['radioBackgroundChecked'] = $radioBackgroundChecked;

        return $this;
    }

    /**
     * Gets radioBackgroundDefault
     *
     * @return string|null
     */
    public function getRadioBackgroundDefault()
    {
        return $this->container['radioBackgroundDefault'];
    }

    /**
     * Sets radioBackgroundDefault
     *
     * @param string|null $radioBackgroundDefault radioBackgroundDefault
     *
     * @return self
     */
    public function setRadioBackgroundDefault($radioBackgroundDefault)
    {
        if (is_null($radioBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable radioBackgroundDefault cannot be null');
        }
        $this->container['radioBackgroundDefault'] = $radioBackgroundDefault;

        return $this;
    }

    /**
     * Gets radioBorderChecked
     *
     * @return string|null
     */
    public function getRadioBorderChecked()
    {
        return $this->container['radioBorderChecked'];
    }

    /**
     * Sets radioBorderChecked
     *
     * @param string|null $radioBorderChecked radioBorderChecked
     *
     * @return self
     */
    public function setRadioBorderChecked($radioBorderChecked)
    {
        if (is_null($radioBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable radioBorderChecked cannot be null');
        }
        $this->container['radioBorderChecked'] = $radioBorderChecked;

        return $this;
    }

    /**
     * Gets radioBorderDefault
     *
     * @return string|null
     */
    public function getRadioBorderDefault()
    {
        return $this->container['radioBorderDefault'];
    }

    /**
     * Sets radioBorderDefault
     *
     * @param string|null $radioBorderDefault radioBorderDefault
     *
     * @return self
     */
    public function setRadioBorderDefault($radioBorderDefault)
    {
        if (is_null($radioBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable radioBorderDefault cannot be null');
        }
        $this->container['radioBorderDefault'] = $radioBorderDefault;

        return $this;
    }

    /**
     * Gets radioForegroundChecked
     *
     * @return string|null
     */
    public function getRadioForegroundChecked()
    {
        return $this->container['radioForegroundChecked'];
    }

    /**
     * Sets radioForegroundChecked
     *
     * @param string|null $radioForegroundChecked radioForegroundChecked
     *
     * @return self
     */
    public function setRadioForegroundChecked($radioForegroundChecked)
    {
        if (is_null($radioForegroundChecked)) {
            throw new \InvalidArgumentException('non-nullable radioForegroundChecked cannot be null');
        }
        $this->container['radioForegroundChecked'] = $radioForegroundChecked;

        return $this;
    }

    /**
     * Gets radioForegroundDefault
     *
     * @return string|null
     */
    public function getRadioForegroundDefault()
    {
        return $this->container['radioForegroundDefault'];
    }

    /**
     * Sets radioForegroundDefault
     *
     * @param string|null $radioForegroundDefault radioForegroundDefault
     *
     * @return self
     */
    public function setRadioForegroundDefault($radioForegroundDefault)
    {
        if (is_null($radioForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable radioForegroundDefault cannot be null');
        }
        $this->container['radioForegroundDefault'] = $radioForegroundDefault;

        return $this;
    }

    /**
     * Gets toggleBackgroundChecked
     *
     * @return string|null
     */
    public function getToggleBackgroundChecked()
    {
        return $this->container['toggleBackgroundChecked'];
    }

    /**
     * Sets toggleBackgroundChecked
     *
     * @param string|null $toggleBackgroundChecked toggleBackgroundChecked
     *
     * @return self
     */
    public function setToggleBackgroundChecked($toggleBackgroundChecked)
    {
        if (is_null($toggleBackgroundChecked)) {
            throw new \InvalidArgumentException('non-nullable toggleBackgroundChecked cannot be null');
        }
        $this->container['toggleBackgroundChecked'] = $toggleBackgroundChecked;

        return $this;
    }

    /**
     * Gets toggleBackgroundDefault
     *
     * @return string|null
     */
    public function getToggleBackgroundDefault()
    {
        return $this->container['toggleBackgroundDefault'];
    }

    /**
     * Sets toggleBackgroundDefault
     *
     * @param string|null $toggleBackgroundDefault toggleBackgroundDefault
     *
     * @return self
     */
    public function setToggleBackgroundDefault($toggleBackgroundDefault)
    {
        if (is_null($toggleBackgroundDefault)) {
            throw new \InvalidArgumentException('non-nullable toggleBackgroundDefault cannot be null');
        }
        $this->container['toggleBackgroundDefault'] = $toggleBackgroundDefault;

        return $this;
    }

    /**
     * Gets toggleBorderChecked
     *
     * @return string|null
     */
    public function getToggleBorderChecked()
    {
        return $this->container['toggleBorderChecked'];
    }

    /**
     * Sets toggleBorderChecked
     *
     * @param string|null $toggleBorderChecked toggleBorderChecked
     *
     * @return self
     */
    public function setToggleBorderChecked($toggleBorderChecked)
    {
        if (is_null($toggleBorderChecked)) {
            throw new \InvalidArgumentException('non-nullable toggleBorderChecked cannot be null');
        }
        $this->container['toggleBorderChecked'] = $toggleBorderChecked;

        return $this;
    }

    /**
     * Gets toggleBorderDefault
     *
     * @return string|null
     */
    public function getToggleBorderDefault()
    {
        return $this->container['toggleBorderDefault'];
    }

    /**
     * Sets toggleBorderDefault
     *
     * @param string|null $toggleBorderDefault toggleBorderDefault
     *
     * @return self
     */
    public function setToggleBorderDefault($toggleBorderDefault)
    {
        if (is_null($toggleBorderDefault)) {
            throw new \InvalidArgumentException('non-nullable toggleBorderDefault cannot be null');
        }
        $this->container['toggleBorderDefault'] = $toggleBorderDefault;

        return $this;
    }

    /**
     * Gets toggleForegroundChecked
     *
     * @return string|null
     */
    public function getToggleForegroundChecked()
    {
        return $this->container['toggleForegroundChecked'];
    }

    /**
     * Sets toggleForegroundChecked
     *
     * @param string|null $toggleForegroundChecked toggleForegroundChecked
     *
     * @return self
     */
    public function setToggleForegroundChecked($toggleForegroundChecked)
    {
        if (is_null($toggleForegroundChecked)) {
            throw new \InvalidArgumentException('non-nullable toggleForegroundChecked cannot be null');
        }
        $this->container['toggleForegroundChecked'] = $toggleForegroundChecked;

        return $this;
    }

    /**
     * Gets toggleForegroundDefault
     *
     * @return string|null
     */
    public function getToggleForegroundDefault()
    {
        return $this->container['toggleForegroundDefault'];
    }

    /**
     * Sets toggleForegroundDefault
     *
     * @param string|null $toggleForegroundDefault toggleForegroundDefault
     *
     * @return self
     */
    public function setToggleForegroundDefault($toggleForegroundDefault)
    {
        if (is_null($toggleForegroundDefault)) {
            throw new \InvalidArgumentException('non-nullable toggleForegroundDefault cannot be null');
        }
        $this->container['toggleForegroundDefault'] = $toggleForegroundDefault;

        return $this;
    }

    /**
     * Gets ui100
     *
     * @return string|null
     */
    public function getUi100()
    {
        return $this->container['ui100'];
    }

    /**
     * Sets ui100
     *
     * @param string|null $ui100 ui100
     *
     * @return self
     */
    public function setUi100($ui100)
    {
        if (is_null($ui100)) {
            throw new \InvalidArgumentException('non-nullable ui100 cannot be null');
        }
        $this->container['ui100'] = $ui100;

        return $this;
    }

    /**
     * Gets ui200
     *
     * @return string|null
     */
    public function getUi200()
    {
        return $this->container['ui200'];
    }

    /**
     * Sets ui200
     *
     * @param string|null $ui200 ui200
     *
     * @return self
     */
    public function setUi200($ui200)
    {
        if (is_null($ui200)) {
            throw new \InvalidArgumentException('non-nullable ui200 cannot be null');
        }
        $this->container['ui200'] = $ui200;

        return $this;
    }

    /**
     * Gets ui300
     *
     * @return string|null
     */
    public function getUi300()
    {
        return $this->container['ui300'];
    }

    /**
     * Sets ui300
     *
     * @param string|null $ui300 ui300
     *
     * @return self
     */
    public function setUi300($ui300)
    {
        if (is_null($ui300)) {
            throw new \InvalidArgumentException('non-nullable ui300 cannot be null');
        }
        $this->container['ui300'] = $ui300;

        return $this;
    }

    /**
     * Gets ui400
     *
     * @return string|null
     */
    public function getUi400()
    {
        return $this->container['ui400'];
    }

    /**
     * Sets ui400
     *
     * @param string|null $ui400 ui400
     *
     * @return self
     */
    public function setUi400($ui400)
    {
        if (is_null($ui400)) {
            throw new \InvalidArgumentException('non-nullable ui400 cannot be null');
        }
        $this->container['ui400'] = $ui400;

        return $this;
    }

    /**
     * Gets ui50
     *
     * @return string|null
     */
    public function getUi50()
    {
        return $this->container['ui50'];
    }

    /**
     * Sets ui50
     *
     * @param string|null $ui50 ui50
     *
     * @return self
     */
    public function setUi50($ui50)
    {
        if (is_null($ui50)) {
            throw new \InvalidArgumentException('non-nullable ui50 cannot be null');
        }
        $this->container['ui50'] = $ui50;

        return $this;
    }

    /**
     * Gets ui500
     *
     * @return string|null
     */
    public function getUi500()
    {
        return $this->container['ui500'];
    }

    /**
     * Sets ui500
     *
     * @param string|null $ui500 ui500
     *
     * @return self
     */
    public function setUi500($ui500)
    {
        if (is_null($ui500)) {
            throw new \InvalidArgumentException('non-nullable ui500 cannot be null');
        }
        $this->container['ui500'] = $ui500;

        return $this;
    }

    /**
     * Gets ui600
     *
     * @return string|null
     */
    public function getUi600()
    {
        return $this->container['ui600'];
    }

    /**
     * Sets ui600
     *
     * @param string|null $ui600 ui600
     *
     * @return self
     */
    public function setUi600($ui600)
    {
        if (is_null($ui600)) {
            throw new \InvalidArgumentException('non-nullable ui600 cannot be null');
        }
        $this->container['ui600'] = $ui600;

        return $this;
    }

    /**
     * Gets ui700
     *
     * @return string|null
     */
    public function getUi700()
    {
        return $this->container['ui700'];
    }

    /**
     * Sets ui700
     *
     * @param string|null $ui700 ui700
     *
     * @return self
     */
    public function setUi700($ui700)
    {
        if (is_null($ui700)) {
            throw new \InvalidArgumentException('non-nullable ui700 cannot be null');
        }
        $this->container['ui700'] = $ui700;

        return $this;
    }

    /**
     * Gets ui800
     *
     * @return string|null
     */
    public function getUi800()
    {
        return $this->container['ui800'];
    }

    /**
     * Sets ui800
     *
     * @param string|null $ui800 ui800
     *
     * @return self
     */
    public function setUi800($ui800)
    {
        if (is_null($ui800)) {
            throw new \InvalidArgumentException('non-nullable ui800 cannot be null');
        }
        $this->container['ui800'] = $ui800;

        return $this;
    }

    /**
     * Gets ui900
     *
     * @return string|null
     */
    public function getUi900()
    {
        return $this->container['ui900'];
    }

    /**
     * Sets ui900
     *
     * @param string|null $ui900 ui900
     *
     * @return self
     */
    public function setUi900($ui900)
    {
        if (is_null($ui900)) {
            throw new \InvalidArgumentException('non-nullable ui900 cannot be null');
        }
        $this->container['ui900'] = $ui900;

        return $this;
    }

    /**
     * Gets ui950
     *
     * @return string|null
     */
    public function getUi950()
    {
        return $this->container['ui950'];
    }

    /**
     * Sets ui950
     *
     * @param string|null $ui950 ui950
     *
     * @return self
     */
    public function setUi950($ui950)
    {
        if (is_null($ui950)) {
            throw new \InvalidArgumentException('non-nullable ui950 cannot be null');
        }
        $this->container['ui950'] = $ui950;

        return $this;
    }

    /**
     * Gets uiBlack
     *
     * @return string|null
     */
    public function getUiBlack()
    {
        return $this->container['uiBlack'];
    }

    /**
     * Sets uiBlack
     *
     * @param string|null $uiBlack uiBlack
     *
     * @return self
     */
    public function setUiBlack($uiBlack)
    {
        if (is_null($uiBlack)) {
            throw new \InvalidArgumentException('non-nullable uiBlack cannot be null');
        }
        $this->container['uiBlack'] = $uiBlack;

        return $this;
    }

    /**
     * Gets uiDanger
     *
     * @return string|null
     */
    public function getUiDanger()
    {
        return $this->container['uiDanger'];
    }

    /**
     * Sets uiDanger
     *
     * @param string|null $uiDanger uiDanger
     *
     * @return self
     */
    public function setUiDanger($uiDanger)
    {
        if (is_null($uiDanger)) {
            throw new \InvalidArgumentException('non-nullable uiDanger cannot be null');
        }
        $this->container['uiDanger'] = $uiDanger;

        return $this;
    }

    /**
     * Gets uiSuccess
     *
     * @return string|null
     */
    public function getUiSuccess()
    {
        return $this->container['uiSuccess'];
    }

    /**
     * Sets uiSuccess
     *
     * @param string|null $uiSuccess uiSuccess
     *
     * @return self
     */
    public function setUiSuccess($uiSuccess)
    {
        if (is_null($uiSuccess)) {
            throw new \InvalidArgumentException('non-nullable uiSuccess cannot be null');
        }
        $this->container['uiSuccess'] = $uiSuccess;

        return $this;
    }

    /**
     * Gets uiTransparent
     *
     * @return string|null
     */
    public function getUiTransparent()
    {
        return $this->container['uiTransparent'];
    }

    /**
     * Sets uiTransparent
     *
     * @param string|null $uiTransparent uiTransparent
     *
     * @return self
     */
    public function setUiTransparent($uiTransparent)
    {
        if (is_null($uiTransparent)) {
            throw new \InvalidArgumentException('non-nullable uiTransparent cannot be null');
        }
        $this->container['uiTransparent'] = $uiTransparent;

        return $this;
    }

    /**
     * Gets uiWarning
     *
     * @return string|null
     */
    public function getUiWarning()
    {
        return $this->container['uiWarning'];
    }

    /**
     * Sets uiWarning
     *
     * @param string|null $uiWarning uiWarning
     *
     * @return self
     */
    public function setUiWarning($uiWarning)
    {
        if (is_null($uiWarning)) {
            throw new \InvalidArgumentException('non-nullable uiWarning cannot be null');
        }
        $this->container['uiWarning'] = $uiWarning;

        return $this;
    }

    /**
     * Gets uiWhite
     *
     * @return string|null
     */
    public function getUiWhite()
    {
        return $this->container['uiWhite'];
    }

    /**
     * Sets uiWhite
     *
     * @param string|null $uiWhite uiWhite
     *
     * @return self
     */
    public function setUiWhite($uiWhite)
    {
        if (is_null($uiWhite)) {
            throw new \InvalidArgumentException('non-nullable uiWhite cannot be null');
        }
        $this->container['uiWhite'] = $uiWhite;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


