<?php
/**
 * OAuth2Client
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * The version of the OpenAPI document: v1.12.1
 * Contact: support@ory.sh
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Client\Model;

use \ArrayAccess;
use \Ory\Client\ObjectSerializer;

/**
 * OAuth2Client Class Doc Comment
 *
 * @category Class
 * @description OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 * @package  Ory\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OAuth2Client implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'oAuth2Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accessTokenStrategy' => 'string',
        'allowedCorsOrigins' => 'string[]',
        'audience' => 'string[]',
        'authorizationCodeGrantAccessTokenLifespan' => 'string',
        'authorizationCodeGrantIdTokenLifespan' => 'string',
        'authorizationCodeGrantRefreshTokenLifespan' => 'string',
        'backchannelLogoutSessionRequired' => 'bool',
        'backchannelLogoutUri' => 'string',
        'clientCredentialsGrantAccessTokenLifespan' => 'string',
        'clientId' => 'string',
        'clientName' => 'string',
        'clientSecret' => 'string',
        'clientSecretExpiresAt' => 'int',
        'clientUri' => 'string',
        'contacts' => 'string[]',
        'createdAt' => '\DateTime',
        'frontchannelLogoutSessionRequired' => 'bool',
        'frontchannelLogoutUri' => 'string',
        'grantTypes' => 'string[]',
        'implicitGrantAccessTokenLifespan' => 'string',
        'implicitGrantIdTokenLifespan' => 'string',
        'jwks' => 'mixed',
        'jwksUri' => 'string',
        'jwtBearerGrantAccessTokenLifespan' => 'string',
        'logoUri' => 'string',
        'metadata' => 'object',
        'owner' => 'string',
        'policyUri' => 'string',
        'postLogoutRedirectUris' => 'string[]',
        'redirectUris' => 'string[]',
        'refreshTokenGrantAccessTokenLifespan' => 'string',
        'refreshTokenGrantIdTokenLifespan' => 'string',
        'refreshTokenGrantRefreshTokenLifespan' => 'string',
        'registrationAccessToken' => 'string',
        'registrationClientUri' => 'string',
        'requestObjectSigningAlg' => 'string',
        'requestUris' => 'string[]',
        'responseTypes' => 'string[]',
        'scope' => 'string',
        'sectorIdentifierUri' => 'string',
        'skipConsent' => 'bool',
        'skipLogoutConsent' => 'bool',
        'subjectType' => 'string',
        'tokenEndpointAuthMethod' => 'string',
        'tokenEndpointAuthSigningAlg' => 'string',
        'tosUri' => 'string',
        'updatedAt' => '\DateTime',
        'userinfoSignedResponseAlg' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accessTokenStrategy' => null,
        'allowedCorsOrigins' => null,
        'audience' => null,
        'authorizationCodeGrantAccessTokenLifespan' => null,
        'authorizationCodeGrantIdTokenLifespan' => null,
        'authorizationCodeGrantRefreshTokenLifespan' => null,
        'backchannelLogoutSessionRequired' => null,
        'backchannelLogoutUri' => null,
        'clientCredentialsGrantAccessTokenLifespan' => null,
        'clientId' => null,
        'clientName' => null,
        'clientSecret' => null,
        'clientSecretExpiresAt' => 'int64',
        'clientUri' => null,
        'contacts' => null,
        'createdAt' => 'date-time',
        'frontchannelLogoutSessionRequired' => null,
        'frontchannelLogoutUri' => null,
        'grantTypes' => null,
        'implicitGrantAccessTokenLifespan' => null,
        'implicitGrantIdTokenLifespan' => null,
        'jwks' => null,
        'jwksUri' => null,
        'jwtBearerGrantAccessTokenLifespan' => null,
        'logoUri' => null,
        'metadata' => null,
        'owner' => null,
        'policyUri' => null,
        'postLogoutRedirectUris' => null,
        'redirectUris' => null,
        'refreshTokenGrantAccessTokenLifespan' => null,
        'refreshTokenGrantIdTokenLifespan' => null,
        'refreshTokenGrantRefreshTokenLifespan' => null,
        'registrationAccessToken' => null,
        'registrationClientUri' => null,
        'requestObjectSigningAlg' => null,
        'requestUris' => null,
        'responseTypes' => null,
        'scope' => null,
        'sectorIdentifierUri' => null,
        'skipConsent' => null,
        'skipLogoutConsent' => null,
        'subjectType' => null,
        'tokenEndpointAuthMethod' => null,
        'tokenEndpointAuthSigningAlg' => null,
        'tosUri' => null,
        'updatedAt' => 'date-time',
        'userinfoSignedResponseAlg' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accessTokenStrategy' => false,
        'allowedCorsOrigins' => false,
        'audience' => false,
        'authorizationCodeGrantAccessTokenLifespan' => true,
        'authorizationCodeGrantIdTokenLifespan' => true,
        'authorizationCodeGrantRefreshTokenLifespan' => true,
        'backchannelLogoutSessionRequired' => false,
        'backchannelLogoutUri' => false,
        'clientCredentialsGrantAccessTokenLifespan' => true,
        'clientId' => false,
        'clientName' => false,
        'clientSecret' => false,
        'clientSecretExpiresAt' => false,
        'clientUri' => false,
        'contacts' => false,
        'createdAt' => false,
        'frontchannelLogoutSessionRequired' => false,
        'frontchannelLogoutUri' => false,
        'grantTypes' => false,
        'implicitGrantAccessTokenLifespan' => true,
        'implicitGrantIdTokenLifespan' => true,
        'jwks' => true,
        'jwksUri' => false,
        'jwtBearerGrantAccessTokenLifespan' => true,
        'logoUri' => false,
        'metadata' => false,
        'owner' => false,
        'policyUri' => false,
        'postLogoutRedirectUris' => false,
        'redirectUris' => false,
        'refreshTokenGrantAccessTokenLifespan' => true,
        'refreshTokenGrantIdTokenLifespan' => true,
        'refreshTokenGrantRefreshTokenLifespan' => true,
        'registrationAccessToken' => false,
        'registrationClientUri' => false,
        'requestObjectSigningAlg' => false,
        'requestUris' => false,
        'responseTypes' => false,
        'scope' => false,
        'sectorIdentifierUri' => false,
        'skipConsent' => false,
        'skipLogoutConsent' => false,
        'subjectType' => false,
        'tokenEndpointAuthMethod' => false,
        'tokenEndpointAuthSigningAlg' => false,
        'tosUri' => false,
        'updatedAt' => false,
        'userinfoSignedResponseAlg' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessTokenStrategy' => 'access_token_strategy',
        'allowedCorsOrigins' => 'allowed_cors_origins',
        'audience' => 'audience',
        'authorizationCodeGrantAccessTokenLifespan' => 'authorization_code_grant_access_token_lifespan',
        'authorizationCodeGrantIdTokenLifespan' => 'authorization_code_grant_id_token_lifespan',
        'authorizationCodeGrantRefreshTokenLifespan' => 'authorization_code_grant_refresh_token_lifespan',
        'backchannelLogoutSessionRequired' => 'backchannel_logout_session_required',
        'backchannelLogoutUri' => 'backchannel_logout_uri',
        'clientCredentialsGrantAccessTokenLifespan' => 'client_credentials_grant_access_token_lifespan',
        'clientId' => 'client_id',
        'clientName' => 'client_name',
        'clientSecret' => 'client_secret',
        'clientSecretExpiresAt' => 'client_secret_expires_at',
        'clientUri' => 'client_uri',
        'contacts' => 'contacts',
        'createdAt' => 'created_at',
        'frontchannelLogoutSessionRequired' => 'frontchannel_logout_session_required',
        'frontchannelLogoutUri' => 'frontchannel_logout_uri',
        'grantTypes' => 'grant_types',
        'implicitGrantAccessTokenLifespan' => 'implicit_grant_access_token_lifespan',
        'implicitGrantIdTokenLifespan' => 'implicit_grant_id_token_lifespan',
        'jwks' => 'jwks',
        'jwksUri' => 'jwks_uri',
        'jwtBearerGrantAccessTokenLifespan' => 'jwt_bearer_grant_access_token_lifespan',
        'logoUri' => 'logo_uri',
        'metadata' => 'metadata',
        'owner' => 'owner',
        'policyUri' => 'policy_uri',
        'postLogoutRedirectUris' => 'post_logout_redirect_uris',
        'redirectUris' => 'redirect_uris',
        'refreshTokenGrantAccessTokenLifespan' => 'refresh_token_grant_access_token_lifespan',
        'refreshTokenGrantIdTokenLifespan' => 'refresh_token_grant_id_token_lifespan',
        'refreshTokenGrantRefreshTokenLifespan' => 'refresh_token_grant_refresh_token_lifespan',
        'registrationAccessToken' => 'registration_access_token',
        'registrationClientUri' => 'registration_client_uri',
        'requestObjectSigningAlg' => 'request_object_signing_alg',
        'requestUris' => 'request_uris',
        'responseTypes' => 'response_types',
        'scope' => 'scope',
        'sectorIdentifierUri' => 'sector_identifier_uri',
        'skipConsent' => 'skip_consent',
        'skipLogoutConsent' => 'skip_logout_consent',
        'subjectType' => 'subject_type',
        'tokenEndpointAuthMethod' => 'token_endpoint_auth_method',
        'tokenEndpointAuthSigningAlg' => 'token_endpoint_auth_signing_alg',
        'tosUri' => 'tos_uri',
        'updatedAt' => 'updated_at',
        'userinfoSignedResponseAlg' => 'userinfo_signed_response_alg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessTokenStrategy' => 'setAccessTokenStrategy',
        'allowedCorsOrigins' => 'setAllowedCorsOrigins',
        'audience' => 'setAudience',
        'authorizationCodeGrantAccessTokenLifespan' => 'setAuthorizationCodeGrantAccessTokenLifespan',
        'authorizationCodeGrantIdTokenLifespan' => 'setAuthorizationCodeGrantIdTokenLifespan',
        'authorizationCodeGrantRefreshTokenLifespan' => 'setAuthorizationCodeGrantRefreshTokenLifespan',
        'backchannelLogoutSessionRequired' => 'setBackchannelLogoutSessionRequired',
        'backchannelLogoutUri' => 'setBackchannelLogoutUri',
        'clientCredentialsGrantAccessTokenLifespan' => 'setClientCredentialsGrantAccessTokenLifespan',
        'clientId' => 'setClientId',
        'clientName' => 'setClientName',
        'clientSecret' => 'setClientSecret',
        'clientSecretExpiresAt' => 'setClientSecretExpiresAt',
        'clientUri' => 'setClientUri',
        'contacts' => 'setContacts',
        'createdAt' => 'setCreatedAt',
        'frontchannelLogoutSessionRequired' => 'setFrontchannelLogoutSessionRequired',
        'frontchannelLogoutUri' => 'setFrontchannelLogoutUri',
        'grantTypes' => 'setGrantTypes',
        'implicitGrantAccessTokenLifespan' => 'setImplicitGrantAccessTokenLifespan',
        'implicitGrantIdTokenLifespan' => 'setImplicitGrantIdTokenLifespan',
        'jwks' => 'setJwks',
        'jwksUri' => 'setJwksUri',
        'jwtBearerGrantAccessTokenLifespan' => 'setJwtBearerGrantAccessTokenLifespan',
        'logoUri' => 'setLogoUri',
        'metadata' => 'setMetadata',
        'owner' => 'setOwner',
        'policyUri' => 'setPolicyUri',
        'postLogoutRedirectUris' => 'setPostLogoutRedirectUris',
        'redirectUris' => 'setRedirectUris',
        'refreshTokenGrantAccessTokenLifespan' => 'setRefreshTokenGrantAccessTokenLifespan',
        'refreshTokenGrantIdTokenLifespan' => 'setRefreshTokenGrantIdTokenLifespan',
        'refreshTokenGrantRefreshTokenLifespan' => 'setRefreshTokenGrantRefreshTokenLifespan',
        'registrationAccessToken' => 'setRegistrationAccessToken',
        'registrationClientUri' => 'setRegistrationClientUri',
        'requestObjectSigningAlg' => 'setRequestObjectSigningAlg',
        'requestUris' => 'setRequestUris',
        'responseTypes' => 'setResponseTypes',
        'scope' => 'setScope',
        'sectorIdentifierUri' => 'setSectorIdentifierUri',
        'skipConsent' => 'setSkipConsent',
        'skipLogoutConsent' => 'setSkipLogoutConsent',
        'subjectType' => 'setSubjectType',
        'tokenEndpointAuthMethod' => 'setTokenEndpointAuthMethod',
        'tokenEndpointAuthSigningAlg' => 'setTokenEndpointAuthSigningAlg',
        'tosUri' => 'setTosUri',
        'updatedAt' => 'setUpdatedAt',
        'userinfoSignedResponseAlg' => 'setUserinfoSignedResponseAlg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessTokenStrategy' => 'getAccessTokenStrategy',
        'allowedCorsOrigins' => 'getAllowedCorsOrigins',
        'audience' => 'getAudience',
        'authorizationCodeGrantAccessTokenLifespan' => 'getAuthorizationCodeGrantAccessTokenLifespan',
        'authorizationCodeGrantIdTokenLifespan' => 'getAuthorizationCodeGrantIdTokenLifespan',
        'authorizationCodeGrantRefreshTokenLifespan' => 'getAuthorizationCodeGrantRefreshTokenLifespan',
        'backchannelLogoutSessionRequired' => 'getBackchannelLogoutSessionRequired',
        'backchannelLogoutUri' => 'getBackchannelLogoutUri',
        'clientCredentialsGrantAccessTokenLifespan' => 'getClientCredentialsGrantAccessTokenLifespan',
        'clientId' => 'getClientId',
        'clientName' => 'getClientName',
        'clientSecret' => 'getClientSecret',
        'clientSecretExpiresAt' => 'getClientSecretExpiresAt',
        'clientUri' => 'getClientUri',
        'contacts' => 'getContacts',
        'createdAt' => 'getCreatedAt',
        'frontchannelLogoutSessionRequired' => 'getFrontchannelLogoutSessionRequired',
        'frontchannelLogoutUri' => 'getFrontchannelLogoutUri',
        'grantTypes' => 'getGrantTypes',
        'implicitGrantAccessTokenLifespan' => 'getImplicitGrantAccessTokenLifespan',
        'implicitGrantIdTokenLifespan' => 'getImplicitGrantIdTokenLifespan',
        'jwks' => 'getJwks',
        'jwksUri' => 'getJwksUri',
        'jwtBearerGrantAccessTokenLifespan' => 'getJwtBearerGrantAccessTokenLifespan',
        'logoUri' => 'getLogoUri',
        'metadata' => 'getMetadata',
        'owner' => 'getOwner',
        'policyUri' => 'getPolicyUri',
        'postLogoutRedirectUris' => 'getPostLogoutRedirectUris',
        'redirectUris' => 'getRedirectUris',
        'refreshTokenGrantAccessTokenLifespan' => 'getRefreshTokenGrantAccessTokenLifespan',
        'refreshTokenGrantIdTokenLifespan' => 'getRefreshTokenGrantIdTokenLifespan',
        'refreshTokenGrantRefreshTokenLifespan' => 'getRefreshTokenGrantRefreshTokenLifespan',
        'registrationAccessToken' => 'getRegistrationAccessToken',
        'registrationClientUri' => 'getRegistrationClientUri',
        'requestObjectSigningAlg' => 'getRequestObjectSigningAlg',
        'requestUris' => 'getRequestUris',
        'responseTypes' => 'getResponseTypes',
        'scope' => 'getScope',
        'sectorIdentifierUri' => 'getSectorIdentifierUri',
        'skipConsent' => 'getSkipConsent',
        'skipLogoutConsent' => 'getSkipLogoutConsent',
        'subjectType' => 'getSubjectType',
        'tokenEndpointAuthMethod' => 'getTokenEndpointAuthMethod',
        'tokenEndpointAuthSigningAlg' => 'getTokenEndpointAuthSigningAlg',
        'tosUri' => 'getTosUri',
        'updatedAt' => 'getUpdatedAt',
        'userinfoSignedResponseAlg' => 'getUserinfoSignedResponseAlg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accessTokenStrategy', $data ?? [], null);
        $this->setIfExists('allowedCorsOrigins', $data ?? [], null);
        $this->setIfExists('audience', $data ?? [], null);
        $this->setIfExists('authorizationCodeGrantAccessTokenLifespan', $data ?? [], null);
        $this->setIfExists('authorizationCodeGrantIdTokenLifespan', $data ?? [], null);
        $this->setIfExists('authorizationCodeGrantRefreshTokenLifespan', $data ?? [], null);
        $this->setIfExists('backchannelLogoutSessionRequired', $data ?? [], null);
        $this->setIfExists('backchannelLogoutUri', $data ?? [], null);
        $this->setIfExists('clientCredentialsGrantAccessTokenLifespan', $data ?? [], null);
        $this->setIfExists('clientId', $data ?? [], null);
        $this->setIfExists('clientName', $data ?? [], null);
        $this->setIfExists('clientSecret', $data ?? [], null);
        $this->setIfExists('clientSecretExpiresAt', $data ?? [], null);
        $this->setIfExists('clientUri', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('frontchannelLogoutSessionRequired', $data ?? [], null);
        $this->setIfExists('frontchannelLogoutUri', $data ?? [], null);
        $this->setIfExists('grantTypes', $data ?? [], null);
        $this->setIfExists('implicitGrantAccessTokenLifespan', $data ?? [], null);
        $this->setIfExists('implicitGrantIdTokenLifespan', $data ?? [], null);
        $this->setIfExists('jwks', $data ?? [], null);
        $this->setIfExists('jwksUri', $data ?? [], null);
        $this->setIfExists('jwtBearerGrantAccessTokenLifespan', $data ?? [], null);
        $this->setIfExists('logoUri', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('policyUri', $data ?? [], null);
        $this->setIfExists('postLogoutRedirectUris', $data ?? [], null);
        $this->setIfExists('redirectUris', $data ?? [], null);
        $this->setIfExists('refreshTokenGrantAccessTokenLifespan', $data ?? [], null);
        $this->setIfExists('refreshTokenGrantIdTokenLifespan', $data ?? [], null);
        $this->setIfExists('refreshTokenGrantRefreshTokenLifespan', $data ?? [], null);
        $this->setIfExists('registrationAccessToken', $data ?? [], null);
        $this->setIfExists('registrationClientUri', $data ?? [], null);
        $this->setIfExists('requestObjectSigningAlg', $data ?? [], null);
        $this->setIfExists('requestUris', $data ?? [], null);
        $this->setIfExists('responseTypes', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('sectorIdentifierUri', $data ?? [], null);
        $this->setIfExists('skipConsent', $data ?? [], null);
        $this->setIfExists('skipLogoutConsent', $data ?? [], null);
        $this->setIfExists('subjectType', $data ?? [], null);
        $this->setIfExists('tokenEndpointAuthMethod', $data ?? [], 'client_secret_basic');
        $this->setIfExists('tokenEndpointAuthSigningAlg', $data ?? [], null);
        $this->setIfExists('tosUri', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('userinfoSignedResponseAlg', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['authorizationCodeGrantAccessTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['authorizationCodeGrantAccessTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'authorizationCodeGrantAccessTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['authorizationCodeGrantIdTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['authorizationCodeGrantIdTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'authorizationCodeGrantIdTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['authorizationCodeGrantRefreshTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['authorizationCodeGrantRefreshTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'authorizationCodeGrantRefreshTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['clientCredentialsGrantAccessTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['clientCredentialsGrantAccessTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'clientCredentialsGrantAccessTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['implicitGrantAccessTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['implicitGrantAccessTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'implicitGrantAccessTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['implicitGrantIdTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['implicitGrantIdTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'implicitGrantIdTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['jwtBearerGrantAccessTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['jwtBearerGrantAccessTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'jwtBearerGrantAccessTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['refreshTokenGrantAccessTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['refreshTokenGrantAccessTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'refreshTokenGrantAccessTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['refreshTokenGrantIdTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['refreshTokenGrantIdTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'refreshTokenGrantIdTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        if (!is_null($this->container['refreshTokenGrantRefreshTokenLifespan']) && !preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", $this->container['refreshTokenGrantRefreshTokenLifespan'])) {
            $invalidProperties[] = "invalid value for 'refreshTokenGrantRefreshTokenLifespan', must be conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessTokenStrategy
     *
     * @return string|null
     */
    public function getAccessTokenStrategy()
    {
        return $this->container['accessTokenStrategy'];
    }

    /**
     * Sets accessTokenStrategy
     *
     * @param string|null $accessTokenStrategy OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in `strategies.access_token`.
     *
     * @return self
     */
    public function setAccessTokenStrategy($accessTokenStrategy)
    {
        if (is_null($accessTokenStrategy)) {
            throw new \InvalidArgumentException('non-nullable accessTokenStrategy cannot be null');
        }
        $this->container['accessTokenStrategy'] = $accessTokenStrategy;

        return $this;
    }

    /**
     * Gets allowedCorsOrigins
     *
     * @return string[]|null
     */
    public function getAllowedCorsOrigins()
    {
        return $this->container['allowedCorsOrigins'];
    }

    /**
     * Sets allowedCorsOrigins
     *
     * @param string[]|null $allowedCorsOrigins allowedCorsOrigins
     *
     * @return self
     */
    public function setAllowedCorsOrigins($allowedCorsOrigins)
    {
        if (is_null($allowedCorsOrigins)) {
            throw new \InvalidArgumentException('non-nullable allowedCorsOrigins cannot be null');
        }
        $this->container['allowedCorsOrigins'] = $allowedCorsOrigins;

        return $this;
    }

    /**
     * Gets audience
     *
     * @return string[]|null
     */
    public function getAudience()
    {
        return $this->container['audience'];
    }

    /**
     * Sets audience
     *
     * @param string[]|null $audience audience
     *
     * @return self
     */
    public function setAudience($audience)
    {
        if (is_null($audience)) {
            throw new \InvalidArgumentException('non-nullable audience cannot be null');
        }
        $this->container['audience'] = $audience;

        return $this;
    }

    /**
     * Gets authorizationCodeGrantAccessTokenLifespan
     *
     * @return string|null
     */
    public function getAuthorizationCodeGrantAccessTokenLifespan()
    {
        return $this->container['authorizationCodeGrantAccessTokenLifespan'];
    }

    /**
     * Sets authorizationCodeGrantAccessTokenLifespan
     *
     * @param string|null $authorizationCodeGrantAccessTokenLifespan authorizationCodeGrantAccessTokenLifespan
     *
     * @return self
     */
    public function setAuthorizationCodeGrantAccessTokenLifespan($authorizationCodeGrantAccessTokenLifespan)
    {
        if (is_null($authorizationCodeGrantAccessTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'authorizationCodeGrantAccessTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizationCodeGrantAccessTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($authorizationCodeGrantAccessTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($authorizationCodeGrantAccessTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$authorizationCodeGrantAccessTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['authorizationCodeGrantAccessTokenLifespan'] = $authorizationCodeGrantAccessTokenLifespan;

        return $this;
    }

    /**
     * Gets authorizationCodeGrantIdTokenLifespan
     *
     * @return string|null
     */
    public function getAuthorizationCodeGrantIdTokenLifespan()
    {
        return $this->container['authorizationCodeGrantIdTokenLifespan'];
    }

    /**
     * Sets authorizationCodeGrantIdTokenLifespan
     *
     * @param string|null $authorizationCodeGrantIdTokenLifespan authorizationCodeGrantIdTokenLifespan
     *
     * @return self
     */
    public function setAuthorizationCodeGrantIdTokenLifespan($authorizationCodeGrantIdTokenLifespan)
    {
        if (is_null($authorizationCodeGrantIdTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'authorizationCodeGrantIdTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizationCodeGrantIdTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($authorizationCodeGrantIdTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($authorizationCodeGrantIdTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$authorizationCodeGrantIdTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['authorizationCodeGrantIdTokenLifespan'] = $authorizationCodeGrantIdTokenLifespan;

        return $this;
    }

    /**
     * Gets authorizationCodeGrantRefreshTokenLifespan
     *
     * @return string|null
     */
    public function getAuthorizationCodeGrantRefreshTokenLifespan()
    {
        return $this->container['authorizationCodeGrantRefreshTokenLifespan'];
    }

    /**
     * Sets authorizationCodeGrantRefreshTokenLifespan
     *
     * @param string|null $authorizationCodeGrantRefreshTokenLifespan authorizationCodeGrantRefreshTokenLifespan
     *
     * @return self
     */
    public function setAuthorizationCodeGrantRefreshTokenLifespan($authorizationCodeGrantRefreshTokenLifespan)
    {
        if (is_null($authorizationCodeGrantRefreshTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'authorizationCodeGrantRefreshTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizationCodeGrantRefreshTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($authorizationCodeGrantRefreshTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($authorizationCodeGrantRefreshTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$authorizationCodeGrantRefreshTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['authorizationCodeGrantRefreshTokenLifespan'] = $authorizationCodeGrantRefreshTokenLifespan;

        return $this;
    }

    /**
     * Gets backchannelLogoutSessionRequired
     *
     * @return bool|null
     */
    public function getBackchannelLogoutSessionRequired()
    {
        return $this->container['backchannelLogoutSessionRequired'];
    }

    /**
     * Sets backchannelLogoutSessionRequired
     *
     * @param bool|null $backchannelLogoutSessionRequired OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
     *
     * @return self
     */
    public function setBackchannelLogoutSessionRequired($backchannelLogoutSessionRequired)
    {
        if (is_null($backchannelLogoutSessionRequired)) {
            throw new \InvalidArgumentException('non-nullable backchannelLogoutSessionRequired cannot be null');
        }
        $this->container['backchannelLogoutSessionRequired'] = $backchannelLogoutSessionRequired;

        return $this;
    }

    /**
     * Gets backchannelLogoutUri
     *
     * @return string|null
     */
    public function getBackchannelLogoutUri()
    {
        return $this->container['backchannelLogoutUri'];
    }

    /**
     * Sets backchannelLogoutUri
     *
     * @param string|null $backchannelLogoutUri OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     *
     * @return self
     */
    public function setBackchannelLogoutUri($backchannelLogoutUri)
    {
        if (is_null($backchannelLogoutUri)) {
            throw new \InvalidArgumentException('non-nullable backchannelLogoutUri cannot be null');
        }
        $this->container['backchannelLogoutUri'] = $backchannelLogoutUri;

        return $this;
    }

    /**
     * Gets clientCredentialsGrantAccessTokenLifespan
     *
     * @return string|null
     */
    public function getClientCredentialsGrantAccessTokenLifespan()
    {
        return $this->container['clientCredentialsGrantAccessTokenLifespan'];
    }

    /**
     * Sets clientCredentialsGrantAccessTokenLifespan
     *
     * @param string|null $clientCredentialsGrantAccessTokenLifespan clientCredentialsGrantAccessTokenLifespan
     *
     * @return self
     */
    public function setClientCredentialsGrantAccessTokenLifespan($clientCredentialsGrantAccessTokenLifespan)
    {
        if (is_null($clientCredentialsGrantAccessTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'clientCredentialsGrantAccessTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientCredentialsGrantAccessTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($clientCredentialsGrantAccessTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($clientCredentialsGrantAccessTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$clientCredentialsGrantAccessTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['clientCredentialsGrantAccessTokenLifespan'] = $clientCredentialsGrantAccessTokenLifespan;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (is_null($clientId)) {
            throw new \InvalidArgumentException('non-nullable clientId cannot be null');
        }
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string|null
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string|null $clientName OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
     *
     * @return self
     */
    public function setClientName($clientName)
    {
        if (is_null($clientName)) {
            throw new \InvalidArgumentException('non-nullable clientName cannot be null');
        }
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets clientSecret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['clientSecret'];
    }

    /**
     * Sets clientSecret
     *
     * @param string|null $clientSecret OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
     *
     * @return self
     */
    public function setClientSecret($clientSecret)
    {
        if (is_null($clientSecret)) {
            throw new \InvalidArgumentException('non-nullable clientSecret cannot be null');
        }
        $this->container['clientSecret'] = $clientSecret;

        return $this;
    }

    /**
     * Gets clientSecretExpiresAt
     *
     * @return int|null
     */
    public function getClientSecretExpiresAt()
    {
        return $this->container['clientSecretExpiresAt'];
    }

    /**
     * Sets clientSecretExpiresAt
     *
     * @param int|null $clientSecretExpiresAt OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
     *
     * @return self
     */
    public function setClientSecretExpiresAt($clientSecretExpiresAt)
    {
        if (is_null($clientSecretExpiresAt)) {
            throw new \InvalidArgumentException('non-nullable clientSecretExpiresAt cannot be null');
        }
        $this->container['clientSecretExpiresAt'] = $clientSecretExpiresAt;

        return $this;
    }

    /**
     * Gets clientUri
     *
     * @return string|null
     */
    public function getClientUri()
    {
        return $this->container['clientUri'];
    }

    /**
     * Sets clientUri
     *
     * @param string|null $clientUri OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
     *
     * @return self
     */
    public function setClientUri($clientUri)
    {
        if (is_null($clientUri)) {
            throw new \InvalidArgumentException('non-nullable clientUri cannot be null');
        }
        $this->container['clientUri'] = $clientUri;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client's creation.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets frontchannelLogoutSessionRequired
     *
     * @return bool|null
     */
    public function getFrontchannelLogoutSessionRequired()
    {
        return $this->container['frontchannelLogoutSessionRequired'];
    }

    /**
     * Sets frontchannelLogoutSessionRequired
     *
     * @param bool|null $frontchannelLogoutSessionRequired OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
     *
     * @return self
     */
    public function setFrontchannelLogoutSessionRequired($frontchannelLogoutSessionRequired)
    {
        if (is_null($frontchannelLogoutSessionRequired)) {
            throw new \InvalidArgumentException('non-nullable frontchannelLogoutSessionRequired cannot be null');
        }
        $this->container['frontchannelLogoutSessionRequired'] = $frontchannelLogoutSessionRequired;

        return $this;
    }

    /**
     * Gets frontchannelLogoutUri
     *
     * @return string|null
     */
    public function getFrontchannelLogoutUri()
    {
        return $this->container['frontchannelLogoutUri'];
    }

    /**
     * Sets frontchannelLogoutUri
     *
     * @param string|null $frontchannelLogoutUri OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
     *
     * @return self
     */
    public function setFrontchannelLogoutUri($frontchannelLogoutUri)
    {
        if (is_null($frontchannelLogoutUri)) {
            throw new \InvalidArgumentException('non-nullable frontchannelLogoutUri cannot be null');
        }
        $this->container['frontchannelLogoutUri'] = $frontchannelLogoutUri;

        return $this;
    }

    /**
     * Gets grantTypes
     *
     * @return string[]|null
     */
    public function getGrantTypes()
    {
        return $this->container['grantTypes'];
    }

    /**
     * Sets grantTypes
     *
     * @param string[]|null $grantTypes grantTypes
     *
     * @return self
     */
    public function setGrantTypes($grantTypes)
    {
        if (is_null($grantTypes)) {
            throw new \InvalidArgumentException('non-nullable grantTypes cannot be null');
        }
        $this->container['grantTypes'] = $grantTypes;

        return $this;
    }

    /**
     * Gets implicitGrantAccessTokenLifespan
     *
     * @return string|null
     */
    public function getImplicitGrantAccessTokenLifespan()
    {
        return $this->container['implicitGrantAccessTokenLifespan'];
    }

    /**
     * Sets implicitGrantAccessTokenLifespan
     *
     * @param string|null $implicitGrantAccessTokenLifespan implicitGrantAccessTokenLifespan
     *
     * @return self
     */
    public function setImplicitGrantAccessTokenLifespan($implicitGrantAccessTokenLifespan)
    {
        if (is_null($implicitGrantAccessTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'implicitGrantAccessTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('implicitGrantAccessTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($implicitGrantAccessTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($implicitGrantAccessTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$implicitGrantAccessTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['implicitGrantAccessTokenLifespan'] = $implicitGrantAccessTokenLifespan;

        return $this;
    }

    /**
     * Gets implicitGrantIdTokenLifespan
     *
     * @return string|null
     */
    public function getImplicitGrantIdTokenLifespan()
    {
        return $this->container['implicitGrantIdTokenLifespan'];
    }

    /**
     * Sets implicitGrantIdTokenLifespan
     *
     * @param string|null $implicitGrantIdTokenLifespan implicitGrantIdTokenLifespan
     *
     * @return self
     */
    public function setImplicitGrantIdTokenLifespan($implicitGrantIdTokenLifespan)
    {
        if (is_null($implicitGrantIdTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'implicitGrantIdTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('implicitGrantIdTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($implicitGrantIdTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($implicitGrantIdTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$implicitGrantIdTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['implicitGrantIdTokenLifespan'] = $implicitGrantIdTokenLifespan;

        return $this;
    }

    /**
     * Gets jwks
     *
     * @return mixed|null
     */
    public function getJwks()
    {
        return $this->container['jwks'];
    }

    /**
     * Sets jwks
     *
     * @param mixed|null $jwks OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
     *
     * @return self
     */
    public function setJwks($jwks)
    {
        if (is_null($jwks)) {
            array_push($this->openAPINullablesSetToNull, 'jwks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jwks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jwks'] = $jwks;

        return $this;
    }

    /**
     * Gets jwksUri
     *
     * @return string|null
     */
    public function getJwksUri()
    {
        return $this->container['jwksUri'];
    }

    /**
     * Sets jwksUri
     *
     * @param string|null $jwksUri OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     *
     * @return self
     */
    public function setJwksUri($jwksUri)
    {
        if (is_null($jwksUri)) {
            throw new \InvalidArgumentException('non-nullable jwksUri cannot be null');
        }
        $this->container['jwksUri'] = $jwksUri;

        return $this;
    }

    /**
     * Gets jwtBearerGrantAccessTokenLifespan
     *
     * @return string|null
     */
    public function getJwtBearerGrantAccessTokenLifespan()
    {
        return $this->container['jwtBearerGrantAccessTokenLifespan'];
    }

    /**
     * Sets jwtBearerGrantAccessTokenLifespan
     *
     * @param string|null $jwtBearerGrantAccessTokenLifespan jwtBearerGrantAccessTokenLifespan
     *
     * @return self
     */
    public function setJwtBearerGrantAccessTokenLifespan($jwtBearerGrantAccessTokenLifespan)
    {
        if (is_null($jwtBearerGrantAccessTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'jwtBearerGrantAccessTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jwtBearerGrantAccessTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($jwtBearerGrantAccessTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($jwtBearerGrantAccessTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$jwtBearerGrantAccessTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['jwtBearerGrantAccessTokenLifespan'] = $jwtBearerGrantAccessTokenLifespan;

        return $this;
    }

    /**
     * Gets logoUri
     *
     * @return string|null
     */
    public function getLogoUri()
    {
        return $this->container['logoUri'];
    }

    /**
     * Sets logoUri
     *
     * @param string|null $logoUri OAuth 2.0 Client Logo URI  A URL string referencing the client's logo.
     *
     * @return self
     */
    public function setLogoUri($logoUri)
    {
        if (is_null($logoUri)) {
            throw new \InvalidArgumentException('non-nullable logoUri cannot be null');
        }
        $this->container['logoUri'] = $logoUri;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets policyUri
     *
     * @return string|null
     */
    public function getPolicyUri()
    {
        return $this->container['policyUri'];
    }

    /**
     * Sets policyUri
     *
     * @param string|null $policyUri OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     *
     * @return self
     */
    public function setPolicyUri($policyUri)
    {
        if (is_null($policyUri)) {
            throw new \InvalidArgumentException('non-nullable policyUri cannot be null');
        }
        $this->container['policyUri'] = $policyUri;

        return $this;
    }

    /**
     * Gets postLogoutRedirectUris
     *
     * @return string[]|null
     */
    public function getPostLogoutRedirectUris()
    {
        return $this->container['postLogoutRedirectUris'];
    }

    /**
     * Sets postLogoutRedirectUris
     *
     * @param string[]|null $postLogoutRedirectUris postLogoutRedirectUris
     *
     * @return self
     */
    public function setPostLogoutRedirectUris($postLogoutRedirectUris)
    {
        if (is_null($postLogoutRedirectUris)) {
            throw new \InvalidArgumentException('non-nullable postLogoutRedirectUris cannot be null');
        }
        $this->container['postLogoutRedirectUris'] = $postLogoutRedirectUris;

        return $this;
    }

    /**
     * Gets redirectUris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirectUris'];
    }

    /**
     * Sets redirectUris
     *
     * @param string[]|null $redirectUris redirectUris
     *
     * @return self
     */
    public function setRedirectUris($redirectUris)
    {
        if (is_null($redirectUris)) {
            throw new \InvalidArgumentException('non-nullable redirectUris cannot be null');
        }
        $this->container['redirectUris'] = $redirectUris;

        return $this;
    }

    /**
     * Gets refreshTokenGrantAccessTokenLifespan
     *
     * @return string|null
     */
    public function getRefreshTokenGrantAccessTokenLifespan()
    {
        return $this->container['refreshTokenGrantAccessTokenLifespan'];
    }

    /**
     * Sets refreshTokenGrantAccessTokenLifespan
     *
     * @param string|null $refreshTokenGrantAccessTokenLifespan refreshTokenGrantAccessTokenLifespan
     *
     * @return self
     */
    public function setRefreshTokenGrantAccessTokenLifespan($refreshTokenGrantAccessTokenLifespan)
    {
        if (is_null($refreshTokenGrantAccessTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'refreshTokenGrantAccessTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refreshTokenGrantAccessTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($refreshTokenGrantAccessTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($refreshTokenGrantAccessTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$refreshTokenGrantAccessTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['refreshTokenGrantAccessTokenLifespan'] = $refreshTokenGrantAccessTokenLifespan;

        return $this;
    }

    /**
     * Gets refreshTokenGrantIdTokenLifespan
     *
     * @return string|null
     */
    public function getRefreshTokenGrantIdTokenLifespan()
    {
        return $this->container['refreshTokenGrantIdTokenLifespan'];
    }

    /**
     * Sets refreshTokenGrantIdTokenLifespan
     *
     * @param string|null $refreshTokenGrantIdTokenLifespan refreshTokenGrantIdTokenLifespan
     *
     * @return self
     */
    public function setRefreshTokenGrantIdTokenLifespan($refreshTokenGrantIdTokenLifespan)
    {
        if (is_null($refreshTokenGrantIdTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'refreshTokenGrantIdTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refreshTokenGrantIdTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($refreshTokenGrantIdTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($refreshTokenGrantIdTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$refreshTokenGrantIdTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['refreshTokenGrantIdTokenLifespan'] = $refreshTokenGrantIdTokenLifespan;

        return $this;
    }

    /**
     * Gets refreshTokenGrantRefreshTokenLifespan
     *
     * @return string|null
     */
    public function getRefreshTokenGrantRefreshTokenLifespan()
    {
        return $this->container['refreshTokenGrantRefreshTokenLifespan'];
    }

    /**
     * Sets refreshTokenGrantRefreshTokenLifespan
     *
     * @param string|null $refreshTokenGrantRefreshTokenLifespan refreshTokenGrantRefreshTokenLifespan
     *
     * @return self
     */
    public function setRefreshTokenGrantRefreshTokenLifespan($refreshTokenGrantRefreshTokenLifespan)
    {
        if (is_null($refreshTokenGrantRefreshTokenLifespan)) {
            array_push($this->openAPINullablesSetToNull, 'refreshTokenGrantRefreshTokenLifespan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refreshTokenGrantRefreshTokenLifespan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($refreshTokenGrantRefreshTokenLifespan) && (!preg_match("/^[0-9]+(ns|us|ms|s|m|h)$/", ObjectSerializer::toString($refreshTokenGrantRefreshTokenLifespan)))) {
            throw new \InvalidArgumentException("invalid value for \$refreshTokenGrantRefreshTokenLifespan when calling OAuth2Client., must conform to the pattern /^[0-9]+(ns|us|ms|s|m|h)$/.");
        }

        $this->container['refreshTokenGrantRefreshTokenLifespan'] = $refreshTokenGrantRefreshTokenLifespan;

        return $this;
    }

    /**
     * Gets registrationAccessToken
     *
     * @return string|null
     */
    public function getRegistrationAccessToken()
    {
        return $this->container['registrationAccessToken'];
    }

    /**
     * Sets registrationAccessToken
     *
     * @param string|null $registrationAccessToken OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
     *
     * @return self
     */
    public function setRegistrationAccessToken($registrationAccessToken)
    {
        if (is_null($registrationAccessToken)) {
            throw new \InvalidArgumentException('non-nullable registrationAccessToken cannot be null');
        }
        $this->container['registrationAccessToken'] = $registrationAccessToken;

        return $this;
    }

    /**
     * Gets registrationClientUri
     *
     * @return string|null
     */
    public function getRegistrationClientUri()
    {
        return $this->container['registrationClientUri'];
    }

    /**
     * Sets registrationClientUri
     *
     * @param string|null $registrationClientUri OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     *
     * @return self
     */
    public function setRegistrationClientUri($registrationClientUri)
    {
        if (is_null($registrationClientUri)) {
            throw new \InvalidArgumentException('non-nullable registrationClientUri cannot be null');
        }
        $this->container['registrationClientUri'] = $registrationClientUri;

        return $this;
    }

    /**
     * Gets requestObjectSigningAlg
     *
     * @return string|null
     */
    public function getRequestObjectSigningAlg()
    {
        return $this->container['requestObjectSigningAlg'];
    }

    /**
     * Sets requestObjectSigningAlg
     *
     * @param string|null $requestObjectSigningAlg OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
     *
     * @return self
     */
    public function setRequestObjectSigningAlg($requestObjectSigningAlg)
    {
        if (is_null($requestObjectSigningAlg)) {
            throw new \InvalidArgumentException('non-nullable requestObjectSigningAlg cannot be null');
        }
        $this->container['requestObjectSigningAlg'] = $requestObjectSigningAlg;

        return $this;
    }

    /**
     * Gets requestUris
     *
     * @return string[]|null
     */
    public function getRequestUris()
    {
        return $this->container['requestUris'];
    }

    /**
     * Sets requestUris
     *
     * @param string[]|null $requestUris requestUris
     *
     * @return self
     */
    public function setRequestUris($requestUris)
    {
        if (is_null($requestUris)) {
            throw new \InvalidArgumentException('non-nullable requestUris cannot be null');
        }
        $this->container['requestUris'] = $requestUris;

        return $this;
    }

    /**
     * Gets responseTypes
     *
     * @return string[]|null
     */
    public function getResponseTypes()
    {
        return $this->container['responseTypes'];
    }

    /**
     * Sets responseTypes
     *
     * @param string[]|null $responseTypes responseTypes
     *
     * @return self
     */
    public function setResponseTypes($responseTypes)
    {
        if (is_null($responseTypes)) {
            throw new \InvalidArgumentException('non-nullable responseTypes cannot be null');
        }
        $this->container['responseTypes'] = $responseTypes;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets sectorIdentifierUri
     *
     * @return string|null
     */
    public function getSectorIdentifierUri()
    {
        return $this->container['sectorIdentifierUri'];
    }

    /**
     * Sets sectorIdentifierUri
     *
     * @param string|null $sectorIdentifierUri OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
     *
     * @return self
     */
    public function setSectorIdentifierUri($sectorIdentifierUri)
    {
        if (is_null($sectorIdentifierUri)) {
            throw new \InvalidArgumentException('non-nullable sectorIdentifierUri cannot be null');
        }
        $this->container['sectorIdentifierUri'] = $sectorIdentifierUri;

        return $this;
    }

    /**
     * Gets skipConsent
     *
     * @return bool|null
     */
    public function getSkipConsent()
    {
        return $this->container['skipConsent'];
    }

    /**
     * Sets skipConsent
     *
     * @param bool|null $skipConsent SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
     *
     * @return self
     */
    public function setSkipConsent($skipConsent)
    {
        if (is_null($skipConsent)) {
            throw new \InvalidArgumentException('non-nullable skipConsent cannot be null');
        }
        $this->container['skipConsent'] = $skipConsent;

        return $this;
    }

    /**
     * Gets skipLogoutConsent
     *
     * @return bool|null
     */
    public function getSkipLogoutConsent()
    {
        return $this->container['skipLogoutConsent'];
    }

    /**
     * Sets skipLogoutConsent
     *
     * @param bool|null $skipLogoutConsent SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.
     *
     * @return self
     */
    public function setSkipLogoutConsent($skipLogoutConsent)
    {
        if (is_null($skipLogoutConsent)) {
            throw new \InvalidArgumentException('non-nullable skipLogoutConsent cannot be null');
        }
        $this->container['skipLogoutConsent'] = $skipLogoutConsent;

        return $this;
    }

    /**
     * Gets subjectType
     *
     * @return string|null
     */
    public function getSubjectType()
    {
        return $this->container['subjectType'];
    }

    /**
     * Sets subjectType
     *
     * @param string|null $subjectType OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
     *
     * @return self
     */
    public function setSubjectType($subjectType)
    {
        if (is_null($subjectType)) {
            throw new \InvalidArgumentException('non-nullable subjectType cannot be null');
        }
        $this->container['subjectType'] = $subjectType;

        return $this;
    }

    /**
     * Gets tokenEndpointAuthMethod
     *
     * @return string|null
     */
    public function getTokenEndpointAuthMethod()
    {
        return $this->container['tokenEndpointAuthMethod'];
    }

    /**
     * Sets tokenEndpointAuthMethod
     *
     * @param string|null $tokenEndpointAuthMethod OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.
     *
     * @return self
     */
    public function setTokenEndpointAuthMethod($tokenEndpointAuthMethod)
    {
        if (is_null($tokenEndpointAuthMethod)) {
            throw new \InvalidArgumentException('non-nullable tokenEndpointAuthMethod cannot be null');
        }
        $this->container['tokenEndpointAuthMethod'] = $tokenEndpointAuthMethod;

        return $this;
    }

    /**
     * Gets tokenEndpointAuthSigningAlg
     *
     * @return string|null
     */
    public function getTokenEndpointAuthSigningAlg()
    {
        return $this->container['tokenEndpointAuthSigningAlg'];
    }

    /**
     * Sets tokenEndpointAuthSigningAlg
     *
     * @param string|null $tokenEndpointAuthSigningAlg OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
     *
     * @return self
     */
    public function setTokenEndpointAuthSigningAlg($tokenEndpointAuthSigningAlg)
    {
        if (is_null($tokenEndpointAuthSigningAlg)) {
            throw new \InvalidArgumentException('non-nullable tokenEndpointAuthSigningAlg cannot be null');
        }
        $this->container['tokenEndpointAuthSigningAlg'] = $tokenEndpointAuthSigningAlg;

        return $this;
    }

    /**
     * Gets tosUri
     *
     * @return string|null
     */
    public function getTosUri()
    {
        return $this->container['tosUri'];
    }

    /**
     * Sets tosUri
     *
     * @param string|null $tosUri OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     *
     * @return self
     */
    public function setTosUri($tosUri)
    {
        if (is_null($tosUri)) {
            throw new \InvalidArgumentException('non-nullable tosUri cannot be null');
        }
        $this->container['tosUri'] = $tosUri;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets userinfoSignedResponseAlg
     *
     * @return string|null
     */
    public function getUserinfoSignedResponseAlg()
    {
        return $this->container['userinfoSignedResponseAlg'];
    }

    /**
     * Sets userinfoSignedResponseAlg
     *
     * @param string|null $userinfoSignedResponseAlg OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
     *
     * @return self
     */
    public function setUserinfoSignedResponseAlg($userinfoSignedResponseAlg)
    {
        if (is_null($userinfoSignedResponseAlg)) {
            throw new \InvalidArgumentException('non-nullable userinfoSignedResponseAlg cannot be null');
        }
        $this->container['userinfoSignedResponseAlg'] = $userinfoSignedResponseAlg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


