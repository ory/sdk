# coding: utf-8

"""
    ORY Oathkeeper

    ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service uses Hydra to validate access tokens and policies.  # noqa: E501

    The version of the OpenAPI document: v0.0.0-alpha.37
    Contact: hi@ory.am
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ory_oathkeeper_client.configuration import Configuration


class SwaggerUpdateRuleParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'SwaggerRule',
        'id': 'str'
    }

    attribute_map = {
        'body': 'Body',
        'id': 'id'
    }

    def __init__(self, body=None, id=None, local_vars_configuration=None):  # noqa: E501
        """SwaggerUpdateRuleParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._id = None
        self.discriminator = None

        if body is not None:
            self.body = body
        self.id = id

    @property
    def body(self):
        """Gets the body of this SwaggerUpdateRuleParameters.  # noqa: E501


        :return: The body of this SwaggerUpdateRuleParameters.  # noqa: E501
        :rtype: SwaggerRule
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SwaggerUpdateRuleParameters.


        :param body: The body of this SwaggerUpdateRuleParameters.  # noqa: E501
        :type: SwaggerRule
        """

        self._body = body

    @property
    def id(self):
        """Gets the id of this SwaggerUpdateRuleParameters.  # noqa: E501

        in: path  # noqa: E501

        :return: The id of this SwaggerUpdateRuleParameters.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SwaggerUpdateRuleParameters.

        in: path  # noqa: E501

        :param id: The id of this SwaggerUpdateRuleParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwaggerUpdateRuleParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SwaggerUpdateRuleParameters):
            return True

        return self.to_dict() != other.to_dict()
