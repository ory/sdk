/*
 * ORY Oathkeeper
 * ORY Oathkeeper is a reverse proxy that checks the HTTP Authorization for validity against a set of rules. This service uses Hydra to validate access tokens and policies.
 *
 * The version of the OpenAPI document: v0.40.6
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.oathkeeper.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sh.ory.oathkeeper.model.RuleHandler;
import sh.ory.oathkeeper.model.RuleMatch;
import sh.ory.oathkeeper.model.Upstream;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.oathkeeper.JSON;

/**
 * Rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-18T10:27:23.143049421Z[Etc/UTC]")
public class Rule {
  public static final String SERIALIZED_NAME_AUTHENTICATORS = "authenticators";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATORS)
  private List<RuleHandler> authenticators = null;

  public static final String SERIALIZED_NAME_AUTHORIZER = "authorizer";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER)
  private RuleHandler authorizer;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private RuleMatch match;

  public static final String SERIALIZED_NAME_MUTATORS = "mutators";
  @SerializedName(SERIALIZED_NAME_MUTATORS)
  private List<RuleHandler> mutators = null;

  public static final String SERIALIZED_NAME_UPSTREAM = "upstream";
  @SerializedName(SERIALIZED_NAME_UPSTREAM)
  private Upstream upstream;

  public Rule() {
  }

  public Rule authenticators(List<RuleHandler> authenticators) {
    
    this.authenticators = authenticators;
    return this;
  }

  public Rule addAuthenticatorsItem(RuleHandler authenticatorsItem) {
    if (this.authenticators == null) {
      this.authenticators = new ArrayList<>();
    }
    this.authenticators.add(authenticatorsItem);
    return this;
  }

   /**
   * Authenticators is a list of authentication handlers that will try and authenticate the provided credentials. Authenticators are checked iteratively from index 0 to n and if the first authenticator to return a positive result will be the one used.  If you want the rule to first check a specific authenticator  before \&quot;falling back\&quot; to others, have that authenticator as the first item in the array.
   * @return authenticators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authenticators is a list of authentication handlers that will try and authenticate the provided credentials. Authenticators are checked iteratively from index 0 to n and if the first authenticator to return a positive result will be the one used.  If you want the rule to first check a specific authenticator  before \"falling back\" to others, have that authenticator as the first item in the array.")

  public List<RuleHandler> getAuthenticators() {
    return authenticators;
  }


  public void setAuthenticators(List<RuleHandler> authenticators) {
    this.authenticators = authenticators;
  }


  public Rule authorizer(RuleHandler authorizer) {
    
    this.authorizer = authorizer;
    return this;
  }

   /**
   * Get authorizer
   * @return authorizer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RuleHandler getAuthorizer() {
    return authorizer;
  }


  public void setAuthorizer(RuleHandler authorizer) {
    this.authorizer = authorizer;
  }


  public Rule description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description is a human readable description of this rule.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description is a human readable description of this rule.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Rule id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID is the unique id of the rule. It can be at most 190 characters long, but the layout of the ID is up to you. You will need this ID later on to update or delete the rule.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID is the unique id of the rule. It can be at most 190 characters long, but the layout of the ID is up to you. You will need this ID later on to update or delete the rule.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Rule match(RuleMatch match) {
    
    this.match = match;
    return this;
  }

   /**
   * Get match
   * @return match
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RuleMatch getMatch() {
    return match;
  }


  public void setMatch(RuleMatch match) {
    this.match = match;
  }


  public Rule mutators(List<RuleHandler> mutators) {
    
    this.mutators = mutators;
    return this;
  }

  public Rule addMutatorsItem(RuleHandler mutatorsItem) {
    if (this.mutators == null) {
      this.mutators = new ArrayList<>();
    }
    this.mutators.add(mutatorsItem);
    return this;
  }

   /**
   * Mutators is a list of mutation handlers that transform the HTTP request. A common use case is generating a new set of credentials (e.g. JWT) which then will be forwarded to the upstream server.  Mutations are performed iteratively from index 0 to n and should all succeed in order for the HTTP request to be forwarded.
   * @return mutators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mutators is a list of mutation handlers that transform the HTTP request. A common use case is generating a new set of credentials (e.g. JWT) which then will be forwarded to the upstream server.  Mutations are performed iteratively from index 0 to n and should all succeed in order for the HTTP request to be forwarded.")

  public List<RuleHandler> getMutators() {
    return mutators;
  }


  public void setMutators(List<RuleHandler> mutators) {
    this.mutators = mutators;
  }


  public Rule upstream(Upstream upstream) {
    
    this.upstream = upstream;
    return this;
  }

   /**
   * Get upstream
   * @return upstream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Upstream getUpstream() {
    return upstream;
  }


  public void setUpstream(Upstream upstream) {
    this.upstream = upstream;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Rule instance itself
   */
  public Rule putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rule rule = (Rule) o;
    return Objects.equals(this.authenticators, rule.authenticators) &&
        Objects.equals(this.authorizer, rule.authorizer) &&
        Objects.equals(this.description, rule.description) &&
        Objects.equals(this.id, rule.id) &&
        Objects.equals(this.match, rule.match) &&
        Objects.equals(this.mutators, rule.mutators) &&
        Objects.equals(this.upstream, rule.upstream)&&
        Objects.equals(this.additionalProperties, rule.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticators, authorizer, description, id, match, mutators, upstream, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rule {\n");
    sb.append("    authenticators: ").append(toIndentedString(authenticators)).append("\n");
    sb.append("    authorizer: ").append(toIndentedString(authorizer)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    mutators: ").append(toIndentedString(mutators)).append("\n");
    sb.append("    upstream: ").append(toIndentedString(upstream)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticators");
    openapiFields.add("authorizer");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("match");
    openapiFields.add("mutators");
    openapiFields.add("upstream");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Rule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rule is not found in the empty JSON string", Rule.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("authenticators") != null && !jsonObj.get("authenticators").isJsonNull()) {
        JsonArray jsonArrayauthenticators = jsonObj.getAsJsonArray("authenticators");
        if (jsonArrayauthenticators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authenticators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authenticators` to be an array in the JSON string but got `%s`", jsonObj.get("authenticators").toString()));
          }

          // validate the optional field `authenticators` (array)
          for (int i = 0; i < jsonArrayauthenticators.size(); i++) {
            RuleHandler.validateJsonObject(jsonArrayauthenticators.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `authorizer`
      if (jsonObj.get("authorizer") != null && !jsonObj.get("authorizer").isJsonNull()) {
        RuleHandler.validateJsonObject(jsonObj.getAsJsonObject("authorizer"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `match`
      if (jsonObj.get("match") != null && !jsonObj.get("match").isJsonNull()) {
        RuleMatch.validateJsonObject(jsonObj.getAsJsonObject("match"));
      }
      if (jsonObj.get("mutators") != null && !jsonObj.get("mutators").isJsonNull()) {
        JsonArray jsonArraymutators = jsonObj.getAsJsonArray("mutators");
        if (jsonArraymutators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mutators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mutators` to be an array in the JSON string but got `%s`", jsonObj.get("mutators").toString()));
          }

          // validate the optional field `mutators` (array)
          for (int i = 0; i < jsonArraymutators.size(); i++) {
            RuleHandler.validateJsonObject(jsonArraymutators.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `upstream`
      if (jsonObj.get("upstream") != null && !jsonObj.get("upstream").isJsonNull()) {
        Upstream.validateJsonObject(jsonObj.getAsJsonObject("upstream"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rule.class));

       return (TypeAdapter<T>) new TypeAdapter<Rule>() {
           @Override
           public void write(JsonWriter out, Rule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Rule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Rule instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Rule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Rule
  * @throws IOException if the JSON string is invalid with respect to Rule
  */
  public static Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rule.class);
  }

 /**
  * Convert an instance of Rule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

