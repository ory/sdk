# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Ory.Api.Admin do
  @moduledoc """
  API calls for all endpoints tagged `Admin`.
  """

  alias Ory.Connection
  import Ory.RequestBuilder


  @doc """
  Accept a Consent Request
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - consent_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (AcceptConsentRequest): 
  ## Returns

  {:ok, Ory.Model.CompletedRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accept_consent_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.CompletedRequest.t} | {:error, Tesla.Env.t}
  def accept_consent_request(connection, consent_challenge, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/consent/accept")
    |> add_param(:query, :"consent_challenge", consent_challenge)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.CompletedRequest{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Accept a Login Request
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - login_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (AcceptLoginRequest): 
  ## Returns

  {:ok, Ory.Model.CompletedRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accept_login_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.CompletedRequest.t} | {:error, Tesla.Env.t}
  def accept_login_request(connection, login_challenge, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/login/accept")
    |> add_param(:query, :"login_challenge", login_challenge)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.CompletedRequest{}},
      { 400, %Ory.Model.JsonError{}},
      { 401, %Ory.Model.JsonError{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Accept a Logout Request
  When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - logout_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.CompletedRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accept_logout_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.CompletedRequest.t} | {:error, Tesla.Env.t}
  def accept_logout_request(connection, logout_challenge, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/logout/accept")
    |> add_param(:query, :"logout_challenge", logout_challenge)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.CompletedRequest{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Generate a New JSON Web Key
  This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
    - :body (JsonWebKeySetGeneratorRequest): 
  ## Returns

  {:ok, Ory.Model.JsonWebKeySet.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_json_web_key_set(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.JsonWebKeySet.t} | {:error, Tesla.Env.t}
  def create_json_web_key_set(connection, set, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/keys/#{set}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %Ory.Model.JsonWebKeySet{}},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Create an OAuth 2.0 Client
  Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - body (OAuth2Client): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.OAuth2Client.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_o_auth2_client(Tesla.Env.client, Ory.Model.OAuth2Client.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.OAuth2Client.t} | {:error, Tesla.Env.t}
  def create_o_auth2_client(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/clients")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %Ory.Model.OAuth2Client{}},
      { :default, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Delete a JSON Web Key
  Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - kid (String.t): The kid of the desired key
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_json_web_key(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def delete_json_web_key(connection, kid, set, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/keys/#{set}/#{kid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Delete a JSON Web Key Set
  Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_json_web_key_set(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def delete_json_web_key_set(connection, set, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/keys/#{set}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Deletes an OAuth 2.0 Client
  Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the OAuth 2.0 Client.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_o_auth2_client(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def delete_o_auth2_client(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/clients/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { :default, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Delete OAuth2 Access Tokens from a Client
  This endpoint deletes OAuth2 access tokens issued for a client from the database

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - client_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_o_auth2_token(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def delete_o_auth2_token(connection, client_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/oauth2/tokens")
    |> add_param(:query, :"client_id", client_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
  Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the desired grant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_trusted_jwt_grant_issuer(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.GenericError.t} | {:error, Tesla.Env.t}
  def delete_trusted_jwt_grant_issuer(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/trust/grants/jwt-bearer/issuers/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, %Ory.Model.GenericError{}},
      { 500, %Ory.Model.GenericError{}}
    ])
  end

  @doc """
  Flush Expired OAuth2 Access Tokens
  This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (FlushInactiveOAuth2TokensRequest): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec flush_inactive_o_auth2_tokens(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def flush_inactive_o_auth2_tokens(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/oauth2/flush")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Get Consent Request Information
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - consent_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.ConsentRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_consent_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.ConsentRequest.t} | {:ok, Ory.Model.RequestWasHandledResponse.t} | {:error, Tesla.Env.t}
  def get_consent_request(connection, consent_challenge, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/oauth2/auth/requests/consent")
    |> add_param(:query, :"consent_challenge", consent_challenge)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.ConsentRequest{}},
      { 404, %Ory.Model.JsonError{}},
      { 410, %Ory.Model.RequestWasHandledResponse{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Fetch a JSON Web Key
  This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - kid (String.t): The kid of the desired key
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.JsonWebKeySet.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_json_web_key(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.JsonWebKeySet.t} | {:error, Tesla.Env.t}
  def get_json_web_key(connection, kid, set, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/keys/#{set}/#{kid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.JsonWebKeySet{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Retrieve a JSON Web Key Set
  This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.JsonWebKeySet.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_json_web_key_set(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.JsonWebKeySet.t} | {:error, Tesla.Env.t}
  def get_json_web_key_set(connection, set, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/keys/#{set}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.JsonWebKeySet{}},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Get a Login Request
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - login_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.LoginRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_login_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.LoginRequest.t} | {:ok, Ory.Model.RequestWasHandledResponse.t} | {:error, Tesla.Env.t}
  def get_login_request(connection, login_challenge, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/oauth2/auth/requests/login")
    |> add_param(:query, :"login_challenge", login_challenge)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.LoginRequest{}},
      { 400, %Ory.Model.JsonError{}},
      { 404, %Ory.Model.JsonError{}},
      { 410, %Ory.Model.RequestWasHandledResponse{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Get a Logout Request
  Use this endpoint to fetch a logout request.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - logout_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.LogoutRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_logout_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.LogoutRequest.t} | {:ok, Ory.Model.RequestWasHandledResponse.t} | {:error, Tesla.Env.t}
  def get_logout_request(connection, logout_challenge, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/oauth2/auth/requests/logout")
    |> add_param(:query, :"logout_challenge", logout_challenge)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.LogoutRequest{}},
      { 404, %Ory.Model.JsonError{}},
      { 410, %Ory.Model.RequestWasHandledResponse{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Get an OAuth 2.0 Client
  Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the OAuth 2.0 Client.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.OAuth2Client.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_o_auth2_client(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.OAuth2Client.t} | {:error, Tesla.Env.t}
  def get_o_auth2_client(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/clients/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.OAuth2Client{}},
      { :default, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
  Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the desired grant
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.TrustedJwtGrantIssuer.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_trusted_jwt_grant_issuer(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.GenericError.t} | {:ok, Ory.Model.TrustedJwtGrantIssuer.t} | {:error, Tesla.Env.t}
  def get_trusted_jwt_grant_issuer(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/trust/grants/jwt-bearer/issuers/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.TrustedJwtGrantIssuer{}},
      { 404, %Ory.Model.GenericError{}},
      { 500, %Ory.Model.GenericError{}}
    ])
  end

  @doc """
  Get Service Version
  This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.Version.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_version(Tesla.Env.client, keyword()) :: {:ok, Ory.Model.Version.t} | {:error, Tesla.Env.t}
  def get_version(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/version")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.Version{}}
    ])
  end

  @doc """
  Introspect OAuth2 Tokens
  The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - token (String.t): The string value of the token. For access tokens, this is the \\\"access_token\\\" value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\"refresh_token\\\" value returned.
  - opts (KeywordList): [optional] Optional parameters
    - :scope (String.t): An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
  ## Returns

  {:ok, Ory.Model.OAuth2TokenIntrospection.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec introspect_o_auth2_token(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.OAuth2TokenIntrospection.t} | {:error, Tesla.Env.t}
  def introspect_o_auth2_token(connection, token, opts \\ []) do
    optional_params = %{
      :"scope" => :form
    }
    %{}
    |> method(:post)
    |> url("/oauth2/introspect")
    |> add_param(:form, :"token", token)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.OAuth2TokenIntrospection{}},
      { 401, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Check Alive Status
  This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.HealthStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec is_instance_alive(Tesla.Env.client, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.HealthStatus.t} | {:error, Tesla.Env.t}
  def is_instance_alive(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/health/alive")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.HealthStatus{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  List OAuth 2.0 Clients
  This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'. Multiple links can be included in this header, and will be separated by a comma.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The maximum amount of clients to returned, upper bound is 500 clients.
    - :offset (integer()): The offset from where to start looking.
    - :client_name (String.t): The name of the clients to filter by.
    - :owner (String.t): The owner of the clients to filter by.
  ## Returns

  {:ok, [%OAuth2Client{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_o_auth2_clients(Tesla.Env.client, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, list(Ory.Model.OAuth2Client.t)} | {:error, Tesla.Env.t}
  def list_o_auth2_clients(connection, opts \\ []) do
    optional_params = %{
      :"limit" => :query,
      :"offset" => :query,
      :"client_name" => :query,
      :"owner" => :query
    }
    %{}
    |> method(:get)
    |> url("/clients")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Ory.Model.OAuth2Client{}]},
      { :default, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Lists All Consent Sessions of a Subject
  This endpoint lists all subject's granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'. Multiple links can be included in this header, and will be separated by a comma.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - subject (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%PreviousConsentSession{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_subject_consent_sessions(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, list(Ory.Model.PreviousConsentSession.t)} | {:error, Tesla.Env.t}
  def list_subject_consent_sessions(connection, subject, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/oauth2/auth/sessions/consent")
    |> add_param(:query, :"subject", subject)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Ory.Model.PreviousConsentSession{}]},
      { 400, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  List Trusted OAuth2 JWT Bearer Grant Type Issuers
  Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :issuer (String.t): If optional \"issuer\" is supplied, only jwt-bearer grants with this issuer will be returned.
    - :limit (integer()): The maximum amount of policies returned, upper bound is 500 policies
    - :offset (integer()): The offset from where to start looking.
  ## Returns

  {:ok, [%TrustedJwtGrantIssuer{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_trusted_jwt_grant_issuers(Tesla.Env.client, keyword()) :: {:ok, Ory.Model.GenericError.t} | {:ok, list(Ory.Model.TrustedJwtGrantIssuer.t)} | {:error, Tesla.Env.t}
  def list_trusted_jwt_grant_issuers(connection, opts \\ []) do
    optional_params = %{
      :"issuer" => :query,
      :"limit" => :query,
      :"offset" => :query
    }
    %{}
    |> method(:get)
    |> url("/trust/grants/jwt-bearer/issuers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%Ory.Model.TrustedJwtGrantIssuer{}]},
      { 500, %Ory.Model.GenericError{}}
    ])
  end

  @doc """
  Patch an OAuth 2.0 Client
  Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the OAuth 2.0 Client.
  - body ([Ory.Model.PatchDocument.t]): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.OAuth2Client.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_o_auth2_client(Tesla.Env.client, String.t, list(Ory.Model.PatchDocument.t), keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.OAuth2Client.t} | {:error, Tesla.Env.t}
  def patch_o_auth2_client(connection, id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/clients/#{id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.OAuth2Client{}},
      { :default, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Reject a Consent Request
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - consent_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (RejectRequest): 
  ## Returns

  {:ok, Ory.Model.CompletedRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reject_consent_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.CompletedRequest.t} | {:error, Tesla.Env.t}
  def reject_consent_request(connection, consent_challenge, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/consent/reject")
    |> add_param(:query, :"consent_challenge", consent_challenge)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.CompletedRequest{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Reject a Login Request
  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - login_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (RejectRequest): 
  ## Returns

  {:ok, Ory.Model.CompletedRequest.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reject_login_request(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.CompletedRequest.t} | {:error, Tesla.Env.t}
  def reject_login_request(connection, login_challenge, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/login/reject")
    |> add_param(:query, :"login_challenge", login_challenge)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.CompletedRequest{}},
      { 400, %Ory.Model.JsonError{}},
      { 401, %Ory.Model.JsonError{}},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Reject a Logout Request
  When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - logout_challenge (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (RejectRequest): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reject_logout_request(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def reject_logout_request(connection, logout_challenge, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/oauth2/auth/requests/logout/reject")
    |> add_param(:query, :"logout_challenge", logout_challenge)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Invalidates All Login Sessions of a Certain User Invalidates a Subject's Authentication Session
  This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - subject (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec revoke_authentication_session(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def revoke_authentication_session(connection, subject, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/oauth2/auth/sessions/login")
    |> add_param(:query, :"subject", subject)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
  This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - subject (String.t): The subject (Subject) who's consent sessions should be deleted.
  - opts (KeywordList): [optional] Optional parameters
    - :client (String.t): If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
    - :all (boolean()): If set to `?all=true`, deletes all consent sessions by the Subject that have been granted.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec revoke_consent_sessions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Ory.Model.JsonError.t} | {:error, Tesla.Env.t}
  def revoke_consent_sessions(connection, subject, opts \\ []) do
    optional_params = %{
      :"client" => :query,
      :"all" => :query
    }
    %{}
    |> method(:delete)
    |> url("/oauth2/auth/sessions/consent")
    |> add_param(:query, :"subject", subject)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Trust an OAuth2 JWT Bearer Grant Type Issuer
  Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (TrustJwtGrantIssuerBody): 
  ## Returns

  {:ok, Ory.Model.TrustedJwtGrantIssuer.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec trust_jwt_grant_issuer(Tesla.Env.client, keyword()) :: {:ok, Ory.Model.GenericError.t} | {:ok, Ory.Model.TrustedJwtGrantIssuer.t} | {:error, Tesla.Env.t}
  def trust_jwt_grant_issuer(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/trust/grants/jwt-bearer/issuers")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %Ory.Model.TrustedJwtGrantIssuer{}},
      { 400, %Ory.Model.GenericError{}},
      { 409, %Ory.Model.GenericError{}},
      { 500, %Ory.Model.GenericError{}}
    ])
  end

  @doc """
  Update a JSON Web Key
  Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - kid (String.t): The kid of the desired key
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
    - :body (JsonWebKey): 
  ## Returns

  {:ok, Ory.Model.JsonWebKey.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_json_web_key(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.JsonWebKey.t} | {:error, Tesla.Env.t}
  def update_json_web_key(connection, kid, set, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/keys/#{set}/#{kid}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.JsonWebKey{}},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Update a JSON Web Key Set
  Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - set (String.t): The set
  - opts (KeywordList): [optional] Optional parameters
    - :body (JsonWebKeySet): 
  ## Returns

  {:ok, Ory.Model.JsonWebKeySet.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_json_web_key_set(Tesla.Env.client, String.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.JsonWebKeySet.t} | {:error, Tesla.Env.t}
  def update_json_web_key_set(connection, set, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/keys/#{set}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.JsonWebKeySet{}},
      { 401, %Ory.Model.JsonError{}},
      { 403, %Ory.Model.JsonError{}},
      { 500, %Ory.Model.JsonError{}}
    ])
  end

  @doc """
  Update an OAuth 2.0 Client
  Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

  ## Parameters

  - connection (Ory.Connection): Connection to server
  - id (String.t): The id of the OAuth 2.0 Client.
  - body (OAuth2Client): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Ory.Model.OAuth2Client.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_o_auth2_client(Tesla.Env.client, String.t, Ory.Model.OAuth2Client.t, keyword()) :: {:ok, Ory.Model.JsonError.t} | {:ok, Ory.Model.OAuth2Client.t} | {:error, Tesla.Env.t}
  def update_o_auth2_client(connection, id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/clients/#{id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %Ory.Model.OAuth2Client{}},
      { :default, %Ory.Model.JsonError{}}
    ])
  end
end
