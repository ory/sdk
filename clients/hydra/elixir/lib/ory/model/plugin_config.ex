# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Ory.Model.PluginConfig do
  @moduledoc """
  
  """

  @derive [Poison.Encoder]
  defstruct [
    :"Args",
    :"Description",
    :"DockerVersion",
    :"Documentation",
    :"Entrypoint",
    :"Env",
    :"Interface",
    :"IpcHost",
    :"Linux",
    :"Mounts",
    :"Network",
    :"PidHost",
    :"PropagatedMount",
    :"User",
    :"WorkDir",
    :"rootfs"
  ]

  @type t :: %__MODULE__{
    :"Args" => Ory.Model.PluginConfigArgs.t,
    :"Description" => String.t,
    :"DockerVersion" => String.t | nil,
    :"Documentation" => String.t,
    :"Entrypoint" => [String.t],
    :"Env" => [Ory.Model.PluginEnv.t],
    :"Interface" => Ory.Model.PluginConfigInterface.t,
    :"IpcHost" => boolean(),
    :"Linux" => Ory.Model.PluginConfigLinux.t,
    :"Mounts" => [Ory.Model.PluginMount.t],
    :"Network" => Ory.Model.PluginConfigNetwork.t,
    :"PidHost" => boolean(),
    :"PropagatedMount" => String.t,
    :"User" => Ory.Model.PluginConfigUser.t | nil,
    :"WorkDir" => String.t,
    :"rootfs" => Ory.Model.PluginConfigRootfs.t | nil
  }
end

defimpl Poison.Decoder, for: Ory.Model.PluginConfig do
  import Ory.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"Args", :struct, Ory.Model.PluginConfigArgs, options)
    |> deserialize(:"Env", :list, Ory.Model.PluginEnv, options)
    |> deserialize(:"Interface", :struct, Ory.Model.PluginConfigInterface, options)
    |> deserialize(:"Linux", :struct, Ory.Model.PluginConfigLinux, options)
    |> deserialize(:"Mounts", :list, Ory.Model.PluginMount, options)
    |> deserialize(:"Network", :struct, Ory.Model.PluginConfigNetwork, options)
    |> deserialize(:"User", :struct, Ory.Model.PluginConfigUser, options)
    |> deserialize(:"rootfs", :struct, Ory.Model.PluginConfigRootfs, options)
  end
end

