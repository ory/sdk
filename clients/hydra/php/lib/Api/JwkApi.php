<?php
/**
 * JwkApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Ory\Hydra\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs.
 *
 * The version of the OpenAPI document: v2.1.1
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Hydra\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ory\Hydra\Client\ApiException;
use Ory\Hydra\Client\Configuration;
use Ory\Hydra\Client\HeaderSelector;
use Ory\Hydra\Client\ObjectSerializer;

/**
 * JwkApi Class Doc Comment
 *
 * @category Class
 * @package  Ory\Hydra\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JwkApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createJsonWebKeySet
     *
     * Create JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\CreateJsonWebKeySet $createJsonWebKeySet createJsonWebKeySet (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2
     */
    public function createJsonWebKeySet($set, $createJsonWebKeySet)
    {
        list($response) = $this->createJsonWebKeySetWithHttpInfo($set, $createJsonWebKeySet);
        return $response;
    }

    /**
     * Operation createJsonWebKeySetWithHttpInfo
     *
     * Create JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\CreateJsonWebKeySet $createJsonWebKeySet (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJsonWebKeySetWithHttpInfo($set, $createJsonWebKeySet)
    {
        $request = $this->createJsonWebKeySetRequest($set, $createJsonWebKeySet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Ory\Hydra\Client\Model\JsonWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\ErrorOAuth2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ErrorOAuth2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJsonWebKeySetAsync
     *
     * Create JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\CreateJsonWebKeySet $createJsonWebKeySet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJsonWebKeySetAsync($set, $createJsonWebKeySet)
    {
        return $this->createJsonWebKeySetAsyncWithHttpInfo($set, $createJsonWebKeySet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJsonWebKeySetAsyncWithHttpInfo
     *
     * Create JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\CreateJsonWebKeySet $createJsonWebKeySet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJsonWebKeySetAsyncWithHttpInfo($set, $createJsonWebKeySet)
    {
        $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
        $request = $this->createJsonWebKeySetRequest($set, $createJsonWebKeySet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJsonWebKeySet'
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\CreateJsonWebKeySet $createJsonWebKeySet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJsonWebKeySetRequest($set, $createJsonWebKeySet)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling createJsonWebKeySet'
            );
        }
        // verify the required parameter 'createJsonWebKeySet' is set
        if ($createJsonWebKeySet === null || (is_array($createJsonWebKeySet) && count($createJsonWebKeySet) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createJsonWebKeySet when calling createJsonWebKeySet'
            );
        }

        $resourcePath = '/admin/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createJsonWebKeySet)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createJsonWebKeySet));
            } else {
                $httpBody = $createJsonWebKeySet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJsonWebKey
     *
     * Delete JSON Web Key
     *
     * @param  string $set The JSON Web Key Set (required)
     * @param  string $kid The JSON Web Key ID (kid) (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJsonWebKey($set, $kid)
    {
        $this->deleteJsonWebKeyWithHttpInfo($set, $kid);
    }

    /**
     * Operation deleteJsonWebKeyWithHttpInfo
     *
     * Delete JSON Web Key
     *
     * @param  string $set The JSON Web Key Set (required)
     * @param  string $kid The JSON Web Key ID (kid) (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeyWithHttpInfo($set, $kid)
    {
        $request = $this->deleteJsonWebKeyRequest($set, $kid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeyAsync
     *
     * Delete JSON Web Key
     *
     * @param  string $set The JSON Web Key Set (required)
     * @param  string $kid The JSON Web Key ID (kid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeyAsync($set, $kid)
    {
        return $this->deleteJsonWebKeyAsyncWithHttpInfo($set, $kid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJsonWebKeyAsyncWithHttpInfo
     *
     * Delete JSON Web Key
     *
     * @param  string $set The JSON Web Key Set (required)
     * @param  string $kid The JSON Web Key ID (kid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeyAsyncWithHttpInfo($set, $kid)
    {
        $returnType = '';
        $request = $this->deleteJsonWebKeyRequest($set, $kid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJsonWebKey'
     *
     * @param  string $set The JSON Web Key Set (required)
     * @param  string $kid The JSON Web Key ID (kid) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteJsonWebKeyRequest($set, $kid)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling deleteJsonWebKey'
            );
        }
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling deleteJsonWebKey'
            );
        }

        $resourcePath = '/admin/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }
        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJsonWebKeySet
     *
     * Delete JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJsonWebKeySet($set)
    {
        $this->deleteJsonWebKeySetWithHttpInfo($set);
    }

    /**
     * Operation deleteJsonWebKeySetWithHttpInfo
     *
     * Delete JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeySetWithHttpInfo($set)
    {
        $request = $this->deleteJsonWebKeySetRequest($set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeySetAsync
     *
     * Delete JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeySetAsync($set)
    {
        return $this->deleteJsonWebKeySetAsyncWithHttpInfo($set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJsonWebKeySetAsyncWithHttpInfo
     *
     * Delete JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeySetAsyncWithHttpInfo($set)
    {
        $returnType = '';
        $request = $this->deleteJsonWebKeySetRequest($set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJsonWebKeySet'
     *
     * @param  string $set The JSON Web Key Set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteJsonWebKeySetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling deleteJsonWebKeySet'
            );
        }

        $resourcePath = '/admin/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJsonWebKey
     *
     * Get JSON Web Key
     *
     * @param  string $set JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2
     */
    public function getJsonWebKey($set, $kid)
    {
        list($response) = $this->getJsonWebKeyWithHttpInfo($set, $kid);
        return $response;
    }

    /**
     * Operation getJsonWebKeyWithHttpInfo
     *
     * Get JSON Web Key
     *
     * @param  string $set JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeyWithHttpInfo($set, $kid)
    {
        $request = $this->getJsonWebKeyRequest($set, $kid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JsonWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\ErrorOAuth2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ErrorOAuth2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeyAsync
     *
     * Get JSON Web Key
     *
     * @param  string $set JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeyAsync($set, $kid)
    {
        return $this->getJsonWebKeyAsyncWithHttpInfo($set, $kid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJsonWebKeyAsyncWithHttpInfo
     *
     * Get JSON Web Key
     *
     * @param  string $set JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeyAsyncWithHttpInfo($set, $kid)
    {
        $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
        $request = $this->getJsonWebKeyRequest($set, $kid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJsonWebKey'
     *
     * @param  string $set JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJsonWebKeyRequest($set, $kid)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling getJsonWebKey'
            );
        }
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling getJsonWebKey'
            );
        }

        $resourcePath = '/admin/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }
        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJsonWebKeySet
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set JSON Web Key Set ID (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2
     */
    public function getJsonWebKeySet($set)
    {
        list($response) = $this->getJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation getJsonWebKeySetWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set JSON Web Key Set ID (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeySetWithHttpInfo($set)
    {
        $request = $this->getJsonWebKeySetRequest($set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JsonWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\ErrorOAuth2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ErrorOAuth2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeySetAsync
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set JSON Web Key Set ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeySetAsync($set)
    {
        return $this->getJsonWebKeySetAsyncWithHttpInfo($set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJsonWebKeySetAsyncWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set JSON Web Key Set ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeySetAsyncWithHttpInfo($set)
    {
        $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
        $request = $this->getJsonWebKeySetRequest($set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJsonWebKeySet'
     *
     * @param  string $set JSON Web Key Set ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJsonWebKeySetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling getJsonWebKeySet'
            );
        }

        $resourcePath = '/admin/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setJsonWebKey
     *
     * Set JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKey $jsonWebKey jsonWebKey (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JsonWebKey|\Ory\Hydra\Client\Model\ErrorOAuth2
     */
    public function setJsonWebKey($set, $kid, $jsonWebKey = null)
    {
        list($response) = $this->setJsonWebKeyWithHttpInfo($set, $kid, $jsonWebKey);
        return $response;
    }

    /**
     * Operation setJsonWebKeyWithHttpInfo
     *
     * Set JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKey $jsonWebKey (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JsonWebKey|\Ory\Hydra\Client\Model\ErrorOAuth2, HTTP status code, HTTP response headers (array of strings)
     */
    public function setJsonWebKeyWithHttpInfo($set, $kid, $jsonWebKey = null)
    {
        $request = $this->setJsonWebKeyRequest($set, $kid, $jsonWebKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JsonWebKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonWebKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\ErrorOAuth2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ErrorOAuth2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JsonWebKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonWebKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setJsonWebKeyAsync
     *
     * Set JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKey $jsonWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setJsonWebKeyAsync($set, $kid, $jsonWebKey = null)
    {
        return $this->setJsonWebKeyAsyncWithHttpInfo($set, $kid, $jsonWebKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setJsonWebKeyAsyncWithHttpInfo
     *
     * Set JSON Web Key
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKey $jsonWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setJsonWebKeyAsyncWithHttpInfo($set, $kid, $jsonWebKey = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\JsonWebKey';
        $request = $this->setJsonWebKeyRequest($set, $kid, $jsonWebKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setJsonWebKey'
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  string $kid JSON Web Key ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKey $jsonWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setJsonWebKeyRequest($set, $kid, $jsonWebKey = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling setJsonWebKey'
            );
        }
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling setJsonWebKey'
            );
        }

        $resourcePath = '/admin/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }
        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jsonWebKey)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jsonWebKey));
            } else {
                $httpBody = $jsonWebKey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setJsonWebKeySet
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySet $jsonWebKeySet jsonWebKeySet (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2
     */
    public function setJsonWebKeySet($set, $jsonWebKeySet = null)
    {
        list($response) = $this->setJsonWebKeySetWithHttpInfo($set, $jsonWebKeySet);
        return $response;
    }

    /**
     * Operation setJsonWebKeySetWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySet $jsonWebKeySet (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JsonWebKeySet|\Ory\Hydra\Client\Model\ErrorOAuth2, HTTP status code, HTTP response headers (array of strings)
     */
    public function setJsonWebKeySetWithHttpInfo($set, $jsonWebKeySet = null)
    {
        $request = $this->setJsonWebKeySetRequest($set, $jsonWebKeySet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JsonWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\ErrorOAuth2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ErrorOAuth2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ErrorOAuth2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setJsonWebKeySetAsync
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySet $jsonWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setJsonWebKeySetAsync($set, $jsonWebKeySet = null)
    {
        return $this->setJsonWebKeySetAsyncWithHttpInfo($set, $jsonWebKeySet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setJsonWebKeySetAsyncWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySet $jsonWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setJsonWebKeySetAsyncWithHttpInfo($set, $jsonWebKeySet = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\JsonWebKeySet';
        $request = $this->setJsonWebKeySetRequest($set, $jsonWebKeySet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setJsonWebKeySet'
     *
     * @param  string $set The JSON Web Key Set ID (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySet $jsonWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setJsonWebKeySetRequest($set, $jsonWebKeySet = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling setJsonWebKeySet'
            );
        }

        $resourcePath = '/admin/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jsonWebKeySet)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jsonWebKeySet));
            } else {
                $httpBody = $jsonWebKeySet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
