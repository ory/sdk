<?php
/**
 * AdminApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Ory\Hydra\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory Oathkeeper API
 *
 * Documentation for all of Ory Oathkeeper's APIs.
 *
 * The version of the OpenAPI document: v1.11.6
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Hydra\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ory\Hydra\Client\ApiException;
use Ory\Hydra\Client\Configuration;
use Ory\Hydra\Client\HeaderSelector;
use Ory\Hydra\Client\ObjectSerializer;

/**
 * AdminApi Class Doc Comment
 *
 * @category Class
 * @package  Ory\Hydra\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptConsentRequest
     *
     * Accept a Consent Request
     *
     * @param  string $consentChallenge consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptConsentRequest $acceptConsentRequest acceptConsentRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function acceptConsentRequest($consentChallenge, $acceptConsentRequest = null)
    {
        list($response) = $this->acceptConsentRequestWithHttpInfo($consentChallenge, $acceptConsentRequest);
        return $response;
    }

    /**
     * Operation acceptConsentRequestWithHttpInfo
     *
     * Accept a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptConsentRequest $acceptConsentRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptConsentRequestWithHttpInfo($consentChallenge, $acceptConsentRequest = null)
    {
        $request = $this->acceptConsentRequestRequest($consentChallenge, $acceptConsentRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\CompletedRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\CompletedRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\CompletedRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptConsentRequestAsync
     *
     * Accept a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptConsentRequest $acceptConsentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptConsentRequestAsync($consentChallenge, $acceptConsentRequest = null)
    {
        return $this->acceptConsentRequestAsyncWithHttpInfo($consentChallenge, $acceptConsentRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptConsentRequestAsyncWithHttpInfo
     *
     * Accept a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptConsentRequest $acceptConsentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptConsentRequestAsyncWithHttpInfo($consentChallenge, $acceptConsentRequest = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
        $request = $this->acceptConsentRequestRequest($consentChallenge, $acceptConsentRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptConsentRequest'
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptConsentRequest $acceptConsentRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptConsentRequestRequest($consentChallenge, $acceptConsentRequest = null)
    {
        // verify the required parameter 'consentChallenge' is set
        if ($consentChallenge === null || (is_array($consentChallenge) && count($consentChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consentChallenge when calling acceptConsentRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/consent/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consentChallenge !== null) {
            if('form' === 'form' && is_array($consentChallenge)) {
                foreach($consentChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['consent_challenge'] = $consentChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($acceptConsentRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($acceptConsentRequest));
            } else {
                $httpBody = $acceptConsentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acceptLoginRequest
     *
     * Accept a Login Request
     *
     * @param  string $loginChallenge loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptLoginRequest $acceptLoginRequest acceptLoginRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function acceptLoginRequest($loginChallenge, $acceptLoginRequest = null)
    {
        list($response) = $this->acceptLoginRequestWithHttpInfo($loginChallenge, $acceptLoginRequest);
        return $response;
    }

    /**
     * Operation acceptLoginRequestWithHttpInfo
     *
     * Accept a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptLoginRequest $acceptLoginRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptLoginRequestWithHttpInfo($loginChallenge, $acceptLoginRequest = null)
    {
        $request = $this->acceptLoginRequestRequest($loginChallenge, $acceptLoginRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\CompletedRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\CompletedRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\CompletedRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptLoginRequestAsync
     *
     * Accept a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptLoginRequest $acceptLoginRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptLoginRequestAsync($loginChallenge, $acceptLoginRequest = null)
    {
        return $this->acceptLoginRequestAsyncWithHttpInfo($loginChallenge, $acceptLoginRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptLoginRequestAsyncWithHttpInfo
     *
     * Accept a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptLoginRequest $acceptLoginRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptLoginRequestAsyncWithHttpInfo($loginChallenge, $acceptLoginRequest = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
        $request = $this->acceptLoginRequestRequest($loginChallenge, $acceptLoginRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptLoginRequest'
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\AcceptLoginRequest $acceptLoginRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptLoginRequestRequest($loginChallenge, $acceptLoginRequest = null)
    {
        // verify the required parameter 'loginChallenge' is set
        if ($loginChallenge === null || (is_array($loginChallenge) && count($loginChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loginChallenge when calling acceptLoginRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/login/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loginChallenge !== null) {
            if('form' === 'form' && is_array($loginChallenge)) {
                foreach($loginChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['login_challenge'] = $loginChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($acceptLoginRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($acceptLoginRequest));
            } else {
                $httpBody = $acceptLoginRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acceptLogoutRequest
     *
     * Accept a Logout Request
     *
     * @param  string $logoutChallenge logoutChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function acceptLogoutRequest($logoutChallenge)
    {
        list($response) = $this->acceptLogoutRequestWithHttpInfo($logoutChallenge);
        return $response;
    }

    /**
     * Operation acceptLogoutRequestWithHttpInfo
     *
     * Accept a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptLogoutRequestWithHttpInfo($logoutChallenge)
    {
        $request = $this->acceptLogoutRequestRequest($logoutChallenge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\CompletedRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\CompletedRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\CompletedRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptLogoutRequestAsync
     *
     * Accept a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptLogoutRequestAsync($logoutChallenge)
    {
        return $this->acceptLogoutRequestAsyncWithHttpInfo($logoutChallenge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptLogoutRequestAsyncWithHttpInfo
     *
     * Accept a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptLogoutRequestAsyncWithHttpInfo($logoutChallenge)
    {
        $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
        $request = $this->acceptLogoutRequestRequest($logoutChallenge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptLogoutRequest'
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptLogoutRequestRequest($logoutChallenge)
    {
        // verify the required parameter 'logoutChallenge' is set
        if ($logoutChallenge === null || (is_array($logoutChallenge) && count($logoutChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logoutChallenge when calling acceptLogoutRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/logout/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($logoutChallenge !== null) {
            if('form' === 'form' && is_array($logoutChallenge)) {
                foreach($logoutChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logout_challenge'] = $logoutChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createJsonWebKeySet
     *
     * Generate a New JSON Web Key
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySetGeneratorRequest $jsonWebKeySetGeneratorRequest jsonWebKeySetGeneratorRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function createJsonWebKeySet($set, $jsonWebKeySetGeneratorRequest = null)
    {
        list($response) = $this->createJsonWebKeySetWithHttpInfo($set, $jsonWebKeySetGeneratorRequest);
        return $response;
    }

    /**
     * Operation createJsonWebKeySetWithHttpInfo
     *
     * Generate a New JSON Web Key
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySetGeneratorRequest $jsonWebKeySetGeneratorRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createJsonWebKeySetWithHttpInfo($set, $jsonWebKeySetGeneratorRequest = null)
    {
        $request = $this->createJsonWebKeySetRequest($set, $jsonWebKeySetGeneratorRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Ory\Hydra\Client\Model\JSONWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JSONWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JSONWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createJsonWebKeySetAsync
     *
     * Generate a New JSON Web Key
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySetGeneratorRequest $jsonWebKeySetGeneratorRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJsonWebKeySetAsync($set, $jsonWebKeySetGeneratorRequest = null)
    {
        return $this->createJsonWebKeySetAsyncWithHttpInfo($set, $jsonWebKeySetGeneratorRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createJsonWebKeySetAsyncWithHttpInfo
     *
     * Generate a New JSON Web Key
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySetGeneratorRequest $jsonWebKeySetGeneratorRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createJsonWebKeySetAsyncWithHttpInfo($set, $jsonWebKeySetGeneratorRequest = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
        $request = $this->createJsonWebKeySetRequest($set, $jsonWebKeySetGeneratorRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createJsonWebKeySet'
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JsonWebKeySetGeneratorRequest $jsonWebKeySetGeneratorRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createJsonWebKeySetRequest($set, $jsonWebKeySetGeneratorRequest = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling createJsonWebKeySet'
            );
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jsonWebKeySetGeneratorRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jsonWebKeySetGeneratorRequest));
            } else {
                $httpBody = $jsonWebKeySetGeneratorRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOAuth2Client
     *
     * Create an OAuth 2.0 Client
     *
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client oAuth2Client (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError
     */
    public function createOAuth2Client($oAuth2Client)
    {
        list($response) = $this->createOAuth2ClientWithHttpInfo($oAuth2Client);
        return $response;
    }

    /**
     * Operation createOAuth2ClientWithHttpInfo
     *
     * Create an OAuth 2.0 Client
     *
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOAuth2ClientWithHttpInfo($oAuth2Client)
    {
        $request = $this->createOAuth2ClientRequest($oAuth2Client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Ory\Hydra\Client\Model\OAuth2Client' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2Client', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOAuth2ClientAsync
     *
     * Create an OAuth 2.0 Client
     *
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOAuth2ClientAsync($oAuth2Client)
    {
        return $this->createOAuth2ClientAsyncWithHttpInfo($oAuth2Client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOAuth2ClientAsyncWithHttpInfo
     *
     * Create an OAuth 2.0 Client
     *
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOAuth2ClientAsyncWithHttpInfo($oAuth2Client)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
        $request = $this->createOAuth2ClientRequest($oAuth2Client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOAuth2Client'
     *
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOAuth2ClientRequest($oAuth2Client)
    {
        // verify the required parameter 'oAuth2Client' is set
        if ($oAuth2Client === null || (is_array($oAuth2Client) && count($oAuth2Client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oAuth2Client when calling createOAuth2Client'
            );
        }

        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($oAuth2Client)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($oAuth2Client));
            } else {
                $httpBody = $oAuth2Client;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJsonWebKey
     *
     * Delete a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJsonWebKey($kid, $set)
    {
        $this->deleteJsonWebKeyWithHttpInfo($kid, $set);
    }

    /**
     * Operation deleteJsonWebKeyWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeyWithHttpInfo($kid, $set)
    {
        $request = $this->deleteJsonWebKeyRequest($kid, $set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeyAsync
     *
     * Delete a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeyAsync($kid, $set)
    {
        return $this->deleteJsonWebKeyAsyncWithHttpInfo($kid, $set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJsonWebKeyAsyncWithHttpInfo
     *
     * Delete a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeyAsyncWithHttpInfo($kid, $set)
    {
        $returnType = '';
        $request = $this->deleteJsonWebKeyRequest($kid, $set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJsonWebKey'
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteJsonWebKeyRequest($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling deleteJsonWebKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling deleteJsonWebKey'
            );
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJsonWebKeySet
     *
     * Delete a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJsonWebKeySet($set)
    {
        $this->deleteJsonWebKeySetWithHttpInfo($set);
    }

    /**
     * Operation deleteJsonWebKeySetWithHttpInfo
     *
     * Delete a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJsonWebKeySetWithHttpInfo($set)
    {
        $request = $this->deleteJsonWebKeySetRequest($set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJsonWebKeySetAsync
     *
     * Delete a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeySetAsync($set)
    {
        return $this->deleteJsonWebKeySetAsyncWithHttpInfo($set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJsonWebKeySetAsyncWithHttpInfo
     *
     * Delete a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJsonWebKeySetAsyncWithHttpInfo($set)
    {
        $returnType = '';
        $request = $this->deleteJsonWebKeySetRequest($set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJsonWebKeySet'
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteJsonWebKeySetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling deleteJsonWebKeySet'
            );
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOAuth2Client
     *
     * Deletes an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOAuth2Client($id)
    {
        $this->deleteOAuth2ClientWithHttpInfo($id);
    }

    /**
     * Operation deleteOAuth2ClientWithHttpInfo
     *
     * Deletes an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuth2ClientWithHttpInfo($id)
    {
        $request = $this->deleteOAuth2ClientRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOAuth2ClientAsync
     *
     * Deletes an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuth2ClientAsync($id)
    {
        return $this->deleteOAuth2ClientAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOAuth2ClientAsyncWithHttpInfo
     *
     * Deletes an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuth2ClientAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOAuth2ClientRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOAuth2Client'
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOAuth2ClientRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOAuth2Client'
            );
        }

        $resourcePath = '/clients/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOAuth2Token
     *
     * Delete OAuth2 Access Tokens from a Client
     *
     * @param  string $clientId clientId (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOAuth2Token($clientId)
    {
        $this->deleteOAuth2TokenWithHttpInfo($clientId);
    }

    /**
     * Operation deleteOAuth2TokenWithHttpInfo
     *
     * Delete OAuth2 Access Tokens from a Client
     *
     * @param  string $clientId (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuth2TokenWithHttpInfo($clientId)
    {
        $request = $this->deleteOAuth2TokenRequest($clientId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOAuth2TokenAsync
     *
     * Delete OAuth2 Access Tokens from a Client
     *
     * @param  string $clientId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuth2TokenAsync($clientId)
    {
        return $this->deleteOAuth2TokenAsyncWithHttpInfo($clientId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOAuth2TokenAsyncWithHttpInfo
     *
     * Delete OAuth2 Access Tokens from a Client
     *
     * @param  string $clientId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOAuth2TokenAsyncWithHttpInfo($clientId)
    {
        $returnType = '';
        $request = $this->deleteOAuth2TokenRequest($clientId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOAuth2Token'
     *
     * @param  string $clientId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOAuth2TokenRequest($clientId)
    {
        // verify the required parameter 'clientId' is set
        if ($clientId === null || (is_array($clientId) && count($clientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling deleteOAuth2Token'
            );
        }

        $resourcePath = '/oauth2/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['client_id'] = $clientId;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTrustedJwtGrantIssuer
     *
     * Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTrustedJwtGrantIssuer($id)
    {
        $this->deleteTrustedJwtGrantIssuerWithHttpInfo($id);
    }

    /**
     * Operation deleteTrustedJwtGrantIssuerWithHttpInfo
     *
     * Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTrustedJwtGrantIssuerWithHttpInfo($id)
    {
        $request = $this->deleteTrustedJwtGrantIssuerRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTrustedJwtGrantIssuerAsync
     *
     * Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrustedJwtGrantIssuerAsync($id)
    {
        return $this->deleteTrustedJwtGrantIssuerAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTrustedJwtGrantIssuerAsyncWithHttpInfo
     *
     * Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrustedJwtGrantIssuerAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteTrustedJwtGrantIssuerRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTrustedJwtGrantIssuer'
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTrustedJwtGrantIssuerRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteTrustedJwtGrantIssuer'
            );
        }

        $resourcePath = '/trust/grants/jwt-bearer/issuers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flushInactiveOAuth2Tokens
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * @param  \Ory\Hydra\Client\Model\FlushInactiveOAuth2TokensRequest $flushInactiveOAuth2TokensRequest flushInactiveOAuth2TokensRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function flushInactiveOAuth2Tokens($flushInactiveOAuth2TokensRequest = null)
    {
        $this->flushInactiveOAuth2TokensWithHttpInfo($flushInactiveOAuth2TokensRequest);
    }

    /**
     * Operation flushInactiveOAuth2TokensWithHttpInfo
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * @param  \Ory\Hydra\Client\Model\FlushInactiveOAuth2TokensRequest $flushInactiveOAuth2TokensRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function flushInactiveOAuth2TokensWithHttpInfo($flushInactiveOAuth2TokensRequest = null)
    {
        $request = $this->flushInactiveOAuth2TokensRequest($flushInactiveOAuth2TokensRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation flushInactiveOAuth2TokensAsync
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * @param  \Ory\Hydra\Client\Model\FlushInactiveOAuth2TokensRequest $flushInactiveOAuth2TokensRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flushInactiveOAuth2TokensAsync($flushInactiveOAuth2TokensRequest = null)
    {
        return $this->flushInactiveOAuth2TokensAsyncWithHttpInfo($flushInactiveOAuth2TokensRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation flushInactiveOAuth2TokensAsyncWithHttpInfo
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * @param  \Ory\Hydra\Client\Model\FlushInactiveOAuth2TokensRequest $flushInactiveOAuth2TokensRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flushInactiveOAuth2TokensAsyncWithHttpInfo($flushInactiveOAuth2TokensRequest = null)
    {
        $returnType = '';
        $request = $this->flushInactiveOAuth2TokensRequest($flushInactiveOAuth2TokensRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'flushInactiveOAuth2Tokens'
     *
     * @param  \Ory\Hydra\Client\Model\FlushInactiveOAuth2TokensRequest $flushInactiveOAuth2TokensRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flushInactiveOAuth2TokensRequest($flushInactiveOAuth2TokensRequest = null)
    {

        $resourcePath = '/oauth2/flush';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($flushInactiveOAuth2TokensRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($flushInactiveOAuth2TokensRequest));
            } else {
                $httpBody = $flushInactiveOAuth2TokensRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsentRequest
     *
     * Get Consent Request Information
     *
     * @param  string $consentChallenge consentChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\ConsentRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError
     */
    public function getConsentRequest($consentChallenge)
    {
        list($response) = $this->getConsentRequestWithHttpInfo($consentChallenge);
        return $response;
    }

    /**
     * Operation getConsentRequestWithHttpInfo
     *
     * Get Consent Request Information
     *
     * @param  string $consentChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\ConsentRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsentRequestWithHttpInfo($consentChallenge)
    {
        $request = $this->getConsentRequestRequest($consentChallenge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\ConsentRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\ConsentRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Ory\Hydra\Client\Model\RequestWasHandledResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\RequestWasHandledResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\ConsentRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\ConsentRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\RequestWasHandledResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsentRequestAsync
     *
     * Get Consent Request Information
     *
     * @param  string $consentChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsentRequestAsync($consentChallenge)
    {
        return $this->getConsentRequestAsyncWithHttpInfo($consentChallenge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsentRequestAsyncWithHttpInfo
     *
     * Get Consent Request Information
     *
     * @param  string $consentChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsentRequestAsyncWithHttpInfo($consentChallenge)
    {
        $returnType = '\Ory\Hydra\Client\Model\ConsentRequest';
        $request = $this->getConsentRequestRequest($consentChallenge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsentRequest'
     *
     * @param  string $consentChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConsentRequestRequest($consentChallenge)
    {
        // verify the required parameter 'consentChallenge' is set
        if ($consentChallenge === null || (is_array($consentChallenge) && count($consentChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consentChallenge when calling getConsentRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/consent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consentChallenge !== null) {
            if('form' === 'form' && is_array($consentChallenge)) {
                foreach($consentChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['consent_challenge'] = $consentChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJsonWebKey
     *
     * Fetch a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function getJsonWebKey($kid, $set)
    {
        list($response) = $this->getJsonWebKeyWithHttpInfo($kid, $set);
        return $response;
    }

    /**
     * Operation getJsonWebKeyWithHttpInfo
     *
     * Fetch a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeyWithHttpInfo($kid, $set)
    {
        $request = $this->getJsonWebKeyRequest($kid, $set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JSONWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JSONWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JSONWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeyAsync
     *
     * Fetch a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeyAsync($kid, $set)
    {
        return $this->getJsonWebKeyAsyncWithHttpInfo($kid, $set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJsonWebKeyAsyncWithHttpInfo
     *
     * Fetch a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeyAsyncWithHttpInfo($kid, $set)
    {
        $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
        $request = $this->getJsonWebKeyRequest($kid, $set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJsonWebKey'
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJsonWebKeyRequest($kid, $set)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling getJsonWebKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling getJsonWebKey'
            );
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJsonWebKeySet
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function getJsonWebKeySet($set)
    {
        list($response) = $this->getJsonWebKeySetWithHttpInfo($set);
        return $response;
    }

    /**
     * Operation getJsonWebKeySetWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJsonWebKeySetWithHttpInfo($set)
    {
        $request = $this->getJsonWebKeySetRequest($set);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JSONWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JSONWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JSONWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJsonWebKeySetAsync
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeySetAsync($set)
    {
        return $this->getJsonWebKeySetAsyncWithHttpInfo($set)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJsonWebKeySetAsyncWithHttpInfo
     *
     * Retrieve a JSON Web Key Set
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJsonWebKeySetAsyncWithHttpInfo($set)
    {
        $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
        $request = $this->getJsonWebKeySetRequest($set);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJsonWebKeySet'
     *
     * @param  string $set The set (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJsonWebKeySetRequest($set)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling getJsonWebKeySet'
            );
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoginRequest
     *
     * Get a Login Request
     *
     * @param  string $loginChallenge loginChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\LoginRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError
     */
    public function getLoginRequest($loginChallenge)
    {
        list($response) = $this->getLoginRequestWithHttpInfo($loginChallenge);
        return $response;
    }

    /**
     * Operation getLoginRequestWithHttpInfo
     *
     * Get a Login Request
     *
     * @param  string $loginChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\LoginRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginRequestWithHttpInfo($loginChallenge)
    {
        $request = $this->getLoginRequestRequest($loginChallenge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\LoginRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\LoginRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Ory\Hydra\Client\Model\RequestWasHandledResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\RequestWasHandledResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\LoginRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\LoginRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\RequestWasHandledResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoginRequestAsync
     *
     * Get a Login Request
     *
     * @param  string $loginChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginRequestAsync($loginChallenge)
    {
        return $this->getLoginRequestAsyncWithHttpInfo($loginChallenge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoginRequestAsyncWithHttpInfo
     *
     * Get a Login Request
     *
     * @param  string $loginChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginRequestAsyncWithHttpInfo($loginChallenge)
    {
        $returnType = '\Ory\Hydra\Client\Model\LoginRequest';
        $request = $this->getLoginRequestRequest($loginChallenge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoginRequest'
     *
     * @param  string $loginChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoginRequestRequest($loginChallenge)
    {
        // verify the required parameter 'loginChallenge' is set
        if ($loginChallenge === null || (is_array($loginChallenge) && count($loginChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loginChallenge when calling getLoginRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loginChallenge !== null) {
            if('form' === 'form' && is_array($loginChallenge)) {
                foreach($loginChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['login_challenge'] = $loginChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLogoutRequest
     *
     * Get a Logout Request
     *
     * @param  string $logoutChallenge logoutChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\LogoutRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError
     */
    public function getLogoutRequest($logoutChallenge)
    {
        list($response) = $this->getLogoutRequestWithHttpInfo($logoutChallenge);
        return $response;
    }

    /**
     * Operation getLogoutRequestWithHttpInfo
     *
     * Get a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\LogoutRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\RequestWasHandledResponse|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLogoutRequestWithHttpInfo($logoutChallenge)
    {
        $request = $this->getLogoutRequestRequest($logoutChallenge);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\LogoutRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\LogoutRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Ory\Hydra\Client\Model\RequestWasHandledResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\RequestWasHandledResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\LogoutRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\LogoutRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\RequestWasHandledResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLogoutRequestAsync
     *
     * Get a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogoutRequestAsync($logoutChallenge)
    {
        return $this->getLogoutRequestAsyncWithHttpInfo($logoutChallenge)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLogoutRequestAsyncWithHttpInfo
     *
     * Get a Logout Request
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogoutRequestAsyncWithHttpInfo($logoutChallenge)
    {
        $returnType = '\Ory\Hydra\Client\Model\LogoutRequest';
        $request = $this->getLogoutRequestRequest($logoutChallenge);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLogoutRequest'
     *
     * @param  string $logoutChallenge (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLogoutRequestRequest($logoutChallenge)
    {
        // verify the required parameter 'logoutChallenge' is set
        if ($logoutChallenge === null || (is_array($logoutChallenge) && count($logoutChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logoutChallenge when calling getLogoutRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($logoutChallenge !== null) {
            if('form' === 'form' && is_array($logoutChallenge)) {
                foreach($logoutChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logout_challenge'] = $logoutChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOAuth2Client
     *
     * Get an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError
     */
    public function getOAuth2Client($id)
    {
        list($response) = $this->getOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOAuth2ClientWithHttpInfo
     *
     * Get an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuth2ClientWithHttpInfo($id)
    {
        $request = $this->getOAuth2ClientRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\OAuth2Client' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2Client', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOAuth2ClientAsync
     *
     * Get an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuth2ClientAsync($id)
    {
        return $this->getOAuth2ClientAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOAuth2ClientAsyncWithHttpInfo
     *
     * Get an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOAuth2ClientAsyncWithHttpInfo($id)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
        $request = $this->getOAuth2ClientRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOAuth2Client'
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOAuth2ClientRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOAuth2Client'
            );
        }

        $resourcePath = '/clients/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrustedJwtGrantIssuer
     *
     * Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError
     */
    public function getTrustedJwtGrantIssuer($id)
    {
        list($response) = $this->getTrustedJwtGrantIssuerWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTrustedJwtGrantIssuerWithHttpInfo
     *
     * Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrustedJwtGrantIssuerWithHttpInfo($id)
    {
        $request = $this->getTrustedJwtGrantIssuerRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrustedJwtGrantIssuerAsync
     *
     * Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrustedJwtGrantIssuerAsync($id)
    {
        return $this->getTrustedJwtGrantIssuerAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrustedJwtGrantIssuerAsyncWithHttpInfo
     *
     * Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrustedJwtGrantIssuerAsyncWithHttpInfo($id)
    {
        $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer';
        $request = $this->getTrustedJwtGrantIssuerRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrustedJwtGrantIssuer'
     *
     * @param  string $id The id of the desired grant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrustedJwtGrantIssuerRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTrustedJwtGrantIssuer'
            );
        }

        $resourcePath = '/trust/grants/jwt-bearer/issuers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation introspectOAuth2Token
     *
     * Introspect OAuth2 Tokens
     *
     * @param  string $token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param  string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2TokenIntrospection|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function introspectOAuth2Token($token, $scope = null)
    {
        list($response) = $this->introspectOAuth2TokenWithHttpInfo($token, $scope);
        return $response;
    }

    /**
     * Operation introspectOAuth2TokenWithHttpInfo
     *
     * Introspect OAuth2 Tokens
     *
     * @param  string $token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param  string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2TokenIntrospection|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function introspectOAuth2TokenWithHttpInfo($token, $scope = null)
    {
        $request = $this->introspectOAuth2TokenRequest($token, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\OAuth2TokenIntrospection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2TokenIntrospection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2TokenIntrospection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2TokenIntrospection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation introspectOAuth2TokenAsync
     *
     * Introspect OAuth2 Tokens
     *
     * @param  string $token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param  string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function introspectOAuth2TokenAsync($token, $scope = null)
    {
        return $this->introspectOAuth2TokenAsyncWithHttpInfo($token, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation introspectOAuth2TokenAsyncWithHttpInfo
     *
     * Introspect OAuth2 Tokens
     *
     * @param  string $token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param  string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function introspectOAuth2TokenAsyncWithHttpInfo($token, $scope = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2TokenIntrospection';
        $request = $this->introspectOAuth2TokenRequest($token, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'introspectOAuth2Token'
     *
     * @param  string $token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param  string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function introspectOAuth2TokenRequest($token, $scope = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling introspectOAuth2Token'
            );
        }

        $resourcePath = '/oauth2/introspect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($scope !== null) {
            $formParams['scope'] = ObjectSerializer::toFormValue($scope);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOAuth2Clients
     *
     * List OAuth 2.0 Clients
     *
     * @param  int $limit The maximum amount of clients to returned, upper bound is 500 clients. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $clientName The name of the clients to filter by. (optional)
     * @param  string $owner The owner of the clients to filter by. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2Client[]|\Ory\Hydra\Client\Model\JsonError
     */
    public function listOAuth2Clients($limit = null, $offset = null, $clientName = null, $owner = null)
    {
        list($response) = $this->listOAuth2ClientsWithHttpInfo($limit, $offset, $clientName, $owner);
        return $response;
    }

    /**
     * Operation listOAuth2ClientsWithHttpInfo
     *
     * List OAuth 2.0 Clients
     *
     * @param  int $limit The maximum amount of clients to returned, upper bound is 500 clients. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $clientName The name of the clients to filter by. (optional)
     * @param  string $owner The owner of the clients to filter by. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2Client[]|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOAuth2ClientsWithHttpInfo($limit = null, $offset = null, $clientName = null, $owner = null)
    {
        $request = $this->listOAuth2ClientsRequest($limit, $offset, $clientName, $owner);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\OAuth2Client[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2Client[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2Client[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2Client[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOAuth2ClientsAsync
     *
     * List OAuth 2.0 Clients
     *
     * @param  int $limit The maximum amount of clients to returned, upper bound is 500 clients. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $clientName The name of the clients to filter by. (optional)
     * @param  string $owner The owner of the clients to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOAuth2ClientsAsync($limit = null, $offset = null, $clientName = null, $owner = null)
    {
        return $this->listOAuth2ClientsAsyncWithHttpInfo($limit, $offset, $clientName, $owner)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOAuth2ClientsAsyncWithHttpInfo
     *
     * List OAuth 2.0 Clients
     *
     * @param  int $limit The maximum amount of clients to returned, upper bound is 500 clients. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $clientName The name of the clients to filter by. (optional)
     * @param  string $owner The owner of the clients to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOAuth2ClientsAsyncWithHttpInfo($limit = null, $offset = null, $clientName = null, $owner = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2Client[]';
        $request = $this->listOAuth2ClientsRequest($limit, $offset, $clientName, $owner);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOAuth2Clients'
     *
     * @param  int $limit The maximum amount of clients to returned, upper bound is 500 clients. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $clientName The name of the clients to filter by. (optional)
     * @param  string $owner The owner of the clients to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOAuth2ClientsRequest($limit = null, $offset = null, $clientName = null, $owner = null)
    {

        $resourcePath = '/clients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($clientName !== null) {
            if('form' === 'form' && is_array($clientName)) {
                foreach($clientName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['client_name'] = $clientName;
            }
        }
        // query params
        if ($owner !== null) {
            if('form' === 'form' && is_array($owner)) {
                foreach($owner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['owner'] = $owner;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSubjectConsentSessions
     *
     * Lists All Consent Sessions of a Subject
     *
     * @param  string $subject subject (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\PreviousConsentSession[]|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function listSubjectConsentSessions($subject)
    {
        list($response) = $this->listSubjectConsentSessionsWithHttpInfo($subject);
        return $response;
    }

    /**
     * Operation listSubjectConsentSessionsWithHttpInfo
     *
     * Lists All Consent Sessions of a Subject
     *
     * @param  string $subject (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\PreviousConsentSession[]|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSubjectConsentSessionsWithHttpInfo($subject)
    {
        $request = $this->listSubjectConsentSessionsRequest($subject);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\PreviousConsentSession[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\PreviousConsentSession[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\PreviousConsentSession[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\PreviousConsentSession[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSubjectConsentSessionsAsync
     *
     * Lists All Consent Sessions of a Subject
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSubjectConsentSessionsAsync($subject)
    {
        return $this->listSubjectConsentSessionsAsyncWithHttpInfo($subject)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSubjectConsentSessionsAsyncWithHttpInfo
     *
     * Lists All Consent Sessions of a Subject
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSubjectConsentSessionsAsyncWithHttpInfo($subject)
    {
        $returnType = '\Ory\Hydra\Client\Model\PreviousConsentSession[]';
        $request = $this->listSubjectConsentSessionsRequest($subject);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSubjectConsentSessions'
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSubjectConsentSessionsRequest($subject)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling listSubjectConsentSessions'
            );
        }

        $resourcePath = '/oauth2/auth/sessions/consent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($subject !== null) {
            if('form' === 'form' && is_array($subject)) {
                foreach($subject as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject'] = $subject;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrustedJwtGrantIssuers
     *
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     *
     * @param  string $issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param  int $limit The maximum amount of policies returned, upper bound is 500 policies (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]|\Ory\Hydra\Client\Model\GenericError
     */
    public function listTrustedJwtGrantIssuers($issuer = null, $limit = null, $offset = null)
    {
        list($response) = $this->listTrustedJwtGrantIssuersWithHttpInfo($issuer, $limit, $offset);
        return $response;
    }

    /**
     * Operation listTrustedJwtGrantIssuersWithHttpInfo
     *
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     *
     * @param  string $issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param  int $limit The maximum amount of policies returned, upper bound is 500 policies (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]|\Ory\Hydra\Client\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrustedJwtGrantIssuersWithHttpInfo($issuer = null, $limit = null, $offset = null)
    {
        $request = $this->listTrustedJwtGrantIssuersRequest($issuer, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTrustedJwtGrantIssuersAsync
     *
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     *
     * @param  string $issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param  int $limit The maximum amount of policies returned, upper bound is 500 policies (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrustedJwtGrantIssuersAsync($issuer = null, $limit = null, $offset = null)
    {
        return $this->listTrustedJwtGrantIssuersAsyncWithHttpInfo($issuer, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrustedJwtGrantIssuersAsyncWithHttpInfo
     *
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     *
     * @param  string $issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param  int $limit The maximum amount of policies returned, upper bound is 500 policies (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrustedJwtGrantIssuersAsyncWithHttpInfo($issuer = null, $limit = null, $offset = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer[]';
        $request = $this->listTrustedJwtGrantIssuersRequest($issuer, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrustedJwtGrantIssuers'
     *
     * @param  string $issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param  int $limit The maximum amount of policies returned, upper bound is 500 policies (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrustedJwtGrantIssuersRequest($issuer = null, $limit = null, $offset = null)
    {

        $resourcePath = '/trust/grants/jwt-bearer/issuers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($issuer !== null) {
            if('form' === 'form' && is_array($issuer)) {
                foreach($issuer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['issuer'] = $issuer;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOAuth2Client
     *
     * Patch an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\PatchDocument[] $patchDocument patchDocument (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError
     */
    public function patchOAuth2Client($id, $patchDocument)
    {
        list($response) = $this->patchOAuth2ClientWithHttpInfo($id, $patchDocument);
        return $response;
    }

    /**
     * Operation patchOAuth2ClientWithHttpInfo
     *
     * Patch an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\PatchDocument[] $patchDocument (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOAuth2ClientWithHttpInfo($id, $patchDocument)
    {
        $request = $this->patchOAuth2ClientRequest($id, $patchDocument);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\OAuth2Client' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2Client', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOAuth2ClientAsync
     *
     * Patch an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\PatchDocument[] $patchDocument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOAuth2ClientAsync($id, $patchDocument)
    {
        return $this->patchOAuth2ClientAsyncWithHttpInfo($id, $patchDocument)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOAuth2ClientAsyncWithHttpInfo
     *
     * Patch an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\PatchDocument[] $patchDocument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOAuth2ClientAsyncWithHttpInfo($id, $patchDocument)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
        $request = $this->patchOAuth2ClientRequest($id, $patchDocument);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOAuth2Client'
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\PatchDocument[] $patchDocument (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOAuth2ClientRequest($id, $patchDocument)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchOAuth2Client'
            );
        }
        // verify the required parameter 'patchDocument' is set
        if ($patchDocument === null || (is_array($patchDocument) && count($patchDocument) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patchDocument when calling patchOAuth2Client'
            );
        }

        $resourcePath = '/clients/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($patchDocument)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patchDocument));
            } else {
                $httpBody = $patchDocument;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectConsentRequest
     *
     * Reject a Consent Request
     *
     * @param  string $consentChallenge consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function rejectConsentRequest($consentChallenge, $rejectRequest = null)
    {
        list($response) = $this->rejectConsentRequestWithHttpInfo($consentChallenge, $rejectRequest);
        return $response;
    }

    /**
     * Operation rejectConsentRequestWithHttpInfo
     *
     * Reject a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectConsentRequestWithHttpInfo($consentChallenge, $rejectRequest = null)
    {
        $request = $this->rejectConsentRequestRequest($consentChallenge, $rejectRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\CompletedRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\CompletedRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\CompletedRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectConsentRequestAsync
     *
     * Reject a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectConsentRequestAsync($consentChallenge, $rejectRequest = null)
    {
        return $this->rejectConsentRequestAsyncWithHttpInfo($consentChallenge, $rejectRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectConsentRequestAsyncWithHttpInfo
     *
     * Reject a Consent Request
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectConsentRequestAsyncWithHttpInfo($consentChallenge, $rejectRequest = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
        $request = $this->rejectConsentRequestRequest($consentChallenge, $rejectRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectConsentRequest'
     *
     * @param  string $consentChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectConsentRequestRequest($consentChallenge, $rejectRequest = null)
    {
        // verify the required parameter 'consentChallenge' is set
        if ($consentChallenge === null || (is_array($consentChallenge) && count($consentChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consentChallenge when calling rejectConsentRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/consent/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consentChallenge !== null) {
            if('form' === 'form' && is_array($consentChallenge)) {
                foreach($consentChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['consent_challenge'] = $consentChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rejectRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rejectRequest));
            } else {
                $httpBody = $rejectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectLoginRequest
     *
     * Reject a Login Request
     *
     * @param  string $loginChallenge loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function rejectLoginRequest($loginChallenge, $rejectRequest = null)
    {
        list($response) = $this->rejectLoginRequestWithHttpInfo($loginChallenge, $rejectRequest);
        return $response;
    }

    /**
     * Operation rejectLoginRequestWithHttpInfo
     *
     * Reject a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\CompletedRequest|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectLoginRequestWithHttpInfo($loginChallenge, $rejectRequest = null)
    {
        $request = $this->rejectLoginRequestRequest($loginChallenge, $rejectRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\CompletedRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\CompletedRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\CompletedRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectLoginRequestAsync
     *
     * Reject a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectLoginRequestAsync($loginChallenge, $rejectRequest = null)
    {
        return $this->rejectLoginRequestAsyncWithHttpInfo($loginChallenge, $rejectRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectLoginRequestAsyncWithHttpInfo
     *
     * Reject a Login Request
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectLoginRequestAsyncWithHttpInfo($loginChallenge, $rejectRequest = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\CompletedRequest';
        $request = $this->rejectLoginRequestRequest($loginChallenge, $rejectRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectLoginRequest'
     *
     * @param  string $loginChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectLoginRequestRequest($loginChallenge, $rejectRequest = null)
    {
        // verify the required parameter 'loginChallenge' is set
        if ($loginChallenge === null || (is_array($loginChallenge) && count($loginChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loginChallenge when calling rejectLoginRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/login/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loginChallenge !== null) {
            if('form' === 'form' && is_array($loginChallenge)) {
                foreach($loginChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['login_challenge'] = $loginChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rejectRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rejectRequest));
            } else {
                $httpBody = $rejectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectLogoutRequest
     *
     * Reject a Logout Request
     *
     * @param  string $logoutChallenge logoutChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rejectLogoutRequest($logoutChallenge, $rejectRequest = null)
    {
        $this->rejectLogoutRequestWithHttpInfo($logoutChallenge, $rejectRequest);
    }

    /**
     * Operation rejectLogoutRequestWithHttpInfo
     *
     * Reject a Logout Request
     *
     * @param  string $logoutChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectLogoutRequestWithHttpInfo($logoutChallenge, $rejectRequest = null)
    {
        $request = $this->rejectLogoutRequestRequest($logoutChallenge, $rejectRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectLogoutRequestAsync
     *
     * Reject a Logout Request
     *
     * @param  string $logoutChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectLogoutRequestAsync($logoutChallenge, $rejectRequest = null)
    {
        return $this->rejectLogoutRequestAsyncWithHttpInfo($logoutChallenge, $rejectRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectLogoutRequestAsyncWithHttpInfo
     *
     * Reject a Logout Request
     *
     * @param  string $logoutChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectLogoutRequestAsyncWithHttpInfo($logoutChallenge, $rejectRequest = null)
    {
        $returnType = '';
        $request = $this->rejectLogoutRequestRequest($logoutChallenge, $rejectRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectLogoutRequest'
     *
     * @param  string $logoutChallenge (required)
     * @param  \Ory\Hydra\Client\Model\RejectRequest $rejectRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectLogoutRequestRequest($logoutChallenge, $rejectRequest = null)
    {
        // verify the required parameter 'logoutChallenge' is set
        if ($logoutChallenge === null || (is_array($logoutChallenge) && count($logoutChallenge) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logoutChallenge when calling rejectLogoutRequest'
            );
        }

        $resourcePath = '/oauth2/auth/requests/logout/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($logoutChallenge !== null) {
            if('form' === 'form' && is_array($logoutChallenge)) {
                foreach($logoutChallenge as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logout_challenge'] = $logoutChallenge;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($rejectRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rejectRequest));
            } else {
                $httpBody = $rejectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeAuthenticationSession
     *
     * Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
     *
     * @param  string $subject subject (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeAuthenticationSession($subject)
    {
        $this->revokeAuthenticationSessionWithHttpInfo($subject);
    }

    /**
     * Operation revokeAuthenticationSessionWithHttpInfo
     *
     * Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
     *
     * @param  string $subject (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeAuthenticationSessionWithHttpInfo($subject)
    {
        $request = $this->revokeAuthenticationSessionRequest($subject);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeAuthenticationSessionAsync
     *
     * Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAuthenticationSessionAsync($subject)
    {
        return $this->revokeAuthenticationSessionAsyncWithHttpInfo($subject)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeAuthenticationSessionAsyncWithHttpInfo
     *
     * Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAuthenticationSessionAsyncWithHttpInfo($subject)
    {
        $returnType = '';
        $request = $this->revokeAuthenticationSessionRequest($subject);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeAuthenticationSession'
     *
     * @param  string $subject (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeAuthenticationSessionRequest($subject)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling revokeAuthenticationSession'
            );
        }

        $resourcePath = '/oauth2/auth/sessions/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($subject !== null) {
            if('form' === 'form' && is_array($subject)) {
                foreach($subject as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject'] = $subject;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeConsentSessions
     *
     * Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     *
     * @param  string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param  string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @param  bool $all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function revokeConsentSessions($subject, $client = null, $all = null)
    {
        $this->revokeConsentSessionsWithHttpInfo($subject, $client, $all);
    }

    /**
     * Operation revokeConsentSessionsWithHttpInfo
     *
     * Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     *
     * @param  string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param  string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @param  bool $all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeConsentSessionsWithHttpInfo($subject, $client = null, $all = null)
    {
        $request = $this->revokeConsentSessionsRequest($subject, $client, $all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeConsentSessionsAsync
     *
     * Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     *
     * @param  string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param  string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @param  bool $all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeConsentSessionsAsync($subject, $client = null, $all = null)
    {
        return $this->revokeConsentSessionsAsyncWithHttpInfo($subject, $client, $all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeConsentSessionsAsyncWithHttpInfo
     *
     * Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
     *
     * @param  string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param  string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @param  bool $all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeConsentSessionsAsyncWithHttpInfo($subject, $client = null, $all = null)
    {
        $returnType = '';
        $request = $this->revokeConsentSessionsRequest($subject, $client, $all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeConsentSessions'
     *
     * @param  string $subject The subject (Subject) who&#39;s consent sessions should be deleted. (required)
     * @param  string $client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)
     * @param  bool $all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeConsentSessionsRequest($subject, $client = null, $all = null)
    {
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling revokeConsentSessions'
            );
        }

        $resourcePath = '/oauth2/auth/sessions/consent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($subject !== null) {
            if('form' === 'form' && is_array($subject)) {
                foreach($subject as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject'] = $subject;
            }
        }
        // query params
        if ($client !== null) {
            if('form' === 'form' && is_array($client)) {
                foreach($client as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['client'] = $client;
            }
        }
        // query params
        if ($all !== null) {
            if('form' === 'form' && is_array($all)) {
                foreach($all as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['all'] = $all;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trustJwtGrantIssuer
     *
     * Trust an OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  \Ory\Hydra\Client\Model\TrustJwtGrantIssuerBody $trustJwtGrantIssuerBody trustJwtGrantIssuerBody (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError
     */
    public function trustJwtGrantIssuer($trustJwtGrantIssuerBody = null)
    {
        list($response) = $this->trustJwtGrantIssuerWithHttpInfo($trustJwtGrantIssuerBody);
        return $response;
    }

    /**
     * Operation trustJwtGrantIssuerWithHttpInfo
     *
     * Trust an OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  \Ory\Hydra\Client\Model\TrustJwtGrantIssuerBody $trustJwtGrantIssuerBody (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\TrustedJwtGrantIssuer|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError|\Ory\Hydra\Client\Model\GenericError, HTTP status code, HTTP response headers (array of strings)
     */
    public function trustJwtGrantIssuerWithHttpInfo($trustJwtGrantIssuerBody = null)
    {
        $request = $this->trustJwtGrantIssuerRequest($trustJwtGrantIssuerBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\GenericError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\GenericError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\GenericError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trustJwtGrantIssuerAsync
     *
     * Trust an OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  \Ory\Hydra\Client\Model\TrustJwtGrantIssuerBody $trustJwtGrantIssuerBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trustJwtGrantIssuerAsync($trustJwtGrantIssuerBody = null)
    {
        return $this->trustJwtGrantIssuerAsyncWithHttpInfo($trustJwtGrantIssuerBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trustJwtGrantIssuerAsyncWithHttpInfo
     *
     * Trust an OAuth2 JWT Bearer Grant Type Issuer
     *
     * @param  \Ory\Hydra\Client\Model\TrustJwtGrantIssuerBody $trustJwtGrantIssuerBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trustJwtGrantIssuerAsyncWithHttpInfo($trustJwtGrantIssuerBody = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\TrustedJwtGrantIssuer';
        $request = $this->trustJwtGrantIssuerRequest($trustJwtGrantIssuerBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trustJwtGrantIssuer'
     *
     * @param  \Ory\Hydra\Client\Model\TrustJwtGrantIssuerBody $trustJwtGrantIssuerBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trustJwtGrantIssuerRequest($trustJwtGrantIssuerBody = null)
    {

        $resourcePath = '/trust/grants/jwt-bearer/issuers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($trustJwtGrantIssuerBody)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($trustJwtGrantIssuerBody));
            } else {
                $httpBody = $trustJwtGrantIssuerBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJsonWebKey
     *
     * Update a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKey $jSONWebKey jSONWebKey (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JSONWebKey|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function updateJsonWebKey($kid, $set, $jSONWebKey = null)
    {
        list($response) = $this->updateJsonWebKeyWithHttpInfo($kid, $set, $jSONWebKey);
        return $response;
    }

    /**
     * Operation updateJsonWebKeyWithHttpInfo
     *
     * Update a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKey $jSONWebKey (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JSONWebKey|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeyWithHttpInfo($kid, $set, $jSONWebKey = null)
    {
        $request = $this->updateJsonWebKeyRequest($kid, $set, $jSONWebKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JSONWebKey' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JSONWebKey', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JSONWebKey';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JSONWebKey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKeyAsync
     *
     * Update a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKey $jSONWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJsonWebKeyAsync($kid, $set, $jSONWebKey = null)
    {
        return $this->updateJsonWebKeyAsyncWithHttpInfo($kid, $set, $jSONWebKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateJsonWebKeyAsyncWithHttpInfo
     *
     * Update a JSON Web Key
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKey $jSONWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJsonWebKeyAsyncWithHttpInfo($kid, $set, $jSONWebKey = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\JSONWebKey';
        $request = $this->updateJsonWebKeyRequest($kid, $set, $jSONWebKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateJsonWebKey'
     *
     * @param  string $kid The kid of the desired key (required)
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKey $jSONWebKey (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateJsonWebKeyRequest($kid, $set, $jSONWebKey = null)
    {
        // verify the required parameter 'kid' is set
        if ($kid === null || (is_array($kid) && count($kid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $kid when calling updateJsonWebKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling updateJsonWebKey'
            );
        }

        $resourcePath = '/keys/{set}/{kid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($kid !== null) {
            $resourcePath = str_replace(
                '{' . 'kid' . '}',
                ObjectSerializer::toPathValue($kid),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jSONWebKey)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jSONWebKey));
            } else {
                $httpBody = $jSONWebKey;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateJsonWebKeySet
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKeySet $jSONWebKeySet jSONWebKeySet (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError
     */
    public function updateJsonWebKeySet($set, $jSONWebKeySet = null)
    {
        list($response) = $this->updateJsonWebKeySetWithHttpInfo($set, $jSONWebKeySet);
        return $response;
    }

    /**
     * Operation updateJsonWebKeySetWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKeySet $jSONWebKeySet (optional)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\JSONWebKeySet|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateJsonWebKeySetWithHttpInfo($set, $jSONWebKeySet = null)
    {
        $request = $this->updateJsonWebKeySetRequest($set, $jSONWebKeySet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\JSONWebKeySet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JSONWebKeySet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JSONWebKeySet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateJsonWebKeySetAsync
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKeySet $jSONWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJsonWebKeySetAsync($set, $jSONWebKeySet = null)
    {
        return $this->updateJsonWebKeySetAsyncWithHttpInfo($set, $jSONWebKeySet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateJsonWebKeySetAsyncWithHttpInfo
     *
     * Update a JSON Web Key Set
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKeySet $jSONWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateJsonWebKeySetAsyncWithHttpInfo($set, $jSONWebKeySet = null)
    {
        $returnType = '\Ory\Hydra\Client\Model\JSONWebKeySet';
        $request = $this->updateJsonWebKeySetRequest($set, $jSONWebKeySet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateJsonWebKeySet'
     *
     * @param  string $set The set (required)
     * @param  \Ory\Hydra\Client\Model\JSONWebKeySet $jSONWebKeySet (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateJsonWebKeySetRequest($set, $jSONWebKeySet = null)
    {
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling updateJsonWebKeySet'
            );
        }

        $resourcePath = '/keys/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($jSONWebKeySet)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jSONWebKeySet));
            } else {
                $httpBody = $jSONWebKeySet;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOAuth2Client
     *
     * Update an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client oAuth2Client (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError
     */
    public function updateOAuth2Client($id, $oAuth2Client)
    {
        list($response) = $this->updateOAuth2ClientWithHttpInfo($id, $oAuth2Client);
        return $response;
    }

    /**
     * Operation updateOAuth2ClientWithHttpInfo
     *
     * Update an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \Ory\Hydra\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Hydra\Client\Model\OAuth2Client|\Ory\Hydra\Client\Model\JsonError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOAuth2ClientWithHttpInfo($id, $oAuth2Client)
    {
        $request = $this->updateOAuth2ClientRequest($id, $oAuth2Client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Hydra\Client\Model\OAuth2Client' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\OAuth2Client', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Hydra\Client\Model\JsonError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Hydra\Client\Model\JsonError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\OAuth2Client',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Hydra\Client\Model\JsonError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOAuth2ClientAsync
     *
     * Update an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOAuth2ClientAsync($id, $oAuth2Client)
    {
        return $this->updateOAuth2ClientAsyncWithHttpInfo($id, $oAuth2Client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOAuth2ClientAsyncWithHttpInfo
     *
     * Update an OAuth 2.0 Client
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOAuth2ClientAsyncWithHttpInfo($id, $oAuth2Client)
    {
        $returnType = '\Ory\Hydra\Client\Model\OAuth2Client';
        $request = $this->updateOAuth2ClientRequest($id, $oAuth2Client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOAuth2Client'
     *
     * @param  string $id The id of the OAuth 2.0 Client. (required)
     * @param  \Ory\Hydra\Client\Model\OAuth2Client $oAuth2Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOAuth2ClientRequest($id, $oAuth2Client)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateOAuth2Client'
            );
        }
        // verify the required parameter 'oAuth2Client' is set
        if ($oAuth2Client === null || (is_array($oAuth2Client) && count($oAuth2Client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oAuth2Client when calling updateOAuth2Client'
            );
        }

        $resourcePath = '/clients/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($oAuth2Client)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($oAuth2Client));
            } else {
                $httpBody = $oAuth2Client;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
