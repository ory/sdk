=begin
#Ory Hydra API

#Documentation for all of Ory Hydra's APIs. 

The version of the OpenAPI document: v1.11.8
Contact: hi@ory.sh
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OryHydraClient
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept a Consent Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptConsentRequest] :accept_consent_request 
    # @return [CompletedRequest]
    def accept_consent_request(consent_challenge, opts = {})
      data, _status_code, _headers = accept_consent_request_with_http_info(consent_challenge, opts)
      data
    end

    # Accept a Consent Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptConsentRequest] :accept_consent_request 
    # @return [Array<(CompletedRequest, Integer, Hash)>] CompletedRequest data, response status code and response headers
    def accept_consent_request_with_http_info(consent_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.accept_consent_request ...'
      end
      # verify the required parameter 'consent_challenge' is set
      if @api_client.config.client_side_validation && consent_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'consent_challenge' when calling AdminApi.accept_consent_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/consent/accept'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'consent_challenge'] = consent_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'accept_consent_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CompletedRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.accept_consent_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#accept_consent_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptLoginRequest] :accept_login_request 
    # @return [CompletedRequest]
    def accept_login_request(login_challenge, opts = {})
      data, _status_code, _headers = accept_login_request_with_http_info(login_challenge, opts)
      data
    end

    # Accept a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AcceptLoginRequest] :accept_login_request 
    # @return [Array<(CompletedRequest, Integer, Hash)>] CompletedRequest data, response status code and response headers
    def accept_login_request_with_http_info(login_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.accept_login_request ...'
      end
      # verify the required parameter 'login_challenge' is set
      if @api_client.config.client_side_validation && login_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'login_challenge' when calling AdminApi.accept_login_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/login/accept'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'login_challenge'] = login_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'accept_login_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CompletedRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.accept_login_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#accept_login_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accept a Logout Request
    # When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [CompletedRequest]
    def accept_logout_request(logout_challenge, opts = {})
      data, _status_code, _headers = accept_logout_request_with_http_info(logout_challenge, opts)
      data
    end

    # Accept a Logout Request
    # When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompletedRequest, Integer, Hash)>] CompletedRequest data, response status code and response headers
    def accept_logout_request_with_http_info(logout_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.accept_logout_request ...'
      end
      # verify the required parameter 'logout_challenge' is set
      if @api_client.config.client_side_validation && logout_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'logout_challenge' when calling AdminApi.accept_logout_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/logout/accept'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logout_challenge'] = logout_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompletedRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.accept_logout_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#accept_logout_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a New JSON Web Key
    # This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JsonWebKeySetGeneratorRequest] :json_web_key_set_generator_request 
    # @return [JSONWebKeySet]
    def create_json_web_key_set(set, opts = {})
      data, _status_code, _headers = create_json_web_key_set_with_http_info(set, opts)
      data
    end

    # Generate a New JSON Web Key
    # This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JsonWebKeySetGeneratorRequest] :json_web_key_set_generator_request 
    # @return [Array<(JSONWebKeySet, Integer, Hash)>] JSONWebKeySet data, response status code and response headers
    def create_json_web_key_set_with_http_info(set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_json_web_key_set ...'
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.create_json_web_key_set"
      end
      # resource path
      local_var_path = '/keys/{set}'.sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_web_key_set_generator_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'JSONWebKeySet'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.create_json_web_key_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_json_web_key_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an OAuth 2.0 Client
    # Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param o_auth2_client [OAuth2Client] 
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Client]
    def create_o_auth2_client(o_auth2_client, opts = {})
      data, _status_code, _headers = create_o_auth2_client_with_http_info(o_auth2_client, opts)
      data
    end

    # Create an OAuth 2.0 Client
    # Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param o_auth2_client [OAuth2Client] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Client, Integer, Hash)>] OAuth2Client data, response status code and response headers
    def create_o_auth2_client_with_http_info(o_auth2_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.create_o_auth2_client ...'
      end
      # verify the required parameter 'o_auth2_client' is set
      if @api_client.config.client_side_validation && o_auth2_client.nil?
        fail ArgumentError, "Missing the required parameter 'o_auth2_client' when calling AdminApi.create_o_auth2_client"
      end
      # resource path
      local_var_path = '/clients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(o_auth2_client)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Client'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.create_o_auth2_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_o_auth2_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a JSON Web Key
    # Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_json_web_key(kid, set, opts = {})
      delete_json_web_key_with_http_info(kid, set, opts)
      nil
    end

    # Delete a JSON Web Key
    # Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_json_web_key_with_http_info(kid, set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_json_web_key ...'
      end
      # verify the required parameter 'kid' is set
      if @api_client.config.client_side_validation && kid.nil?
        fail ArgumentError, "Missing the required parameter 'kid' when calling AdminApi.delete_json_web_key"
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.delete_json_web_key"
      end
      # resource path
      local_var_path = '/keys/{set}/{kid}'.sub('{' + 'kid' + '}', CGI.escape(kid.to_s)).sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.delete_json_web_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_json_web_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a JSON Web Key Set
    # Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_json_web_key_set(set, opts = {})
      delete_json_web_key_set_with_http_info(set, opts)
      nil
    end

    # Delete a JSON Web Key Set
    # Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_json_web_key_set_with_http_info(set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_json_web_key_set ...'
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.delete_json_web_key_set"
      end
      # resource path
      local_var_path = '/keys/{set}'.sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.delete_json_web_key_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_json_web_key_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an OAuth 2.0 Client
    # Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_o_auth2_client(id, opts = {})
      delete_o_auth2_client_with_http_info(id, opts)
      nil
    end

    # Deletes an OAuth 2.0 Client
    # Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_o_auth2_client_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_o_auth2_client ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_o_auth2_client"
      end
      # resource path
      local_var_path = '/clients/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.delete_o_auth2_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_o_auth2_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete OAuth2 Access Tokens from a Client
    # This endpoint deletes OAuth2 access tokens issued for a client from the database
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_o_auth2_token(client_id, opts = {})
      delete_o_auth2_token_with_http_info(client_id, opts)
      nil
    end

    # Delete OAuth2 Access Tokens from a Client
    # This endpoint deletes OAuth2 access tokens issued for a client from the database
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_o_auth2_token_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_o_auth2_token ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AdminApi.delete_o_auth2_token"
      end
      # resource path
      local_var_path = '/oauth2/tokens'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_id'] = client_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.delete_o_auth2_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_o_auth2_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
    # @param id [String] The id of the desired grant
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_trusted_jwt_grant_issuer(id, opts = {})
      delete_trusted_jwt_grant_issuer_with_http_info(id, opts)
      nil
    end

    # Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
    # @param id [String] The id of the desired grant
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_trusted_jwt_grant_issuer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_trusted_jwt_grant_issuer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.delete_trusted_jwt_grant_issuer"
      end
      # resource path
      local_var_path = '/trust/grants/jwt-bearer/issuers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.delete_trusted_jwt_grant_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_trusted_jwt_grant_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flush Expired OAuth2 Access Tokens
    # This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
    # @param [Hash] opts the optional parameters
    # @option opts [FlushInactiveOAuth2TokensRequest] :flush_inactive_o_auth2_tokens_request 
    # @return [nil]
    def flush_inactive_o_auth2_tokens(opts = {})
      flush_inactive_o_auth2_tokens_with_http_info(opts)
      nil
    end

    # Flush Expired OAuth2 Access Tokens
    # This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
    # @param [Hash] opts the optional parameters
    # @option opts [FlushInactiveOAuth2TokensRequest] :flush_inactive_o_auth2_tokens_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def flush_inactive_o_auth2_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.flush_inactive_o_auth2_tokens ...'
      end
      # resource path
      local_var_path = '/oauth2/flush'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'flush_inactive_o_auth2_tokens_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.flush_inactive_o_auth2_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#flush_inactive_o_auth2_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Consent Request Information
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [ConsentRequest]
    def get_consent_request(consent_challenge, opts = {})
      data, _status_code, _headers = get_consent_request_with_http_info(consent_challenge, opts)
      data
    end

    # Get Consent Request Information
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentRequest, Integer, Hash)>] ConsentRequest data, response status code and response headers
    def get_consent_request_with_http_info(consent_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_consent_request ...'
      end
      # verify the required parameter 'consent_challenge' is set
      if @api_client.config.client_side_validation && consent_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'consent_challenge' when calling AdminApi.get_consent_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/consent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'consent_challenge'] = consent_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConsentRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_consent_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_consent_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a JSON Web Key
    # This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [JSONWebKeySet]
    def get_json_web_key(kid, set, opts = {})
      data, _status_code, _headers = get_json_web_key_with_http_info(kid, set, opts)
      data
    end

    # Fetch a JSON Web Key
    # This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [Array<(JSONWebKeySet, Integer, Hash)>] JSONWebKeySet data, response status code and response headers
    def get_json_web_key_with_http_info(kid, set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_json_web_key ...'
      end
      # verify the required parameter 'kid' is set
      if @api_client.config.client_side_validation && kid.nil?
        fail ArgumentError, "Missing the required parameter 'kid' when calling AdminApi.get_json_web_key"
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.get_json_web_key"
      end
      # resource path
      local_var_path = '/keys/{set}/{kid}'.sub('{' + 'kid' + '}', CGI.escape(kid.to_s)).sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JSONWebKeySet'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_json_web_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_json_web_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a JSON Web Key Set
    # This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [JSONWebKeySet]
    def get_json_web_key_set(set, opts = {})
      data, _status_code, _headers = get_json_web_key_set_with_http_info(set, opts)
      data
    end

    # Retrieve a JSON Web Key Set
    # This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @return [Array<(JSONWebKeySet, Integer, Hash)>] JSONWebKeySet data, response status code and response headers
    def get_json_web_key_set_with_http_info(set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_json_web_key_set ...'
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.get_json_web_key_set"
      end
      # resource path
      local_var_path = '/keys/{set}'.sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JSONWebKeySet'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_json_web_key_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_json_web_key_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [LoginRequest]
    def get_login_request(login_challenge, opts = {})
      data, _status_code, _headers = get_login_request_with_http_info(login_challenge, opts)
      data
    end

    # Get a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoginRequest, Integer, Hash)>] LoginRequest data, response status code and response headers
    def get_login_request_with_http_info(login_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_login_request ...'
      end
      # verify the required parameter 'login_challenge' is set
      if @api_client.config.client_side_validation && login_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'login_challenge' when calling AdminApi.get_login_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'login_challenge'] = login_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LoginRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_login_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_login_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Logout Request
    # Use this endpoint to fetch a logout request.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [LogoutRequest]
    def get_logout_request(logout_challenge, opts = {})
      data, _status_code, _headers = get_logout_request_with_http_info(logout_challenge, opts)
      data
    end

    # Get a Logout Request
    # Use this endpoint to fetch a logout request.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogoutRequest, Integer, Hash)>] LogoutRequest data, response status code and response headers
    def get_logout_request_with_http_info(logout_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_logout_request ...'
      end
      # verify the required parameter 'logout_challenge' is set
      if @api_client.config.client_side_validation && logout_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'logout_challenge' when calling AdminApi.get_logout_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/logout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logout_challenge'] = logout_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LogoutRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_logout_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_logout_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an OAuth 2.0 Client
    # Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Client]
    def get_o_auth2_client(id, opts = {})
      data, _status_code, _headers = get_o_auth2_client_with_http_info(id, opts)
      data
    end

    # Get an OAuth 2.0 Client
    # Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Client, Integer, Hash)>] OAuth2Client data, response status code and response headers
    def get_o_auth2_client_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_o_auth2_client ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_o_auth2_client"
      end
      # resource path
      local_var_path = '/clients/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Client'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_o_auth2_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_o_auth2_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
    # @param id [String] The id of the desired grant
    # @param [Hash] opts the optional parameters
    # @return [TrustedJwtGrantIssuer]
    def get_trusted_jwt_grant_issuer(id, opts = {})
      data, _status_code, _headers = get_trusted_jwt_grant_issuer_with_http_info(id, opts)
      data
    end

    # Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
    # @param id [String] The id of the desired grant
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrustedJwtGrantIssuer, Integer, Hash)>] TrustedJwtGrantIssuer data, response status code and response headers
    def get_trusted_jwt_grant_issuer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_trusted_jwt_grant_issuer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.get_trusted_jwt_grant_issuer"
      end
      # resource path
      local_var_path = '/trust/grants/jwt-bearer/issuers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TrustedJwtGrantIssuer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.get_trusted_jwt_grant_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_trusted_jwt_grant_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Introspect OAuth2 Tokens
    # The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting `accessTokenExtra` during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
    # @param token [String] The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
    # @return [OAuth2TokenIntrospection]
    def introspect_o_auth2_token(token, opts = {})
      data, _status_code, _headers = introspect_o_auth2_token_with_http_info(token, opts)
      data
    end

    # Introspect OAuth2 Tokens
    # The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
    # @param token [String] The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
    # @return [Array<(OAuth2TokenIntrospection, Integer, Hash)>] OAuth2TokenIntrospection data, response status code and response headers
    def introspect_o_auth2_token_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.introspect_o_auth2_token ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.introspect_o_auth2_token"
      end
      # resource path
      local_var_path = '/oauth2/introspect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = token
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2TokenIntrospection'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.introspect_o_auth2_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#introspect_o_auth2_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List OAuth 2.0 Clients
    # This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'. Multiple links can be included in this header, and will be separated by a comma.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum amount of clients to returned, upper bound is 500 clients.
    # @option opts [Integer] :offset The offset from where to start looking.
    # @option opts [String] :client_name The name of the clients to filter by.
    # @option opts [String] :owner The owner of the clients to filter by.
    # @return [Array<OAuth2Client>]
    def list_o_auth2_clients(opts = {})
      data, _status_code, _headers = list_o_auth2_clients_with_http_info(opts)
      data
    end

    # List OAuth 2.0 Clients
    # This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum amount of clients to returned, upper bound is 500 clients.
    # @option opts [Integer] :offset The offset from where to start looking.
    # @option opts [String] :client_name The name of the clients to filter by.
    # @option opts [String] :owner The owner of the clients to filter by.
    # @return [Array<(Array<OAuth2Client>, Integer, Hash)>] Array<OAuth2Client> data, response status code and response headers
    def list_o_auth2_clients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.list_o_auth2_clients ...'
      end
      # resource path
      local_var_path = '/clients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'client_name'] = opts[:'client_name'] if !opts[:'client_name'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OAuth2Client>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.list_o_auth2_clients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#list_o_auth2_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists All Consent Sessions of a Subject
    # This endpoint lists all subject's granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'. Multiple links can be included in this header, and will be separated by a comma.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum amount of consent sessions to be returned, upper bound is 500 sessions.
    # @option opts [Integer] :offset The offset from where to start looking.
    # @return [Array<PreviousConsentSession>]
    def list_subject_consent_sessions(subject, opts = {})
      data, _status_code, _headers = list_subject_consent_sessions_with_http_info(subject, opts)
      data
    end

    # Lists All Consent Sessions of a Subject
    # This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum amount of consent sessions to be returned, upper bound is 500 sessions.
    # @option opts [Integer] :offset The offset from where to start looking.
    # @return [Array<(Array<PreviousConsentSession>, Integer, Hash)>] Array<PreviousConsentSession> data, response status code and response headers
    def list_subject_consent_sessions_with_http_info(subject, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.list_subject_consent_sessions ...'
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling AdminApi.list_subject_consent_sessions"
      end
      # resource path
      local_var_path = '/oauth2/auth/sessions/consent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subject'] = subject
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PreviousConsentSession>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.list_subject_consent_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#list_subject_consent_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Trusted OAuth2 JWT Bearer Grant Type Issuers
    # Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
    # @option opts [Integer] :limit The maximum amount of policies returned, upper bound is 500 policies
    # @option opts [Integer] :offset The offset from where to start looking.
    # @return [Array<TrustedJwtGrantIssuer>]
    def list_trusted_jwt_grant_issuers(opts = {})
      data, _status_code, _headers = list_trusted_jwt_grant_issuers_with_http_info(opts)
      data
    end

    # List Trusted OAuth2 JWT Bearer Grant Type Issuers
    # Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned.
    # @option opts [Integer] :limit The maximum amount of policies returned, upper bound is 500 policies
    # @option opts [Integer] :offset The offset from where to start looking.
    # @return [Array<(Array<TrustedJwtGrantIssuer>, Integer, Hash)>] Array<TrustedJwtGrantIssuer> data, response status code and response headers
    def list_trusted_jwt_grant_issuers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.list_trusted_jwt_grant_issuers ...'
      end
      # resource path
      local_var_path = '/trust/grants/jwt-bearer/issuers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'issuer'] = opts[:'issuer'] if !opts[:'issuer'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TrustedJwtGrantIssuer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.list_trusted_jwt_grant_issuers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#list_trusted_jwt_grant_issuers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an OAuth 2.0 Client
    # Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param patch_document [Array<PatchDocument>] 
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Client]
    def patch_o_auth2_client(id, patch_document, opts = {})
      data, _status_code, _headers = patch_o_auth2_client_with_http_info(id, patch_document, opts)
      data
    end

    # Patch an OAuth 2.0 Client
    # Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param patch_document [Array<PatchDocument>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Client, Integer, Hash)>] OAuth2Client data, response status code and response headers
    def patch_o_auth2_client_with_http_info(id, patch_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.patch_o_auth2_client ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.patch_o_auth2_client"
      end
      # verify the required parameter 'patch_document' is set
      if @api_client.config.client_side_validation && patch_document.nil?
        fail ArgumentError, "Missing the required parameter 'patch_document' when calling AdminApi.patch_o_auth2_client"
      end
      # resource path
      local_var_path = '/clients/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_document)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Client'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.patch_o_auth2_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#patch_o_auth2_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject a Consent Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").  The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [CompletedRequest]
    def reject_consent_request(consent_challenge, opts = {})
      data, _status_code, _headers = reject_consent_request_with_http_info(consent_challenge, opts)
      data
    end

    # Reject a Consent Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
    # @param consent_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [Array<(CompletedRequest, Integer, Hash)>] CompletedRequest data, response status code and response headers
    def reject_consent_request_with_http_info(consent_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.reject_consent_request ...'
      end
      # verify the required parameter 'consent_challenge' is set
      if @api_client.config.client_side_validation && consent_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'consent_challenge' when calling AdminApi.reject_consent_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/consent/reject'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'consent_challenge'] = consent_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reject_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CompletedRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.reject_consent_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#reject_consent_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\") a subject (in OAuth2 the proper name for subject is \"resource owner\").  The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [CompletedRequest]
    def reject_login_request(login_challenge, opts = {})
      data, _status_code, _headers = reject_login_request_with_http_info(login_challenge, opts)
      data
    end

    # Reject a Login Request
    # When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
    # @param login_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [Array<(CompletedRequest, Integer, Hash)>] CompletedRequest data, response status code and response headers
    def reject_login_request_with_http_info(login_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.reject_login_request ...'
      end
      # verify the required parameter 'login_challenge' is set
      if @api_client.config.client_side_validation && login_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'login_challenge' when calling AdminApi.reject_login_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/login/reject'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'login_challenge'] = login_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reject_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CompletedRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.reject_login_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#reject_login_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject a Logout Request
    # When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [nil]
    def reject_logout_request(logout_challenge, opts = {})
      reject_logout_request_with_http_info(logout_challenge, opts)
      nil
    end

    # Reject a Logout Request
    # When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
    # @param logout_challenge [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RejectRequest] :reject_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reject_logout_request_with_http_info(logout_challenge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.reject_logout_request ...'
      end
      # verify the required parameter 'logout_challenge' is set
      if @api_client.config.client_side_validation && logout_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'logout_challenge' when calling AdminApi.reject_logout_request"
      end
      # resource path
      local_var_path = '/oauth2/auth/requests/logout/reject'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logout_challenge'] = logout_challenge

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'reject_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.reject_logout_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#reject_logout_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidates All Login Sessions of a Certain User Invalidates a Subject's Authentication Session
    # This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def revoke_authentication_session(subject, opts = {})
      revoke_authentication_session_with_http_info(subject, opts)
      nil
    end

    # Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
    # This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
    # @param subject [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_authentication_session_with_http_info(subject, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.revoke_authentication_session ...'
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling AdminApi.revoke_authentication_session"
      end
      # resource path
      local_var_path = '/oauth2/auth/sessions/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subject'] = subject

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.revoke_authentication_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#revoke_authentication_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
    # This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
    # @param subject [String] The subject (Subject) who&#39;s consent sessions should be deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
    # @option opts [Boolean] :all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
    # @return [nil]
    def revoke_consent_sessions(subject, opts = {})
      revoke_consent_sessions_with_http_info(subject, opts)
      nil
    end

    # Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
    # This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
    # @param subject [String] The subject (Subject) who&#39;s consent sessions should be deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
    # @option opts [Boolean] :all If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_consent_sessions_with_http_info(subject, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.revoke_consent_sessions ...'
      end
      # verify the required parameter 'subject' is set
      if @api_client.config.client_side_validation && subject.nil?
        fail ArgumentError, "Missing the required parameter 'subject' when calling AdminApi.revoke_consent_sessions"
      end
      # resource path
      local_var_path = '/oauth2/auth/sessions/consent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subject'] = subject
      query_params[:'client'] = opts[:'client'] if !opts[:'client'].nil?
      query_params[:'all'] = opts[:'all'] if !opts[:'all'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.revoke_consent_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#revoke_consent_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trust an OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
    # @param [Hash] opts the optional parameters
    # @option opts [TrustJwtGrantIssuerBody] :trust_jwt_grant_issuer_body 
    # @return [TrustedJwtGrantIssuer]
    def trust_jwt_grant_issuer(opts = {})
      data, _status_code, _headers = trust_jwt_grant_issuer_with_http_info(opts)
      data
    end

    # Trust an OAuth2 JWT Bearer Grant Type Issuer
    # Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
    # @param [Hash] opts the optional parameters
    # @option opts [TrustJwtGrantIssuerBody] :trust_jwt_grant_issuer_body 
    # @return [Array<(TrustedJwtGrantIssuer, Integer, Hash)>] TrustedJwtGrantIssuer data, response status code and response headers
    def trust_jwt_grant_issuer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.trust_jwt_grant_issuer ...'
      end
      # resource path
      local_var_path = '/trust/grants/jwt-bearer/issuers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'trust_jwt_grant_issuer_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'TrustedJwtGrantIssuer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.trust_jwt_grant_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#trust_jwt_grant_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a JSON Web Key
    # Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JSONWebKey] :json_web_key 
    # @return [JSONWebKey]
    def update_json_web_key(kid, set, opts = {})
      data, _status_code, _headers = update_json_web_key_with_http_info(kid, set, opts)
      data
    end

    # Update a JSON Web Key
    # Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param kid [String] The kid of the desired key
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JSONWebKey] :json_web_key 
    # @return [Array<(JSONWebKey, Integer, Hash)>] JSONWebKey data, response status code and response headers
    def update_json_web_key_with_http_info(kid, set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_json_web_key ...'
      end
      # verify the required parameter 'kid' is set
      if @api_client.config.client_side_validation && kid.nil?
        fail ArgumentError, "Missing the required parameter 'kid' when calling AdminApi.update_json_web_key"
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.update_json_web_key"
      end
      # resource path
      local_var_path = '/keys/{set}/{kid}'.sub('{' + 'kid' + '}', CGI.escape(kid.to_s)).sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_web_key'])

      # return_type
      return_type = opts[:debug_return_type] || 'JSONWebKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.update_json_web_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_json_web_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a JSON Web Key Set
    # Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JSONWebKeySet] :json_web_key_set 
    # @return [JSONWebKeySet]
    def update_json_web_key_set(set, opts = {})
      data, _status_code, _headers = update_json_web_key_set_with_http_info(set, opts)
      data
    end

    # Update a JSON Web Key Set
    # Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
    # @param set [String] The set
    # @param [Hash] opts the optional parameters
    # @option opts [JSONWebKeySet] :json_web_key_set 
    # @return [Array<(JSONWebKeySet, Integer, Hash)>] JSONWebKeySet data, response status code and response headers
    def update_json_web_key_set_with_http_info(set, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_json_web_key_set ...'
      end
      # verify the required parameter 'set' is set
      if @api_client.config.client_side_validation && set.nil?
        fail ArgumentError, "Missing the required parameter 'set' when calling AdminApi.update_json_web_key_set"
      end
      # resource path
      local_var_path = '/keys/{set}'.sub('{' + 'set' + '}', CGI.escape(set.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_web_key_set'])

      # return_type
      return_type = opts[:debug_return_type] || 'JSONWebKeySet'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.update_json_web_key_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_json_web_key_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an OAuth 2.0 Client
    # Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param o_auth2_client [OAuth2Client] 
    # @param [Hash] opts the optional parameters
    # @return [OAuth2Client]
    def update_o_auth2_client(id, o_auth2_client, opts = {})
      data, _status_code, _headers = update_o_auth2_client_with_http_info(id, o_auth2_client, opts)
      data
    end

    # Update an OAuth 2.0 Client
    # Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
    # @param id [String] The id of the OAuth 2.0 Client.
    # @param o_auth2_client [OAuth2Client] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuth2Client, Integer, Hash)>] OAuth2Client data, response status code and response headers
    def update_o_auth2_client_with_http_info(id, o_auth2_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.update_o_auth2_client ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AdminApi.update_o_auth2_client"
      end
      # verify the required parameter 'o_auth2_client' is set
      if @api_client.config.client_side_validation && o_auth2_client.nil?
        fail ArgumentError, "Missing the required parameter 'o_auth2_client' when calling AdminApi.update_o_auth2_client"
      end
      # resource path
      local_var_path = '/clients/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(o_auth2_client)

      # return_type
      return_type = opts[:debug_return_type] || 'OAuth2Client'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AdminApi.update_o_auth2_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#update_o_auth2_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
