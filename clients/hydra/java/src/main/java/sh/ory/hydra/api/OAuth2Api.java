/*
 * Ory Hydra API
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v2.1.1
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.hydra.api;

import sh.ory.hydra.ApiCallback;
import sh.ory.hydra.ApiClient;
import sh.ory.hydra.ApiException;
import sh.ory.hydra.ApiResponse;
import sh.ory.hydra.Configuration;
import sh.ory.hydra.Pair;
import sh.ory.hydra.ProgressRequestBody;
import sh.ory.hydra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sh.ory.hydra.model.AcceptOAuth2ConsentRequest;
import sh.ory.hydra.model.AcceptOAuth2LoginRequest;
import sh.ory.hydra.model.ErrorOAuth2;
import sh.ory.hydra.model.GenericError;
import sh.ory.hydra.model.IntrospectedOAuth2Token;
import sh.ory.hydra.model.JsonPatch;
import sh.ory.hydra.model.OAuth2Client;
import sh.ory.hydra.model.OAuth2ClientTokenLifespans;
import sh.ory.hydra.model.OAuth2ConsentRequest;
import sh.ory.hydra.model.OAuth2ConsentSession;
import sh.ory.hydra.model.OAuth2LoginRequest;
import sh.ory.hydra.model.OAuth2LogoutRequest;
import sh.ory.hydra.model.OAuth2RedirectTo;
import sh.ory.hydra.model.OAuth2TokenExchange;
import sh.ory.hydra.model.RejectOAuth2Request;
import sh.ory.hydra.model.TrustOAuth2JwtGrantIssuer;
import sh.ory.hydra.model.TrustedOAuth2JwtGrantIssuer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OAuth2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OAuth2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuth2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptOAuth2ConsentRequest
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param acceptOAuth2ConsentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2ConsentRequestCall(String consentChallenge, AcceptOAuth2ConsentRequest acceptOAuth2ConsentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptOAuth2ConsentRequest;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/consent/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consentChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consent_challenge", consentChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptOAuth2ConsentRequestValidateBeforeCall(String consentChallenge, AcceptOAuth2ConsentRequest acceptOAuth2ConsentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentChallenge' is set
        if (consentChallenge == null) {
            throw new ApiException("Missing the required parameter 'consentChallenge' when calling acceptOAuth2ConsentRequest(Async)");
        }

        return acceptOAuth2ConsentRequestCall(consentChallenge, acceptOAuth2ConsentRequest, _callback);

    }

    /**
     * Accept OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param acceptOAuth2ConsentRequest  (optional)
     * @return OAuth2RedirectTo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2RedirectTo acceptOAuth2ConsentRequest(String consentChallenge, AcceptOAuth2ConsentRequest acceptOAuth2ConsentRequest) throws ApiException {
        ApiResponse<OAuth2RedirectTo> localVarResp = acceptOAuth2ConsentRequestWithHttpInfo(consentChallenge, acceptOAuth2ConsentRequest);
        return localVarResp.getData();
    }

    /**
     * Accept OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param acceptOAuth2ConsentRequest  (optional)
     * @return ApiResponse&lt;OAuth2RedirectTo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2RedirectTo> acceptOAuth2ConsentRequestWithHttpInfo(String consentChallenge, AcceptOAuth2ConsentRequest acceptOAuth2ConsentRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptOAuth2ConsentRequestValidateBeforeCall(consentChallenge, acceptOAuth2ConsentRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept OAuth 2.0 Consent Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param acceptOAuth2ConsentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2ConsentRequestAsync(String consentChallenge, AcceptOAuth2ConsentRequest acceptOAuth2ConsentRequest, final ApiCallback<OAuth2RedirectTo> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptOAuth2ConsentRequestValidateBeforeCall(consentChallenge, acceptOAuth2ConsentRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for acceptOAuth2LoginRequest
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param acceptOAuth2LoginRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2LoginRequestCall(String loginChallenge, AcceptOAuth2LoginRequest acceptOAuth2LoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptOAuth2LoginRequest;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/login/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loginChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login_challenge", loginChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptOAuth2LoginRequestValidateBeforeCall(String loginChallenge, AcceptOAuth2LoginRequest acceptOAuth2LoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginChallenge' is set
        if (loginChallenge == null) {
            throw new ApiException("Missing the required parameter 'loginChallenge' when calling acceptOAuth2LoginRequest(Async)");
        }

        return acceptOAuth2LoginRequestCall(loginChallenge, acceptOAuth2LoginRequest, _callback);

    }

    /**
     * Accept OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param acceptOAuth2LoginRequest  (optional)
     * @return OAuth2RedirectTo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2RedirectTo acceptOAuth2LoginRequest(String loginChallenge, AcceptOAuth2LoginRequest acceptOAuth2LoginRequest) throws ApiException {
        ApiResponse<OAuth2RedirectTo> localVarResp = acceptOAuth2LoginRequestWithHttpInfo(loginChallenge, acceptOAuth2LoginRequest);
        return localVarResp.getData();
    }

    /**
     * Accept OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param acceptOAuth2LoginRequest  (optional)
     * @return ApiResponse&lt;OAuth2RedirectTo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2RedirectTo> acceptOAuth2LoginRequestWithHttpInfo(String loginChallenge, AcceptOAuth2LoginRequest acceptOAuth2LoginRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptOAuth2LoginRequestValidateBeforeCall(loginChallenge, acceptOAuth2LoginRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept OAuth 2.0 Login Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param acceptOAuth2LoginRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2LoginRequestAsync(String loginChallenge, AcceptOAuth2LoginRequest acceptOAuth2LoginRequest, final ApiCallback<OAuth2RedirectTo> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptOAuth2LoginRequestValidateBeforeCall(loginChallenge, acceptOAuth2LoginRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for acceptOAuth2LogoutRequest
     * @param logoutChallenge OAuth 2.0 Logout Request Challenge (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2LogoutRequestCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/logout/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logoutChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logout_challenge", logoutChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptOAuth2LogoutRequestValidateBeforeCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logoutChallenge' is set
        if (logoutChallenge == null) {
            throw new ApiException("Missing the required parameter 'logoutChallenge' when calling acceptOAuth2LogoutRequest(Async)");
        }

        return acceptOAuth2LogoutRequestCall(logoutChallenge, _callback);

    }

    /**
     * Accept OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param logoutChallenge OAuth 2.0 Logout Request Challenge (required)
     * @return OAuth2RedirectTo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2RedirectTo acceptOAuth2LogoutRequest(String logoutChallenge) throws ApiException {
        ApiResponse<OAuth2RedirectTo> localVarResp = acceptOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
        return localVarResp.getData();
    }

    /**
     * Accept OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param logoutChallenge OAuth 2.0 Logout Request Challenge (required)
     * @return ApiResponse&lt;OAuth2RedirectTo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2RedirectTo> acceptOAuth2LogoutRequestWithHttpInfo(String logoutChallenge) throws ApiException {
        okhttp3.Call localVarCall = acceptOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, null);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept OAuth 2.0 Session Logout Request (asynchronously)
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param logoutChallenge OAuth 2.0 Logout Request Challenge (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptOAuth2LogoutRequestAsync(String logoutChallenge, final ApiCallback<OAuth2RedirectTo> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOAuth2Client
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOAuth2ClientCall(OAuth2Client oauth2Client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Client;

        // create path and map variables
        String localVarPath = "/admin/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOAuth2ClientValidateBeforeCall(OAuth2Client oauth2Client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauth2Client' is set
        if (oauth2Client == null) {
            throw new ApiException("Missing the required parameter 'oauth2Client' when calling createOAuth2Client(Async)");
        }

        return createOAuth2ClientCall(oauth2Client, _callback);

    }

    /**
     * Create OAuth 2.0 Client
     * Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @return OAuth2Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Client createOAuth2Client(OAuth2Client oauth2Client) throws ApiException {
        ApiResponse<OAuth2Client> localVarResp = createOAuth2ClientWithHttpInfo(oauth2Client);
        return localVarResp.getData();
    }

    /**
     * Create OAuth 2.0 Client
     * Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @return ApiResponse&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Client> createOAuth2ClientWithHttpInfo(OAuth2Client oauth2Client) throws ApiException {
        okhttp3.Call localVarCall = createOAuth2ClientValidateBeforeCall(oauth2Client, null);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create OAuth 2.0 Client (asynchronously)
     * Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOAuth2ClientAsync(OAuth2Client oauth2Client, final ApiCallback<OAuth2Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOAuth2ClientValidateBeforeCall(oauth2Client, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOAuth2Client
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuth2ClientCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOAuth2ClientValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOAuth2Client(Async)");
        }

        return deleteOAuth2ClientCall(id, _callback);

    }

    /**
     * Delete OAuth 2.0 Client
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOAuth2Client(String id) throws ApiException {
        deleteOAuth2ClientWithHttpInfo(id);
    }

    /**
     * Delete OAuth 2.0 Client
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOAuth2ClientWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOAuth2ClientValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete OAuth 2.0 Client (asynchronously)
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuth2ClientAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOAuth2ClientValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOAuth2Token
     * @param clientId OAuth 2.0 Client ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuth2TokenCall(String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOAuth2TokenValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteOAuth2Token(Async)");
        }

        return deleteOAuth2TokenCall(clientId, _callback);

    }

    /**
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * @param clientId OAuth 2.0 Client ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOAuth2Token(String clientId) throws ApiException {
        deleteOAuth2TokenWithHttpInfo(clientId);
    }

    /**
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * @param clientId OAuth 2.0 Client ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOAuth2TokenWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteOAuth2TokenValidateBeforeCall(clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client (asynchronously)
     * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
     * @param clientId OAuth 2.0 Client ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOAuth2TokenAsync(String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOAuth2TokenValidateBeforeCall(clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrustedOAuth2JwtGrantIssuer
     * @param id The id of the desired grant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustedOAuth2JwtGrantIssuerCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/trust/grants/jwt-bearer/issuers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrustedOAuth2JwtGrantIssuerValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrustedOAuth2JwtGrantIssuer(Async)");
        }

        return deleteTrustedOAuth2JwtGrantIssuerCall(id, _callback);

    }

    /**
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @param id The id of the desired grant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrustedOAuth2JwtGrantIssuer(String id) throws ApiException {
        deleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
    }

    /**
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @param id The id of the desired grant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteTrustedOAuth2JwtGrantIssuerValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer (asynchronously)
     * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
     * @param id The id of the desired grant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustedOAuth2JwtGrantIssuerAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrustedOAuth2JwtGrantIssuerValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuth2Client
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2ClientCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuth2ClientValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOAuth2Client(Async)");
        }

        return getOAuth2ClientCall(id, _callback);

    }

    /**
     * Get an OAuth 2.0 Client
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @return OAuth2Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Client getOAuth2Client(String id) throws ApiException {
        ApiResponse<OAuth2Client> localVarResp = getOAuth2ClientWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get an OAuth 2.0 Client
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @return ApiResponse&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Client> getOAuth2ClientWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOAuth2ClientValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an OAuth 2.0 Client (asynchronously)
     * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2ClientAsync(String id, final ApiCallback<OAuth2Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuth2ClientValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuth2ConsentRequest
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2ConsentRequestCall(String consentChallenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/consent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consentChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consent_challenge", consentChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuth2ConsentRequestValidateBeforeCall(String consentChallenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentChallenge' is set
        if (consentChallenge == null) {
            throw new ApiException("Missing the required parameter 'consentChallenge' when calling getOAuth2ConsentRequest(Async)");
        }

        return getOAuth2ConsentRequestCall(consentChallenge, _callback);

    }

    /**
     * Get OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @return OAuth2ConsentRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2ConsentRequest getOAuth2ConsentRequest(String consentChallenge) throws ApiException {
        ApiResponse<OAuth2ConsentRequest> localVarResp = getOAuth2ConsentRequestWithHttpInfo(consentChallenge);
        return localVarResp.getData();
    }

    /**
     * Get OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @return ApiResponse&lt;OAuth2ConsentRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2ConsentRequest> getOAuth2ConsentRequestWithHttpInfo(String consentChallenge) throws ApiException {
        okhttp3.Call localVarCall = getOAuth2ConsentRequestValidateBeforeCall(consentChallenge, null);
        Type localVarReturnType = new TypeToken<OAuth2ConsentRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get OAuth 2.0 Consent Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2ConsentRequestAsync(String consentChallenge, final ApiCallback<OAuth2ConsentRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuth2ConsentRequestValidateBeforeCall(consentChallenge, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ConsentRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuth2LoginRequest
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LoginRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2LoginRequestCall(String loginChallenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loginChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login_challenge", loginChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuth2LoginRequestValidateBeforeCall(String loginChallenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginChallenge' is set
        if (loginChallenge == null) {
            throw new ApiException("Missing the required parameter 'loginChallenge' when calling getOAuth2LoginRequest(Async)");
        }

        return getOAuth2LoginRequestCall(loginChallenge, _callback);

    }

    /**
     * Get OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @return OAuth2LoginRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LoginRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2LoginRequest getOAuth2LoginRequest(String loginChallenge) throws ApiException {
        ApiResponse<OAuth2LoginRequest> localVarResp = getOAuth2LoginRequestWithHttpInfo(loginChallenge);
        return localVarResp.getData();
    }

    /**
     * Get OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @return ApiResponse&lt;OAuth2LoginRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LoginRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2LoginRequest> getOAuth2LoginRequestWithHttpInfo(String loginChallenge) throws ApiException {
        okhttp3.Call localVarCall = getOAuth2LoginRequestValidateBeforeCall(loginChallenge, null);
        Type localVarReturnType = new TypeToken<OAuth2LoginRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get OAuth 2.0 Login Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LoginRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2LoginRequestAsync(String loginChallenge, final ApiCallback<OAuth2LoginRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuth2LoginRequestValidateBeforeCall(loginChallenge, _callback);
        Type localVarReturnType = new TypeToken<OAuth2LoginRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOAuth2LogoutRequest
     * @param logoutChallenge  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LogoutRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2LogoutRequestCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logoutChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logout_challenge", logoutChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuth2LogoutRequestValidateBeforeCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logoutChallenge' is set
        if (logoutChallenge == null) {
            throw new ApiException("Missing the required parameter 'logoutChallenge' when calling getOAuth2LogoutRequest(Async)");
        }

        return getOAuth2LogoutRequestCall(logoutChallenge, _callback);

    }

    /**
     * Get OAuth 2.0 Session Logout Request
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * @param logoutChallenge  (required)
     * @return OAuth2LogoutRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LogoutRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2LogoutRequest getOAuth2LogoutRequest(String logoutChallenge) throws ApiException {
        ApiResponse<OAuth2LogoutRequest> localVarResp = getOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
        return localVarResp.getData();
    }

    /**
     * Get OAuth 2.0 Session Logout Request
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * @param logoutChallenge  (required)
     * @return ApiResponse&lt;OAuth2LogoutRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LogoutRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2LogoutRequest> getOAuth2LogoutRequestWithHttpInfo(String logoutChallenge) throws ApiException {
        okhttp3.Call localVarCall = getOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, null);
        Type localVarReturnType = new TypeToken<OAuth2LogoutRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get OAuth 2.0 Session Logout Request (asynchronously)
     * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
     * @param logoutChallenge  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2LogoutRequest </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOAuth2LogoutRequestAsync(String logoutChallenge, final ApiCallback<OAuth2LogoutRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, _callback);
        Type localVarReturnType = new TypeToken<OAuth2LogoutRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrustedOAuth2JwtGrantIssuer
     * @param id The id of the desired grant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrustedOAuth2JwtGrantIssuerCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/trust/grants/jwt-bearer/issuers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrustedOAuth2JwtGrantIssuerValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrustedOAuth2JwtGrantIssuer(Async)");
        }

        return getTrustedOAuth2JwtGrantIssuerCall(id, _callback);

    }

    /**
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @param id The id of the desired grant (required)
     * @return TrustedOAuth2JwtGrantIssuer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public TrustedOAuth2JwtGrantIssuer getTrustedOAuth2JwtGrantIssuer(String id) throws ApiException {
        ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResp = getTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @param id The id of the desired grant (required)
     * @return ApiResponse&lt;TrustedOAuth2JwtGrantIssuer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedOAuth2JwtGrantIssuer> getTrustedOAuth2JwtGrantIssuerWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getTrustedOAuth2JwtGrantIssuerValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TrustedOAuth2JwtGrantIssuer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Trusted OAuth2 JWT Bearer Grant Type Issuer (asynchronously)
     * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
     * @param id The id of the desired grant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrustedOAuth2JwtGrantIssuerAsync(String id, final ApiCallback<TrustedOAuth2JwtGrantIssuer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrustedOAuth2JwtGrantIssuerValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TrustedOAuth2JwtGrantIssuer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for introspectOAuth2Token
     * @param token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> introspectedOAuth2Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call introspectOAuth2TokenCall(String token, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/introspect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call introspectOAuth2TokenValidateBeforeCall(String token, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling introspectOAuth2Token(Async)");
        }

        return introspectOAuth2TokenCall(token, scope, _callback);

    }

    /**
     * Introspect OAuth2 Access and Refresh Tokens
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
     * @param token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @return IntrospectedOAuth2Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> introspectedOAuth2Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public IntrospectedOAuth2Token introspectOAuth2Token(String token, String scope) throws ApiException {
        ApiResponse<IntrospectedOAuth2Token> localVarResp = introspectOAuth2TokenWithHttpInfo(token, scope);
        return localVarResp.getData();
    }

    /**
     * Introspect OAuth2 Access and Refresh Tokens
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
     * @param token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @return ApiResponse&lt;IntrospectedOAuth2Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> introspectedOAuth2Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntrospectedOAuth2Token> introspectOAuth2TokenWithHttpInfo(String token, String scope) throws ApiException {
        okhttp3.Call localVarCall = introspectOAuth2TokenValidateBeforeCall(token, scope, null);
        Type localVarReturnType = new TypeToken<IntrospectedOAuth2Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Introspect OAuth2 Access and Refresh Tokens (asynchronously)
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
     * @param token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned. (required)
     * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> introspectedOAuth2Token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call introspectOAuth2TokenAsync(String token, String scope, final ApiCallback<IntrospectedOAuth2Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = introspectOAuth2TokenValidateBeforeCall(token, scope, _callback);
        Type localVarReturnType = new TypeToken<IntrospectedOAuth2Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOAuth2Clients
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param clientName The name of the clients to filter by. (optional)
     * @param owner The owner of the clients to filter by. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated OAuth2 Client List Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOAuth2ClientsCall(Long pageSize, String pageToken, String clientName, String owner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (clientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_name", clientName));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOAuth2ClientsValidateBeforeCall(Long pageSize, String pageToken, String clientName, String owner, final ApiCallback _callback) throws ApiException {
        return listOAuth2ClientsCall(pageSize, pageToken, clientName, owner, _callback);

    }

    /**
     * List OAuth 2.0 Clients
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param clientName The name of the clients to filter by. (optional)
     * @param owner The owner of the clients to filter by. (optional)
     * @return List&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated OAuth2 Client List Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public List<OAuth2Client> listOAuth2Clients(Long pageSize, String pageToken, String clientName, String owner) throws ApiException {
        ApiResponse<List<OAuth2Client>> localVarResp = listOAuth2ClientsWithHttpInfo(pageSize, pageToken, clientName, owner);
        return localVarResp.getData();
    }

    /**
     * List OAuth 2.0 Clients
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param clientName The name of the clients to filter by. (optional)
     * @param owner The owner of the clients to filter by. (optional)
     * @return ApiResponse&lt;List&lt;OAuth2Client&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated OAuth2 Client List Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OAuth2Client>> listOAuth2ClientsWithHttpInfo(Long pageSize, String pageToken, String clientName, String owner) throws ApiException {
        okhttp3.Call localVarCall = listOAuth2ClientsValidateBeforeCall(pageSize, pageToken, clientName, owner, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List OAuth 2.0 Clients (asynchronously)
     * This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param clientName The name of the clients to filter by. (optional)
     * @param owner The owner of the clients to filter by. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated OAuth2 Client List Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOAuth2ClientsAsync(Long pageSize, String pageToken, String clientName, String owner, final ApiCallback<List<OAuth2Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOAuth2ClientsValidateBeforeCall(pageSize, pageToken, clientName, owner, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOAuth2ConsentSessions
     * @param subject The subject to list the consent sessions for. (required)
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param loginSessionId The login session id to list the consent sessions for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentSessions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOAuth2ConsentSessionsCall(String subject, Long pageSize, String pageToken, String loginSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/sessions/consent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (loginSessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login_session_id", loginSessionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOAuth2ConsentSessionsValidateBeforeCall(String subject, Long pageSize, String pageToken, String loginSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling listOAuth2ConsentSessions(Async)");
        }

        return listOAuth2ConsentSessionsCall(subject, pageSize, pageToken, loginSessionId, _callback);

    }

    /**
     * List OAuth 2.0 Consent Sessions of a Subject
     * This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * @param subject The subject to list the consent sessions for. (required)
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param loginSessionId The login session id to list the consent sessions for. (optional)
     * @return List&lt;OAuth2ConsentSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentSessions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public List<OAuth2ConsentSession> listOAuth2ConsentSessions(String subject, Long pageSize, String pageToken, String loginSessionId) throws ApiException {
        ApiResponse<List<OAuth2ConsentSession>> localVarResp = listOAuth2ConsentSessionsWithHttpInfo(subject, pageSize, pageToken, loginSessionId);
        return localVarResp.getData();
    }

    /**
     * List OAuth 2.0 Consent Sessions of a Subject
     * This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * @param subject The subject to list the consent sessions for. (required)
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param loginSessionId The login session id to list the consent sessions for. (optional)
     * @return ApiResponse&lt;List&lt;OAuth2ConsentSession&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentSessions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OAuth2ConsentSession>> listOAuth2ConsentSessionsWithHttpInfo(String subject, Long pageSize, String pageToken, String loginSessionId) throws ApiException {
        okhttp3.Call localVarCall = listOAuth2ConsentSessionsValidateBeforeCall(subject, pageSize, pageToken, loginSessionId, null);
        Type localVarReturnType = new TypeToken<List<OAuth2ConsentSession>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List OAuth 2.0 Consent Sessions of a Subject (asynchronously)
     * This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
     * @param subject The subject to list the consent sessions for. (required)
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 1)
     * @param loginSessionId The login session id to list the consent sessions for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2ConsentSessions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOAuth2ConsentSessionsAsync(String subject, Long pageSize, String pageToken, String loginSessionId, final ApiCallback<List<OAuth2ConsentSession>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOAuth2ConsentSessionsValidateBeforeCall(subject, pageSize, pageToken, loginSessionId, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2ConsentSession>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrustedOAuth2JwtGrantIssuers
     * @param maxItems  (optional)
     * @param defaultItems  (optional)
     * @param issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustedOAuth2JwtGrantIssuersCall(Long maxItems, Long defaultItems, String issuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/trust/grants/jwt-bearer/issuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (defaultItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultItems", defaultItems));
        }

        if (issuer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issuer", issuer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrustedOAuth2JwtGrantIssuersValidateBeforeCall(Long maxItems, Long defaultItems, String issuer, final ApiCallback _callback) throws ApiException {
        return listTrustedOAuth2JwtGrantIssuersCall(maxItems, defaultItems, issuer, _callback);

    }

    /**
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @param maxItems  (optional)
     * @param defaultItems  (optional)
     * @param issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @return List&lt;TrustedOAuth2JwtGrantIssuer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public List<TrustedOAuth2JwtGrantIssuer> listTrustedOAuth2JwtGrantIssuers(Long maxItems, Long defaultItems, String issuer) throws ApiException {
        ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> localVarResp = listTrustedOAuth2JwtGrantIssuersWithHttpInfo(maxItems, defaultItems, issuer);
        return localVarResp.getData();
    }

    /**
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @param maxItems  (optional)
     * @param defaultItems  (optional)
     * @param issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @return ApiResponse&lt;List&lt;TrustedOAuth2JwtGrantIssuer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrustedOAuth2JwtGrantIssuer>> listTrustedOAuth2JwtGrantIssuersWithHttpInfo(Long maxItems, Long defaultItems, String issuer) throws ApiException {
        okhttp3.Call localVarCall = listTrustedOAuth2JwtGrantIssuersValidateBeforeCall(maxItems, defaultItems, issuer, null);
        Type localVarReturnType = new TypeToken<List<TrustedOAuth2JwtGrantIssuer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Trusted OAuth2 JWT Bearer Grant Type Issuers (asynchronously)
     * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
     * @param maxItems  (optional)
     * @param defaultItems  (optional)
     * @param issuer If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> trustedOAuth2JwtGrantIssuers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustedOAuth2JwtGrantIssuersAsync(Long maxItems, Long defaultItems, String issuer, final ApiCallback<List<TrustedOAuth2JwtGrantIssuer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrustedOAuth2JwtGrantIssuersValidateBeforeCall(maxItems, defaultItems, issuer, _callback);
        Type localVarReturnType = new TypeToken<List<TrustedOAuth2JwtGrantIssuer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oAuth2Authorize
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oAuth2AuthorizeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oAuth2AuthorizeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return oAuth2AuthorizeCall(_callback);

    }

    /**
     * OAuth 2.0 Authorize Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @return ErrorOAuth2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ErrorOAuth2 oAuth2Authorize() throws ApiException {
        ApiResponse<ErrorOAuth2> localVarResp = oAuth2AuthorizeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * OAuth 2.0 Authorize Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @return ApiResponse&lt;ErrorOAuth2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorOAuth2> oAuth2AuthorizeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = oAuth2AuthorizeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ErrorOAuth2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * OAuth 2.0 Authorize Endpoint (asynchronously)
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oAuth2AuthorizeAsync(final ApiCallback<ErrorOAuth2> _callback) throws ApiException {

        okhttp3.Call localVarCall = oAuth2AuthorizeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ErrorOAuth2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauth2TokenExchange
     * @param grantType  (required)
     * @param clientId  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param refreshToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2TokenExchange </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauth2TokenExchangeCall(String grantType, String clientId, String code, String redirectUri, String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauth2TokenExchangeValidateBeforeCall(String grantType, String clientId, String code, String redirectUri, String refreshToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling oauth2TokenExchange(Async)");
        }

        return oauth2TokenExchangeCall(grantType, clientId, code, redirectUri, refreshToken, _callback);

    }

    /**
     * The OAuth 2.0 Token Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @param grantType  (required)
     * @param clientId  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param refreshToken  (optional)
     * @return OAuth2TokenExchange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2TokenExchange </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2TokenExchange oauth2TokenExchange(String grantType, String clientId, String code, String redirectUri, String refreshToken) throws ApiException {
        ApiResponse<OAuth2TokenExchange> localVarResp = oauth2TokenExchangeWithHttpInfo(grantType, clientId, code, redirectUri, refreshToken);
        return localVarResp.getData();
    }

    /**
     * The OAuth 2.0 Token Endpoint
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @param grantType  (required)
     * @param clientId  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param refreshToken  (optional)
     * @return ApiResponse&lt;OAuth2TokenExchange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2TokenExchange </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2TokenExchange> oauth2TokenExchangeWithHttpInfo(String grantType, String clientId, String code, String redirectUri, String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = oauth2TokenExchangeValidateBeforeCall(grantType, clientId, code, redirectUri, refreshToken, null);
        Type localVarReturnType = new TypeToken<OAuth2TokenExchange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The OAuth 2.0 Token Endpoint (asynchronously)
     * Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
     * @param grantType  (required)
     * @param clientId  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param refreshToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2TokenExchange </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauth2TokenExchangeAsync(String grantType, String clientId, String code, String redirectUri, String refreshToken, final ApiCallback<OAuth2TokenExchange> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauth2TokenExchangeValidateBeforeCall(grantType, clientId, code, redirectUri, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<OAuth2TokenExchange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchOAuth2Client
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param jsonPatch OAuth 2.0 Client JSON Patch Body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchOAuth2ClientCall(String id, List<JsonPatch> jsonPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jsonPatch;

        // create path and map variables
        String localVarPath = "/admin/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchOAuth2ClientValidateBeforeCall(String id, List<JsonPatch> jsonPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchOAuth2Client(Async)");
        }

        // verify the required parameter 'jsonPatch' is set
        if (jsonPatch == null) {
            throw new ApiException("Missing the required parameter 'jsonPatch' when calling patchOAuth2Client(Async)");
        }

        return patchOAuth2ClientCall(id, jsonPatch, _callback);

    }

    /**
     * Patch OAuth 2.0 Client
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param jsonPatch OAuth 2.0 Client JSON Patch Body (required)
     * @return OAuth2Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Client patchOAuth2Client(String id, List<JsonPatch> jsonPatch) throws ApiException {
        ApiResponse<OAuth2Client> localVarResp = patchOAuth2ClientWithHttpInfo(id, jsonPatch);
        return localVarResp.getData();
    }

    /**
     * Patch OAuth 2.0 Client
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param jsonPatch OAuth 2.0 Client JSON Patch Body (required)
     * @return ApiResponse&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Client> patchOAuth2ClientWithHttpInfo(String id, List<JsonPatch> jsonPatch) throws ApiException {
        okhttp3.Call localVarCall = patchOAuth2ClientValidateBeforeCall(id, jsonPatch, null);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch OAuth 2.0 Client (asynchronously)
     * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id The id of the OAuth 2.0 Client. (required)
     * @param jsonPatch OAuth 2.0 Client JSON Patch Body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchOAuth2ClientAsync(String id, List<JsonPatch> jsonPatch, final ApiCallback<OAuth2Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchOAuth2ClientValidateBeforeCall(id, jsonPatch, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectOAuth2ConsentRequest
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2ConsentRequestCall(String consentChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rejectOAuth2Request;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/consent/reject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consentChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consent_challenge", consentChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectOAuth2ConsentRequestValidateBeforeCall(String consentChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentChallenge' is set
        if (consentChallenge == null) {
            throw new ApiException("Missing the required parameter 'consentChallenge' when calling rejectOAuth2ConsentRequest(Async)");
        }

        return rejectOAuth2ConsentRequestCall(consentChallenge, rejectOAuth2Request, _callback);

    }

    /**
     * Reject OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @return OAuth2RedirectTo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2RedirectTo rejectOAuth2ConsentRequest(String consentChallenge, RejectOAuth2Request rejectOAuth2Request) throws ApiException {
        ApiResponse<OAuth2RedirectTo> localVarResp = rejectOAuth2ConsentRequestWithHttpInfo(consentChallenge, rejectOAuth2Request);
        return localVarResp.getData();
    }

    /**
     * Reject OAuth 2.0 Consent Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @return ApiResponse&lt;OAuth2RedirectTo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2RedirectTo> rejectOAuth2ConsentRequestWithHttpInfo(String consentChallenge, RejectOAuth2Request rejectOAuth2Request) throws ApiException {
        okhttp3.Call localVarCall = rejectOAuth2ConsentRequestValidateBeforeCall(consentChallenge, rejectOAuth2Request, null);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject OAuth 2.0 Consent Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
     * @param consentChallenge OAuth 2.0 Consent Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2ConsentRequestAsync(String consentChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback<OAuth2RedirectTo> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectOAuth2ConsentRequestValidateBeforeCall(consentChallenge, rejectOAuth2Request, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectOAuth2LoginRequest
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2LoginRequestCall(String loginChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rejectOAuth2Request;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/login/reject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loginChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login_challenge", loginChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectOAuth2LoginRequestValidateBeforeCall(String loginChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginChallenge' is set
        if (loginChallenge == null) {
            throw new ApiException("Missing the required parameter 'loginChallenge' when calling rejectOAuth2LoginRequest(Async)");
        }

        return rejectOAuth2LoginRequestCall(loginChallenge, rejectOAuth2Request, _callback);

    }

    /**
     * Reject OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @return OAuth2RedirectTo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2RedirectTo rejectOAuth2LoginRequest(String loginChallenge, RejectOAuth2Request rejectOAuth2Request) throws ApiException {
        ApiResponse<OAuth2RedirectTo> localVarResp = rejectOAuth2LoginRequestWithHttpInfo(loginChallenge, rejectOAuth2Request);
        return localVarResp.getData();
    }

    /**
     * Reject OAuth 2.0 Login Request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @return ApiResponse&lt;OAuth2RedirectTo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2RedirectTo> rejectOAuth2LoginRequestWithHttpInfo(String loginChallenge, RejectOAuth2Request rejectOAuth2Request) throws ApiException {
        okhttp3.Call localVarCall = rejectOAuth2LoginRequestValidateBeforeCall(loginChallenge, rejectOAuth2Request, null);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject OAuth 2.0 Login Request (asynchronously)
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param loginChallenge OAuth 2.0 Login Request Challenge (required)
     * @param rejectOAuth2Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2RedirectTo </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2LoginRequestAsync(String loginChallenge, RejectOAuth2Request rejectOAuth2Request, final ApiCallback<OAuth2RedirectTo> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectOAuth2LoginRequestValidateBeforeCall(loginChallenge, rejectOAuth2Request, _callback);
        Type localVarReturnType = new TypeToken<OAuth2RedirectTo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectOAuth2LogoutRequest
     * @param logoutChallenge  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2LogoutRequestCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/requests/logout/reject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logoutChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logout_challenge", logoutChallenge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectOAuth2LogoutRequestValidateBeforeCall(String logoutChallenge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logoutChallenge' is set
        if (logoutChallenge == null) {
            throw new ApiException("Missing the required parameter 'logoutChallenge' when calling rejectOAuth2LogoutRequest(Async)");
        }

        return rejectOAuth2LogoutRequestCall(logoutChallenge, _callback);

    }

    /**
     * Reject OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @param logoutChallenge  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public void rejectOAuth2LogoutRequest(String logoutChallenge) throws ApiException {
        rejectOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
    }

    /**
     * Reject OAuth 2.0 Session Logout Request
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @param logoutChallenge  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rejectOAuth2LogoutRequestWithHttpInfo(String logoutChallenge) throws ApiException {
        okhttp3.Call localVarCall = rejectOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reject OAuth 2.0 Session Logout Request (asynchronously)
     * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @param logoutChallenge  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectOAuth2LogoutRequestAsync(String logoutChallenge, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectOAuth2LogoutRequestValidateBeforeCall(logoutChallenge, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeOAuth2ConsentSessions
     * @param subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. (required)
     * @param client OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     * @param all Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2ConsentSessionsCall(String subject, String client, Boolean all, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/sessions/consent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeOAuth2ConsentSessionsValidateBeforeCall(String subject, String client, Boolean all, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling revokeOAuth2ConsentSessions(Async)");
        }

        return revokeOAuth2ConsentSessionsCall(subject, client, all, _callback);

    }

    /**
     * Revoke OAuth 2.0 Consent Sessions of a Subject
     * This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * @param subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. (required)
     * @param client OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     * @param all Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public void revokeOAuth2ConsentSessions(String subject, String client, Boolean all) throws ApiException {
        revokeOAuth2ConsentSessionsWithHttpInfo(subject, client, all);
    }

    /**
     * Revoke OAuth 2.0 Consent Sessions of a Subject
     * This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * @param subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. (required)
     * @param client OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     * @param all Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeOAuth2ConsentSessionsWithHttpInfo(String subject, String client, Boolean all) throws ApiException {
        okhttp3.Call localVarCall = revokeOAuth2ConsentSessionsValidateBeforeCall(subject, client, all, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke OAuth 2.0 Consent Sessions of a Subject (asynchronously)
     * This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
     * @param subject OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted. (required)
     * @param client OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)
     * @param all Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2ConsentSessionsAsync(String subject, String client, Boolean all, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeOAuth2ConsentSessionsValidateBeforeCall(subject, client, all, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeOAuth2LoginSessions
     * @param subject OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param sid OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2LoginSessionsCall(String subject, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/oauth2/auth/sessions/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (sid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sid", sid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeOAuth2LoginSessionsValidateBeforeCall(String subject, String sid, final ApiCallback _callback) throws ApiException {
        return revokeOAuth2LoginSessionsCall(subject, sid, _callback);

    }

    /**
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * @param subject OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param sid OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public void revokeOAuth2LoginSessions(String subject, String sid) throws ApiException {
        revokeOAuth2LoginSessionsWithHttpInfo(subject, sid);
    }

    /**
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * @param subject OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param sid OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeOAuth2LoginSessionsWithHttpInfo(String subject, String sid) throws ApiException {
        okhttp3.Call localVarCall = revokeOAuth2LoginSessionsValidateBeforeCall(subject, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID (asynchronously)
     * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
     * @param subject OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param sid OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2LoginSessionsAsync(String subject, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeOAuth2LoginSessionsValidateBeforeCall(subject, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeOAuth2Token
     * @param token  (required)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2TokenCall(String token, String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeOAuth2TokenValidateBeforeCall(String token, String clientId, String clientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling revokeOAuth2Token(Async)");
        }

        return revokeOAuth2TokenCall(token, clientId, clientSecret, _callback);

    }

    /**
     * Revoke OAuth 2.0 Access or Refresh Token
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @param token  (required)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public void revokeOAuth2Token(String token, String clientId, String clientSecret) throws ApiException {
        revokeOAuth2TokenWithHttpInfo(token, clientId, clientSecret);
    }

    /**
     * Revoke OAuth 2.0 Access or Refresh Token
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @param token  (required)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeOAuth2TokenWithHttpInfo(String token, String clientId, String clientSecret) throws ApiException {
        okhttp3.Call localVarCall = revokeOAuth2TokenValidateBeforeCall(token, clientId, clientSecret, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke OAuth 2.0 Access or Refresh Token (asynchronously)
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     * @param token  (required)
     * @param clientId  (optional)
     * @param clientSecret  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorOAuth2 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeOAuth2TokenAsync(String token, String clientId, String clientSecret, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeOAuth2TokenValidateBeforeCall(token, clientId, clientSecret, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOAuth2Client
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOAuth2ClientCall(String id, OAuth2Client oauth2Client, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2Client;

        // create path and map variables
        String localVarPath = "/admin/clients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOAuth2ClientValidateBeforeCall(String id, OAuth2Client oauth2Client, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setOAuth2Client(Async)");
        }

        // verify the required parameter 'oauth2Client' is set
        if (oauth2Client == null) {
            throw new ApiException("Missing the required parameter 'oauth2Client' when calling setOAuth2Client(Async)");
        }

        return setOAuth2ClientCall(id, oauth2Client, _callback);

    }

    /**
     * Set OAuth 2.0 Client
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @return OAuth2Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Client setOAuth2Client(String id, OAuth2Client oauth2Client) throws ApiException {
        ApiResponse<OAuth2Client> localVarResp = setOAuth2ClientWithHttpInfo(id, oauth2Client);
        return localVarResp.getData();
    }

    /**
     * Set OAuth 2.0 Client
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @return ApiResponse&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Client> setOAuth2ClientWithHttpInfo(String id, OAuth2Client oauth2Client) throws ApiException {
        okhttp3.Call localVarCall = setOAuth2ClientValidateBeforeCall(id, oauth2Client, null);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set OAuth 2.0 Client (asynchronously)
     * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2Client OAuth 2.0 Client Request Body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request Error Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOAuth2ClientAsync(String id, OAuth2Client oauth2Client, final ApiCallback<OAuth2Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOAuth2ClientValidateBeforeCall(id, oauth2Client, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOAuth2ClientLifespans
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2ClientTokenLifespans  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOAuth2ClientLifespansCall(String id, OAuth2ClientTokenLifespans oauth2ClientTokenLifespans, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2ClientTokenLifespans;

        // create path and map variables
        String localVarPath = "/admin/clients/{id}/lifespans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOAuth2ClientLifespansValidateBeforeCall(String id, OAuth2ClientTokenLifespans oauth2ClientTokenLifespans, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setOAuth2ClientLifespans(Async)");
        }

        return setOAuth2ClientLifespansCall(id, oauth2ClientTokenLifespans, _callback);

    }

    /**
     * Set OAuth2 Client Token Lifespans
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2ClientTokenLifespans  (optional)
     * @return OAuth2Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Client setOAuth2ClientLifespans(String id, OAuth2ClientTokenLifespans oauth2ClientTokenLifespans) throws ApiException {
        ApiResponse<OAuth2Client> localVarResp = setOAuth2ClientLifespansWithHttpInfo(id, oauth2ClientTokenLifespans);
        return localVarResp.getData();
    }

    /**
     * Set OAuth2 Client Token Lifespans
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2ClientTokenLifespans  (optional)
     * @return ApiResponse&lt;OAuth2Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Client> setOAuth2ClientLifespansWithHttpInfo(String id, OAuth2ClientTokenLifespans oauth2ClientTokenLifespans) throws ApiException {
        okhttp3.Call localVarCall = setOAuth2ClientLifespansValidateBeforeCall(id, oauth2ClientTokenLifespans, null);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set OAuth2 Client Token Lifespans (asynchronously)
     * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
     * @param id OAuth 2.0 Client ID (required)
     * @param oauth2ClientTokenLifespans  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oAuth2Client </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOAuth2ClientLifespansAsync(String id, OAuth2ClientTokenLifespans oauth2ClientTokenLifespans, final ApiCallback<OAuth2Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOAuth2ClientLifespansValidateBeforeCall(id, oauth2ClientTokenLifespans, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustOAuth2JwtGrantIssuer
     * @param trustOAuth2JwtGrantIssuer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustOAuth2JwtGrantIssuerCall(TrustOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trustOAuth2JwtGrantIssuer;

        // create path and map variables
        String localVarPath = "/admin/trust/grants/jwt-bearer/issuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustOAuth2JwtGrantIssuerValidateBeforeCall(TrustOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer, final ApiCallback _callback) throws ApiException {
        return trustOAuth2JwtGrantIssuerCall(trustOAuth2JwtGrantIssuer, _callback);

    }

    /**
     * Trust OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @param trustOAuth2JwtGrantIssuer  (optional)
     * @return TrustedOAuth2JwtGrantIssuer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public TrustedOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer(TrustOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer) throws ApiException {
        ApiResponse<TrustedOAuth2JwtGrantIssuer> localVarResp = trustOAuth2JwtGrantIssuerWithHttpInfo(trustOAuth2JwtGrantIssuer);
        return localVarResp.getData();
    }

    /**
     * Trust OAuth2 JWT Bearer Grant Type Issuer
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @param trustOAuth2JwtGrantIssuer  (optional)
     * @return ApiResponse&lt;TrustedOAuth2JwtGrantIssuer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrustedOAuth2JwtGrantIssuer> trustOAuth2JwtGrantIssuerWithHttpInfo(TrustOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer) throws ApiException {
        okhttp3.Call localVarCall = trustOAuth2JwtGrantIssuerValidateBeforeCall(trustOAuth2JwtGrantIssuer, null);
        Type localVarReturnType = new TypeToken<TrustedOAuth2JwtGrantIssuer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trust OAuth2 JWT Bearer Grant Type Issuer (asynchronously)
     * Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
     * @param trustOAuth2JwtGrantIssuer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> trustedOAuth2JwtGrantIssuer </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> genericError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustOAuth2JwtGrantIssuerAsync(TrustOAuth2JwtGrantIssuer trustOAuth2JwtGrantIssuer, final ApiCallback<TrustedOAuth2JwtGrantIssuer> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustOAuth2JwtGrantIssuerValidateBeforeCall(trustOAuth2JwtGrantIssuer, _callback);
        Type localVarReturnType = new TypeToken<TrustedOAuth2JwtGrantIssuer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
