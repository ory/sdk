/*
 * ORY Hydra
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: v0.0.0-alpha.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.hydra.api;

import sh.ory.hydra.ApiException;
import sh.ory.hydra.model.GenericError;
import sh.ory.hydra.model.HealthNotReadyStatus;
import sh.ory.hydra.model.HealthStatus;
import sh.ory.hydra.model.JSONWebKeySet;
import sh.ory.hydra.model.Oauth2TokenResponse;
import sh.ory.hydra.model.UserinfoResponse;
import sh.ory.hydra.model.WellKnown;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Ignore
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    
    /**
     * OpenID Connect Front-Backchannel enabled Logout
     *
     * This endpoint initiates and completes user logout at ORY Hydra and initiates OpenID Connect Front-/Back-channel logout:  https://openid.net/specs/openid-connect-frontchannel-1_0.html https://openid.net/specs/openid-connect-backchannel-1_0.html
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disconnectUserTest() throws ApiException {
        api.disconnectUser();

        // TODO: test validations
    }
    
    /**
     * OpenID Connect Discovery
     *
     * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html .  Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others. For a full list of clients go here: https://openid.net/developers/certified/
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void discoverOpenIDConfigurationTest() throws ApiException {
        WellKnown response = api.discoverOpenIDConfiguration();

        // TODO: test validations
    }
    
    /**
     * Check readiness status
     *
     * This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the &#x60;X-Forwarded-Proto&#x60; header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isInstanceReadyTest() throws ApiException {
        HealthStatus response = api.isInstanceReady();

        // TODO: test validations
    }
    
    /**
     * The OAuth 2.0 token endpoint
     *
     * The client makes a request to the token endpoint by sending the following parameters using the \&quot;application/x-www-form-urlencoded\&quot; HTTP request entity-body.  &gt; Do not implement a client for this endpoint yourself. Use a library. There are many libraries &gt; available for any programming language. You can find a list of libraries here: https://oauth.net/code/ &gt; &gt; Do not the the Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oauth2TokenTest() throws ApiException {
        String grantType = null;
        String code = null;
        String refreshToken = null;
        String redirectUri = null;
        String clientId = null;
        Oauth2TokenResponse response = api.oauth2Token(grantType, code, refreshToken, redirectUri, clientId);

        // TODO: test validations
    }
    
    /**
     * The OAuth 2.0 authorize endpoint
     *
     * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oauthAuthTest() throws ApiException {
        api.oauthAuth();

        // TODO: test validations
    }
    
    /**
     * Revoke OAuth2 tokens
     *
     * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeOAuth2TokenTest() throws ApiException {
        String token = null;
        api.revokeOAuth2Token(token);

        // TODO: test validations
    }
    
    /**
     * OpenID Connect Userinfo
     *
     * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 Access Token.  For more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userinfoTest() throws ApiException {
        UserinfoResponse response = api.userinfo();

        // TODO: test validations
    }
    
    /**
     * JSON Web Keys Discovery
     *
     * This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and, if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wellKnownTest() throws ApiException {
        JSONWebKeySet response = api.wellKnown();

        // TODO: test validations
    }
    
}
