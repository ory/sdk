/*
 * ORY Hydra
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Hydra.Client.Client.OpenAPIDateConverter;

namespace Ory.Hydra.Client.Model
{
    /// <summary>
    /// It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms among others.
    /// </summary>
    [DataContract(Name = "wellKnown")]
    public partial class HydraWellKnown : IEquatable<HydraWellKnown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraWellKnown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HydraWellKnown()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraWellKnown" /> class.
        /// </summary>
        /// <param name="authorizationEndpoint">URL of the OP&#39;s OAuth 2.0 Authorization Endpoint. (required).</param>
        /// <param name="backchannelLogoutSessionSupported">Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP.</param>
        /// <param name="backchannelLogoutSupported">Boolean value specifying whether the OP supports back-channel logout, with true indicating support..</param>
        /// <param name="claimsParameterSupported">Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support..</param>
        /// <param name="claimsSupported">JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list..</param>
        /// <param name="codeChallengeMethodsSupported">JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server..</param>
        /// <param name="endSessionEndpoint">URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP..</param>
        /// <param name="frontchannelLogoutSessionSupported">Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP..</param>
        /// <param name="frontchannelLogoutSupported">Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support..</param>
        /// <param name="grantTypesSupported">JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports..</param>
        /// <param name="idTokenSigningAlgValuesSupported">JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT. (required).</param>
        /// <param name="issuer">URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL. (required).</param>
        /// <param name="jwksUri">URL of the OP&#39;s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server&#39;s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate. (required).</param>
        /// <param name="registrationEndpoint">URL of the OP&#39;s Dynamic Client Registration Endpoint..</param>
        /// <param name="requestObjectSigningAlgValuesSupported">JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter)..</param>
        /// <param name="requestParameterSupported">Boolean value specifying whether the OP supports use of the request parameter, with true indicating support..</param>
        /// <param name="requestUriParameterSupported">Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support..</param>
        /// <param name="requireRequestUriRegistration">Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter..</param>
        /// <param name="responseModesSupported">JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports..</param>
        /// <param name="responseTypesSupported">JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values. (required).</param>
        /// <param name="revocationEndpoint">URL of the authorization server&#39;s OAuth 2.0 revocation endpoint..</param>
        /// <param name="scopesSupported">SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used.</param>
        /// <param name="subjectTypesSupported">JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public. (required).</param>
        /// <param name="tokenEndpoint">URL of the OP&#39;s OAuth 2.0 Token Endpoint (required).</param>
        /// <param name="tokenEndpointAuthMethodsSupported">JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0.</param>
        /// <param name="userinfoEndpoint">URL of the OP&#39;s UserInfo Endpoint..</param>
        /// <param name="userinfoSigningAlgValuesSupported">JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]..</param>
        public HydraWellKnown(string authorizationEndpoint = default(string), bool backchannelLogoutSessionSupported = default(bool), bool backchannelLogoutSupported = default(bool), bool claimsParameterSupported = default(bool), List<string> claimsSupported = default(List<string>), List<string> codeChallengeMethodsSupported = default(List<string>), string endSessionEndpoint = default(string), bool frontchannelLogoutSessionSupported = default(bool), bool frontchannelLogoutSupported = default(bool), List<string> grantTypesSupported = default(List<string>), List<string> idTokenSigningAlgValuesSupported = default(List<string>), string issuer = default(string), string jwksUri = default(string), string registrationEndpoint = default(string), List<string> requestObjectSigningAlgValuesSupported = default(List<string>), bool requestParameterSupported = default(bool), bool requestUriParameterSupported = default(bool), bool requireRequestUriRegistration = default(bool), List<string> responseModesSupported = default(List<string>), List<string> responseTypesSupported = default(List<string>), string revocationEndpoint = default(string), List<string> scopesSupported = default(List<string>), List<string> subjectTypesSupported = default(List<string>), string tokenEndpoint = default(string), List<string> tokenEndpointAuthMethodsSupported = default(List<string>), string userinfoEndpoint = default(string), List<string> userinfoSigningAlgValuesSupported = default(List<string>))
        {
            // to ensure "authorizationEndpoint" is required (not null)
            if (authorizationEndpoint == null) {
                throw new ArgumentNullException("authorizationEndpoint is a required property for HydraWellKnown and cannot be null");
            }
            this.AuthorizationEndpoint = authorizationEndpoint;
            // to ensure "idTokenSigningAlgValuesSupported" is required (not null)
            if (idTokenSigningAlgValuesSupported == null) {
                throw new ArgumentNullException("idTokenSigningAlgValuesSupported is a required property for HydraWellKnown and cannot be null");
            }
            this.IdTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
            // to ensure "issuer" is required (not null)
            if (issuer == null) {
                throw new ArgumentNullException("issuer is a required property for HydraWellKnown and cannot be null");
            }
            this.Issuer = issuer;
            // to ensure "jwksUri" is required (not null)
            if (jwksUri == null) {
                throw new ArgumentNullException("jwksUri is a required property for HydraWellKnown and cannot be null");
            }
            this.JwksUri = jwksUri;
            // to ensure "responseTypesSupported" is required (not null)
            if (responseTypesSupported == null) {
                throw new ArgumentNullException("responseTypesSupported is a required property for HydraWellKnown and cannot be null");
            }
            this.ResponseTypesSupported = responseTypesSupported;
            // to ensure "subjectTypesSupported" is required (not null)
            if (subjectTypesSupported == null) {
                throw new ArgumentNullException("subjectTypesSupported is a required property for HydraWellKnown and cannot be null");
            }
            this.SubjectTypesSupported = subjectTypesSupported;
            // to ensure "tokenEndpoint" is required (not null)
            if (tokenEndpoint == null) {
                throw new ArgumentNullException("tokenEndpoint is a required property for HydraWellKnown and cannot be null");
            }
            this.TokenEndpoint = tokenEndpoint;
            this.BackchannelLogoutSessionSupported = backchannelLogoutSessionSupported;
            this.BackchannelLogoutSupported = backchannelLogoutSupported;
            this.ClaimsParameterSupported = claimsParameterSupported;
            this.ClaimsSupported = claimsSupported;
            this.CodeChallengeMethodsSupported = codeChallengeMethodsSupported;
            this.EndSessionEndpoint = endSessionEndpoint;
            this.FrontchannelLogoutSessionSupported = frontchannelLogoutSessionSupported;
            this.FrontchannelLogoutSupported = frontchannelLogoutSupported;
            this.GrantTypesSupported = grantTypesSupported;
            this.RegistrationEndpoint = registrationEndpoint;
            this.RequestObjectSigningAlgValuesSupported = requestObjectSigningAlgValuesSupported;
            this.RequestParameterSupported = requestParameterSupported;
            this.RequestUriParameterSupported = requestUriParameterSupported;
            this.RequireRequestUriRegistration = requireRequestUriRegistration;
            this.ResponseModesSupported = responseModesSupported;
            this.RevocationEndpoint = revocationEndpoint;
            this.ScopesSupported = scopesSupported;
            this.TokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
            this.UserinfoEndpoint = userinfoEndpoint;
            this.UserinfoSigningAlgValuesSupported = userinfoSigningAlgValuesSupported;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// URL of the OP&#39;s OAuth 2.0 Authorization Endpoint.
        /// </summary>
        /// <value>URL of the OP&#39;s OAuth 2.0 Authorization Endpoint.</value>
        [DataMember(Name = "authorization_endpoint", IsRequired = true, EmitDefaultValue = false)]
        public string AuthorizationEndpoint { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
        /// </summary>
        /// <value>Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP</value>
        [DataMember(Name = "backchannel_logout_session_supported", EmitDefaultValue = true)]
        public bool BackchannelLogoutSessionSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
        /// </summary>
        /// <value>Boolean value specifying whether the OP supports back-channel logout, with true indicating support.</value>
        [DataMember(Name = "backchannel_logout_supported", EmitDefaultValue = true)]
        public bool BackchannelLogoutSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
        /// </summary>
        /// <value>Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.</value>
        [DataMember(Name = "claims_parameter_supported", EmitDefaultValue = true)]
        public bool ClaimsParameterSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.
        /// </summary>
        /// <value>JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list.</value>
        [DataMember(Name = "claims_supported", EmitDefaultValue = false)]
        public List<string> ClaimsSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.
        /// </summary>
        /// <value>JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported by this authorization server.</value>
        [DataMember(Name = "code_challenge_methods_supported", EmitDefaultValue = false)]
        public List<string> CodeChallengeMethodsSupported { get; set; }

        /// <summary>
        /// URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
        /// </summary>
        /// <value>URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.</value>
        [DataMember(Name = "end_session_endpoint", EmitDefaultValue = false)]
        public string EndSessionEndpoint { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.
        /// </summary>
        /// <value>Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also included in ID Tokens issued by the OP.</value>
        [DataMember(Name = "frontchannel_logout_session_supported", EmitDefaultValue = true)]
        public bool FrontchannelLogoutSessionSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
        /// </summary>
        /// <value>Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.</value>
        [DataMember(Name = "frontchannel_logout_supported", EmitDefaultValue = true)]
        public bool FrontchannelLogoutSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
        /// </summary>
        /// <value>JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.</value>
        [DataMember(Name = "grant_types_supported", EmitDefaultValue = false)]
        public List<string> GrantTypesSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
        /// </summary>
        /// <value>JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.</value>
        [DataMember(Name = "id_token_signing_alg_values_supported", IsRequired = true, EmitDefaultValue = false)]
        public List<string> IdTokenSigningAlgValuesSupported { get; set; }

        /// <summary>
        /// URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
        /// </summary>
        /// <value>URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier. If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.</value>
        [DataMember(Name = "issuer", IsRequired = true, EmitDefaultValue = false)]
        public string Issuer { get; set; }

        /// <summary>
        /// URL of the OP&#39;s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server&#39;s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
        /// </summary>
        /// <value>URL of the OP&#39;s JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server&#39;s encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.</value>
        [DataMember(Name = "jwks_uri", IsRequired = true, EmitDefaultValue = false)]
        public string JwksUri { get; set; }

        /// <summary>
        /// URL of the OP&#39;s Dynamic Client Registration Endpoint.
        /// </summary>
        /// <value>URL of the OP&#39;s Dynamic Client Registration Endpoint.</value>
        [DataMember(Name = "registration_endpoint", EmitDefaultValue = false)]
        public string RegistrationEndpoint { get; set; }

        /// <summary>
        /// JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).
        /// </summary>
        /// <value>JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).</value>
        [DataMember(Name = "request_object_signing_alg_values_supported", EmitDefaultValue = false)]
        public List<string> RequestObjectSigningAlgValuesSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
        /// </summary>
        /// <value>Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.</value>
        [DataMember(Name = "request_parameter_supported", EmitDefaultValue = true)]
        public bool RequestParameterSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
        /// </summary>
        /// <value>Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.</value>
        [DataMember(Name = "request_uri_parameter_supported", EmitDefaultValue = true)]
        public bool RequestUriParameterSupported { get; set; }

        /// <summary>
        /// Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
        /// </summary>
        /// <value>Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.</value>
        [DataMember(Name = "require_request_uri_registration", EmitDefaultValue = true)]
        public bool RequireRequestUriRegistration { get; set; }

        /// <summary>
        /// JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
        /// </summary>
        /// <value>JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.</value>
        [DataMember(Name = "response_modes_supported", EmitDefaultValue = false)]
        public List<string> ResponseModesSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.
        /// </summary>
        /// <value>JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values.</value>
        [DataMember(Name = "response_types_supported", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ResponseTypesSupported { get; set; }

        /// <summary>
        /// URL of the authorization server&#39;s OAuth 2.0 revocation endpoint.
        /// </summary>
        /// <value>URL of the authorization server&#39;s OAuth 2.0 revocation endpoint.</value>
        [DataMember(Name = "revocation_endpoint", EmitDefaultValue = false)]
        public string RevocationEndpoint { get; set; }

        /// <summary>
        /// SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
        /// </summary>
        /// <value>SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used</value>
        [DataMember(Name = "scopes_supported", EmitDefaultValue = false)]
        public List<string> ScopesSupported { get; set; }

        /// <summary>
        /// JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
        /// </summary>
        /// <value>JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.</value>
        [DataMember(Name = "subject_types_supported", IsRequired = true, EmitDefaultValue = false)]
        public List<string> SubjectTypesSupported { get; set; }

        /// <summary>
        /// URL of the OP&#39;s OAuth 2.0 Token Endpoint
        /// </summary>
        /// <value>URL of the OP&#39;s OAuth 2.0 Token Endpoint</value>
        [DataMember(Name = "token_endpoint", IsRequired = true, EmitDefaultValue = false)]
        public string TokenEndpoint { get; set; }

        /// <summary>
        /// JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
        /// </summary>
        /// <value>JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0</value>
        [DataMember(Name = "token_endpoint_auth_methods_supported", EmitDefaultValue = false)]
        public List<string> TokenEndpointAuthMethodsSupported { get; set; }

        /// <summary>
        /// URL of the OP&#39;s UserInfo Endpoint.
        /// </summary>
        /// <value>URL of the OP&#39;s UserInfo Endpoint.</value>
        [DataMember(Name = "userinfo_endpoint", EmitDefaultValue = false)]
        public string UserinfoEndpoint { get; set; }

        /// <summary>
        /// JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
        /// </summary>
        /// <value>JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].</value>
        [DataMember(Name = "userinfo_signing_alg_values_supported", EmitDefaultValue = false)]
        public List<string> UserinfoSigningAlgValuesSupported { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HydraWellKnown {\n");
            sb.Append("  AuthorizationEndpoint: ").Append(AuthorizationEndpoint).Append("\n");
            sb.Append("  BackchannelLogoutSessionSupported: ").Append(BackchannelLogoutSessionSupported).Append("\n");
            sb.Append("  BackchannelLogoutSupported: ").Append(BackchannelLogoutSupported).Append("\n");
            sb.Append("  ClaimsParameterSupported: ").Append(ClaimsParameterSupported).Append("\n");
            sb.Append("  ClaimsSupported: ").Append(ClaimsSupported).Append("\n");
            sb.Append("  CodeChallengeMethodsSupported: ").Append(CodeChallengeMethodsSupported).Append("\n");
            sb.Append("  EndSessionEndpoint: ").Append(EndSessionEndpoint).Append("\n");
            sb.Append("  FrontchannelLogoutSessionSupported: ").Append(FrontchannelLogoutSessionSupported).Append("\n");
            sb.Append("  FrontchannelLogoutSupported: ").Append(FrontchannelLogoutSupported).Append("\n");
            sb.Append("  GrantTypesSupported: ").Append(GrantTypesSupported).Append("\n");
            sb.Append("  IdTokenSigningAlgValuesSupported: ").Append(IdTokenSigningAlgValuesSupported).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  RegistrationEndpoint: ").Append(RegistrationEndpoint).Append("\n");
            sb.Append("  RequestObjectSigningAlgValuesSupported: ").Append(RequestObjectSigningAlgValuesSupported).Append("\n");
            sb.Append("  RequestParameterSupported: ").Append(RequestParameterSupported).Append("\n");
            sb.Append("  RequestUriParameterSupported: ").Append(RequestUriParameterSupported).Append("\n");
            sb.Append("  RequireRequestUriRegistration: ").Append(RequireRequestUriRegistration).Append("\n");
            sb.Append("  ResponseModesSupported: ").Append(ResponseModesSupported).Append("\n");
            sb.Append("  ResponseTypesSupported: ").Append(ResponseTypesSupported).Append("\n");
            sb.Append("  RevocationEndpoint: ").Append(RevocationEndpoint).Append("\n");
            sb.Append("  ScopesSupported: ").Append(ScopesSupported).Append("\n");
            sb.Append("  SubjectTypesSupported: ").Append(SubjectTypesSupported).Append("\n");
            sb.Append("  TokenEndpoint: ").Append(TokenEndpoint).Append("\n");
            sb.Append("  TokenEndpointAuthMethodsSupported: ").Append(TokenEndpointAuthMethodsSupported).Append("\n");
            sb.Append("  UserinfoEndpoint: ").Append(UserinfoEndpoint).Append("\n");
            sb.Append("  UserinfoSigningAlgValuesSupported: ").Append(UserinfoSigningAlgValuesSupported).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HydraWellKnown);
        }

        /// <summary>
        /// Returns true if HydraWellKnown instances are equal
        /// </summary>
        /// <param name="input">Instance of HydraWellKnown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HydraWellKnown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorizationEndpoint == input.AuthorizationEndpoint ||
                    (this.AuthorizationEndpoint != null &&
                    this.AuthorizationEndpoint.Equals(input.AuthorizationEndpoint))
                ) && 
                (
                    this.BackchannelLogoutSessionSupported == input.BackchannelLogoutSessionSupported ||
                    this.BackchannelLogoutSessionSupported.Equals(input.BackchannelLogoutSessionSupported)
                ) && 
                (
                    this.BackchannelLogoutSupported == input.BackchannelLogoutSupported ||
                    this.BackchannelLogoutSupported.Equals(input.BackchannelLogoutSupported)
                ) && 
                (
                    this.ClaimsParameterSupported == input.ClaimsParameterSupported ||
                    this.ClaimsParameterSupported.Equals(input.ClaimsParameterSupported)
                ) && 
                (
                    this.ClaimsSupported == input.ClaimsSupported ||
                    this.ClaimsSupported != null &&
                    input.ClaimsSupported != null &&
                    this.ClaimsSupported.SequenceEqual(input.ClaimsSupported)
                ) && 
                (
                    this.CodeChallengeMethodsSupported == input.CodeChallengeMethodsSupported ||
                    this.CodeChallengeMethodsSupported != null &&
                    input.CodeChallengeMethodsSupported != null &&
                    this.CodeChallengeMethodsSupported.SequenceEqual(input.CodeChallengeMethodsSupported)
                ) && 
                (
                    this.EndSessionEndpoint == input.EndSessionEndpoint ||
                    (this.EndSessionEndpoint != null &&
                    this.EndSessionEndpoint.Equals(input.EndSessionEndpoint))
                ) && 
                (
                    this.FrontchannelLogoutSessionSupported == input.FrontchannelLogoutSessionSupported ||
                    this.FrontchannelLogoutSessionSupported.Equals(input.FrontchannelLogoutSessionSupported)
                ) && 
                (
                    this.FrontchannelLogoutSupported == input.FrontchannelLogoutSupported ||
                    this.FrontchannelLogoutSupported.Equals(input.FrontchannelLogoutSupported)
                ) && 
                (
                    this.GrantTypesSupported == input.GrantTypesSupported ||
                    this.GrantTypesSupported != null &&
                    input.GrantTypesSupported != null &&
                    this.GrantTypesSupported.SequenceEqual(input.GrantTypesSupported)
                ) && 
                (
                    this.IdTokenSigningAlgValuesSupported == input.IdTokenSigningAlgValuesSupported ||
                    this.IdTokenSigningAlgValuesSupported != null &&
                    input.IdTokenSigningAlgValuesSupported != null &&
                    this.IdTokenSigningAlgValuesSupported.SequenceEqual(input.IdTokenSigningAlgValuesSupported)
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.JwksUri == input.JwksUri ||
                    (this.JwksUri != null &&
                    this.JwksUri.Equals(input.JwksUri))
                ) && 
                (
                    this.RegistrationEndpoint == input.RegistrationEndpoint ||
                    (this.RegistrationEndpoint != null &&
                    this.RegistrationEndpoint.Equals(input.RegistrationEndpoint))
                ) && 
                (
                    this.RequestObjectSigningAlgValuesSupported == input.RequestObjectSigningAlgValuesSupported ||
                    this.RequestObjectSigningAlgValuesSupported != null &&
                    input.RequestObjectSigningAlgValuesSupported != null &&
                    this.RequestObjectSigningAlgValuesSupported.SequenceEqual(input.RequestObjectSigningAlgValuesSupported)
                ) && 
                (
                    this.RequestParameterSupported == input.RequestParameterSupported ||
                    this.RequestParameterSupported.Equals(input.RequestParameterSupported)
                ) && 
                (
                    this.RequestUriParameterSupported == input.RequestUriParameterSupported ||
                    this.RequestUriParameterSupported.Equals(input.RequestUriParameterSupported)
                ) && 
                (
                    this.RequireRequestUriRegistration == input.RequireRequestUriRegistration ||
                    this.RequireRequestUriRegistration.Equals(input.RequireRequestUriRegistration)
                ) && 
                (
                    this.ResponseModesSupported == input.ResponseModesSupported ||
                    this.ResponseModesSupported != null &&
                    input.ResponseModesSupported != null &&
                    this.ResponseModesSupported.SequenceEqual(input.ResponseModesSupported)
                ) && 
                (
                    this.ResponseTypesSupported == input.ResponseTypesSupported ||
                    this.ResponseTypesSupported != null &&
                    input.ResponseTypesSupported != null &&
                    this.ResponseTypesSupported.SequenceEqual(input.ResponseTypesSupported)
                ) && 
                (
                    this.RevocationEndpoint == input.RevocationEndpoint ||
                    (this.RevocationEndpoint != null &&
                    this.RevocationEndpoint.Equals(input.RevocationEndpoint))
                ) && 
                (
                    this.ScopesSupported == input.ScopesSupported ||
                    this.ScopesSupported != null &&
                    input.ScopesSupported != null &&
                    this.ScopesSupported.SequenceEqual(input.ScopesSupported)
                ) && 
                (
                    this.SubjectTypesSupported == input.SubjectTypesSupported ||
                    this.SubjectTypesSupported != null &&
                    input.SubjectTypesSupported != null &&
                    this.SubjectTypesSupported.SequenceEqual(input.SubjectTypesSupported)
                ) && 
                (
                    this.TokenEndpoint == input.TokenEndpoint ||
                    (this.TokenEndpoint != null &&
                    this.TokenEndpoint.Equals(input.TokenEndpoint))
                ) && 
                (
                    this.TokenEndpointAuthMethodsSupported == input.TokenEndpointAuthMethodsSupported ||
                    this.TokenEndpointAuthMethodsSupported != null &&
                    input.TokenEndpointAuthMethodsSupported != null &&
                    this.TokenEndpointAuthMethodsSupported.SequenceEqual(input.TokenEndpointAuthMethodsSupported)
                ) && 
                (
                    this.UserinfoEndpoint == input.UserinfoEndpoint ||
                    (this.UserinfoEndpoint != null &&
                    this.UserinfoEndpoint.Equals(input.UserinfoEndpoint))
                ) && 
                (
                    this.UserinfoSigningAlgValuesSupported == input.UserinfoSigningAlgValuesSupported ||
                    this.UserinfoSigningAlgValuesSupported != null &&
                    input.UserinfoSigningAlgValuesSupported != null &&
                    this.UserinfoSigningAlgValuesSupported.SequenceEqual(input.UserinfoSigningAlgValuesSupported)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationEndpoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BackchannelLogoutSessionSupported.GetHashCode();
                hashCode = (hashCode * 59) + this.BackchannelLogoutSupported.GetHashCode();
                hashCode = (hashCode * 59) + this.ClaimsParameterSupported.GetHashCode();
                if (this.ClaimsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimsSupported.GetHashCode();
                }
                if (this.CodeChallengeMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.CodeChallengeMethodsSupported.GetHashCode();
                }
                if (this.EndSessionEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.EndSessionEndpoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FrontchannelLogoutSessionSupported.GetHashCode();
                hashCode = (hashCode * 59) + this.FrontchannelLogoutSupported.GetHashCode();
                if (this.GrantTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypesSupported.GetHashCode();
                }
                if (this.IdTokenSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.IdTokenSigningAlgValuesSupported.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.JwksUri != null)
                {
                    hashCode = (hashCode * 59) + this.JwksUri.GetHashCode();
                }
                if (this.RegistrationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationEndpoint.GetHashCode();
                }
                if (this.RequestObjectSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.RequestObjectSigningAlgValuesSupported.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestParameterSupported.GetHashCode();
                hashCode = (hashCode * 59) + this.RequestUriParameterSupported.GetHashCode();
                hashCode = (hashCode * 59) + this.RequireRequestUriRegistration.GetHashCode();
                if (this.ResponseModesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseModesSupported.GetHashCode();
                }
                if (this.ResponseTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypesSupported.GetHashCode();
                }
                if (this.RevocationEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.RevocationEndpoint.GetHashCode();
                }
                if (this.ScopesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.ScopesSupported.GetHashCode();
                }
                if (this.SubjectTypesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectTypesSupported.GetHashCode();
                }
                if (this.TokenEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpoint.GetHashCode();
                }
                if (this.TokenEndpointAuthMethodsSupported != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthMethodsSupported.GetHashCode();
                }
                if (this.UserinfoEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.UserinfoEndpoint.GetHashCode();
                }
                if (this.UserinfoSigningAlgValuesSupported != null)
                {
                    hashCode = (hashCode * 59) + this.UserinfoSigningAlgValuesSupported.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
