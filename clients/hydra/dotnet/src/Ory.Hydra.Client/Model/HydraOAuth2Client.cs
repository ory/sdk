/*
 * ORY Hydra
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: v1.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Hydra.Client.Client.OpenAPIDateConverter;

namespace Ory.Hydra.Client.Model
{
    /// <summary>
    /// HydraOAuth2Client
    /// </summary>
    [DataContract(Name = "oAuth2Client")]
    public partial class HydraOAuth2Client : IEquatable<HydraOAuth2Client>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HydraOAuth2Client" /> class.
        /// </summary>
        /// <param name="allowedCorsOrigins">allowedCorsOrigins.</param>
        /// <param name="audience">audience.</param>
        /// <param name="backchannelLogoutSessionRequired">Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false..</param>
        /// <param name="backchannelLogoutUri">RP URL that will cause the RP to log itself out when sent a Logout Token by the OP..</param>
        /// <param name="clientId">ID  is the id for this client..</param>
        /// <param name="clientName">Name is the human-readable string name of the client to be presented to the end-user during authorization..</param>
        /// <param name="clientSecret">Secret is the client&#39;s secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again..</param>
        /// <param name="clientSecretExpiresAt">SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it&#39;s value will always be set to 0..</param>
        /// <param name="clientUri">ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion..</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="createdAt">CreatedAt returns the timestamp of the client&#39;s creation..</param>
        /// <param name="frontchannelLogoutSessionRequired">Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false..</param>
        /// <param name="frontchannelLogoutUri">RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be..</param>
        /// <param name="grantTypes">grantTypes.</param>
        /// <param name="jwks">jwks.</param>
        /// <param name="jwksUri">URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate..</param>
        /// <param name="logoUri">LogoURI is an URL string that references a logo for the client..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="owner">Owner is a string identifying the owner of the OAuth 2.0 Client..</param>
        /// <param name="policyUri">PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data..</param>
        /// <param name="postLogoutRedirectUris">postLogoutRedirectUris.</param>
        /// <param name="redirectUris">redirectUris.</param>
        /// <param name="registrationAccessToken">RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client..</param>
        /// <param name="registrationClientUri">RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client..</param>
        /// <param name="requestObjectSigningAlg">JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm..</param>
        /// <param name="requestUris">requestUris.</param>
        /// <param name="responseTypes">responseTypes.</param>
        /// <param name="scope">Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens..</param>
        /// <param name="sectorIdentifierUri">URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values..</param>
        /// <param name="subjectType">SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;..</param>
        /// <param name="tokenEndpointAuthMethod">Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none..</param>
        /// <param name="tokenEndpointAuthSigningAlg">Requested Client Authentication signing algorithm for the Token Endpoint..</param>
        /// <param name="tosUri">TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client..</param>
        /// <param name="updatedAt">UpdatedAt returns the timestamp of the last update..</param>
        /// <param name="userinfoSignedResponseAlg">JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type..</param>
        public HydraOAuth2Client(List<string> allowedCorsOrigins = default(List<string>), List<string> audience = default(List<string>), bool backchannelLogoutSessionRequired = default(bool), string backchannelLogoutUri = default(string), string clientId = default(string), string clientName = default(string), string clientSecret = default(string), long clientSecretExpiresAt = default(long), string clientUri = default(string), List<string> contacts = default(List<string>), DateTime createdAt = default(DateTime), bool frontchannelLogoutSessionRequired = default(bool), string frontchannelLogoutUri = default(string), List<string> grantTypes = default(List<string>), Object jwks = default(Object), string jwksUri = default(string), string logoUri = default(string), Object metadata = default(Object), string owner = default(string), string policyUri = default(string), List<string> postLogoutRedirectUris = default(List<string>), List<string> redirectUris = default(List<string>), string registrationAccessToken = default(string), string registrationClientUri = default(string), string requestObjectSigningAlg = default(string), List<string> requestUris = default(List<string>), List<string> responseTypes = default(List<string>), string scope = default(string), string sectorIdentifierUri = default(string), string subjectType = default(string), string tokenEndpointAuthMethod = default(string), string tokenEndpointAuthSigningAlg = default(string), string tosUri = default(string), DateTime updatedAt = default(DateTime), string userinfoSignedResponseAlg = default(string))
        {
            this.AllowedCorsOrigins = allowedCorsOrigins;
            this.Audience = audience;
            this.BackchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
            this.BackchannelLogoutUri = backchannelLogoutUri;
            this.ClientId = clientId;
            this.ClientName = clientName;
            this.ClientSecret = clientSecret;
            this.ClientSecretExpiresAt = clientSecretExpiresAt;
            this.ClientUri = clientUri;
            this.Contacts = contacts;
            this.CreatedAt = createdAt;
            this.FrontchannelLogoutSessionRequired = frontchannelLogoutSessionRequired;
            this.FrontchannelLogoutUri = frontchannelLogoutUri;
            this.GrantTypes = grantTypes;
            this.Jwks = jwks;
            this.JwksUri = jwksUri;
            this.LogoUri = logoUri;
            this.Metadata = metadata;
            this.Owner = owner;
            this.PolicyUri = policyUri;
            this.PostLogoutRedirectUris = postLogoutRedirectUris;
            this.RedirectUris = redirectUris;
            this.RegistrationAccessToken = registrationAccessToken;
            this.RegistrationClientUri = registrationClientUri;
            this.RequestObjectSigningAlg = requestObjectSigningAlg;
            this.RequestUris = requestUris;
            this.ResponseTypes = responseTypes;
            this.Scope = scope;
            this.SectorIdentifierUri = sectorIdentifierUri;
            this.SubjectType = subjectType;
            this.TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            this.TokenEndpointAuthSigningAlg = tokenEndpointAuthSigningAlg;
            this.TosUri = tosUri;
            this.UpdatedAt = updatedAt;
            this.UserinfoSignedResponseAlg = userinfoSignedResponseAlg;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets AllowedCorsOrigins
        /// </summary>
        [DataMember(Name = "allowed_cors_origins", EmitDefaultValue = false)]
        public List<string> AllowedCorsOrigins { get; set; }

        /// <summary>
        /// Gets or Sets Audience
        /// </summary>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public List<string> Audience { get; set; }

        /// <summary>
        /// Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
        /// </summary>
        /// <value>Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.</value>
        [DataMember(Name = "backchannel_logout_session_required", EmitDefaultValue = true)]
        public bool BackchannelLogoutSessionRequired { get; set; }

        /// <summary>
        /// RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
        /// </summary>
        /// <value>RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.</value>
        [DataMember(Name = "backchannel_logout_uri", EmitDefaultValue = false)]
        public string BackchannelLogoutUri { get; set; }

        /// <summary>
        /// ID  is the id for this client.
        /// </summary>
        /// <value>ID  is the id for this client.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Name is the human-readable string name of the client to be presented to the end-user during authorization.
        /// </summary>
        /// <value>Name is the human-readable string name of the client to be presented to the end-user during authorization.</value>
        [DataMember(Name = "client_name", EmitDefaultValue = false)]
        public string ClientName { get; set; }

        /// <summary>
        /// Secret is the client&#39;s secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
        /// </summary>
        /// <value>Secret is the client&#39;s secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it&#39;s value will always be set to 0.
        /// </summary>
        /// <value>SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it&#39;s value will always be set to 0.</value>
        [DataMember(Name = "client_secret_expires_at", EmitDefaultValue = false)]
        public long ClientSecretExpiresAt { get; set; }

        /// <summary>
        /// ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
        /// </summary>
        /// <value>ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.</value>
        [DataMember(Name = "client_uri", EmitDefaultValue = false)]
        public string ClientUri { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<string> Contacts { get; set; }

        /// <summary>
        /// CreatedAt returns the timestamp of the client&#39;s creation.
        /// </summary>
        /// <value>CreatedAt returns the timestamp of the client&#39;s creation.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
        /// </summary>
        /// <value>Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.</value>
        [DataMember(Name = "frontchannel_logout_session_required", EmitDefaultValue = true)]
        public bool FrontchannelLogoutSessionRequired { get; set; }

        /// <summary>
        /// RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
        /// </summary>
        /// <value>RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.</value>
        [DataMember(Name = "frontchannel_logout_uri", EmitDefaultValue = false)]
        public string FrontchannelLogoutUri { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [DataMember(Name = "grant_types", EmitDefaultValue = false)]
        public List<string> GrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets Jwks
        /// </summary>
        [DataMember(Name = "jwks", EmitDefaultValue = false)]
        public Object Jwks { get; set; }

        /// <summary>
        /// URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
        /// </summary>
        /// <value>URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.</value>
        [DataMember(Name = "jwks_uri", EmitDefaultValue = false)]
        public string JwksUri { get; set; }

        /// <summary>
        /// LogoURI is an URL string that references a logo for the client.
        /// </summary>
        /// <value>LogoURI is an URL string that references a logo for the client.</value>
        [DataMember(Name = "logo_uri", EmitDefaultValue = false)]
        public string LogoUri { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Owner is a string identifying the owner of the OAuth 2.0 Client.
        /// </summary>
        /// <value>Owner is a string identifying the owner of the OAuth 2.0 Client.</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
        /// </summary>
        /// <value>PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.</value>
        [DataMember(Name = "policy_uri", EmitDefaultValue = false)]
        public string PolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets PostLogoutRedirectUris
        /// </summary>
        [DataMember(Name = "post_logout_redirect_uris", EmitDefaultValue = false)]
        public List<string> PostLogoutRedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name = "redirect_uris", EmitDefaultValue = false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client.
        /// </summary>
        /// <value>RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client.</value>
        [DataMember(Name = "registration_access_token", EmitDefaultValue = false)]
        public string RegistrationAccessToken { get; set; }

        /// <summary>
        /// RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
        /// </summary>
        /// <value>RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.</value>
        [DataMember(Name = "registration_client_uri", EmitDefaultValue = false)]
        public string RegistrationClientUri { get; set; }

        /// <summary>
        /// JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
        /// </summary>
        /// <value>JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.</value>
        [DataMember(Name = "request_object_signing_alg", EmitDefaultValue = false)]
        public string RequestObjectSigningAlg { get; set; }

        /// <summary>
        /// Gets or Sets RequestUris
        /// </summary>
        [DataMember(Name = "request_uris", EmitDefaultValue = false)]
        public List<string> RequestUris { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [DataMember(Name = "response_types", EmitDefaultValue = false)]
        public List<string> ResponseTypes { get; set; }

        /// <summary>
        /// Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
        /// </summary>
        /// <value>Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
        /// </summary>
        /// <value>URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.</value>
        [DataMember(Name = "sector_identifier_uri", EmitDefaultValue = false)]
        public string SectorIdentifierUri { get; set; }

        /// <summary>
        /// SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;.
        /// </summary>
        /// <value>SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;.</value>
        [DataMember(Name = "subject_type", EmitDefaultValue = false)]
        public string SubjectType { get; set; }

        /// <summary>
        /// Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
        /// </summary>
        /// <value>Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.</value>
        [DataMember(Name = "token_endpoint_auth_method", EmitDefaultValue = false)]
        public string TokenEndpointAuthMethod { get; set; }

        /// <summary>
        /// Requested Client Authentication signing algorithm for the Token Endpoint.
        /// </summary>
        /// <value>Requested Client Authentication signing algorithm for the Token Endpoint.</value>
        [DataMember(Name = "token_endpoint_auth_signing_alg", EmitDefaultValue = false)]
        public string TokenEndpointAuthSigningAlg { get; set; }

        /// <summary>
        /// TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
        /// </summary>
        /// <value>TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.</value>
        [DataMember(Name = "tos_uri", EmitDefaultValue = false)]
        public string TosUri { get; set; }

        /// <summary>
        /// UpdatedAt returns the timestamp of the last update.
        /// </summary>
        /// <value>UpdatedAt returns the timestamp of the last update.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
        /// </summary>
        /// <value>JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.</value>
        [DataMember(Name = "userinfo_signed_response_alg", EmitDefaultValue = false)]
        public string UserinfoSignedResponseAlg { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HydraOAuth2Client {\n");
            sb.Append("  AllowedCorsOrigins: ").Append(AllowedCorsOrigins).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  BackchannelLogoutSessionRequired: ").Append(BackchannelLogoutSessionRequired).Append("\n");
            sb.Append("  BackchannelLogoutUri: ").Append(BackchannelLogoutUri).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  ClientSecretExpiresAt: ").Append(ClientSecretExpiresAt).Append("\n");
            sb.Append("  ClientUri: ").Append(ClientUri).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FrontchannelLogoutSessionRequired: ").Append(FrontchannelLogoutSessionRequired).Append("\n");
            sb.Append("  FrontchannelLogoutUri: ").Append(FrontchannelLogoutUri).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  Jwks: ").Append(Jwks).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PolicyUri: ").Append(PolicyUri).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  RegistrationAccessToken: ").Append(RegistrationAccessToken).Append("\n");
            sb.Append("  RegistrationClientUri: ").Append(RegistrationClientUri).Append("\n");
            sb.Append("  RequestObjectSigningAlg: ").Append(RequestObjectSigningAlg).Append("\n");
            sb.Append("  RequestUris: ").Append(RequestUris).Append("\n");
            sb.Append("  ResponseTypes: ").Append(ResponseTypes).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SectorIdentifierUri: ").Append(SectorIdentifierUri).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("  TokenEndpointAuthSigningAlg: ").Append(TokenEndpointAuthSigningAlg).Append("\n");
            sb.Append("  TosUri: ").Append(TosUri).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserinfoSignedResponseAlg: ").Append(UserinfoSignedResponseAlg).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HydraOAuth2Client);
        }

        /// <summary>
        /// Returns true if HydraOAuth2Client instances are equal
        /// </summary>
        /// <param name="input">Instance of HydraOAuth2Client to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HydraOAuth2Client input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowedCorsOrigins == input.AllowedCorsOrigins ||
                    this.AllowedCorsOrigins != null &&
                    input.AllowedCorsOrigins != null &&
                    this.AllowedCorsOrigins.SequenceEqual(input.AllowedCorsOrigins)
                ) && 
                (
                    this.Audience == input.Audience ||
                    this.Audience != null &&
                    input.Audience != null &&
                    this.Audience.SequenceEqual(input.Audience)
                ) && 
                (
                    this.BackchannelLogoutSessionRequired == input.BackchannelLogoutSessionRequired ||
                    this.BackchannelLogoutSessionRequired.Equals(input.BackchannelLogoutSessionRequired)
                ) && 
                (
                    this.BackchannelLogoutUri == input.BackchannelLogoutUri ||
                    (this.BackchannelLogoutUri != null &&
                    this.BackchannelLogoutUri.Equals(input.BackchannelLogoutUri))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.ClientSecretExpiresAt == input.ClientSecretExpiresAt ||
                    this.ClientSecretExpiresAt.Equals(input.ClientSecretExpiresAt)
                ) && 
                (
                    this.ClientUri == input.ClientUri ||
                    (this.ClientUri != null &&
                    this.ClientUri.Equals(input.ClientUri))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FrontchannelLogoutSessionRequired == input.FrontchannelLogoutSessionRequired ||
                    this.FrontchannelLogoutSessionRequired.Equals(input.FrontchannelLogoutSessionRequired)
                ) && 
                (
                    this.FrontchannelLogoutUri == input.FrontchannelLogoutUri ||
                    (this.FrontchannelLogoutUri != null &&
                    this.FrontchannelLogoutUri.Equals(input.FrontchannelLogoutUri))
                ) && 
                (
                    this.GrantTypes == input.GrantTypes ||
                    this.GrantTypes != null &&
                    input.GrantTypes != null &&
                    this.GrantTypes.SequenceEqual(input.GrantTypes)
                ) && 
                (
                    this.Jwks == input.Jwks ||
                    (this.Jwks != null &&
                    this.Jwks.Equals(input.Jwks))
                ) && 
                (
                    this.JwksUri == input.JwksUri ||
                    (this.JwksUri != null &&
                    this.JwksUri.Equals(input.JwksUri))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.PolicyUri == input.PolicyUri ||
                    (this.PolicyUri != null &&
                    this.PolicyUri.Equals(input.PolicyUri))
                ) && 
                (
                    this.PostLogoutRedirectUris == input.PostLogoutRedirectUris ||
                    this.PostLogoutRedirectUris != null &&
                    input.PostLogoutRedirectUris != null &&
                    this.PostLogoutRedirectUris.SequenceEqual(input.PostLogoutRedirectUris)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                ) && 
                (
                    this.RegistrationAccessToken == input.RegistrationAccessToken ||
                    (this.RegistrationAccessToken != null &&
                    this.RegistrationAccessToken.Equals(input.RegistrationAccessToken))
                ) && 
                (
                    this.RegistrationClientUri == input.RegistrationClientUri ||
                    (this.RegistrationClientUri != null &&
                    this.RegistrationClientUri.Equals(input.RegistrationClientUri))
                ) && 
                (
                    this.RequestObjectSigningAlg == input.RequestObjectSigningAlg ||
                    (this.RequestObjectSigningAlg != null &&
                    this.RequestObjectSigningAlg.Equals(input.RequestObjectSigningAlg))
                ) && 
                (
                    this.RequestUris == input.RequestUris ||
                    this.RequestUris != null &&
                    input.RequestUris != null &&
                    this.RequestUris.SequenceEqual(input.RequestUris)
                ) && 
                (
                    this.ResponseTypes == input.ResponseTypes ||
                    this.ResponseTypes != null &&
                    input.ResponseTypes != null &&
                    this.ResponseTypes.SequenceEqual(input.ResponseTypes)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.SectorIdentifierUri == input.SectorIdentifierUri ||
                    (this.SectorIdentifierUri != null &&
                    this.SectorIdentifierUri.Equals(input.SectorIdentifierUri))
                ) && 
                (
                    this.SubjectType == input.SubjectType ||
                    (this.SubjectType != null &&
                    this.SubjectType.Equals(input.SubjectType))
                ) && 
                (
                    this.TokenEndpointAuthMethod == input.TokenEndpointAuthMethod ||
                    (this.TokenEndpointAuthMethod != null &&
                    this.TokenEndpointAuthMethod.Equals(input.TokenEndpointAuthMethod))
                ) && 
                (
                    this.TokenEndpointAuthSigningAlg == input.TokenEndpointAuthSigningAlg ||
                    (this.TokenEndpointAuthSigningAlg != null &&
                    this.TokenEndpointAuthSigningAlg.Equals(input.TokenEndpointAuthSigningAlg))
                ) && 
                (
                    this.TosUri == input.TosUri ||
                    (this.TosUri != null &&
                    this.TosUri.Equals(input.TosUri))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserinfoSignedResponseAlg == input.UserinfoSignedResponseAlg ||
                    (this.UserinfoSignedResponseAlg != null &&
                    this.UserinfoSignedResponseAlg.Equals(input.UserinfoSignedResponseAlg))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedCorsOrigins != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedCorsOrigins.GetHashCode();
                }
                if (this.Audience != null)
                {
                    hashCode = (hashCode * 59) + this.Audience.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BackchannelLogoutSessionRequired.GetHashCode();
                if (this.BackchannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.BackchannelLogoutUri.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientSecretExpiresAt.GetHashCode();
                if (this.ClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUri.GetHashCode();
                }
                if (this.Contacts != null)
                {
                    hashCode = (hashCode * 59) + this.Contacts.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FrontchannelLogoutSessionRequired.GetHashCode();
                if (this.FrontchannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.FrontchannelLogoutUri.GetHashCode();
                }
                if (this.GrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypes.GetHashCode();
                }
                if (this.Jwks != null)
                {
                    hashCode = (hashCode * 59) + this.Jwks.GetHashCode();
                }
                if (this.JwksUri != null)
                {
                    hashCode = (hashCode * 59) + this.JwksUri.GetHashCode();
                }
                if (this.LogoUri != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUri.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.PolicyUri != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyUri.GetHashCode();
                }
                if (this.PostLogoutRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutRedirectUris.GetHashCode();
                }
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.RegistrationAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationAccessToken.GetHashCode();
                }
                if (this.RegistrationClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationClientUri.GetHashCode();
                }
                if (this.RequestObjectSigningAlg != null)
                {
                    hashCode = (hashCode * 59) + this.RequestObjectSigningAlg.GetHashCode();
                }
                if (this.RequestUris != null)
                {
                    hashCode = (hashCode * 59) + this.RequestUris.GetHashCode();
                }
                if (this.ResponseTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypes.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.SectorIdentifierUri != null)
                {
                    hashCode = (hashCode * 59) + this.SectorIdentifierUri.GetHashCode();
                }
                if (this.SubjectType != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectType.GetHashCode();
                }
                if (this.TokenEndpointAuthMethod != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthMethod.GetHashCode();
                }
                if (this.TokenEndpointAuthSigningAlg != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthSigningAlg.GetHashCode();
                }
                if (this.TosUri != null)
                {
                    hashCode = (hashCode * 59) + this.TosUri.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UserinfoSignedResponseAlg != null)
                {
                    hashCode = (hashCode * 59) + this.UserinfoSignedResponseAlg.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Scope (string) pattern
            Regex regexScope = new Regex(@"([a-zA-Z0-9\\.\\*]+\\s?)+", RegexOptions.CultureInvariant);
            if (false == regexScope.Match(this.Scope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, must match a pattern of " + regexScope, new [] { "Scope" });
            }

            yield break;
        }
    }

}
