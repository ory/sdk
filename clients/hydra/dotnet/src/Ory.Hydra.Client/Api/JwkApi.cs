/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v2.1.1
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Hydra.Client.Client;
using Ory.Hydra.Client.Model;

namespace Ory.Hydra.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJwkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <returns>HydraJsonWebKeySet</returns>
        HydraJsonWebKeySet CreateJsonWebKeySet(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet);

        /// <summary>
        /// Create JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        ApiResponse<HydraJsonWebKeySet> CreateJsonWebKeySetWithHttpInfo(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet);
        /// <summary>
        /// Delete JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <returns></returns>
        void DeleteJsonWebKey(string set, string kid);

        /// <summary>
        /// Delete JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJsonWebKeyWithHttpInfo(string set, string kid);
        /// <summary>
        /// Delete JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <returns></returns>
        void DeleteJsonWebKeySet(string set);

        /// <summary>
        /// Delete JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJsonWebKeySetWithHttpInfo(string set);
        /// <summary>
        /// Get JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <returns>HydraJsonWebKeySet</returns>
        HydraJsonWebKeySet GetJsonWebKey(string set, string kid);

        /// <summary>
        /// Get JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        ApiResponse<HydraJsonWebKeySet> GetJsonWebKeyWithHttpInfo(string set, string kid);
        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <returns>HydraJsonWebKeySet</returns>
        HydraJsonWebKeySet GetJsonWebKeySet(string set);

        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        ApiResponse<HydraJsonWebKeySet> GetJsonWebKeySetWithHttpInfo(string set);
        /// <summary>
        /// Set JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <returns>HydraJsonWebKey</returns>
        HydraJsonWebKey SetJsonWebKey(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey));

        /// <summary>
        /// Set JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <returns>ApiResponse of HydraJsonWebKey</returns>
        ApiResponse<HydraJsonWebKey> SetJsonWebKeyWithHttpInfo(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey));
        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <returns>HydraJsonWebKeySet</returns>
        HydraJsonWebKeySet SetJsonWebKeySet(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet));

        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        ApiResponse<HydraJsonWebKeySet> SetJsonWebKeySetWithHttpInfo(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJwkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJsonWebKeySet> CreateJsonWebKeySetAsync(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJsonWebKeySet>> CreateJsonWebKeySetWithHttpInfoAsync(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJsonWebKeyAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJsonWebKeyWithHttpInfoAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJsonWebKeySet> GetJsonWebKeyAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJsonWebKeySet>> GetJsonWebKeyWithHttpInfoAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJsonWebKeySet> GetJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJsonWebKeySet>> GetJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKey</returns>
        System.Threading.Tasks.Task<HydraJsonWebKey> SetJsonWebKeyAsync(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJsonWebKey>> SetJsonWebKeyWithHttpInfoAsync(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJsonWebKeySet> SetJsonWebKeySetAsync(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJsonWebKeySet>> SetJsonWebKeySetWithHttpInfoAsync(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJwkApi : IJwkApiSync, IJwkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JwkApi : IJwkApi
    {
        private Ory.Hydra.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JwkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JwkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JwkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JwkApi(string basePath)
        {
            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                new Ory.Hydra.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JwkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JwkApi(Ory.Hydra.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JwkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JwkApi(Ory.Hydra.Client.Client.ISynchronousClient client, Ory.Hydra.Client.Client.IAsynchronousClient asyncClient, Ory.Hydra.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Hydra.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Hydra.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <returns>HydraJsonWebKeySet</returns>
        public HydraJsonWebKeySet CreateJsonWebKeySet(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = CreateJsonWebKeySetWithHttpInfo(set, hydraCreateJsonWebKeySet);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> CreateJsonWebKeySetWithHttpInfo(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->CreateJsonWebKeySet");
            }

            // verify the required parameter 'hydraCreateJsonWebKeySet' is set
            if (hydraCreateJsonWebKeySet == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraCreateJsonWebKeySet' when calling JwkApi->CreateJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraCreateJsonWebKeySet;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJsonWebKeySet> CreateJsonWebKeySetAsync(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = await CreateJsonWebKeySetWithHttpInfoAsync(set, hydraCreateJsonWebKeySet, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraCreateJsonWebKeySet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet>> CreateJsonWebKeySetWithHttpInfoAsync(string set, HydraCreateJsonWebKeySet hydraCreateJsonWebKeySet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->CreateJsonWebKeySet");
            }

            // verify the required parameter 'hydraCreateJsonWebKeySet' is set
            if (hydraCreateJsonWebKeySet == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraCreateJsonWebKeySet' when calling JwkApi->CreateJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraCreateJsonWebKeySet;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <returns></returns>
        public void DeleteJsonWebKey(string set, string kid)
        {
            DeleteJsonWebKeyWithHttpInfo(set, kid);
        }

        /// <summary>
        /// Delete JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteJsonWebKeyWithHttpInfo(string set, string kid)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->DeleteJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->DeleteJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJsonWebKeyAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJsonWebKeyWithHttpInfoAsync(set, kid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="kid">The JSON Web Key ID (kid)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteJsonWebKeyWithHttpInfoAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->DeleteJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->DeleteJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <returns></returns>
        public void DeleteJsonWebKeySet(string set)
        {
            DeleteJsonWebKeySetWithHttpInfo(set);
        }

        /// <summary>
        /// Delete JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteJsonWebKeySetWithHttpInfo(string set)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->DeleteJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJsonWebKeySetWithHttpInfoAsync(set, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->DeleteJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JSON Web Key This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <returns>HydraJsonWebKeySet</returns>
        public HydraJsonWebKeySet GetJsonWebKey(string set, string kid)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = GetJsonWebKeyWithHttpInfo(set, kid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JSON Web Key This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> GetJsonWebKeyWithHttpInfo(string set, string kid)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->GetJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->GetJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraJsonWebKeySet>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get JSON Web Key This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJsonWebKeySet> GetJsonWebKeyAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = await GetJsonWebKeyWithHttpInfoAsync(set, kid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get JSON Web Key This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet>> GetJsonWebKeyWithHttpInfoAsync(string set, string kid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->GetJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->GetJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraJsonWebKeySet>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <returns>HydraJsonWebKeySet</returns>
        public HydraJsonWebKeySet GetJsonWebKeySet(string set)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = GetJsonWebKeySetWithHttpInfo(set);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> GetJsonWebKeySetWithHttpInfo(string set)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->GetJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJsonWebKeySet> GetJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = await GetJsonWebKeySetWithHttpInfoAsync(set, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">JSON Web Key Set ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet>> GetJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->GetJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <returns>HydraJsonWebKey</returns>
        public HydraJsonWebKey SetJsonWebKey(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKey> localVarResponse = SetJsonWebKeyWithHttpInfo(set, kid, hydraJsonWebKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <returns>ApiResponse of HydraJsonWebKey</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKey> SetJsonWebKeyWithHttpInfo(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->SetJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->SetJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKey;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraJsonWebKey>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKey</returns>
        public async System.Threading.Tasks.Task<HydraJsonWebKey> SetJsonWebKeyAsync(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKey> localVarResponse = await SetJsonWebKeyWithHttpInfoAsync(set, kid, hydraJsonWebKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="kid">JSON Web Key ID</param>
        /// <param name="hydraJsonWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKey)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKey>> SetJsonWebKeyWithHttpInfoAsync(string set, string kid, HydraJsonWebKey hydraJsonWebKey = default(HydraJsonWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->SetJsonWebKey");
            }

            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling JwkApi->SetJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKey;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraJsonWebKey>("/admin/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <returns>HydraJsonWebKeySet</returns>
        public HydraJsonWebKeySet SetJsonWebKeySet(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = SetJsonWebKeySetWithHttpInfo(set, hydraJsonWebKeySet);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <returns>ApiResponse of HydraJsonWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> SetJsonWebKeySetWithHttpInfo(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->SetJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKeySet;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJsonWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJsonWebKeySet> SetJsonWebKeySetAsync(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet> localVarResponse = await SetJsonWebKeySetWithHttpInfoAsync(set, hydraJsonWebKeySet, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The JSON Web Key Set ID</param>
        /// <param name="hydraJsonWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJsonWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJsonWebKeySet>> SetJsonWebKeySetWithHttpInfoAsync(string set, HydraJsonWebKeySet hydraJsonWebKeySet = default(HydraJsonWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling JwkApi->SetJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKeySet;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraJsonWebKeySet>("/admin/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
