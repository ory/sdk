/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v1.11.8
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Hydra.Client.Client;
using Ory.Hydra.Client.Model;

namespace Ory.Hydra.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        HydraCompletedRequest AcceptConsentRequest(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest));

        /// <summary>
        /// Accept a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        ApiResponse<HydraCompletedRequest> AcceptConsentRequestWithHttpInfo(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest));
        /// <summary>
        /// Accept a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        HydraCompletedRequest AcceptLoginRequest(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest));

        /// <summary>
        /// Accept a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        ApiResponse<HydraCompletedRequest> AcceptLoginRequestWithHttpInfo(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest));
        /// <summary>
        /// Accept a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraCompletedRequest</returns>
        HydraCompletedRequest AcceptLogoutRequest(string logoutChallenge);

        /// <summary>
        /// Accept a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        ApiResponse<HydraCompletedRequest> AcceptLogoutRequestWithHttpInfo(string logoutChallenge);
        /// <summary>
        /// Generate a New JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <returns>HydraJSONWebKeySet</returns>
        HydraJSONWebKeySet CreateJsonWebKeySet(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest));

        /// <summary>
        /// Generate a New JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        ApiResponse<HydraJSONWebKeySet> CreateJsonWebKeySetWithHttpInfo(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest));
        /// <summary>
        /// Create an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client CreateOAuth2Client(HydraOAuth2Client hydraOAuth2Client);

        /// <summary>
        /// Create an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> CreateOAuth2ClientWithHttpInfo(HydraOAuth2Client hydraOAuth2Client);
        /// <summary>
        /// Delete a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns></returns>
        void DeleteJsonWebKey(string kid, string set);

        /// <summary>
        /// Delete a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJsonWebKeyWithHttpInfo(string kid, string set);
        /// <summary>
        /// Delete a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns></returns>
        void DeleteJsonWebKeySet(string set);

        /// <summary>
        /// Delete a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJsonWebKeySetWithHttpInfo(string set);
        /// <summary>
        /// Deletes an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns></returns>
        void DeleteOAuth2Client(string id);

        /// <summary>
        /// Deletes an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id);
        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns></returns>
        void DeleteOAuth2Token(string clientId);

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId);
        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns></returns>
        void DeleteTrustedJwtGrantIssuer(string id);

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTrustedJwtGrantIssuerWithHttpInfo(string id);
        /// <summary>
        /// Flush Expired OAuth2 Access Tokens
        /// </summary>
        /// <remarks>
        /// This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <returns></returns>
        void FlushInactiveOAuth2Tokens(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest));

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens
        /// </summary>
        /// <remarks>
        /// This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FlushInactiveOAuth2TokensWithHttpInfo(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest));
        /// <summary>
        /// Get Consent Request Information
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <returns>HydraConsentRequest</returns>
        HydraConsentRequest GetConsentRequest(string consentChallenge);

        /// <summary>
        /// Get Consent Request Information
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <returns>ApiResponse of HydraConsentRequest</returns>
        ApiResponse<HydraConsentRequest> GetConsentRequestWithHttpInfo(string consentChallenge);
        /// <summary>
        /// Fetch a JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>HydraJSONWebKeySet</returns>
        HydraJSONWebKeySet GetJsonWebKey(string kid, string set);

        /// <summary>
        /// Fetch a JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        ApiResponse<HydraJSONWebKeySet> GetJsonWebKeyWithHttpInfo(string kid, string set);
        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>HydraJSONWebKeySet</returns>
        HydraJSONWebKeySet GetJsonWebKeySet(string set);

        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        ApiResponse<HydraJSONWebKeySet> GetJsonWebKeySetWithHttpInfo(string set);
        /// <summary>
        /// Get a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <returns>HydraLoginRequest</returns>
        HydraLoginRequest GetLoginRequest(string loginChallenge);

        /// <summary>
        /// Get a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <returns>ApiResponse of HydraLoginRequest</returns>
        ApiResponse<HydraLoginRequest> GetLoginRequestWithHttpInfo(string loginChallenge);
        /// <summary>
        /// Get a Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch a logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraLogoutRequest</returns>
        HydraLogoutRequest GetLogoutRequest(string logoutChallenge);

        /// <summary>
        /// Get a Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch a logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraLogoutRequest</returns>
        ApiResponse<HydraLogoutRequest> GetLogoutRequestWithHttpInfo(string logoutChallenge);
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client GetOAuth2Client(string id);

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> GetOAuth2ClientWithHttpInfo(string id);
        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>HydraTrustedJwtGrantIssuer</returns>
        HydraTrustedJwtGrantIssuer GetTrustedJwtGrantIssuer(string id);

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of HydraTrustedJwtGrantIssuer</returns>
        ApiResponse<HydraTrustedJwtGrantIssuer> GetTrustedJwtGrantIssuerWithHttpInfo(string id);
        /// <summary>
        /// Introspect OAuth2 Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>HydraOAuth2TokenIntrospection</returns>
        HydraOAuth2TokenIntrospection IntrospectOAuth2Token(string token, string scope = default(string));

        /// <summary>
        /// Introspect OAuth2 Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2TokenIntrospection</returns>
        ApiResponse<HydraOAuth2TokenIntrospection> IntrospectOAuth2TokenWithHttpInfo(string token, string scope = default(string));
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>List&lt;HydraOAuth2Client&gt;</returns>
        List<HydraOAuth2Client> ListOAuth2Clients(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string));

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2Client&gt;</returns>
        ApiResponse<List<HydraOAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string));
        /// <summary>
        /// Lists All Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>List&lt;HydraPreviousConsentSession&gt;</returns>
        List<HydraPreviousConsentSession> ListSubjectConsentSessions(string subject, long? limit = default(long?), long? offset = default(long?));

        /// <summary>
        /// Lists All Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraPreviousConsentSession&gt;</returns>
        ApiResponse<List<HydraPreviousConsentSession>> ListSubjectConsentSessionsWithHttpInfo(string subject, long? limit = default(long?), long? offset = default(long?));
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        List<HydraTrustedJwtGrantIssuer> ListTrustedJwtGrantIssuers(string issuer = default(string), long? limit = default(long?), long? offset = default(long?));

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        ApiResponse<List<HydraTrustedJwtGrantIssuer>> ListTrustedJwtGrantIssuersWithHttpInfo(string issuer = default(string), long? limit = default(long?), long? offset = default(long?));
        /// <summary>
        /// Patch an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client PatchOAuth2Client(string id, List<HydraPatchDocument> hydraPatchDocument);

        /// <summary>
        /// Patch an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<HydraPatchDocument> hydraPatchDocument);
        /// <summary>
        /// Reject a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        HydraCompletedRequest RejectConsentRequest(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));

        /// <summary>
        /// Reject a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        ApiResponse<HydraCompletedRequest> RejectConsentRequestWithHttpInfo(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));
        /// <summary>
        /// Reject a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        HydraCompletedRequest RejectLoginRequest(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));

        /// <summary>
        /// Reject a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        ApiResponse<HydraCompletedRequest> RejectLoginRequestWithHttpInfo(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));
        /// <summary>
        /// Reject a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns></returns>
        void RejectLogoutRequest(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));

        /// <summary>
        /// Reject a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectLogoutRequestWithHttpInfo(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest));
        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <returns></returns>
        void RevokeAuthenticationSession(string subject);

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeAuthenticationSessionWithHttpInfo(string subject);
        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns></returns>
        void RevokeConsentSessions(string subject, string _client = default(string), bool? all = default(bool?));

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeConsentSessionsWithHttpInfo(string subject, string _client = default(string), bool? all = default(bool?));
        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <returns>HydraTrustedJwtGrantIssuer</returns>
        HydraTrustedJwtGrantIssuer TrustJwtGrantIssuer(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody));

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <returns>ApiResponse of HydraTrustedJwtGrantIssuer</returns>
        ApiResponse<HydraTrustedJwtGrantIssuer> TrustJwtGrantIssuerWithHttpInfo(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody));
        /// <summary>
        /// Update a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <returns>HydraJSONWebKey</returns>
        HydraJSONWebKey UpdateJsonWebKey(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey));

        /// <summary>
        /// Update a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKey</returns>
        ApiResponse<HydraJSONWebKey> UpdateJsonWebKeyWithHttpInfo(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey));
        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <returns>HydraJSONWebKeySet</returns>
        HydraJSONWebKeySet UpdateJsonWebKeySet(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet));

        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        ApiResponse<HydraJSONWebKeySet> UpdateJsonWebKeySetWithHttpInfo(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet));
        /// <summary>
        /// Update an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client UpdateOAuth2Client(string id, HydraOAuth2Client hydraOAuth2Client);

        /// <summary>
        /// Update an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> UpdateOAuth2ClientWithHttpInfo(string id, HydraOAuth2Client hydraOAuth2Client);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        System.Threading.Tasks.Task<HydraCompletedRequest> AcceptConsentRequestAsync(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraCompletedRequest>> AcceptConsentRequestWithHttpInfoAsync(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        System.Threading.Tasks.Task<HydraCompletedRequest> AcceptLoginRequestAsync(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraCompletedRequest>> AcceptLoginRequestWithHttpInfoAsync(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        System.Threading.Tasks.Task<HydraCompletedRequest> AcceptLogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraCompletedRequest>> AcceptLogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a New JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJSONWebKeySet> CreateJsonWebKeySetAsync(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a New JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJSONWebKeySet>> CreateJsonWebKeySetWithHttpInfoAsync(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> CreateOAuth2ClientAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJsonWebKeyAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJsonWebKeyWithHttpInfoAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTrustedJwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrustedJwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Flush Expired OAuth2 Access Tokens
        /// </summary>
        /// <remarks>
        /// This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FlushInactiveOAuth2TokensAsync(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens
        /// </summary>
        /// <remarks>
        /// This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FlushInactiveOAuth2TokensWithHttpInfoAsync(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Consent Request Information
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraConsentRequest</returns>
        System.Threading.Tasks.Task<HydraConsentRequest> GetConsentRequestAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Consent Request Information
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraConsentRequest>> GetConsentRequestWithHttpInfoAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJSONWebKeySet> GetJsonWebKeyAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a JSON Web Key
        /// </summary>
        /// <remarks>
        /// This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJSONWebKeySet>> GetJsonWebKeyWithHttpInfoAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJSONWebKeySet> GetJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJSONWebKeySet>> GetJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraLoginRequest</returns>
        System.Threading.Tasks.Task<HydraLoginRequest> GetLoginRequestAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraLoginRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraLoginRequest>> GetLoginRequestWithHttpInfoAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch a logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraLogoutRequest</returns>
        System.Threading.Tasks.Task<HydraLogoutRequest> GetLogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch a logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraLogoutRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraLogoutRequest>> GetLogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> GetOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedJwtGrantIssuer</returns>
        System.Threading.Tasks.Task<HydraTrustedJwtGrantIssuer> GetTrustedJwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedJwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraTrustedJwtGrantIssuer>> GetTrustedJwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Introspect OAuth2 Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2TokenIntrospection</returns>
        System.Threading.Tasks.Task<HydraOAuth2TokenIntrospection> IntrospectOAuth2TokenAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Introspect OAuth2 Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2TokenIntrospection)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2TokenIntrospection>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<HydraOAuth2Client>> ListOAuth2ClientsAsync(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraOAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists All Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraPreviousConsentSession&gt;</returns>
        System.Threading.Tasks.Task<List<HydraPreviousConsentSession>> ListSubjectConsentSessionsAsync(string subject, long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists All Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraPreviousConsentSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraPreviousConsentSession>>> ListSubjectConsentSessionsWithHttpInfoAsync(string subject, long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        System.Threading.Tasks.Task<List<HydraTrustedJwtGrantIssuer>> ListTrustedJwtGrantIssuersAsync(string issuer = default(string), long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraTrustedJwtGrantIssuer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraTrustedJwtGrantIssuer>>> ListTrustedJwtGrantIssuersWithHttpInfoAsync(string issuer = default(string), long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> PatchOAuth2ClientAsync(string id, List<HydraPatchDocument> hydraPatchDocument, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<HydraPatchDocument> hydraPatchDocument, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        System.Threading.Tasks.Task<HydraCompletedRequest> RejectConsentRequestAsync(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraCompletedRequest>> RejectConsentRequestWithHttpInfoAsync(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        System.Threading.Tasks.Task<HydraCompletedRequest> RejectLoginRequestAsync(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraCompletedRequest>> RejectLoginRequestWithHttpInfoAsync(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectLogoutRequestAsync(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject a Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectLogoutRequestWithHttpInfoAsync(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeAuthenticationSessionAsync(string subject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeAuthenticationSessionWithHttpInfoAsync(string subject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeConsentSessionsAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeConsentSessionsWithHttpInfoAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedJwtGrantIssuer</returns>
        System.Threading.Tasks.Task<HydraTrustedJwtGrantIssuer> TrustJwtGrantIssuerAsync(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedJwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraTrustedJwtGrantIssuer>> TrustJwtGrantIssuerWithHttpInfoAsync(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKey</returns>
        System.Threading.Tasks.Task<HydraJSONWebKey> UpdateJsonWebKeyAsync(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a JSON Web Key
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJSONWebKey>> UpdateJsonWebKeyWithHttpInfoAsync(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        System.Threading.Tasks.Task<HydraJSONWebKeySet> UpdateJsonWebKeySetAsync(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a JSON Web Key Set
        /// </summary>
        /// <remarks>
        /// Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraJSONWebKeySet>> UpdateJsonWebKeySetWithHttpInfoAsync(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> UpdateOAuth2ClientAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> UpdateOAuth2ClientWithHttpInfoAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IAdminApiSync, IAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Ory.Hydra.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(string basePath)
        {
            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                new Ory.Hydra.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Ory.Hydra.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdminApi(Ory.Hydra.Client.Client.ISynchronousClient client, Ory.Hydra.Client.Client.IAsynchronousClient asyncClient, Ory.Hydra.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Hydra.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Hydra.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        public HydraCompletedRequest AcceptConsentRequest(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = AcceptConsentRequestWithHttpInfo(consentChallenge, hydraAcceptConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> AcceptConsentRequestWithHttpInfo(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->AcceptConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraAcceptConsentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraCompletedRequest>("/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        public async System.Threading.Tasks.Task<HydraCompletedRequest> AcceptConsentRequestAsync(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = await AcceptConsentRequestWithHttpInfoAsync(consentChallenge, hydraAcceptConsentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraAcceptConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest>> AcceptConsentRequestWithHttpInfoAsync(string consentChallenge, HydraAcceptConsentRequest hydraAcceptConsentRequest = default(HydraAcceptConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->AcceptConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraAcceptConsentRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraCompletedRequest>("/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        public HydraCompletedRequest AcceptLoginRequest(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = AcceptLoginRequestWithHttpInfo(loginChallenge, hydraAcceptLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> AcceptLoginRequestWithHttpInfo(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->AcceptLoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraAcceptLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraCompletedRequest>("/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        public async System.Threading.Tasks.Task<HydraCompletedRequest> AcceptLoginRequestAsync(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = await AcceptLoginRequestWithHttpInfoAsync(loginChallenge, hydraAcceptLoginRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraAcceptLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest>> AcceptLoginRequestWithHttpInfoAsync(string loginChallenge, HydraAcceptLoginRequest hydraAcceptLoginRequest = default(HydraAcceptLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->AcceptLoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraAcceptLoginRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraCompletedRequest>("/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraCompletedRequest</returns>
        public HydraCompletedRequest AcceptLogoutRequest(string logoutChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = AcceptLogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> AcceptLogoutRequestWithHttpInfo(string logoutChallenge)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->AcceptLogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraCompletedRequest>("/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        public async System.Threading.Tasks.Task<HydraCompletedRequest> AcceptLogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = await AcceptLogoutRequestWithHttpInfoAsync(logoutChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest>> AcceptLogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->AcceptLogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraCompletedRequest>("/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a New JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <returns>HydraJSONWebKeySet</returns>
        public HydraJSONWebKeySet CreateJsonWebKeySet(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = CreateJsonWebKeySetWithHttpInfo(set, hydraJsonWebKeySetGeneratorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a New JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> CreateJsonWebKeySetWithHttpInfo(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->CreateJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKeySetGeneratorRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a New JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJSONWebKeySet> CreateJsonWebKeySetAsync(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = await CreateJsonWebKeySetWithHttpInfoAsync(set, hydraJsonWebKeySetGeneratorRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a New JSON Web Key This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJsonWebKeySetGeneratorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet>> CreateJsonWebKeySetWithHttpInfoAsync(string set, HydraJsonWebKeySetGeneratorRequest hydraJsonWebKeySetGeneratorRequest = default(HydraJsonWebKeySetGeneratorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->CreateJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJsonWebKeySetGeneratorRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an OAuth 2.0 Client Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client CreateOAuth2Client(HydraOAuth2Client hydraOAuth2Client)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = CreateOAuth2ClientWithHttpInfo(hydraOAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an OAuth 2.0 Client Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> CreateOAuth2ClientWithHttpInfo(HydraOAuth2Client hydraOAuth2Client)
        {
            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling AdminApi->CreateOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraOAuth2Client>("/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an OAuth 2.0 Client Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> CreateOAuth2ClientAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await CreateOAuth2ClientWithHttpInfoAsync(hydraOAuth2Client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an OAuth 2.0 Client Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling AdminApi->CreateOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraOAuth2Client>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns></returns>
        public void DeleteJsonWebKey(string kid, string set)
        {
            DeleteJsonWebKeyWithHttpInfo(kid, set);
        }

        /// <summary>
        /// Delete a JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteJsonWebKeyWithHttpInfo(string kid, string set)
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->DeleteJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->DeleteJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJsonWebKeyAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJsonWebKeyWithHttpInfoAsync(kid, set, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a JSON Web Key Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteJsonWebKeyWithHttpInfoAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->DeleteJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->DeleteJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns></returns>
        public void DeleteJsonWebKeySet(string set)
        {
            DeleteJsonWebKeySetWithHttpInfo(set);
        }

        /// <summary>
        /// Delete a JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteJsonWebKeySetWithHttpInfo(string set)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->DeleteJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJsonWebKeySetWithHttpInfoAsync(set, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a JSON Web Key Set Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->DeleteJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns></returns>
        public void DeleteOAuth2Client(string id)
        {
            DeleteOAuth2ClientWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->DeleteOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2ClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->DeleteOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns></returns>
        public void DeleteOAuth2Token(string clientId)
        {
            DeleteOAuth2TokenWithHttpInfo(clientId);
        }

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling AdminApi->DeleteOAuth2Token");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/oauth2/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2TokenWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete OAuth2 Access Tokens from a Client This endpoint deletes OAuth2 access tokens issued for a client from the database
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling AdminApi->DeleteOAuth2Token");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/oauth2/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns></returns>
        public void DeleteTrustedJwtGrantIssuer(string id)
        {
            DeleteTrustedJwtGrantIssuerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteTrustedJwtGrantIssuerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->DeleteTrustedJwtGrantIssuer");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTrustedJwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTrustedJwtGrantIssuerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteTrustedJwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->DeleteTrustedJwtGrantIssuer");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <returns></returns>
        public void FlushInactiveOAuth2Tokens(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest))
        {
            FlushInactiveOAuth2TokensWithHttpInfo(hydraFlushInactiveOAuth2TokensRequest);
        }

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> FlushInactiveOAuth2TokensWithHttpInfo(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraFlushInactiveOAuth2TokensRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/flush", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlushInactiveOAuth2Tokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FlushInactiveOAuth2TokensAsync(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FlushInactiveOAuth2TokensWithHttpInfoAsync(hydraFlushInactiveOAuth2TokensRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Flush Expired OAuth2 Access Tokens This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraFlushInactiveOAuth2TokensRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> FlushInactiveOAuth2TokensWithHttpInfoAsync(HydraFlushInactiveOAuth2TokensRequest hydraFlushInactiveOAuth2TokensRequest = default(HydraFlushInactiveOAuth2TokensRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraFlushInactiveOAuth2TokensRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/flush", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlushInactiveOAuth2Tokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consent Request Information When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <returns>HydraConsentRequest</returns>
        public HydraConsentRequest GetConsentRequest(string consentChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraConsentRequest> localVarResponse = GetConsentRequestWithHttpInfo(consentChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consent Request Information When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <returns>ApiResponse of HydraConsentRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraConsentRequest> GetConsentRequestWithHttpInfo(string consentChallenge)
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->GetConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraConsentRequest>("/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Consent Request Information When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraConsentRequest</returns>
        public async System.Threading.Tasks.Task<HydraConsentRequest> GetConsentRequestAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraConsentRequest> localVarResponse = await GetConsentRequestWithHttpInfoAsync(consentChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Consent Request Information When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraConsentRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraConsentRequest>> GetConsentRequestWithHttpInfoAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->GetConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraConsentRequest>("/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a JSON Web Key This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>HydraJSONWebKeySet</returns>
        public HydraJSONWebKeySet GetJsonWebKey(string kid, string set)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = GetJsonWebKeyWithHttpInfo(kid, set);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a JSON Web Key This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> GetJsonWebKeyWithHttpInfo(string kid, string set)
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->GetJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->GetJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraJSONWebKeySet>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a JSON Web Key This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJSONWebKeySet> GetJsonWebKeyAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = await GetJsonWebKeyWithHttpInfoAsync(kid, set, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a JSON Web Key This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet>> GetJsonWebKeyWithHttpInfoAsync(string kid, string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->GetJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->GetJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraJSONWebKeySet>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>HydraJSONWebKeySet</returns>
        public HydraJSONWebKeySet GetJsonWebKeySet(string set)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = GetJsonWebKeySetWithHttpInfo(set);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> GetJsonWebKeySetWithHttpInfo(string set)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->GetJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJSONWebKeySet> GetJsonWebKeySetAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = await GetJsonWebKeySetWithHttpInfoAsync(set, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a JSON Web Key Set This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet>> GetJsonWebKeySetWithHttpInfoAsync(string set, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->GetJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <returns>HydraLoginRequest</returns>
        public HydraLoginRequest GetLoginRequest(string loginChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraLoginRequest> localVarResponse = GetLoginRequestWithHttpInfo(loginChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <returns>ApiResponse of HydraLoginRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraLoginRequest> GetLoginRequestWithHttpInfo(string loginChallenge)
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->GetLoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraLoginRequest>("/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraLoginRequest</returns>
        public async System.Threading.Tasks.Task<HydraLoginRequest> GetLoginRequestAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraLoginRequest> localVarResponse = await GetLoginRequestWithHttpInfoAsync(loginChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraLoginRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraLoginRequest>> GetLoginRequestWithHttpInfoAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->GetLoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraLoginRequest>("/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Logout Request Use this endpoint to fetch a logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraLogoutRequest</returns>
        public HydraLogoutRequest GetLogoutRequest(string logoutChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraLogoutRequest> localVarResponse = GetLogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Logout Request Use this endpoint to fetch a logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraLogoutRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraLogoutRequest> GetLogoutRequestWithHttpInfo(string logoutChallenge)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->GetLogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraLogoutRequest>("/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Logout Request Use this endpoint to fetch a logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraLogoutRequest</returns>
        public async System.Threading.Tasks.Task<HydraLogoutRequest> GetLogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraLogoutRequest> localVarResponse = await GetLogoutRequestWithHttpInfoAsync(logoutChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Logout Request Use this endpoint to fetch a logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraLogoutRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraLogoutRequest>> GetLogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->GetLogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraLogoutRequest>("/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client GetOAuth2Client(string id)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = GetOAuth2ClientWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> GetOAuth2ClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->GetOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> GetOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await GetOAuth2ClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->GetOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>HydraTrustedJwtGrantIssuer</returns>
        public HydraTrustedJwtGrantIssuer GetTrustedJwtGrantIssuer(string id)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> localVarResponse = GetTrustedJwtGrantIssuerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of HydraTrustedJwtGrantIssuer</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> GetTrustedJwtGrantIssuerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->GetTrustedJwtGrantIssuer");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraTrustedJwtGrantIssuer>("/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedJwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<HydraTrustedJwtGrantIssuer> GetTrustedJwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> localVarResponse = await GetTrustedJwtGrantIssuerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedJwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer>> GetTrustedJwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->GetTrustedJwtGrantIssuer");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraTrustedJwtGrantIssuer>("/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>HydraOAuth2TokenIntrospection</returns>
        public HydraOAuth2TokenIntrospection IntrospectOAuth2Token(string token, string scope = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenIntrospection> localVarResponse = IntrospectOAuth2TokenWithHttpInfo(token, scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2TokenIntrospection</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenIntrospection> IntrospectOAuth2TokenWithHttpInfo(string token, string scope = default(string))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling AdminApi->IntrospectOAuth2Token");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraOAuth2TokenIntrospection>("/oauth2/introspect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2TokenIntrospection</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2TokenIntrospection> IntrospectOAuth2TokenAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenIntrospection> localVarResponse = await IntrospectOAuth2TokenWithHttpInfoAsync(token, scope, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.  For more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2TokenIntrospection)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenIntrospection>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling AdminApi->IntrospectOAuth2Token");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraOAuth2TokenIntrospection>("/oauth2/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>List&lt;HydraOAuth2Client&gt;</returns>
        public List<HydraOAuth2Client> ListOAuth2Clients(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> localVarResponse = ListOAuth2ClientsWithHttpInfo(limit, offset, clientName, owner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2Client&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraOAuth2Client>>("/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraOAuth2Client>> ListOAuth2ClientsAsync(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> localVarResponse = await ListOAuth2ClientsWithHttpInfoAsync(limit, offset, clientName, owner, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The &#x60;limit&#x60; parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum amount of clients to returned, upper bound is 500 clients. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? limit = default(long?), long? offset = default(long?), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraOAuth2Client>>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists All Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>List&lt;HydraPreviousConsentSession&gt;</returns>
        public List<HydraPreviousConsentSession> ListSubjectConsentSessions(string subject, long? limit = default(long?), long? offset = default(long?))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraPreviousConsentSession>> localVarResponse = ListSubjectConsentSessionsWithHttpInfo(subject, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists All Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraPreviousConsentSession&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraPreviousConsentSession>> ListSubjectConsentSessionsWithHttpInfo(string subject, long? limit = default(long?), long? offset = default(long?))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->ListSubjectConsentSessions");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraPreviousConsentSession>>("/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubjectConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists All Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraPreviousConsentSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraPreviousConsentSession>> ListSubjectConsentSessionsAsync(string subject, long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraPreviousConsentSession>> localVarResponse = await ListSubjectConsentSessionsWithHttpInfoAsync(subject, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists All Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.   The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="limit">The maximum amount of consent sessions to be returned, upper bound is 500 sessions. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraPreviousConsentSession&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraPreviousConsentSession>>> ListSubjectConsentSessionsWithHttpInfoAsync(string subject, long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->ListSubjectConsentSessions");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraPreviousConsentSession>>("/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubjectConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        public List<HydraTrustedJwtGrantIssuer> ListTrustedJwtGrantIssuers(string issuer = default(string), long? limit = default(long?), long? offset = default(long?))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedJwtGrantIssuer>> localVarResponse = ListTrustedJwtGrantIssuersWithHttpInfo(issuer, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedJwtGrantIssuer>> ListTrustedJwtGrantIssuersWithHttpInfo(string issuer = default(string), long? limit = default(long?), long? offset = default(long?))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraTrustedJwtGrantIssuer>>("/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedJwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraTrustedJwtGrantIssuer&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraTrustedJwtGrantIssuer>> ListTrustedJwtGrantIssuersAsync(string issuer = default(string), long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedJwtGrantIssuer>> localVarResponse = await ListTrustedJwtGrantIssuersWithHttpInfoAsync(issuer, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="limit">The maximum amount of policies returned, upper bound is 500 policies (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraTrustedJwtGrantIssuer&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedJwtGrantIssuer>>> ListTrustedJwtGrantIssuersWithHttpInfoAsync(string issuer = default(string), long? limit = default(long?), long? offset = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraTrustedJwtGrantIssuer>>("/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedJwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an OAuth 2.0 Client Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client PatchOAuth2Client(string id, List<HydraPatchDocument> hydraPatchDocument)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = PatchOAuth2ClientWithHttpInfo(id, hydraPatchDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an OAuth 2.0 Client Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<HydraPatchDocument> hydraPatchDocument)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->PatchOAuth2Client");
            }

            // verify the required parameter 'hydraPatchDocument' is set
            if (hydraPatchDocument == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraPatchDocument' when calling AdminApi->PatchOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraPatchDocument;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an OAuth 2.0 Client Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> PatchOAuth2ClientAsync(string id, List<HydraPatchDocument> hydraPatchDocument, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await PatchOAuth2ClientWithHttpInfoAsync(id, hydraPatchDocument, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an OAuth 2.0 Client Patch an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraPatchDocument"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<HydraPatchDocument> hydraPatchDocument, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->PatchOAuth2Client");
            }

            // verify the required parameter 'hydraPatchDocument' is set
            if (hydraPatchDocument == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraPatchDocument' when calling AdminApi->PatchOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraPatchDocument;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        public HydraCompletedRequest RejectConsentRequest(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = RejectConsentRequestWithHttpInfo(consentChallenge, hydraRejectRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> RejectConsentRequestWithHttpInfo(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->RejectConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraCompletedRequest>("/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        public async System.Threading.Tasks.Task<HydraCompletedRequest> RejectConsentRequestAsync(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = await RejectConsentRequestWithHttpInfoAsync(consentChallenge, hydraRejectRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest>> RejectConsentRequestWithHttpInfoAsync(string consentChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling AdminApi->RejectConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraCompletedRequest>("/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>HydraCompletedRequest</returns>
        public HydraCompletedRequest RejectLoginRequest(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = RejectLoginRequestWithHttpInfo(loginChallenge, hydraRejectRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraCompletedRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> RejectLoginRequestWithHttpInfo(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->RejectLoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraCompletedRequest>("/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraCompletedRequest</returns>
        public async System.Threading.Tasks.Task<HydraCompletedRequest> RejectLoginRequestAsync(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest> localVarResponse = await RejectLoginRequestWithHttpInfoAsync(loginChallenge, hydraRejectRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraCompletedRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraCompletedRequest>> RejectLoginRequestWithHttpInfoAsync(string loginChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling AdminApi->RejectLoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraCompletedRequest>("/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectLoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns></returns>
        public void RejectLogoutRequest(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            RejectLogoutRequestWithHttpInfo(logoutChallenge, hydraRejectRequest);
        }

        /// <summary>
        /// Reject a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RejectLogoutRequestWithHttpInfo(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->RejectLogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectLogoutRequestAsync(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RejectLogoutRequestWithHttpInfoAsync(logoutChallenge, hydraRejectRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject a Logout Request When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="hydraRejectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RejectLogoutRequestWithHttpInfoAsync(string logoutChallenge, HydraRejectRequest hydraRejectRequest = default(HydraRejectRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling AdminApi->RejectLogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));
            localVarRequestOptions.Data = hydraRejectRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectLogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <returns></returns>
        public void RevokeAuthenticationSession(string subject)
        {
            RevokeAuthenticationSessionWithHttpInfo(subject);
        }

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RevokeAuthenticationSessionWithHttpInfo(string subject)
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->RevokeAuthenticationSession");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthenticationSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeAuthenticationSessionAsync(string subject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeAuthenticationSessionWithHttpInfoAsync(subject, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invalidates All Login Sessions of a Certain User Invalidates a Subject&#39;s Authentication Session This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect Front- or Back-channel logout.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RevokeAuthenticationSessionWithHttpInfoAsync(string subject, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->RevokeAuthenticationSession");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeAuthenticationSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns></returns>
        public void RevokeConsentSessions(string subject, string _client = default(string), bool? all = default(bool?))
        {
            RevokeConsentSessionsWithHttpInfo(subject, _client, all);
        }

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RevokeConsentSessionsWithHttpInfo(string subject, string _client = default(string), bool? all = default(bool?))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->RevokeConsentSessions");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeConsentSessionsAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeConsentSessionsWithHttpInfoAsync(subject, _client, all, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject (Subject) who&#39;s consent sessions should be deleted.</param>
        /// <param name="_client">If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID (optional)</param>
        /// <param name="all">If set to &#x60;?all&#x3D;true&#x60;, deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RevokeConsentSessionsWithHttpInfoAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling AdminApi->RevokeConsentSessions");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <returns>HydraTrustedJwtGrantIssuer</returns>
        public HydraTrustedJwtGrantIssuer TrustJwtGrantIssuer(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> localVarResponse = TrustJwtGrantIssuerWithHttpInfo(hydraTrustJwtGrantIssuerBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <returns>ApiResponse of HydraTrustedJwtGrantIssuer</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> TrustJwtGrantIssuerWithHttpInfo(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraTrustJwtGrantIssuerBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraTrustedJwtGrantIssuer>("/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedJwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<HydraTrustedJwtGrantIssuer> TrustJwtGrantIssuerAsync(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer> localVarResponse = await TrustJwtGrantIssuerWithHttpInfoAsync(hydraTrustJwtGrantIssuerBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust an OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustJwtGrantIssuerBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedJwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraTrustedJwtGrantIssuer>> TrustJwtGrantIssuerWithHttpInfoAsync(HydraTrustJwtGrantIssuerBody hydraTrustJwtGrantIssuerBody = default(HydraTrustJwtGrantIssuerBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraTrustJwtGrantIssuerBody;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraTrustedJwtGrantIssuer>("/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustJwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <returns>HydraJSONWebKey</returns>
        public HydraJSONWebKey UpdateJsonWebKey(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKey> localVarResponse = UpdateJsonWebKeyWithHttpInfo(kid, set, hydraJSONWebKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKey</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKey> UpdateJsonWebKeyWithHttpInfo(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey))
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->UpdateJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->UpdateJsonWebKey");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJSONWebKey;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraJSONWebKey>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKey</returns>
        public async System.Threading.Tasks.Task<HydraJSONWebKey> UpdateJsonWebKeyAsync(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKey> localVarResponse = await UpdateJsonWebKeyWithHttpInfoAsync(kid, set, hydraJSONWebKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kid">The kid of the desired key</param>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKey)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKey>> UpdateJsonWebKeyWithHttpInfoAsync(string kid, string set, HydraJSONWebKey hydraJSONWebKey = default(HydraJSONWebKey), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'kid' is set
            if (kid == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'kid' when calling AdminApi->UpdateJsonWebKey");
            }

            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->UpdateJsonWebKey");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("kid", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(kid)); // path parameter
            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJSONWebKey;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraJSONWebKey>("/keys/{set}/{kid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJsonWebKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <returns>HydraJSONWebKeySet</returns>
        public HydraJSONWebKeySet UpdateJsonWebKeySet(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = UpdateJsonWebKeySetWithHttpInfo(set, hydraJSONWebKeySet);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <returns>ApiResponse of HydraJSONWebKeySet</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> UpdateJsonWebKeySetWithHttpInfo(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->UpdateJsonWebKeySet");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJSONWebKeySet;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraJSONWebKeySet</returns>
        public async System.Threading.Tasks.Task<HydraJSONWebKeySet> UpdateJsonWebKeySetAsync(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet> localVarResponse = await UpdateJsonWebKeySetWithHttpInfoAsync(set, hydraJSONWebKeySet, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a JSON Web Key Set Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">The set</param>
        /// <param name="hydraJSONWebKeySet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraJSONWebKeySet)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraJSONWebKeySet>> UpdateJsonWebKeySetWithHttpInfoAsync(string set, HydraJSONWebKeySet hydraJSONWebKeySet = default(HydraJSONWebKeySet), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'set' when calling AdminApi->UpdateJsonWebKeySet");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.Data = hydraJSONWebKeySet;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraJSONWebKeySet>("/keys/{set}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJsonWebKeySet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an OAuth 2.0 Client Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client UpdateOAuth2Client(string id, HydraOAuth2Client hydraOAuth2Client)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = UpdateOAuth2ClientWithHttpInfo(id, hydraOAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an OAuth 2.0 Client Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> UpdateOAuth2ClientWithHttpInfo(string id, HydraOAuth2Client hydraOAuth2Client)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->UpdateOAuth2Client");
            }

            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling AdminApi->UpdateOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an OAuth 2.0 Client Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> UpdateOAuth2ClientAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await UpdateOAuth2ClientWithHttpInfoAsync(id, hydraOAuth2Client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an OAuth 2.0 Client Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraOAuth2Client"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> UpdateOAuth2ClientWithHttpInfoAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling AdminApi->UpdateOAuth2Client");
            }

            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling AdminApi->UpdateOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2Client>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
