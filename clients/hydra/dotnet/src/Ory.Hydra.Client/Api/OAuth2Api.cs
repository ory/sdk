/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v2.1.1
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Hydra.Client.Client;
using Ory.Hydra.Client.Model;

namespace Ory.Hydra.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        HydraOAuth2RedirectTo AcceptOAuth2ConsentRequest(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest));

        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2ConsentRequestWithHttpInfo(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest));
        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        HydraOAuth2RedirectTo AcceptOAuth2LoginRequest(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest));

        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2LoginRequestWithHttpInfo(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest));
        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        HydraOAuth2RedirectTo AcceptOAuth2LogoutRequest(string logoutChallenge);

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2LogoutRequestWithHttpInfo(string logoutChallenge);
        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client CreateOAuth2Client(HydraOAuth2Client hydraOAuth2Client);

        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> CreateOAuth2ClientWithHttpInfo(HydraOAuth2Client hydraOAuth2Client);
        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns></returns>
        void DeleteOAuth2Client(string id);

        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id);
        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns></returns>
        void DeleteOAuth2Token(string clientId);

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId);
        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns></returns>
        void DeleteTrustedOAuth2JwtGrantIssuer(string id);

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id);
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client GetOAuth2Client(string id);

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> GetOAuth2ClientWithHttpInfo(string id);
        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <returns>HydraOAuth2ConsentRequest</returns>
        HydraOAuth2ConsentRequest GetOAuth2ConsentRequest(string consentChallenge);

        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2ConsentRequest</returns>
        ApiResponse<HydraOAuth2ConsentRequest> GetOAuth2ConsentRequestWithHttpInfo(string consentChallenge);
        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <returns>HydraOAuth2LoginRequest</returns>
        HydraOAuth2LoginRequest GetOAuth2LoginRequest(string loginChallenge);

        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2LoginRequest</returns>
        ApiResponse<HydraOAuth2LoginRequest> GetOAuth2LoginRequestWithHttpInfo(string loginChallenge);
        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraOAuth2LogoutRequest</returns>
        HydraOAuth2LogoutRequest GetOAuth2LogoutRequest(string logoutChallenge);

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraOAuth2LogoutRequest</returns>
        ApiResponse<HydraOAuth2LogoutRequest> GetOAuth2LogoutRequestWithHttpInfo(string logoutChallenge);
        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>HydraTrustedOAuth2JwtGrantIssuer</returns>
        HydraTrustedOAuth2JwtGrantIssuer GetTrustedOAuth2JwtGrantIssuer(string id);

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of HydraTrustedOAuth2JwtGrantIssuer</returns>
        ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id);
        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>HydraIntrospectedOAuth2Token</returns>
        HydraIntrospectedOAuth2Token IntrospectOAuth2Token(string token, string scope = default(string));

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>ApiResponse of HydraIntrospectedOAuth2Token</returns>
        ApiResponse<HydraIntrospectedOAuth2Token> IntrospectOAuth2TokenWithHttpInfo(string token, string scope = default(string));
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>List&lt;HydraOAuth2Client&gt;</returns>
        List<HydraOAuth2Client> ListOAuth2Clients(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string));

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2Client&gt;</returns>
        ApiResponse<List<HydraOAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string));
        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <returns>List&lt;HydraOAuth2ConsentSession&gt;</returns>
        List<HydraOAuth2ConsentSession> ListOAuth2ConsentSessions(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string));

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2ConsentSession&gt;</returns>
        ApiResponse<List<HydraOAuth2ConsentSession>> ListOAuth2ConsentSessionsWithHttpInfo(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string));
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <returns>List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        List<HydraTrustedOAuth2JwtGrantIssuer> ListTrustedOAuth2JwtGrantIssuers(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string));

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string));
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HydraErrorOAuth2</returns>
        HydraErrorOAuth2 OAuth2Authorize();

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HydraErrorOAuth2</returns>
        ApiResponse<HydraErrorOAuth2> OAuth2AuthorizeWithHttpInfo();
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>HydraOAuth2TokenExchange</returns>
        HydraOAuth2TokenExchange Oauth2TokenExchange(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string));

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2TokenExchange</returns>
        ApiResponse<HydraOAuth2TokenExchange> Oauth2TokenExchangeWithHttpInfo(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string));
        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client PatchOAuth2Client(string id, List<HydraJsonPatch> hydraJsonPatch);

        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<HydraJsonPatch> hydraJsonPatch);
        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        HydraOAuth2RedirectTo RejectOAuth2ConsentRequest(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request));

        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        ApiResponse<HydraOAuth2RedirectTo> RejectOAuth2ConsentRequestWithHttpInfo(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request));
        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        HydraOAuth2RedirectTo RejectOAuth2LoginRequest(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request));

        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        ApiResponse<HydraOAuth2RedirectTo> RejectOAuth2LoginRequestWithHttpInfo(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request));
        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns></returns>
        void RejectOAuth2LogoutRequest(string logoutChallenge);

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RejectOAuth2LogoutRequestWithHttpInfo(string logoutChallenge);
        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns></returns>
        void RevokeOAuth2ConsentSessions(string subject, string _client = default(string), bool? all = default(bool?));

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2ConsentSessionsWithHttpInfo(string subject, string _client = default(string), bool? all = default(bool?));
        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <returns></returns>
        void RevokeOAuth2LoginSessions(string subject = default(string), string sid = default(string));

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2LoginSessionsWithHttpInfo(string subject = default(string), string sid = default(string));
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns></returns>
        void RevokeOAuth2Token(string token, string clientId = default(string), string clientSecret = default(string));

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token, string clientId = default(string), string clientSecret = default(string));
        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client SetOAuth2Client(string id, HydraOAuth2Client hydraOAuth2Client);

        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> SetOAuth2ClientWithHttpInfo(string id, HydraOAuth2Client hydraOAuth2Client);
        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <returns>HydraOAuth2Client</returns>
        HydraOAuth2Client SetOAuth2ClientLifespans(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans));

        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        ApiResponse<HydraOAuth2Client> SetOAuth2ClientLifespansWithHttpInfo(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans));
        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <returns>HydraTrustedOAuth2JwtGrantIssuer</returns>
        HydraTrustedOAuth2JwtGrantIssuer TrustOAuth2JwtGrantIssuer(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer));

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <returns>ApiResponse of HydraTrustedOAuth2JwtGrantIssuer</returns>
        ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerWithHttpInfo(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2ConsentRequestAsync(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2LoginRequestAsync(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> CreateOAuth2ClientAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTrustedOAuth2JwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> GetOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2ConsentRequest</returns>
        System.Threading.Tasks.Task<HydraOAuth2ConsentRequest> GetOAuth2ConsentRequestAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2ConsentRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2ConsentRequest>> GetOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2LoginRequest</returns>
        System.Threading.Tasks.Task<HydraOAuth2LoginRequest> GetOAuth2LoginRequestAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2LoginRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2LoginRequest>> GetOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2LogoutRequest</returns>
        System.Threading.Tasks.Task<HydraOAuth2LogoutRequest> GetOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2LogoutRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2LogoutRequest>> GetOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedOAuth2JwtGrantIssuer</returns>
        System.Threading.Tasks.Task<HydraTrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedOAuth2JwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraTrustedOAuth2JwtGrantIssuer>> GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraIntrospectedOAuth2Token</returns>
        System.Threading.Tasks.Task<HydraIntrospectedOAuth2Token> IntrospectOAuth2TokenAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens
        /// </summary>
        /// <remarks>
        /// The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraIntrospectedOAuth2Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraIntrospectedOAuth2Token>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<HydraOAuth2Client>> ListOAuth2ClientsAsync(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List OAuth 2.0 Clients
        /// </summary>
        /// <remarks>
        /// This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraOAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2ConsentSession&gt;</returns>
        System.Threading.Tasks.Task<List<HydraOAuth2ConsentSession>> ListOAuth2ConsentSessionsAsync(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2ConsentSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraOAuth2ConsentSession>>> ListOAuth2ConsentSessionsWithHttpInfoAsync(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        System.Threading.Tasks.Task<List<HydraTrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers
        /// </summary>
        /// <remarks>
        /// Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraErrorOAuth2</returns>
        System.Threading.Tasks.Task<HydraErrorOAuth2> OAuth2AuthorizeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraErrorOAuth2)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraErrorOAuth2>> OAuth2AuthorizeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2TokenExchange</returns>
        System.Threading.Tasks.Task<HydraOAuth2TokenExchange> Oauth2TokenExchangeAsync(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The OAuth 2.0 Token Endpoint
        /// </summary>
        /// <remarks>
        /// Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2TokenExchange)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2TokenExchange>> Oauth2TokenExchangeWithHttpInfoAsync(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> PatchOAuth2ClientAsync(string id, List<HydraJsonPatch> hydraJsonPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<HydraJsonPatch> hydraJsonPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<HydraOAuth2RedirectTo> RejectOAuth2ConsentRequestAsync(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Consent Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2RedirectTo>> RejectOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        System.Threading.Tasks.Task<HydraOAuth2RedirectTo> RejectOAuth2LoginRequestAsync(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Login Request
        /// </summary>
        /// <remarks>
        /// When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2RedirectTo>> RejectOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RejectOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request
        /// </summary>
        /// <remarks>
        /// When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2ConsentSessionsAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject
        /// </summary>
        /// <remarks>
        /// This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2ConsentSessionsWithHttpInfoAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2LoginSessionsAsync(string subject = default(string), string sid = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
        /// </summary>
        /// <remarks>
        /// This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2LoginSessionsWithHttpInfoAsync(string subject = default(string), string sid = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, string clientId = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token
        /// </summary>
        /// <remarks>
        /// Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, string clientId = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> SetOAuth2ClientAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set OAuth 2.0 Client
        /// </summary>
        /// <remarks>
        /// Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> SetOAuth2ClientWithHttpInfoAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        System.Threading.Tasks.Task<HydraOAuth2Client> SetOAuth2ClientLifespansAsync(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set OAuth2 Client Token Lifespans
        /// </summary>
        /// <remarks>
        /// Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraOAuth2Client>> SetOAuth2ClientLifespansWithHttpInfoAsync(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedOAuth2JwtGrantIssuer</returns>
        System.Threading.Tasks.Task<HydraTrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerAsync(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer
        /// </summary>
        /// <remarks>
        /// Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </remarks>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedOAuth2JwtGrantIssuer)</returns>
        System.Threading.Tasks.Task<ApiResponse<HydraTrustedOAuth2JwtGrantIssuer>> TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuth2Api : IOAuth2ApiSync, IOAuth2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuth2Api : IOAuth2Api
    {
        private Ory.Hydra.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuth2Api(string basePath)
        {
            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                new Ory.Hydra.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuth2Api(Ory.Hydra.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Hydra.Client.Client.Configuration.MergeConfigurations(
                Ory.Hydra.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Hydra.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuth2Api(Ory.Hydra.Client.Client.ISynchronousClient client, Ory.Hydra.Client.Client.IAsynchronousClient asyncClient, Ory.Hydra.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Hydra.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Hydra.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Hydra.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Hydra.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        public HydraOAuth2RedirectTo AcceptOAuth2ConsentRequest(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = AcceptOAuth2ConsentRequestWithHttpInfo(consentChallenge, hydraAcceptOAuth2ConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2ConsentRequestWithHttpInfo(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->AcceptOAuth2ConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraAcceptOAuth2ConsentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2ConsentRequestAsync(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = await AcceptOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, hydraAcceptOAuth2ConsentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraAcceptOAuth2ConsentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, HydraAcceptOAuth2ConsentRequest hydraAcceptOAuth2ConsentRequest = default(HydraAcceptOAuth2ConsentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->AcceptOAuth2ConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraAcceptOAuth2ConsentRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        public HydraOAuth2RedirectTo AcceptOAuth2LoginRequest(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = AcceptOAuth2LoginRequestWithHttpInfo(loginChallenge, hydraAcceptOAuth2LoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2LoginRequestWithHttpInfo(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->AcceptOAuth2LoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraAcceptOAuth2LoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2LoginRequestAsync(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = await AcceptOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, hydraAcceptOAuth2LoginRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if Ory should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraAcceptOAuth2LoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, HydraAcceptOAuth2LoginRequest hydraAcceptOAuth2LoginRequest = default(HydraAcceptOAuth2LoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->AcceptOAuth2LoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraAcceptOAuth2LoginRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/login/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        public HydraOAuth2RedirectTo AcceptOAuth2LogoutRequest(string logoutChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = AcceptOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> AcceptOAuth2LogoutRequestWithHttpInfo(string logoutChallenge)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->AcceptOAuth2LogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2RedirectTo> AcceptOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = await AcceptOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge">OAuth 2.0 Logout Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo>> AcceptOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->AcceptOAuth2LogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/logout/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client CreateOAuth2Client(HydraOAuth2Client hydraOAuth2Client)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = CreateOAuth2ClientWithHttpInfo(hydraOAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> CreateOAuth2ClientWithHttpInfo(HydraOAuth2Client hydraOAuth2Client)
        {
            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling OAuth2Api->CreateOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraOAuth2Client>("/admin/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> CreateOAuth2ClientAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await CreateOAuth2ClientWithHttpInfoAsync(hydraOAuth2Client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create OAuth 2.0 Client Create a new OAuth 2.0 client. If you pass &#x60;client_secret&#x60; the secret is used, otherwise a random secret is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> CreateOAuth2ClientWithHttpInfoAsync(HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling OAuth2Api->CreateOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraOAuth2Client>("/admin/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns></returns>
        public void DeleteOAuth2Client(string id)
        {
            DeleteOAuth2ClientWithHttpInfo(id);
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteOAuth2ClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2ClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete OAuth 2.0 Client Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.  Make sure that this endpoint is well protected and only callable by first-party components.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns></returns>
        public void DeleteOAuth2Token(string clientId)
        {
            DeleteOAuth2TokenWithHttpInfo(clientId);
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteOAuth2TokenWithHttpInfo(string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth2Api->DeleteOAuth2Token");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2TokenAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuth2TokenWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth 2.0 Client ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteOAuth2TokenWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'clientId' when calling OAuth2Api->DeleteOAuth2Token");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns></returns>
        public void DeleteTrustedOAuth2JwtGrantIssuer(string id)
        {
            DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteTrustedOAuth2JwtGrantIssuer");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTrustedOAuth2JwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.  Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grant.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> DeleteTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->DeleteTrustedOAuth2JwtGrantIssuer");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client GetOAuth2Client(string id)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = GetOAuth2ClientWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> GetOAuth2ClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> GetOAuth2ClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await GetOAuth2ClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth 2.0 Client Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> GetOAuth2ClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <returns>HydraOAuth2ConsentRequest</returns>
        public HydraOAuth2ConsentRequest GetOAuth2ConsentRequest(string consentChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2ConsentRequest> localVarResponse = GetOAuth2ConsentRequestWithHttpInfo(consentChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2ConsentRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2ConsentRequest> GetOAuth2ConsentRequestWithHttpInfo(string consentChallenge)
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->GetOAuth2ConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraOAuth2ConsentRequest>("/admin/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2ConsentRequest</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2ConsentRequest> GetOAuth2ConsentRequestAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2ConsentRequest> localVarResponse = await GetOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2ConsentRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2ConsentRequest>> GetOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->GetOAuth2ConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraOAuth2ConsentRequest>("/admin/oauth2/auth/requests/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <returns>HydraOAuth2LoginRequest</returns>
        public HydraOAuth2LoginRequest GetOAuth2LoginRequest(string loginChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LoginRequest> localVarResponse = GetOAuth2LoginRequestWithHttpInfo(loginChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <returns>ApiResponse of HydraOAuth2LoginRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LoginRequest> GetOAuth2LoginRequestWithHttpInfo(string loginChallenge)
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->GetOAuth2LoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraOAuth2LoginRequest>("/admin/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2LoginRequest</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2LoginRequest> GetOAuth2LoginRequestAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LoginRequest> localVarResponse = await GetOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2LoginRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LoginRequest>> GetOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->GetOAuth2LoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraOAuth2LoginRequest>("/admin/oauth2/auth/requests/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>HydraOAuth2LogoutRequest</returns>
        public HydraOAuth2LogoutRequest GetOAuth2LogoutRequest(string logoutChallenge)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LogoutRequest> localVarResponse = GetOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of HydraOAuth2LogoutRequest</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LogoutRequest> GetOAuth2LogoutRequestWithHttpInfo(string logoutChallenge)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->GetOAuth2LogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraOAuth2LogoutRequest>("/admin/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2LogoutRequest</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2LogoutRequest> GetOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LogoutRequest> localVarResponse = await GetOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth 2.0 Session Logout Request Use this endpoint to fetch an Ory OAuth 2.0 logout request.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2LogoutRequest)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2LogoutRequest>> GetOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->GetOAuth2LogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraOAuth2LogoutRequest>("/admin/oauth2/auth/requests/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>HydraTrustedOAuth2JwtGrantIssuer</returns>
        public HydraTrustedOAuth2JwtGrantIssuer GetTrustedOAuth2JwtGrantIssuer(string id)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> localVarResponse = GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <returns>ApiResponse of HydraTrustedOAuth2JwtGrantIssuer</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetTrustedOAuth2JwtGrantIssuer");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraTrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedOAuth2JwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<HydraTrustedOAuth2JwtGrantIssuer> GetTrustedOAuth2JwtGrantIssuerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> localVarResponse = await GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trusted OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you created the trust relationship.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the desired grant</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedOAuth2JwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer>> GetTrustedOAuth2JwtGrantIssuerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->GetTrustedOAuth2JwtGrantIssuer");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraTrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrustedOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>HydraIntrospectedOAuth2Token</returns>
        public HydraIntrospectedOAuth2Token IntrospectOAuth2Token(string token, string scope = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraIntrospectedOAuth2Token> localVarResponse = IntrospectOAuth2TokenWithHttpInfo(token, scope);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <returns>ApiResponse of HydraIntrospectedOAuth2Token</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraIntrospectedOAuth2Token> IntrospectOAuth2TokenWithHttpInfo(string token, string scope = default(string))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->IntrospectOAuth2Token");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraIntrospectedOAuth2Token>("/admin/oauth2/introspect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraIntrospectedOAuth2Token</returns>
        public async System.Threading.Tasks.Task<HydraIntrospectedOAuth2Token> IntrospectOAuth2TokenAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraIntrospectedOAuth2Token> localVarResponse = await IntrospectOAuth2TokenWithHttpInfoAsync(token, scope, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Introspect OAuth2 Access and Refresh Tokens The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;session.access_token&#x60; during the consent flow.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.</param>
        /// <param name="scope">An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraIntrospectedOAuth2Token)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraIntrospectedOAuth2Token>> IntrospectOAuth2TokenWithHttpInfoAsync(string token, string scope = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->IntrospectOAuth2Token");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraIntrospectedOAuth2Token>("/admin/oauth2/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IntrospectOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>List&lt;HydraOAuth2Client&gt;</returns>
        public List<HydraOAuth2Client> ListOAuth2Clients(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> localVarResponse = ListOAuth2ClientsWithHttpInfo(pageSize, pageToken, clientName, owner);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2Client&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> ListOAuth2ClientsWithHttpInfo(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraOAuth2Client>>("/admin/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraOAuth2Client>> ListOAuth2ClientsAsync(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>> localVarResponse = await ListOAuth2ClientsWithHttpInfoAsync(pageSize, pageToken, clientName, owner, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Clients This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="clientName">The name of the clients to filter by. (optional)</param>
        /// <param name="owner">The owner of the clients to filter by. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2Client>>> ListOAuth2ClientsWithHttpInfoAsync(long? pageSize = default(long?), string pageToken = default(string), string clientName = default(string), string owner = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (clientName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client_name", clientName));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraOAuth2Client>>("/admin/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2Clients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <returns>List&lt;HydraOAuth2ConsentSession&gt;</returns>
        public List<HydraOAuth2ConsentSession> ListOAuth2ConsentSessions(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2ConsentSession>> localVarResponse = ListOAuth2ConsentSessionsWithHttpInfo(subject, pageSize, pageToken, loginSessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraOAuth2ConsentSession&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2ConsentSession>> ListOAuth2ConsentSessionsWithHttpInfo(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->ListOAuth2ConsentSessions");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (loginSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_session_id", loginSessionId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraOAuth2ConsentSession>>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraOAuth2ConsentSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraOAuth2ConsentSession>> ListOAuth2ConsentSessionsAsync(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2ConsentSession>> localVarResponse = await ListOAuth2ConsentSessionsWithHttpInfoAsync(subject, pageSize, pageToken, loginSessionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List OAuth 2.0 Consent Sessions of a Subject This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an empty JSON array with status code 200 OK.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">The subject to list the consent sessions for.</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="loginSessionId">The login session id to list the consent sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraOAuth2ConsentSession&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraOAuth2ConsentSession>>> ListOAuth2ConsentSessionsWithHttpInfoAsync(string subject, long? pageSize = default(long?), string pageToken = default(string), string loginSessionId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->ListOAuth2ConsentSessions");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (loginSessionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_session_id", loginSessionId));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraOAuth2ConsentSession>>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <returns>List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        public List<HydraTrustedOAuth2JwtGrantIssuer> ListTrustedOAuth2JwtGrantIssuers(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>> localVarResponse = ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(maxItems, defaultItems, issuer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        public Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfo(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "MaxItems", maxItems));
            }
            if (defaultItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "DefaultItems", defaultItems));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HydraTrustedOAuth2JwtGrantIssuer>>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedOAuth2JwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;</returns>
        public async System.Threading.Tasks.Task<List<HydraTrustedOAuth2JwtGrantIssuer>> ListTrustedOAuth2JwtGrantIssuersAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>> localVarResponse = await ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(maxItems, defaultItems, issuer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Trusted OAuth2 JWT Bearer Grant Type Issuers Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxItems"> (optional)</param>
        /// <param name="defaultItems"> (optional)</param>
        /// <param name="issuer">If optional \&quot;issuer\&quot; is supplied, only jwt-bearer grants with this issuer will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HydraTrustedOAuth2JwtGrantIssuer&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<List<HydraTrustedOAuth2JwtGrantIssuer>>> ListTrustedOAuth2JwtGrantIssuersWithHttpInfoAsync(long? maxItems = default(long?), long? defaultItems = default(long?), string issuer = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (maxItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "MaxItems", maxItems));
            }
            if (defaultItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "DefaultItems", defaultItems));
            }
            if (issuer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "issuer", issuer));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HydraTrustedOAuth2JwtGrantIssuer>>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrustedOAuth2JwtGrantIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>HydraErrorOAuth2</returns>
        public HydraErrorOAuth2 OAuth2Authorize()
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraErrorOAuth2> localVarResponse = OAuth2AuthorizeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HydraErrorOAuth2</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraErrorOAuth2> OAuth2AuthorizeWithHttpInfo()
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<HydraErrorOAuth2>("/oauth2/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OAuth2Authorize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraErrorOAuth2</returns>
        public async System.Threading.Tasks.Task<HydraErrorOAuth2> OAuth2AuthorizeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraErrorOAuth2> localVarResponse = await OAuth2AuthorizeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth 2.0 Authorize Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries at https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraErrorOAuth2)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraErrorOAuth2>> OAuth2AuthorizeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HydraErrorOAuth2>("/oauth2/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OAuth2Authorize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>HydraOAuth2TokenExchange</returns>
        public HydraOAuth2TokenExchange Oauth2TokenExchange(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenExchange> localVarResponse = Oauth2TokenExchangeWithHttpInfo(grantType, clientId, code, redirectUri, refreshToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2TokenExchange</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenExchange> Oauth2TokenExchangeWithHttpInfo(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'grantType' when calling OAuth2Api->Oauth2TokenExchange");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("grant_type", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Ory.Hydra.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraOAuth2TokenExchange>("/oauth2/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2TokenExchange</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2TokenExchange> Oauth2TokenExchangeAsync(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenExchange> localVarResponse = await Oauth2TokenExchangeWithHttpInfoAsync(grantType, clientId, code, redirectUri, refreshToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The OAuth 2.0 Token Endpoint Use open source libraries to perform OAuth 2.0 and OpenID Connect available for any programming language. You can find a list of libraries here https://oauth.net/code/  The Ory SDK is not yet able to this endpoint properly.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2TokenExchange)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2TokenExchange>> Oauth2TokenExchangeWithHttpInfoAsync(string grantType, string clientId = default(string), string code = default(string), string redirectUri = default(string), string refreshToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'grantType' when calling OAuth2Api->Oauth2TokenExchange");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("grant_type", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Ory.Hydra.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraOAuth2TokenExchange>("/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Oauth2TokenExchange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client PatchOAuth2Client(string id, List<HydraJsonPatch> hydraJsonPatch)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = PatchOAuth2ClientWithHttpInfo(id, hydraJsonPatch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> PatchOAuth2ClientWithHttpInfo(string id, List<HydraJsonPatch> hydraJsonPatch)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->PatchOAuth2Client");
            }

            // verify the required parameter 'hydraJsonPatch' is set
            if (hydraJsonPatch == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraJsonPatch' when calling OAuth2Api->PatchOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraJsonPatch;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> PatchOAuth2ClientAsync(string id, List<HydraJsonPatch> hydraJsonPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await PatchOAuth2ClientWithHttpInfoAsync(id, hydraJsonPatch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch OAuth 2.0 Client Patch an existing OAuth 2.0 Client using JSON Patch. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the OAuth 2.0 Client.</param>
        /// <param name="hydraJsonPatch">OAuth 2.0 Client JSON Patch Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> PatchOAuth2ClientWithHttpInfoAsync(string id, List<HydraJsonPatch> hydraJsonPatch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->PatchOAuth2Client");
            }

            // verify the required parameter 'hydraJsonPatch' is set
            if (hydraJsonPatch == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraJsonPatch' when calling OAuth2Api->PatchOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraJsonPatch;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        public HydraOAuth2RedirectTo RejectOAuth2ConsentRequest(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = RejectOAuth2ConsentRequestWithHttpInfo(consentChallenge, hydraRejectOAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> RejectOAuth2ConsentRequestWithHttpInfo(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->RejectOAuth2ConsentRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraRejectOAuth2Request;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2RedirectTo> RejectOAuth2ConsentRequestAsync(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = await RejectOAuth2ConsentRequestWithHttpInfoAsync(consentChallenge, hydraRejectOAuth2Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Consent Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted or rejected the request.  This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.  The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please head over to the OAuth 2.0 documentation.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentChallenge">OAuth 2.0 Consent Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo>> RejectOAuth2ConsentRequestWithHttpInfoAsync(string consentChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'consentChallenge' is set
            if (consentChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'consentChallenge' when calling OAuth2Api->RejectOAuth2ConsentRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "consent_challenge", consentChallenge));
            localVarRequestOptions.Data = hydraRejectOAuth2Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/consent/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2ConsentRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>HydraOAuth2RedirectTo</returns>
        public HydraOAuth2RedirectTo RejectOAuth2LoginRequest(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = RejectOAuth2LoginRequestWithHttpInfo(loginChallenge, hydraRejectOAuth2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2RedirectTo</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> RejectOAuth2LoginRequestWithHttpInfo(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->RejectOAuth2LoginRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraRejectOAuth2Request;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2RedirectTo</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2RedirectTo> RejectOAuth2LoginRequestAsync(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo> localVarResponse = await RejectOAuth2LoginRequestWithHttpInfoAsync(loginChallenge, hydraRejectOAuth2Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject OAuth 2.0 Login Request When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider to authenticate the subject and then tell the Ory OAuth2 Service about it.  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication was denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginChallenge">OAuth 2.0 Login Request Challenge</param>
        /// <param name="hydraRejectOAuth2Request"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2RedirectTo)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2RedirectTo>> RejectOAuth2LoginRequestWithHttpInfoAsync(string loginChallenge, HydraRejectOAuth2Request hydraRejectOAuth2Request = default(HydraRejectOAuth2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginChallenge' is set
            if (loginChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'loginChallenge' when calling OAuth2Api->RejectOAuth2LoginRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "login_challenge", loginChallenge));
            localVarRequestOptions.Data = hydraRejectOAuth2Request;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2RedirectTo>("/admin/oauth2/auth/requests/login/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LoginRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns></returns>
        public void RejectOAuth2LogoutRequest(string logoutChallenge)
        {
            RejectOAuth2LogoutRequestWithHttpInfo(logoutChallenge);
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RejectOAuth2LogoutRequestWithHttpInfo(string logoutChallenge)
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->RejectOAuth2LogoutRequest");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/admin/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RejectOAuth2LogoutRequestAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RejectOAuth2LogoutRequestWithHttpInfoAsync(logoutChallenge, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reject OAuth 2.0 Session Logout Request When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request. No HTTP request body is required.  The response is empty as the logout provider has to chose what action to perform next.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutChallenge"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RejectOAuth2LogoutRequestWithHttpInfoAsync(string logoutChallenge, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutChallenge' is set
            if (logoutChallenge == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'logoutChallenge' when calling OAuth2Api->RejectOAuth2LogoutRequest");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "logout_challenge", logoutChallenge));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/admin/oauth2/auth/requests/logout/reject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectOAuth2LogoutRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns></returns>
        public void RevokeOAuth2ConsentSessions(string subject, string _client = default(string), bool? all = default(bool?))
        {
            RevokeOAuth2ConsentSessionsWithHttpInfo(subject, _client, all);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RevokeOAuth2ConsentSessionsWithHttpInfo(string subject, string _client = default(string), bool? all = default(bool?))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->RevokeOAuth2ConsentSessions");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2ConsentSessionsAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2ConsentSessionsWithHttpInfoAsync(subject, _client, all, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Consent Sessions of a Subject This endpoint revokes a subject&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Consent Subject  The subject whose consent sessions should be deleted.</param>
        /// <param name="_client">OAuth 2.0 Client ID  If set, deletes only those consent sessions that have been granted to the specified OAuth 2.0 Client ID. (optional)</param>
        /// <param name="all">Revoke All Consent Sessions  If set to &#x60;true&#x60; deletes all consent sessions by the Subject that have been granted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RevokeOAuth2ConsentSessionsWithHttpInfoAsync(string subject, string _client = default(string), bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subject' is set
            if (subject == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'subject' when calling OAuth2Api->RevokeOAuth2ConsentSessions");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            if (_client != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "client", _client));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/auth/sessions/consent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2ConsentSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <returns></returns>
        public void RevokeOAuth2LoginSessions(string subject = default(string), string sid = default(string))
        {
            RevokeOAuth2LoginSessionsWithHttpInfo(subject, sid);
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RevokeOAuth2LoginSessionsWithHttpInfo(string subject = default(string), string sid = default(string))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (sid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2LoginSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2LoginSessionsAsync(string subject = default(string), string sid = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2LoginSessionsWithHttpInfoAsync(subject, sid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.  If you send the subject in a query param, all authentication sessions that belong to that subject are revoked. No OpennID Connect Front- or Back-channel logout is performed in this case.  Alternatively, you can send a SessionID via &#x60;sid&#x60; query param, in which case, only the session that is connected to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subject">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="sid">OAuth 2.0 Subject  The subject to revoke authentication sessions for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RevokeOAuth2LoginSessionsWithHttpInfoAsync(string subject = default(string), string sid = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (sid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Hydra.Client.Client.ClientUtils.ParameterToMultiMap("", "sid", sid));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/oauth2/auth/sessions/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2LoginSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns></returns>
        public void RevokeOAuth2Token(string token, string clientId = default(string), string clientSecret = default(string))
        {
            RevokeOAuth2TokenWithHttpInfo(token, clientId, clientSecret);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Hydra.Client.Client.ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token, string clientId = default(string), string clientSecret = default(string))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->RevokeOAuth2Token");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Ory.Hydra.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, string clientId = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeOAuth2TokenWithHttpInfoAsync(token, clientId, clientSecret, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke OAuth 2.0 Access or Refresh Token Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by the client the token was generated for.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"></param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, string clientId = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'token' when calling OAuth2Api->RevokeOAuth2Token");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("token", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(token)); // form parameter

            // authentication (basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Ory.Hydra.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client SetOAuth2Client(string id, HydraOAuth2Client hydraOAuth2Client)
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = SetOAuth2ClientWithHttpInfo(id, hydraOAuth2Client);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> SetOAuth2ClientWithHttpInfo(string id, HydraOAuth2Client hydraOAuth2Client)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2Client");
            }

            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling OAuth2Api->SetOAuth2Client");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> SetOAuth2ClientAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await SetOAuth2ClientWithHttpInfoAsync(id, hydraOAuth2Client, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth 2.0 Client Replaces an existing OAuth 2.0 Client with the payload you send. If you pass &#x60;client_secret&#x60; the secret is used, otherwise the existing secret is used.  If set, the secret is echoed in the response. It is not possible to retrieve it later on.  OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2Client">OAuth 2.0 Client Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> SetOAuth2ClientWithHttpInfoAsync(string id, HydraOAuth2Client hydraOAuth2Client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2Client");
            }

            // verify the required parameter 'hydraOAuth2Client' is set
            if (hydraOAuth2Client == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'hydraOAuth2Client' when calling OAuth2Api->SetOAuth2Client");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2Client;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2Client>("/admin/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2Client", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <returns>HydraOAuth2Client</returns>
        public HydraOAuth2Client SetOAuth2ClientLifespans(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = SetOAuth2ClientLifespansWithHttpInfo(id, hydraOAuth2ClientTokenLifespans);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <returns>ApiResponse of HydraOAuth2Client</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> SetOAuth2ClientLifespansWithHttpInfo(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2ClientLifespans");
            }

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2ClientTokenLifespans;


            // make the HTTP request
            var localVarResponse = this.Client.Put<HydraOAuth2Client>("/admin/clients/{id}/lifespans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2ClientLifespans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraOAuth2Client</returns>
        public async System.Threading.Tasks.Task<HydraOAuth2Client> SetOAuth2ClientLifespansAsync(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client> localVarResponse = await SetOAuth2ClientLifespansWithHttpInfoAsync(id, hydraOAuth2ClientTokenLifespans, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set OAuth2 Client Token Lifespans Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">OAuth 2.0 Client ID</param>
        /// <param name="hydraOAuth2ClientTokenLifespans"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraOAuth2Client)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraOAuth2Client>> SetOAuth2ClientLifespansWithHttpInfoAsync(string id, HydraOAuth2ClientTokenLifespans hydraOAuth2ClientTokenLifespans = default(HydraOAuth2ClientTokenLifespans), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Ory.Hydra.Client.Client.ApiException(400, "Missing required parameter 'id' when calling OAuth2Api->SetOAuth2ClientLifespans");
            }


            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Ory.Hydra.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = hydraOAuth2ClientTokenLifespans;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HydraOAuth2Client>("/admin/clients/{id}/lifespans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOAuth2ClientLifespans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <returns>HydraTrustedOAuth2JwtGrantIssuer</returns>
        public HydraTrustedOAuth2JwtGrantIssuer TrustOAuth2JwtGrantIssuer(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> localVarResponse = TrustOAuth2JwtGrantIssuerWithHttpInfo(hydraTrustOAuth2JwtGrantIssuer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <returns>ApiResponse of HydraTrustedOAuth2JwtGrantIssuer</returns>
        public Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerWithHttpInfo(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer))
        {
            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraTrustOAuth2JwtGrantIssuer;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HydraTrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HydraTrustedOAuth2JwtGrantIssuer</returns>
        public async System.Threading.Tasks.Task<HydraTrustedOAuth2JwtGrantIssuer> TrustOAuth2JwtGrantIssuerAsync(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer> localVarResponse = await TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(hydraTrustOAuth2JwtGrantIssuer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trust OAuth2 JWT Bearer Grant Type Issuer Use this endpoint to establish a trust relationship for a JWT issuer to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
        /// </summary>
        /// <exception cref="Ory.Hydra.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hydraTrustOAuth2JwtGrantIssuer"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HydraTrustedOAuth2JwtGrantIssuer)</returns>
        public async System.Threading.Tasks.Task<Ory.Hydra.Client.Client.ApiResponse<HydraTrustedOAuth2JwtGrantIssuer>> TrustOAuth2JwtGrantIssuerWithHttpInfoAsync(HydraTrustOAuth2JwtGrantIssuer hydraTrustOAuth2JwtGrantIssuer = default(HydraTrustOAuth2JwtGrantIssuer), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Hydra.Client.Client.RequestOptions localVarRequestOptions = new Ory.Hydra.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Hydra.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hydraTrustOAuth2JwtGrantIssuer;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HydraTrustedOAuth2JwtGrantIssuer>("/admin/trust/grants/jwt-bearer/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrustOAuth2JwtGrantIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
