<?php
/**
 * SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Ory\Kratos\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * The version of the OpenAPI document: v0.9.0-alpha.3
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Kratos\Client\Model;

use \ArrayAccess;
use \Ory\Kratos\Client\ObjectSerializer;

/**
 * SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody Class Doc Comment
 *
 * @category Class
 * @package  Ory\Kratos\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SubmitSelfServiceSettingsFlowWithWebAuthnMethodBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'submitSelfServiceSettingsFlowWithWebAuthnMethodBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'csrfToken' => 'string',
        'method' => 'string',
        'webauthnRegister' => 'string',
        'webauthnRegisterDisplayname' => 'string',
        'webauthnRemove' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'csrfToken' => null,
        'method' => null,
        'webauthnRegister' => null,
        'webauthnRegisterDisplayname' => null,
        'webauthnRemove' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'csrfToken' => 'csrf_token',
        'method' => 'method',
        'webauthnRegister' => 'webauthn_register',
        'webauthnRegisterDisplayname' => 'webauthn_register_displayname',
        'webauthnRemove' => 'webauthn_remove'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'csrfToken' => 'setCsrfToken',
        'method' => 'setMethod',
        'webauthnRegister' => 'setWebauthnRegister',
        'webauthnRegisterDisplayname' => 'setWebauthnRegisterDisplayname',
        'webauthnRemove' => 'setWebauthnRemove'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'csrfToken' => 'getCsrfToken',
        'method' => 'getMethod',
        'webauthnRegister' => 'getWebauthnRegister',
        'webauthnRegisterDisplayname' => 'getWebauthnRegisterDisplayname',
        'webauthnRemove' => 'getWebauthnRemove'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['csrfToken'] = $data['csrfToken'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['webauthnRegister'] = $data['webauthnRegister'] ?? null;
        $this->container['webauthnRegisterDisplayname'] = $data['webauthnRegisterDisplayname'] ?? null;
        $this->container['webauthnRemove'] = $data['webauthnRemove'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets csrfToken
     *
     * @return string|null
     */
    public function getCsrfToken()
    {
        return $this->container['csrfToken'];
    }

    /**
     * Sets csrfToken
     *
     * @param string|null $csrfToken CSRFToken is the anti-CSRF token
     *
     * @return self
     */
    public function setCsrfToken($csrfToken)
    {
        $this->container['csrfToken'] = $csrfToken;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Method  Should be set to \"webauthn\" when trying to add, update, or remove a webAuthn pairing.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets webauthnRegister
     *
     * @return string|null
     */
    public function getWebauthnRegister()
    {
        return $this->container['webauthnRegister'];
    }

    /**
     * Sets webauthnRegister
     *
     * @param string|null $webauthnRegister Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
     *
     * @return self
     */
    public function setWebauthnRegister($webauthnRegister)
    {
        $this->container['webauthnRegister'] = $webauthnRegister;

        return $this;
    }

    /**
     * Gets webauthnRegisterDisplayname
     *
     * @return string|null
     */
    public function getWebauthnRegisterDisplayname()
    {
        return $this->container['webauthnRegisterDisplayname'];
    }

    /**
     * Sets webauthnRegisterDisplayname
     *
     * @param string|null $webauthnRegisterDisplayname Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
     *
     * @return self
     */
    public function setWebauthnRegisterDisplayname($webauthnRegisterDisplayname)
    {
        $this->container['webauthnRegisterDisplayname'] = $webauthnRegisterDisplayname;

        return $this;
    }

    /**
     * Gets webauthnRemove
     *
     * @return string|null
     */
    public function getWebauthnRemove()
    {
        return $this->container['webauthnRemove'];
    }

    /**
     * Sets webauthnRemove
     *
     * @param string|null $webauthnRemove Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
     *
     * @return self
     */
    public function setWebauthnRemove($webauthnRemove)
    {
        $this->container['webauthnRemove'] = $webauthnRemove;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


