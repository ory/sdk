/*
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.13.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.kratos.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sh.ory.kratos.model.IdentityPatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.kratos.JSON;

/**
 * Patch Identities Body
 */
@ApiModel(description = "Patch Identities Body")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-29T16:30:11.172323687Z[Etc/UTC]")
public class PatchIdentitiesBody {
  public static final String SERIALIZED_NAME_IDENTITIES = "identities";
  @SerializedName(SERIALIZED_NAME_IDENTITIES)
  private List<IdentityPatch> identities = null;

  public PatchIdentitiesBody() {
  }

  public PatchIdentitiesBody identities(List<IdentityPatch> identities) {
    
    this.identities = identities;
    return this;
  }

  public PatchIdentitiesBody addIdentitiesItem(IdentityPatch identitiesItem) {
    if (this.identities == null) {
      this.identities = new ArrayList<>();
    }
    this.identities.add(identitiesItem);
    return this;
  }

   /**
   * Identities holds the list of patches to apply  required
   * @return identities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identities holds the list of patches to apply  required")

  public List<IdentityPatch> getIdentities() {
    return identities;
  }


  public void setIdentities(List<IdentityPatch> identities) {
    this.identities = identities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchIdentitiesBody patchIdentitiesBody = (PatchIdentitiesBody) o;
    return Objects.equals(this.identities, patchIdentitiesBody.identities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchIdentitiesBody {\n");
    sb.append("    identities: ").append(toIndentedString(identities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchIdentitiesBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatchIdentitiesBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchIdentitiesBody is not found in the empty JSON string", PatchIdentitiesBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PatchIdentitiesBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchIdentitiesBody` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("identities") != null && !jsonObj.get("identities").isJsonNull()) {
        JsonArray jsonArrayidentities = jsonObj.getAsJsonArray("identities");
        if (jsonArrayidentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identities` to be an array in the JSON string but got `%s`", jsonObj.get("identities").toString()));
          }

          // validate the optional field `identities` (array)
          for (int i = 0; i < jsonArrayidentities.size(); i++) {
            IdentityPatch.validateJsonObject(jsonArrayidentities.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchIdentitiesBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchIdentitiesBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchIdentitiesBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchIdentitiesBody.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchIdentitiesBody>() {
           @Override
           public void write(JsonWriter out, PatchIdentitiesBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchIdentitiesBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchIdentitiesBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchIdentitiesBody
  * @throws IOException if the JSON string is invalid with respect to PatchIdentitiesBody
  */
  public static PatchIdentitiesBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchIdentitiesBody.class);
  }

 /**
  * Convert an instance of PatchIdentitiesBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

