/*
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.13.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.kratos.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sh.ory.kratos.model.ContinueWith;
import sh.ory.kratos.model.Identity;
import sh.ory.kratos.model.Session;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.kratos.JSON;

/**
 * The Response for Registration Flows via API
 */
@ApiModel(description = "The Response for Registration Flows via API")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-29T16:30:11.172323687Z[Etc/UTC]")
public class SuccessfulNativeRegistration {
  public static final String SERIALIZED_NAME_CONTINUE_WITH = "continue_with";
  @SerializedName(SERIALIZED_NAME_CONTINUE_WITH)
  private List<ContinueWith> continueWith = null;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private Identity identity;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private Session session;

  public static final String SERIALIZED_NAME_SESSION_TOKEN = "session_token";
  @SerializedName(SERIALIZED_NAME_SESSION_TOKEN)
  private String sessionToken;

  public SuccessfulNativeRegistration() {
  }

  public SuccessfulNativeRegistration continueWith(List<ContinueWith> continueWith) {
    
    this.continueWith = continueWith;
    return this;
  }

  public SuccessfulNativeRegistration addContinueWithItem(ContinueWith continueWithItem) {
    if (this.continueWith == null) {
      this.continueWith = new ArrayList<>();
    }
    this.continueWith.add(continueWithItem);
    return this;
  }

   /**
   * Contains a list of actions, that could follow this flow  It can, for example, this will contain a reference to the verification flow, created as part of the user&#39;s registration or the token of the session.
   * @return continueWith
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contains a list of actions, that could follow this flow  It can, for example, this will contain a reference to the verification flow, created as part of the user's registration or the token of the session.")

  public List<ContinueWith> getContinueWith() {
    return continueWith;
  }


  public void setContinueWith(List<ContinueWith> continueWith) {
    this.continueWith = continueWith;
  }


  public SuccessfulNativeRegistration identity(Identity identity) {
    
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Identity getIdentity() {
    return identity;
  }


  public void setIdentity(Identity identity) {
    this.identity = identity;
  }


  public SuccessfulNativeRegistration session(Session session) {
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Session getSession() {
    return session;
  }


  public void setSession(Session session) {
    this.session = session;
  }


  public SuccessfulNativeRegistration sessionToken(String sessionToken) {
    
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!
   * @return sessionToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!")

  public String getSessionToken() {
    return sessionToken;
  }


  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessfulNativeRegistration successfulNativeRegistration = (SuccessfulNativeRegistration) o;
    return Objects.equals(this.continueWith, successfulNativeRegistration.continueWith) &&
        Objects.equals(this.identity, successfulNativeRegistration.identity) &&
        Objects.equals(this.session, successfulNativeRegistration.session) &&
        Objects.equals(this.sessionToken, successfulNativeRegistration.sessionToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continueWith, identity, session, sessionToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessfulNativeRegistration {\n");
    sb.append("    continueWith: ").append(toIndentedString(continueWith)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("continue_with");
    openapiFields.add("identity");
    openapiFields.add("session");
    openapiFields.add("session_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identity");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SuccessfulNativeRegistration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SuccessfulNativeRegistration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessfulNativeRegistration is not found in the empty JSON string", SuccessfulNativeRegistration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SuccessfulNativeRegistration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuccessfulNativeRegistration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuccessfulNativeRegistration.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("continue_with") != null && !jsonObj.get("continue_with").isJsonNull()) {
        JsonArray jsonArraycontinueWith = jsonObj.getAsJsonArray("continue_with");
        if (jsonArraycontinueWith != null) {
          // ensure the json data is an array
          if (!jsonObj.get("continue_with").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `continue_with` to be an array in the JSON string but got `%s`", jsonObj.get("continue_with").toString()));
          }

          // validate the optional field `continue_with` (array)
          for (int i = 0; i < jsonArraycontinueWith.size(); i++) {
            ContinueWith.validateJsonObject(jsonArraycontinueWith.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `identity`
      Identity.validateJsonObject(jsonObj.getAsJsonObject("identity"));
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        Session.validateJsonObject(jsonObj.getAsJsonObject("session"));
      }
      if ((jsonObj.get("session_token") != null && !jsonObj.get("session_token").isJsonNull()) && !jsonObj.get("session_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessfulNativeRegistration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessfulNativeRegistration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessfulNativeRegistration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessfulNativeRegistration.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessfulNativeRegistration>() {
           @Override
           public void write(JsonWriter out, SuccessfulNativeRegistration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessfulNativeRegistration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuccessfulNativeRegistration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuccessfulNativeRegistration
  * @throws IOException if the JSON string is invalid with respect to SuccessfulNativeRegistration
  */
  public static SuccessfulNativeRegistration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessfulNativeRegistration.class);
  }

 /**
  * Convert an instance of SuccessfulNativeRegistration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

