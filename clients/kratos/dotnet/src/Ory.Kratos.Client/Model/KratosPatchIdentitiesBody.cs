/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.1.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Kratos.Client.Client.OpenAPIDateConverter;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// Patch Identities Body
    /// </summary>
    [DataContract(Name = "patchIdentitiesBody")]
    public partial class KratosPatchIdentitiesBody : IEquatable<KratosPatchIdentitiesBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosPatchIdentitiesBody" /> class.
        /// </summary>
        /// <param name="identities">Identities holds the list of patches to apply  required.</param>
        public KratosPatchIdentitiesBody(List<KratosIdentityPatch> identities = default(List<KratosIdentityPatch>))
        {
            this.Identities = identities;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Identities holds the list of patches to apply  required
        /// </summary>
        /// <value>Identities holds the list of patches to apply  required</value>
        [DataMember(Name = "identities", EmitDefaultValue = false)]
        public List<KratosIdentityPatch> Identities { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosPatchIdentitiesBody {\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KratosPatchIdentitiesBody);
        }

        /// <summary>
        /// Returns true if KratosPatchIdentitiesBody instances are equal
        /// </summary>
        /// <param name="input">Instance of KratosPatchIdentitiesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KratosPatchIdentitiesBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Identities == input.Identities ||
                    this.Identities != null &&
                    input.Identities != null &&
                    this.Identities.SequenceEqual(input.Identities)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identities != null)
                {
                    hashCode = (hashCode * 59) + this.Identities.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
