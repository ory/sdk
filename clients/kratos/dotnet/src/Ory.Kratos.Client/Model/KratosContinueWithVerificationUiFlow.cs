/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.1.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Kratos.Client.Client.OpenAPIDateConverter;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosContinueWithVerificationUiFlow
    /// </summary>
    [DataContract(Name = "continueWithVerificationUiFlow")]
    public partial class KratosContinueWithVerificationUiFlow : IEquatable<KratosContinueWithVerificationUiFlow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithVerificationUiFlow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KratosContinueWithVerificationUiFlow()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithVerificationUiFlow" /> class.
        /// </summary>
        /// <param name="id">The ID of the verification flow (required).</param>
        /// <param name="url">The URL of the verification flow.</param>
        /// <param name="verifiableAddress">The address that should be verified in this flow (required).</param>
        public KratosContinueWithVerificationUiFlow(string id = default(string), string url = default(string), string verifiableAddress = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for KratosContinueWithVerificationUiFlow and cannot be null");
            }
            this.Id = id;
            // to ensure "verifiableAddress" is required (not null)
            if (verifiableAddress == null) {
                throw new ArgumentNullException("verifiableAddress is a required property for KratosContinueWithVerificationUiFlow and cannot be null");
            }
            this.VerifiableAddress = verifiableAddress;
            this.Url = url;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The ID of the verification flow
        /// </summary>
        /// <value>The ID of the verification flow</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The URL of the verification flow
        /// </summary>
        /// <value>The URL of the verification flow</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The address that should be verified in this flow
        /// </summary>
        /// <value>The address that should be verified in this flow</value>
        [DataMember(Name = "verifiable_address", IsRequired = true, EmitDefaultValue = false)]
        public string VerifiableAddress { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithVerificationUiFlow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VerifiableAddress: ").Append(VerifiableAddress).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KratosContinueWithVerificationUiFlow);
        }

        /// <summary>
        /// Returns true if KratosContinueWithVerificationUiFlow instances are equal
        /// </summary>
        /// <param name="input">Instance of KratosContinueWithVerificationUiFlow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KratosContinueWithVerificationUiFlow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.VerifiableAddress == input.VerifiableAddress ||
                    (this.VerifiableAddress != null &&
                    this.VerifiableAddress.Equals(input.VerifiableAddress))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.VerifiableAddress != null)
                {
                    hashCode = (hashCode * 59) + this.VerifiableAddress.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
