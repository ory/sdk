/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests. 
 *
 * The version of the OpenAPI document: v0.9.0-alpha.3
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Kratos.Client.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosSubmitSelfServiceRecoveryFlowBody
    /// </summary>
    [JsonConverter(typeof(KratosSubmitSelfServiceRecoveryFlowBodyJsonConverter))]
    [DataContract(Name = "submitSelfServiceRecoveryFlowBody")]
    public partial class KratosSubmitSelfServiceRecoveryFlowBody : AbstractOpenAPISchema, IEquatable<KratosSubmitSelfServiceRecoveryFlowBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosSubmitSelfServiceRecoveryFlowBody" /> class
        /// with the <see cref="KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody.</param>
        public KratosSubmitSelfServiceRecoveryFlowBody(KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody`. If the actual instance is not `KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody</returns>
        public KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody GetKratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody()
        {
            return (KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KratosSubmitSelfServiceRecoveryFlowBody {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, KratosSubmitSelfServiceRecoveryFlowBody.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of KratosSubmitSelfServiceRecoveryFlowBody
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of KratosSubmitSelfServiceRecoveryFlowBody</returns>
        public static KratosSubmitSelfServiceRecoveryFlowBody FromJson(string jsonString)
        {
            KratosSubmitSelfServiceRecoveryFlowBody newKratosSubmitSelfServiceRecoveryFlowBody = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newKratosSubmitSelfServiceRecoveryFlowBody;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody).GetProperty("AdditionalProperties") == null)
                {
                    newKratosSubmitSelfServiceRecoveryFlowBody = new KratosSubmitSelfServiceRecoveryFlowBody(JsonConvert.DeserializeObject<KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody>(jsonString, KratosSubmitSelfServiceRecoveryFlowBody.SerializerSettings));
                }
                else
                {
                    newKratosSubmitSelfServiceRecoveryFlowBody = new KratosSubmitSelfServiceRecoveryFlowBody(JsonConvert.DeserializeObject<KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody>(jsonString, KratosSubmitSelfServiceRecoveryFlowBody.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into KratosSubmitSelfServiceRecoveryFlowWithLinkMethodBody: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newKratosSubmitSelfServiceRecoveryFlowBody;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KratosSubmitSelfServiceRecoveryFlowBody);
        }

        /// <summary>
        /// Returns true if KratosSubmitSelfServiceRecoveryFlowBody instances are equal
        /// </summary>
        /// <param name="input">Instance of KratosSubmitSelfServiceRecoveryFlowBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KratosSubmitSelfServiceRecoveryFlowBody input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for KratosSubmitSelfServiceRecoveryFlowBody
    /// </summary>
    public class KratosSubmitSelfServiceRecoveryFlowBodyJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(KratosSubmitSelfServiceRecoveryFlowBody).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return KratosSubmitSelfServiceRecoveryFlowBody.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
