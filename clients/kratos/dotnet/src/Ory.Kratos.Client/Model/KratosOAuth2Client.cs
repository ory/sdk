/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v1.1.0
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Kratos.Client.Client.OpenAPIDateConverter;

namespace Ory.Kratos.Client.Model
{
    /// <summary>
    /// KratosOAuth2Client
    /// </summary>
    [DataContract(Name = "OAuth2Client")]
    public partial class KratosOAuth2Client : IEquatable<KratosOAuth2Client>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosOAuth2Client" /> class.
        /// </summary>
        /// <param name="accessTokenStrategy">OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are &#x60;jwt&#x60; and &#x60;opaque&#x60;. &#x60;jwt&#x60; is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in &#x60;strategies.access_token&#x60;..</param>
        /// <param name="allowedCorsOrigins">allowedCorsOrigins.</param>
        /// <param name="audience">audience.</param>
        /// <param name="authorizationCodeGrantAccessTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="authorizationCodeGrantIdTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="authorizationCodeGrantRefreshTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="backchannelLogoutSessionRequired">OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false..</param>
        /// <param name="backchannelLogoutUri">OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP..</param>
        /// <param name="clientCredentialsGrantAccessTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="clientId">OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated..</param>
        /// <param name="clientName">OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization..</param>
        /// <param name="clientSecret">OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost..</param>
        /// <param name="clientSecretExpiresAt">OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0..</param>
        /// <param name="clientUri">OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion..</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="createdAt">OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client&#39;s creation..</param>
        /// <param name="frontchannelLogoutSessionRequired">OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false..</param>
        /// <param name="frontchannelLogoutUri">OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be..</param>
        /// <param name="grantTypes">grantTypes.</param>
        /// <param name="implicitGrantAccessTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="implicitGrantIdTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="jwks">OAuth 2.0 Client JSON Web Key Set  Client&#39;s JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together..</param>
        /// <param name="jwksUri">OAuth 2.0 Client JSON Web Key Set URL  URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate..</param>
        /// <param name="jwtBearerGrantAccessTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="logoUri">OAuth 2.0 Client Logo URI  A URL string referencing the client&#39;s logo..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="owner">OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client..</param>
        /// <param name="policyUri">OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data..</param>
        /// <param name="postLogoutRedirectUris">postLogoutRedirectUris.</param>
        /// <param name="redirectUris">redirectUris.</param>
        /// <param name="refreshTokenGrantAccessTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="refreshTokenGrantIdTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="refreshTokenGrantRefreshTokenLifespan">Specify a time duration in milliseconds, seconds, minutes, hours..</param>
        /// <param name="registrationAccessToken">OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration..</param>
        /// <param name="registrationClientUri">OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client..</param>
        /// <param name="requestObjectSigningAlg">OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm..</param>
        /// <param name="requestUris">requestUris.</param>
        /// <param name="responseTypes">responseTypes.</param>
        /// <param name="scope">OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens..</param>
        /// <param name="sectorIdentifierUri">OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values..</param>
        /// <param name="skipConsent">SkipConsent skips the consent screen for this client. This field can only be set from the admin API..</param>
        /// <param name="skipLogoutConsent">SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API..</param>
        /// <param name="subjectType">OpenID Connect Subject Type  The &#x60;subject_types_supported&#x60; Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;..</param>
        /// <param name="tokenEndpointAuthMethod">OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  &#x60;client_secret_basic&#x60;: (default) Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; encoded in the HTTP Authorization header. &#x60;client_secret_post&#x60;: Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; in the HTTP body. &#x60;private_key_jwt&#x60;: Use JSON Web Tokens to authenticate the client. &#x60;none&#x60;: Used for public clients (native apps, mobile apps) which can not have secrets..</param>
        /// <param name="tokenEndpointAuthSigningAlg">OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint..</param>
        /// <param name="tosUri">OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client..</param>
        /// <param name="updatedAt">OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update..</param>
        /// <param name="userinfoSignedResponseAlg">OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type..</param>
        public KratosOAuth2Client(string accessTokenStrategy = default(string), List<string> allowedCorsOrigins = default(List<string>), List<string> audience = default(List<string>), string authorizationCodeGrantAccessTokenLifespan = default(string), string authorizationCodeGrantIdTokenLifespan = default(string), string authorizationCodeGrantRefreshTokenLifespan = default(string), bool backchannelLogoutSessionRequired = default(bool), string backchannelLogoutUri = default(string), string clientCredentialsGrantAccessTokenLifespan = default(string), string clientId = default(string), string clientName = default(string), string clientSecret = default(string), long clientSecretExpiresAt = default(long), string clientUri = default(string), List<string> contacts = default(List<string>), DateTime createdAt = default(DateTime), bool frontchannelLogoutSessionRequired = default(bool), string frontchannelLogoutUri = default(string), List<string> grantTypes = default(List<string>), string implicitGrantAccessTokenLifespan = default(string), string implicitGrantIdTokenLifespan = default(string), Object jwks = default(Object), string jwksUri = default(string), string jwtBearerGrantAccessTokenLifespan = default(string), string logoUri = default(string), Object metadata = default(Object), string owner = default(string), string policyUri = default(string), List<string> postLogoutRedirectUris = default(List<string>), List<string> redirectUris = default(List<string>), string refreshTokenGrantAccessTokenLifespan = default(string), string refreshTokenGrantIdTokenLifespan = default(string), string refreshTokenGrantRefreshTokenLifespan = default(string), string registrationAccessToken = default(string), string registrationClientUri = default(string), string requestObjectSigningAlg = default(string), List<string> requestUris = default(List<string>), List<string> responseTypes = default(List<string>), string scope = default(string), string sectorIdentifierUri = default(string), bool skipConsent = default(bool), bool skipLogoutConsent = default(bool), string subjectType = default(string), string tokenEndpointAuthMethod = default(string), string tokenEndpointAuthSigningAlg = default(string), string tosUri = default(string), DateTime updatedAt = default(DateTime), string userinfoSignedResponseAlg = default(string))
        {
            this.AccessTokenStrategy = accessTokenStrategy;
            this.AllowedCorsOrigins = allowedCorsOrigins;
            this.Audience = audience;
            this.AuthorizationCodeGrantAccessTokenLifespan = authorizationCodeGrantAccessTokenLifespan;
            this.AuthorizationCodeGrantIdTokenLifespan = authorizationCodeGrantIdTokenLifespan;
            this.AuthorizationCodeGrantRefreshTokenLifespan = authorizationCodeGrantRefreshTokenLifespan;
            this.BackchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
            this.BackchannelLogoutUri = backchannelLogoutUri;
            this.ClientCredentialsGrantAccessTokenLifespan = clientCredentialsGrantAccessTokenLifespan;
            this.ClientId = clientId;
            this.ClientName = clientName;
            this.ClientSecret = clientSecret;
            this.ClientSecretExpiresAt = clientSecretExpiresAt;
            this.ClientUri = clientUri;
            this.Contacts = contacts;
            this.CreatedAt = createdAt;
            this.FrontchannelLogoutSessionRequired = frontchannelLogoutSessionRequired;
            this.FrontchannelLogoutUri = frontchannelLogoutUri;
            this.GrantTypes = grantTypes;
            this.ImplicitGrantAccessTokenLifespan = implicitGrantAccessTokenLifespan;
            this.ImplicitGrantIdTokenLifespan = implicitGrantIdTokenLifespan;
            this.Jwks = jwks;
            this.JwksUri = jwksUri;
            this.JwtBearerGrantAccessTokenLifespan = jwtBearerGrantAccessTokenLifespan;
            this.LogoUri = logoUri;
            this.Metadata = metadata;
            this.Owner = owner;
            this.PolicyUri = policyUri;
            this.PostLogoutRedirectUris = postLogoutRedirectUris;
            this.RedirectUris = redirectUris;
            this.RefreshTokenGrantAccessTokenLifespan = refreshTokenGrantAccessTokenLifespan;
            this.RefreshTokenGrantIdTokenLifespan = refreshTokenGrantIdTokenLifespan;
            this.RefreshTokenGrantRefreshTokenLifespan = refreshTokenGrantRefreshTokenLifespan;
            this.RegistrationAccessToken = registrationAccessToken;
            this.RegistrationClientUri = registrationClientUri;
            this.RequestObjectSigningAlg = requestObjectSigningAlg;
            this.RequestUris = requestUris;
            this.ResponseTypes = responseTypes;
            this.Scope = scope;
            this.SectorIdentifierUri = sectorIdentifierUri;
            this.SkipConsent = skipConsent;
            this.SkipLogoutConsent = skipLogoutConsent;
            this.SubjectType = subjectType;
            this.TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            this.TokenEndpointAuthSigningAlg = tokenEndpointAuthSigningAlg;
            this.TosUri = tosUri;
            this.UpdatedAt = updatedAt;
            this.UserinfoSignedResponseAlg = userinfoSignedResponseAlg;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are &#x60;jwt&#x60; and &#x60;opaque&#x60;. &#x60;jwt&#x60; is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in &#x60;strategies.access_token&#x60;.
        /// </summary>
        /// <value>OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are &#x60;jwt&#x60; and &#x60;opaque&#x60;. &#x60;jwt&#x60; is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in &#x60;strategies.access_token&#x60;.</value>
        [DataMember(Name = "access_token_strategy", EmitDefaultValue = false)]
        public string AccessTokenStrategy { get; set; }

        /// <summary>
        /// Gets or Sets AllowedCorsOrigins
        /// </summary>
        [DataMember(Name = "allowed_cors_origins", EmitDefaultValue = false)]
        public List<string> AllowedCorsOrigins { get; set; }

        /// <summary>
        /// Gets or Sets Audience
        /// </summary>
        [DataMember(Name = "audience", EmitDefaultValue = false)]
        public List<string> Audience { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "authorization_code_grant_access_token_lifespan", EmitDefaultValue = false)]
        public string AuthorizationCodeGrantAccessTokenLifespan { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "authorization_code_grant_id_token_lifespan", EmitDefaultValue = false)]
        public string AuthorizationCodeGrantIdTokenLifespan { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "authorization_code_grant_refresh_token_lifespan", EmitDefaultValue = false)]
        public string AuthorizationCodeGrantRefreshTokenLifespan { get; set; }

        /// <summary>
        /// OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
        /// </summary>
        /// <value>OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.</value>
        [DataMember(Name = "backchannel_logout_session_required", EmitDefaultValue = true)]
        public bool BackchannelLogoutSessionRequired { get; set; }

        /// <summary>
        /// OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
        /// </summary>
        /// <value>OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.</value>
        [DataMember(Name = "backchannel_logout_uri", EmitDefaultValue = false)]
        public string BackchannelLogoutUri { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "client_credentials_grant_access_token_lifespan", EmitDefaultValue = false)]
        public string ClientCredentialsGrantAccessTokenLifespan { get; set; }

        /// <summary>
        /// OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.
        /// </summary>
        /// <value>OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
        /// </summary>
        /// <value>OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.</value>
        [DataMember(Name = "client_name", EmitDefaultValue = false)]
        public string ClientName { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
        /// </summary>
        /// <value>OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
        /// </summary>
        /// <value>OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.</value>
        [DataMember(Name = "client_secret_expires_at", EmitDefaultValue = false)]
        public long ClientSecretExpiresAt { get; set; }

        /// <summary>
        /// OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
        /// </summary>
        /// <value>OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.</value>
        [DataMember(Name = "client_uri", EmitDefaultValue = false)]
        public string ClientUri { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<string> Contacts { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client&#39;s creation.
        /// </summary>
        /// <value>OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client&#39;s creation.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
        /// </summary>
        /// <value>OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.</value>
        [DataMember(Name = "frontchannel_logout_session_required", EmitDefaultValue = true)]
        public bool FrontchannelLogoutSessionRequired { get; set; }

        /// <summary>
        /// OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
        /// </summary>
        /// <value>OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.</value>
        [DataMember(Name = "frontchannel_logout_uri", EmitDefaultValue = false)]
        public string FrontchannelLogoutUri { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [DataMember(Name = "grant_types", EmitDefaultValue = false)]
        public List<string> GrantTypes { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "implicit_grant_access_token_lifespan", EmitDefaultValue = false)]
        public string ImplicitGrantAccessTokenLifespan { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "implicit_grant_id_token_lifespan", EmitDefaultValue = false)]
        public string ImplicitGrantIdTokenLifespan { get; set; }

        /// <summary>
        /// OAuth 2.0 Client JSON Web Key Set  Client&#39;s JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
        /// </summary>
        /// <value>OAuth 2.0 Client JSON Web Key Set  Client&#39;s JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.</value>
        [DataMember(Name = "jwks", EmitDefaultValue = true)]
        public Object Jwks { get; set; }

        /// <summary>
        /// OAuth 2.0 Client JSON Web Key Set URL  URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
        /// </summary>
        /// <value>OAuth 2.0 Client JSON Web Key Set URL  URL for the Client&#39;s JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client&#39;s encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key&#39;s intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.</value>
        [DataMember(Name = "jwks_uri", EmitDefaultValue = false)]
        public string JwksUri { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "jwt_bearer_grant_access_token_lifespan", EmitDefaultValue = false)]
        public string JwtBearerGrantAccessTokenLifespan { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Logo URI  A URL string referencing the client&#39;s logo.
        /// </summary>
        /// <value>OAuth 2.0 Client Logo URI  A URL string referencing the client&#39;s logo.</value>
        [DataMember(Name = "logo_uri", EmitDefaultValue = false)]
        public string LogoUri { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
        /// </summary>
        /// <value>OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
        /// </summary>
        /// <value>OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.</value>
        [DataMember(Name = "policy_uri", EmitDefaultValue = false)]
        public string PolicyUri { get; set; }

        /// <summary>
        /// Gets or Sets PostLogoutRedirectUris
        /// </summary>
        [DataMember(Name = "post_logout_redirect_uris", EmitDefaultValue = false)]
        public List<string> PostLogoutRedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name = "redirect_uris", EmitDefaultValue = false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "refresh_token_grant_access_token_lifespan", EmitDefaultValue = false)]
        public string RefreshTokenGrantAccessTokenLifespan { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "refresh_token_grant_id_token_lifespan", EmitDefaultValue = false)]
        public string RefreshTokenGrantIdTokenLifespan { get; set; }

        /// <summary>
        /// Specify a time duration in milliseconds, seconds, minutes, hours.
        /// </summary>
        /// <value>Specify a time duration in milliseconds, seconds, minutes, hours.</value>
        [DataMember(Name = "refresh_token_grant_refresh_token_lifespan", EmitDefaultValue = false)]
        public string RefreshTokenGrantRefreshTokenLifespan { get; set; }

        /// <summary>
        /// OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
        /// </summary>
        /// <value>OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.</value>
        [DataMember(Name = "registration_access_token", EmitDefaultValue = false)]
        public string RegistrationAccessToken { get; set; }

        /// <summary>
        /// OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
        /// </summary>
        /// <value>OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.</value>
        [DataMember(Name = "registration_client_uri", EmitDefaultValue = false)]
        public string RegistrationClientUri { get; set; }

        /// <summary>
        /// OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
        /// </summary>
        /// <value>OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.</value>
        [DataMember(Name = "request_object_signing_alg", EmitDefaultValue = false)]
        public string RequestObjectSigningAlg { get; set; }

        /// <summary>
        /// Gets or Sets RequestUris
        /// </summary>
        [DataMember(Name = "request_uris", EmitDefaultValue = false)]
        public List<string> RequestUris { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [DataMember(Name = "response_types", EmitDefaultValue = false)]
        public List<string> ResponseTypes { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
        /// </summary>
        /// <value>OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
        /// </summary>
        /// <value>OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.</value>
        [DataMember(Name = "sector_identifier_uri", EmitDefaultValue = false)]
        public string SectorIdentifierUri { get; set; }

        /// <summary>
        /// SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
        /// </summary>
        /// <value>SkipConsent skips the consent screen for this client. This field can only be set from the admin API.</value>
        [DataMember(Name = "skip_consent", EmitDefaultValue = true)]
        public bool SkipConsent { get; set; }

        /// <summary>
        /// SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.
        /// </summary>
        /// <value>SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.</value>
        [DataMember(Name = "skip_logout_consent", EmitDefaultValue = true)]
        public bool SkipLogoutConsent { get; set; }

        /// <summary>
        /// OpenID Connect Subject Type  The &#x60;subject_types_supported&#x60; Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;.
        /// </summary>
        /// <value>OpenID Connect Subject Type  The &#x60;subject_types_supported&#x60; Discovery parameter contains a list of the supported subject_type values for this server. Valid types include &#x60;pairwise&#x60; and &#x60;public&#x60;.</value>
        [DataMember(Name = "subject_type", EmitDefaultValue = false)]
        public string SubjectType { get; set; }

        /// <summary>
        /// OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  &#x60;client_secret_basic&#x60;: (default) Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; encoded in the HTTP Authorization header. &#x60;client_secret_post&#x60;: Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; in the HTTP body. &#x60;private_key_jwt&#x60;: Use JSON Web Tokens to authenticate the client. &#x60;none&#x60;: Used for public clients (native apps, mobile apps) which can not have secrets.
        /// </summary>
        /// <value>OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  &#x60;client_secret_basic&#x60;: (default) Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; encoded in the HTTP Authorization header. &#x60;client_secret_post&#x60;: Send &#x60;client_id&#x60; and &#x60;client_secret&#x60; as &#x60;application/x-www-form-urlencoded&#x60; in the HTTP body. &#x60;private_key_jwt&#x60;: Use JSON Web Tokens to authenticate the client. &#x60;none&#x60;: Used for public clients (native apps, mobile apps) which can not have secrets.</value>
        [DataMember(Name = "token_endpoint_auth_method", EmitDefaultValue = false)]
        public string TokenEndpointAuthMethod { get; set; }

        /// <summary>
        /// OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
        /// </summary>
        /// <value>OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.</value>
        [DataMember(Name = "token_endpoint_auth_signing_alg", EmitDefaultValue = false)]
        public string TokenEndpointAuthSigningAlg { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
        /// </summary>
        /// <value>OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.</value>
        [DataMember(Name = "tos_uri", EmitDefaultValue = false)]
        public string TosUri { get; set; }

        /// <summary>
        /// OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
        /// </summary>
        /// <value>OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
        /// </summary>
        /// <value>OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.</value>
        [DataMember(Name = "userinfo_signed_response_alg", EmitDefaultValue = false)]
        public string UserinfoSignedResponseAlg { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosOAuth2Client {\n");
            sb.Append("  AccessTokenStrategy: ").Append(AccessTokenStrategy).Append("\n");
            sb.Append("  AllowedCorsOrigins: ").Append(AllowedCorsOrigins).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  AuthorizationCodeGrantAccessTokenLifespan: ").Append(AuthorizationCodeGrantAccessTokenLifespan).Append("\n");
            sb.Append("  AuthorizationCodeGrantIdTokenLifespan: ").Append(AuthorizationCodeGrantIdTokenLifespan).Append("\n");
            sb.Append("  AuthorizationCodeGrantRefreshTokenLifespan: ").Append(AuthorizationCodeGrantRefreshTokenLifespan).Append("\n");
            sb.Append("  BackchannelLogoutSessionRequired: ").Append(BackchannelLogoutSessionRequired).Append("\n");
            sb.Append("  BackchannelLogoutUri: ").Append(BackchannelLogoutUri).Append("\n");
            sb.Append("  ClientCredentialsGrantAccessTokenLifespan: ").Append(ClientCredentialsGrantAccessTokenLifespan).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  ClientSecretExpiresAt: ").Append(ClientSecretExpiresAt).Append("\n");
            sb.Append("  ClientUri: ").Append(ClientUri).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FrontchannelLogoutSessionRequired: ").Append(FrontchannelLogoutSessionRequired).Append("\n");
            sb.Append("  FrontchannelLogoutUri: ").Append(FrontchannelLogoutUri).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  ImplicitGrantAccessTokenLifespan: ").Append(ImplicitGrantAccessTokenLifespan).Append("\n");
            sb.Append("  ImplicitGrantIdTokenLifespan: ").Append(ImplicitGrantIdTokenLifespan).Append("\n");
            sb.Append("  Jwks: ").Append(Jwks).Append("\n");
            sb.Append("  JwksUri: ").Append(JwksUri).Append("\n");
            sb.Append("  JwtBearerGrantAccessTokenLifespan: ").Append(JwtBearerGrantAccessTokenLifespan).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PolicyUri: ").Append(PolicyUri).Append("\n");
            sb.Append("  PostLogoutRedirectUris: ").Append(PostLogoutRedirectUris).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  RefreshTokenGrantAccessTokenLifespan: ").Append(RefreshTokenGrantAccessTokenLifespan).Append("\n");
            sb.Append("  RefreshTokenGrantIdTokenLifespan: ").Append(RefreshTokenGrantIdTokenLifespan).Append("\n");
            sb.Append("  RefreshTokenGrantRefreshTokenLifespan: ").Append(RefreshTokenGrantRefreshTokenLifespan).Append("\n");
            sb.Append("  RegistrationAccessToken: ").Append(RegistrationAccessToken).Append("\n");
            sb.Append("  RegistrationClientUri: ").Append(RegistrationClientUri).Append("\n");
            sb.Append("  RequestObjectSigningAlg: ").Append(RequestObjectSigningAlg).Append("\n");
            sb.Append("  RequestUris: ").Append(RequestUris).Append("\n");
            sb.Append("  ResponseTypes: ").Append(ResponseTypes).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SectorIdentifierUri: ").Append(SectorIdentifierUri).Append("\n");
            sb.Append("  SkipConsent: ").Append(SkipConsent).Append("\n");
            sb.Append("  SkipLogoutConsent: ").Append(SkipLogoutConsent).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("  TokenEndpointAuthSigningAlg: ").Append(TokenEndpointAuthSigningAlg).Append("\n");
            sb.Append("  TosUri: ").Append(TosUri).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserinfoSignedResponseAlg: ").Append(UserinfoSignedResponseAlg).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KratosOAuth2Client);
        }

        /// <summary>
        /// Returns true if KratosOAuth2Client instances are equal
        /// </summary>
        /// <param name="input">Instance of KratosOAuth2Client to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KratosOAuth2Client input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessTokenStrategy == input.AccessTokenStrategy ||
                    (this.AccessTokenStrategy != null &&
                    this.AccessTokenStrategy.Equals(input.AccessTokenStrategy))
                ) && 
                (
                    this.AllowedCorsOrigins == input.AllowedCorsOrigins ||
                    this.AllowedCorsOrigins != null &&
                    input.AllowedCorsOrigins != null &&
                    this.AllowedCorsOrigins.SequenceEqual(input.AllowedCorsOrigins)
                ) && 
                (
                    this.Audience == input.Audience ||
                    this.Audience != null &&
                    input.Audience != null &&
                    this.Audience.SequenceEqual(input.Audience)
                ) && 
                (
                    this.AuthorizationCodeGrantAccessTokenLifespan == input.AuthorizationCodeGrantAccessTokenLifespan ||
                    (this.AuthorizationCodeGrantAccessTokenLifespan != null &&
                    this.AuthorizationCodeGrantAccessTokenLifespan.Equals(input.AuthorizationCodeGrantAccessTokenLifespan))
                ) && 
                (
                    this.AuthorizationCodeGrantIdTokenLifespan == input.AuthorizationCodeGrantIdTokenLifespan ||
                    (this.AuthorizationCodeGrantIdTokenLifespan != null &&
                    this.AuthorizationCodeGrantIdTokenLifespan.Equals(input.AuthorizationCodeGrantIdTokenLifespan))
                ) && 
                (
                    this.AuthorizationCodeGrantRefreshTokenLifespan == input.AuthorizationCodeGrantRefreshTokenLifespan ||
                    (this.AuthorizationCodeGrantRefreshTokenLifespan != null &&
                    this.AuthorizationCodeGrantRefreshTokenLifespan.Equals(input.AuthorizationCodeGrantRefreshTokenLifespan))
                ) && 
                (
                    this.BackchannelLogoutSessionRequired == input.BackchannelLogoutSessionRequired ||
                    this.BackchannelLogoutSessionRequired.Equals(input.BackchannelLogoutSessionRequired)
                ) && 
                (
                    this.BackchannelLogoutUri == input.BackchannelLogoutUri ||
                    (this.BackchannelLogoutUri != null &&
                    this.BackchannelLogoutUri.Equals(input.BackchannelLogoutUri))
                ) && 
                (
                    this.ClientCredentialsGrantAccessTokenLifespan == input.ClientCredentialsGrantAccessTokenLifespan ||
                    (this.ClientCredentialsGrantAccessTokenLifespan != null &&
                    this.ClientCredentialsGrantAccessTokenLifespan.Equals(input.ClientCredentialsGrantAccessTokenLifespan))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.ClientSecretExpiresAt == input.ClientSecretExpiresAt ||
                    this.ClientSecretExpiresAt.Equals(input.ClientSecretExpiresAt)
                ) && 
                (
                    this.ClientUri == input.ClientUri ||
                    (this.ClientUri != null &&
                    this.ClientUri.Equals(input.ClientUri))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FrontchannelLogoutSessionRequired == input.FrontchannelLogoutSessionRequired ||
                    this.FrontchannelLogoutSessionRequired.Equals(input.FrontchannelLogoutSessionRequired)
                ) && 
                (
                    this.FrontchannelLogoutUri == input.FrontchannelLogoutUri ||
                    (this.FrontchannelLogoutUri != null &&
                    this.FrontchannelLogoutUri.Equals(input.FrontchannelLogoutUri))
                ) && 
                (
                    this.GrantTypes == input.GrantTypes ||
                    this.GrantTypes != null &&
                    input.GrantTypes != null &&
                    this.GrantTypes.SequenceEqual(input.GrantTypes)
                ) && 
                (
                    this.ImplicitGrantAccessTokenLifespan == input.ImplicitGrantAccessTokenLifespan ||
                    (this.ImplicitGrantAccessTokenLifespan != null &&
                    this.ImplicitGrantAccessTokenLifespan.Equals(input.ImplicitGrantAccessTokenLifespan))
                ) && 
                (
                    this.ImplicitGrantIdTokenLifespan == input.ImplicitGrantIdTokenLifespan ||
                    (this.ImplicitGrantIdTokenLifespan != null &&
                    this.ImplicitGrantIdTokenLifespan.Equals(input.ImplicitGrantIdTokenLifespan))
                ) && 
                (
                    this.Jwks == input.Jwks ||
                    (this.Jwks != null &&
                    this.Jwks.Equals(input.Jwks))
                ) && 
                (
                    this.JwksUri == input.JwksUri ||
                    (this.JwksUri != null &&
                    this.JwksUri.Equals(input.JwksUri))
                ) && 
                (
                    this.JwtBearerGrantAccessTokenLifespan == input.JwtBearerGrantAccessTokenLifespan ||
                    (this.JwtBearerGrantAccessTokenLifespan != null &&
                    this.JwtBearerGrantAccessTokenLifespan.Equals(input.JwtBearerGrantAccessTokenLifespan))
                ) && 
                (
                    this.LogoUri == input.LogoUri ||
                    (this.LogoUri != null &&
                    this.LogoUri.Equals(input.LogoUri))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.PolicyUri == input.PolicyUri ||
                    (this.PolicyUri != null &&
                    this.PolicyUri.Equals(input.PolicyUri))
                ) && 
                (
                    this.PostLogoutRedirectUris == input.PostLogoutRedirectUris ||
                    this.PostLogoutRedirectUris != null &&
                    input.PostLogoutRedirectUris != null &&
                    this.PostLogoutRedirectUris.SequenceEqual(input.PostLogoutRedirectUris)
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                ) && 
                (
                    this.RefreshTokenGrantAccessTokenLifespan == input.RefreshTokenGrantAccessTokenLifespan ||
                    (this.RefreshTokenGrantAccessTokenLifespan != null &&
                    this.RefreshTokenGrantAccessTokenLifespan.Equals(input.RefreshTokenGrantAccessTokenLifespan))
                ) && 
                (
                    this.RefreshTokenGrantIdTokenLifespan == input.RefreshTokenGrantIdTokenLifespan ||
                    (this.RefreshTokenGrantIdTokenLifespan != null &&
                    this.RefreshTokenGrantIdTokenLifespan.Equals(input.RefreshTokenGrantIdTokenLifespan))
                ) && 
                (
                    this.RefreshTokenGrantRefreshTokenLifespan == input.RefreshTokenGrantRefreshTokenLifespan ||
                    (this.RefreshTokenGrantRefreshTokenLifespan != null &&
                    this.RefreshTokenGrantRefreshTokenLifespan.Equals(input.RefreshTokenGrantRefreshTokenLifespan))
                ) && 
                (
                    this.RegistrationAccessToken == input.RegistrationAccessToken ||
                    (this.RegistrationAccessToken != null &&
                    this.RegistrationAccessToken.Equals(input.RegistrationAccessToken))
                ) && 
                (
                    this.RegistrationClientUri == input.RegistrationClientUri ||
                    (this.RegistrationClientUri != null &&
                    this.RegistrationClientUri.Equals(input.RegistrationClientUri))
                ) && 
                (
                    this.RequestObjectSigningAlg == input.RequestObjectSigningAlg ||
                    (this.RequestObjectSigningAlg != null &&
                    this.RequestObjectSigningAlg.Equals(input.RequestObjectSigningAlg))
                ) && 
                (
                    this.RequestUris == input.RequestUris ||
                    this.RequestUris != null &&
                    input.RequestUris != null &&
                    this.RequestUris.SequenceEqual(input.RequestUris)
                ) && 
                (
                    this.ResponseTypes == input.ResponseTypes ||
                    this.ResponseTypes != null &&
                    input.ResponseTypes != null &&
                    this.ResponseTypes.SequenceEqual(input.ResponseTypes)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.SectorIdentifierUri == input.SectorIdentifierUri ||
                    (this.SectorIdentifierUri != null &&
                    this.SectorIdentifierUri.Equals(input.SectorIdentifierUri))
                ) && 
                (
                    this.SkipConsent == input.SkipConsent ||
                    this.SkipConsent.Equals(input.SkipConsent)
                ) && 
                (
                    this.SkipLogoutConsent == input.SkipLogoutConsent ||
                    this.SkipLogoutConsent.Equals(input.SkipLogoutConsent)
                ) && 
                (
                    this.SubjectType == input.SubjectType ||
                    (this.SubjectType != null &&
                    this.SubjectType.Equals(input.SubjectType))
                ) && 
                (
                    this.TokenEndpointAuthMethod == input.TokenEndpointAuthMethod ||
                    (this.TokenEndpointAuthMethod != null &&
                    this.TokenEndpointAuthMethod.Equals(input.TokenEndpointAuthMethod))
                ) && 
                (
                    this.TokenEndpointAuthSigningAlg == input.TokenEndpointAuthSigningAlg ||
                    (this.TokenEndpointAuthSigningAlg != null &&
                    this.TokenEndpointAuthSigningAlg.Equals(input.TokenEndpointAuthSigningAlg))
                ) && 
                (
                    this.TosUri == input.TosUri ||
                    (this.TosUri != null &&
                    this.TosUri.Equals(input.TosUri))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserinfoSignedResponseAlg == input.UserinfoSignedResponseAlg ||
                    (this.UserinfoSignedResponseAlg != null &&
                    this.UserinfoSignedResponseAlg.Equals(input.UserinfoSignedResponseAlg))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessTokenStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.AccessTokenStrategy.GetHashCode();
                }
                if (this.AllowedCorsOrigins != null)
                {
                    hashCode = (hashCode * 59) + this.AllowedCorsOrigins.GetHashCode();
                }
                if (this.Audience != null)
                {
                    hashCode = (hashCode * 59) + this.Audience.GetHashCode();
                }
                if (this.AuthorizationCodeGrantAccessTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationCodeGrantAccessTokenLifespan.GetHashCode();
                }
                if (this.AuthorizationCodeGrantIdTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationCodeGrantIdTokenLifespan.GetHashCode();
                }
                if (this.AuthorizationCodeGrantRefreshTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationCodeGrantRefreshTokenLifespan.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BackchannelLogoutSessionRequired.GetHashCode();
                if (this.BackchannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.BackchannelLogoutUri.GetHashCode();
                }
                if (this.ClientCredentialsGrantAccessTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.ClientCredentialsGrantAccessTokenLifespan.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                if (this.ClientName != null)
                {
                    hashCode = (hashCode * 59) + this.ClientName.GetHashCode();
                }
                if (this.ClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ClientSecret.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientSecretExpiresAt.GetHashCode();
                if (this.ClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.ClientUri.GetHashCode();
                }
                if (this.Contacts != null)
                {
                    hashCode = (hashCode * 59) + this.Contacts.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FrontchannelLogoutSessionRequired.GetHashCode();
                if (this.FrontchannelLogoutUri != null)
                {
                    hashCode = (hashCode * 59) + this.FrontchannelLogoutUri.GetHashCode();
                }
                if (this.GrantTypes != null)
                {
                    hashCode = (hashCode * 59) + this.GrantTypes.GetHashCode();
                }
                if (this.ImplicitGrantAccessTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.ImplicitGrantAccessTokenLifespan.GetHashCode();
                }
                if (this.ImplicitGrantIdTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.ImplicitGrantIdTokenLifespan.GetHashCode();
                }
                if (this.Jwks != null)
                {
                    hashCode = (hashCode * 59) + this.Jwks.GetHashCode();
                }
                if (this.JwksUri != null)
                {
                    hashCode = (hashCode * 59) + this.JwksUri.GetHashCode();
                }
                if (this.JwtBearerGrantAccessTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.JwtBearerGrantAccessTokenLifespan.GetHashCode();
                }
                if (this.LogoUri != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUri.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.PolicyUri != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyUri.GetHashCode();
                }
                if (this.PostLogoutRedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.PostLogoutRedirectUris.GetHashCode();
                }
                if (this.RedirectUris != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUris.GetHashCode();
                }
                if (this.RefreshTokenGrantAccessTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshTokenGrantAccessTokenLifespan.GetHashCode();
                }
                if (this.RefreshTokenGrantIdTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshTokenGrantIdTokenLifespan.GetHashCode();
                }
                if (this.RefreshTokenGrantRefreshTokenLifespan != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshTokenGrantRefreshTokenLifespan.GetHashCode();
                }
                if (this.RegistrationAccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationAccessToken.GetHashCode();
                }
                if (this.RegistrationClientUri != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationClientUri.GetHashCode();
                }
                if (this.RequestObjectSigningAlg != null)
                {
                    hashCode = (hashCode * 59) + this.RequestObjectSigningAlg.GetHashCode();
                }
                if (this.RequestUris != null)
                {
                    hashCode = (hashCode * 59) + this.RequestUris.GetHashCode();
                }
                if (this.ResponseTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseTypes.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.SectorIdentifierUri != null)
                {
                    hashCode = (hashCode * 59) + this.SectorIdentifierUri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkipConsent.GetHashCode();
                hashCode = (hashCode * 59) + this.SkipLogoutConsent.GetHashCode();
                if (this.SubjectType != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectType.GetHashCode();
                }
                if (this.TokenEndpointAuthMethod != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthMethod.GetHashCode();
                }
                if (this.TokenEndpointAuthSigningAlg != null)
                {
                    hashCode = (hashCode * 59) + this.TokenEndpointAuthSigningAlg.GetHashCode();
                }
                if (this.TosUri != null)
                {
                    hashCode = (hashCode * 59) + this.TosUri.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.UserinfoSignedResponseAlg != null)
                {
                    hashCode = (hashCode * 59) + this.UserinfoSignedResponseAlg.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
