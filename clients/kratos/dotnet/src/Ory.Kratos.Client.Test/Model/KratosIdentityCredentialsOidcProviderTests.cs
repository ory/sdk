/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests. 
 *
 * The version of the OpenAPI document: v0.9.0-alpha.3
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;
using Ory.Kratos.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Ory.Kratos.Client.Test.Model
{
    /// <summary>
    ///  Class for testing KratosIdentityCredentialsOidcProvider
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class KratosIdentityCredentialsOidcProviderTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for KratosIdentityCredentialsOidcProvider
        //private KratosIdentityCredentialsOidcProvider instance;

        public KratosIdentityCredentialsOidcProviderTests()
        {
            // TODO uncomment below to create an instance of KratosIdentityCredentialsOidcProvider
            //instance = new KratosIdentityCredentialsOidcProvider();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of KratosIdentityCredentialsOidcProvider
        /// </summary>
        [Fact]
        public void KratosIdentityCredentialsOidcProviderInstanceTest()
        {
            // TODO uncomment below to test "IsType" KratosIdentityCredentialsOidcProvider
            //Assert.IsType<KratosIdentityCredentialsOidcProvider>(instance);
        }


        /// <summary>
        /// Test the property 'InitialAccessToken'
        /// </summary>
        [Fact]
        public void InitialAccessTokenTest()
        {
            // TODO unit test for the property 'InitialAccessToken'
        }
        /// <summary>
        /// Test the property 'InitialIdToken'
        /// </summary>
        [Fact]
        public void InitialIdTokenTest()
        {
            // TODO unit test for the property 'InitialIdToken'
        }
        /// <summary>
        /// Test the property 'InitialRefreshToken'
        /// </summary>
        [Fact]
        public void InitialRefreshTokenTest()
        {
            // TODO unit test for the property 'InitialRefreshToken'
        }
        /// <summary>
        /// Test the property 'Provider'
        /// </summary>
        [Fact]
        public void ProviderTest()
        {
            // TODO unit test for the property 'Provider'
        }
        /// <summary>
        /// Test the property 'Subject'
        /// </summary>
        [Fact]
        public void SubjectTest()
        {
            // TODO unit test for the property 'Subject'
        }

    }

}
