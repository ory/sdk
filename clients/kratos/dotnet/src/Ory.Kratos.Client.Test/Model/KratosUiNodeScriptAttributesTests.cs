/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests. 
 *
 * The version of the OpenAPI document: v0.9.0-alpha.3
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Ory.Kratos.Client.Api;
using Ory.Kratos.Client.Model;
using Ory.Kratos.Client.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Ory.Kratos.Client.Test.Model
{
    /// <summary>
    ///  Class for testing KratosUiNodeScriptAttributes
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class KratosUiNodeScriptAttributesTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for KratosUiNodeScriptAttributes
        //private KratosUiNodeScriptAttributes instance;

        public KratosUiNodeScriptAttributesTests()
        {
            // TODO uncomment below to create an instance of KratosUiNodeScriptAttributes
            //instance = new KratosUiNodeScriptAttributes();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of KratosUiNodeScriptAttributes
        /// </summary>
        [Fact]
        public void KratosUiNodeScriptAttributesInstanceTest()
        {
            // TODO uncomment below to test "IsType" KratosUiNodeScriptAttributes
            //Assert.IsType<KratosUiNodeScriptAttributes>(instance);
        }


        /// <summary>
        /// Test the property 'Async'
        /// </summary>
        [Fact]
        public void AsyncTest()
        {
            // TODO unit test for the property 'Async'
        }
        /// <summary>
        /// Test the property 'Crossorigin'
        /// </summary>
        [Fact]
        public void CrossoriginTest()
        {
            // TODO unit test for the property 'Crossorigin'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'Integrity'
        /// </summary>
        [Fact]
        public void IntegrityTest()
        {
            // TODO unit test for the property 'Integrity'
        }
        /// <summary>
        /// Test the property 'NodeType'
        /// </summary>
        [Fact]
        public void NodeTypeTest()
        {
            // TODO unit test for the property 'NodeType'
        }
        /// <summary>
        /// Test the property 'Nonce'
        /// </summary>
        [Fact]
        public void NonceTest()
        {
            // TODO unit test for the property 'Nonce'
        }
        /// <summary>
        /// Test the property 'Referrerpolicy'
        /// </summary>
        [Fact]
        public void ReferrerpolicyTest()
        {
            // TODO unit test for the property 'Referrerpolicy'
        }
        /// <summary>
        /// Test the property 'Src'
        /// </summary>
        [Fact]
        public void SrcTest()
        {
            // TODO unit test for the property 'Src'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
