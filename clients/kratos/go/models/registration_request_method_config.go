// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// RegistrationRequestMethodConfig registration request method config
// swagger:model registrationRequestMethodConfig
type RegistrationRequestMethodConfig struct {
	RegistrationRequestMethodConfigAllOf0

	RegistrationRequestMethodConfigAllOf1

	RegistrationRequestMethodConfigAllOf2

	RegistrationRequestMethodConfigAllOf3

	RegistrationRequestMethodConfigAllOf4
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RegistrationRequestMethodConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RegistrationRequestMethodConfigAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RegistrationRequestMethodConfigAllOf0 = aO0

	// AO1
	var aO1 RegistrationRequestMethodConfigAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.RegistrationRequestMethodConfigAllOf1 = aO1

	// AO2
	var aO2 RegistrationRequestMethodConfigAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.RegistrationRequestMethodConfigAllOf2 = aO2

	// AO3
	var aO3 RegistrationRequestMethodConfigAllOf3
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.RegistrationRequestMethodConfigAllOf3 = aO3

	// AO4
	var aO4 RegistrationRequestMethodConfigAllOf4
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.RegistrationRequestMethodConfigAllOf4 = aO4

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RegistrationRequestMethodConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.RegistrationRequestMethodConfigAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.RegistrationRequestMethodConfigAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.RegistrationRequestMethodConfigAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.RegistrationRequestMethodConfigAllOf3)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.RegistrationRequestMethodConfigAllOf4)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this registration request method config
func (m *RegistrationRequestMethodConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegistrationRequestMethodConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistrationRequestMethodConfig) UnmarshalBinary(b []byte) error {
	var res RegistrationRequestMethodConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RegistrationRequestMethodConfigAllOf0 registration request method config all of0
// swagger:model RegistrationRequestMethodConfigAllOf0
type RegistrationRequestMethodConfigAllOf0 interface{}

// RegistrationRequestMethodConfigAllOf1 registration request method config all of1
// swagger:model RegistrationRequestMethodConfigAllOf1
type RegistrationRequestMethodConfigAllOf1 interface{}

// RegistrationRequestMethodConfigAllOf2 registration request method config all of2
// swagger:model RegistrationRequestMethodConfigAllOf2
type RegistrationRequestMethodConfigAllOf2 interface{}

// RegistrationRequestMethodConfigAllOf3 registration request method config all of3
// swagger:model RegistrationRequestMethodConfigAllOf3
type RegistrationRequestMethodConfigAllOf3 interface{}

// RegistrationRequestMethodConfigAllOf4 registration request method config all of4
// swagger:model RegistrationRequestMethodConfigAllOf4
type RegistrationRequestMethodConfigAllOf4 interface{}
