"""
    Ory Identities API

    This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.   # noqa: E501

    The version of the OpenAPI document: v0.13.1
    Contact: office@ory.sh
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ory_kratos_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ory_kratos_client.exceptions import ApiAttributeError


def lazy_import():
    from ory_kratos_client.model.update_settings_flow_with_lookup_method import UpdateSettingsFlowWithLookupMethod
    from ory_kratos_client.model.update_settings_flow_with_oidc_method import UpdateSettingsFlowWithOidcMethod
    from ory_kratos_client.model.update_settings_flow_with_password_method import UpdateSettingsFlowWithPasswordMethod
    from ory_kratos_client.model.update_settings_flow_with_profile_method import UpdateSettingsFlowWithProfileMethod
    from ory_kratos_client.model.update_settings_flow_with_totp_method import UpdateSettingsFlowWithTotpMethod
    from ory_kratos_client.model.update_settings_flow_with_web_authn_method import UpdateSettingsFlowWithWebAuthnMethod
    globals()['UpdateSettingsFlowWithLookupMethod'] = UpdateSettingsFlowWithLookupMethod
    globals()['UpdateSettingsFlowWithOidcMethod'] = UpdateSettingsFlowWithOidcMethod
    globals()['UpdateSettingsFlowWithPasswordMethod'] = UpdateSettingsFlowWithPasswordMethod
    globals()['UpdateSettingsFlowWithProfileMethod'] = UpdateSettingsFlowWithProfileMethod
    globals()['UpdateSettingsFlowWithTotpMethod'] = UpdateSettingsFlowWithTotpMethod
    globals()['UpdateSettingsFlowWithWebAuthnMethod'] = UpdateSettingsFlowWithWebAuthnMethod


class UpdateSettingsFlowBody(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'method': (str,),  # noqa: E501
            'csrf_token': (str,),  # noqa: E501
            'flow': (str,),  # noqa: E501
            'link': (str,),  # noqa: E501
            'unlink': (str,),  # noqa: E501
            'upstream_parameters': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'totp_code': (str,),  # noqa: E501
            'totp_unlink': (bool,),  # noqa: E501
            'webauthn_register': (str,),  # noqa: E501
            'webauthn_register_displayname': (str,),  # noqa: E501
            'webauthn_remove': (str,),  # noqa: E501
            'lookup_secret_confirm': (bool,),  # noqa: E501
            'lookup_secret_disable': (bool,),  # noqa: E501
            'lookup_secret_regenerate': (bool,),  # noqa: E501
            'lookup_secret_reveal': (bool,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'traits': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'lookup_secret': UpdateSettingsFlowWithLookupMethod,
            'oidc': UpdateSettingsFlowWithOidcMethod,
            'password': UpdateSettingsFlowWithPasswordMethod,
            'profile': UpdateSettingsFlowWithProfileMethod,
            'totp': UpdateSettingsFlowWithTotpMethod,
            'updateSettingsFlowWithLookupMethod': UpdateSettingsFlowWithLookupMethod,
            'updateSettingsFlowWithOidcMethod': UpdateSettingsFlowWithOidcMethod,
            'updateSettingsFlowWithPasswordMethod': UpdateSettingsFlowWithPasswordMethod,
            'updateSettingsFlowWithProfileMethod': UpdateSettingsFlowWithProfileMethod,
            'updateSettingsFlowWithTotpMethod': UpdateSettingsFlowWithTotpMethod,
            'updateSettingsFlowWithWebAuthnMethod': UpdateSettingsFlowWithWebAuthnMethod,
            'webauthn': UpdateSettingsFlowWithWebAuthnMethod,
        }
        if not val:
            return None
        return {'method': val}

    attribute_map = {
        'method': 'method',  # noqa: E501
        'csrf_token': 'csrf_token',  # noqa: E501
        'flow': 'flow',  # noqa: E501
        'link': 'link',  # noqa: E501
        'unlink': 'unlink',  # noqa: E501
        'upstream_parameters': 'upstream_parameters',  # noqa: E501
        'totp_code': 'totp_code',  # noqa: E501
        'totp_unlink': 'totp_unlink',  # noqa: E501
        'webauthn_register': 'webauthn_register',  # noqa: E501
        'webauthn_register_displayname': 'webauthn_register_displayname',  # noqa: E501
        'webauthn_remove': 'webauthn_remove',  # noqa: E501
        'lookup_secret_confirm': 'lookup_secret_confirm',  # noqa: E501
        'lookup_secret_disable': 'lookup_secret_disable',  # noqa: E501
        'lookup_secret_regenerate': 'lookup_secret_regenerate',  # noqa: E501
        'lookup_secret_reveal': 'lookup_secret_reveal',  # noqa: E501
        'password': 'password',  # noqa: E501
        'traits': 'traits',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """UpdateSettingsFlowBody - a model defined in OpenAPI

        Keyword Args:
            method (str): Method  Should be set to \"lookup\" when trying to add, update, or remove a lookup pairing.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            csrf_token (str): CSRFToken is the anti-CSRF token. [optional]  # noqa: E501
            flow (str): Flow ID is the flow's ID.  in: query. [optional]  # noqa: E501
            link (str): Link this provider  Either this or `unlink` must be set.  type: string in: body. [optional]  # noqa: E501
            unlink (str): Unlink this provider  Either this or `link` must be set.  type: string in: body. [optional]  # noqa: E501
            upstream_parameters ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.. [optional]  # noqa: E501
            totp_code (str): ValidationTOTP must contain a valid TOTP based on the. [optional]  # noqa: E501
            totp_unlink (bool): UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.. [optional]  # noqa: E501
            webauthn_register (str): Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.. [optional]  # noqa: E501
            webauthn_register_displayname (str): Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.. [optional]  # noqa: E501
            webauthn_remove (str): Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.. [optional]  # noqa: E501
            lookup_secret_confirm (bool): If set to true will save the regenerated lookup secrets. [optional]  # noqa: E501
            lookup_secret_disable (bool): Disables this method if true.. [optional]  # noqa: E501
            lookup_secret_regenerate (bool): If set to true will regenerate the lookup secrets. [optional]  # noqa: E501
            lookup_secret_reveal (bool): If set to true will reveal the lookup secrets. [optional]  # noqa: E501
            password (str): Password is the updated password. [optional]  # noqa: E501
            traits ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The identity's traits  in: body. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """UpdateSettingsFlowBody - a model defined in OpenAPI

        Keyword Args:
            method (str): Method  Should be set to \"lookup\" when trying to add, update, or remove a lookup pairing.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            csrf_token (str): CSRFToken is the anti-CSRF token. [optional]  # noqa: E501
            flow (str): Flow ID is the flow's ID.  in: query. [optional]  # noqa: E501
            link (str): Link this provider  Either this or `unlink` must be set.  type: string in: body. [optional]  # noqa: E501
            unlink (str): Unlink this provider  Either this or `link` must be set.  type: string in: body. [optional]  # noqa: E501
            upstream_parameters ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.. [optional]  # noqa: E501
            totp_code (str): ValidationTOTP must contain a valid TOTP based on the. [optional]  # noqa: E501
            totp_unlink (bool): UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.. [optional]  # noqa: E501
            webauthn_register (str): Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.. [optional]  # noqa: E501
            webauthn_register_displayname (str): Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.. [optional]  # noqa: E501
            webauthn_remove (str): Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.. [optional]  # noqa: E501
            lookup_secret_confirm (bool): If set to true will save the regenerated lookup secrets. [optional]  # noqa: E501
            lookup_secret_disable (bool): Disables this method if true.. [optional]  # noqa: E501
            lookup_secret_regenerate (bool): If set to true will regenerate the lookup secrets. [optional]  # noqa: E501
            lookup_secret_reveal (bool): If set to true will reveal the lookup secrets. [optional]  # noqa: E501
            password (str): Password is the updated password. [optional]  # noqa: E501
            traits ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The identity's traits  in: body. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              UpdateSettingsFlowWithLookupMethod,
              UpdateSettingsFlowWithOidcMethod,
              UpdateSettingsFlowWithPasswordMethod,
              UpdateSettingsFlowWithProfileMethod,
              UpdateSettingsFlowWithTotpMethod,
              UpdateSettingsFlowWithWebAuthnMethod,
          ],
        }
