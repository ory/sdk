=begin
#ORY Keto

#A cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.

The version of the OpenAPI document: v0.0.0-alpha.1
Contact: hi@ory.sh
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'spec_helper'
require 'json'

# Unit tests for OryHydraClient::EnginesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EnginesApi' do
  before do
    # run before each test
    @api_instance = OryHydraClient::EnginesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EnginesApi' do
    it 'should create an instance of EnginesApi' do
      expect(@api_instance).to be_instance_of(OryHydraClient::EnginesApi)
    end
  end

  # unit tests for add_ory_access_control_policy_role_members
  # Add a member to an ORY Access Control Policy Role
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param [Hash] opts the optional parameters
  # @option opts [AddOryAccessControlPolicyRoleMembersBody] :body 
  # @return [OryAccessControlPolicyRole]
  describe 'add_ory_access_control_policy_role_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ory_access_control_policy
  # Delete an ORY Access Control Policy
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ory_access_control_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ory_access_control_policy_role
  # Delete an ORY Access Control Policy Role
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ory_access_control_policy_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_ory_access_control_policies_allow
  # Check if a request is allowed
  # Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [OryAccessControlPolicyAllowedInput] :body 
  # @return [AuthorizationResult]
  describe 'do_ory_access_control_policies_allow test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ory_access_control_policy
  # Get an ORY Access Control Policy
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param [Hash] opts the optional parameters
  # @return [OryAccessControlPolicy]
  describe 'get_ory_access_control_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ory_access_control_policy_role
  # Get an ORY Access Control Policy Role
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param [Hash] opts the optional parameters
  # @return [OryAccessControlPolicyRole]
  describe 'get_ory_access_control_policy_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ory_access_control_policies
  # List ORY Access Control Policies
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum amount of policies returned.
  # @option opts [Integer] :offset The offset from where to start looking.
  # @option opts [String] :subject The subject for whom the policies are to be listed.
  # @option opts [String] :resource The resource for which the policies are to be listed.
  # @option opts [String] :action The action for which policies are to be listed.
  # @return [Array<OryAccessControlPolicy>]
  describe 'list_ory_access_control_policies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_ory_access_control_policy_roles
  # List ORY Access Control Policy Roles
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum amount of policies returned.
  # @option opts [Integer] :offset The offset from where to start looking.
  # @option opts [String] :member The member for which the roles are to be listed.
  # @return [Array<OryAccessControlPolicyRole>]
  describe 'list_ory_access_control_policy_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_ory_access_control_policy_role_members
  # Remove a member from an ORY Access Control Policy Role
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param id The ID of the ORY Access Control Policy Role.
  # @param member The member to be removed.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_ory_access_control_policy_role_members test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_ory_access_control_policy
  # Upsert an ORY Access Control Policy
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [OryAccessControlPolicy] :body 
  # @return [OryAccessControlPolicy]
  describe 'upsert_ory_access_control_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_ory_access_control_policy_role
  # Upsert an ORY Access Control Policy Role
  # Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
  # @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.
  # @param [Hash] opts the optional parameters
  # @option opts [OryAccessControlPolicyRole] :body 
  # @return [OryAccessControlPolicyRole]
  describe 'upsert_ory_access_control_policy_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
