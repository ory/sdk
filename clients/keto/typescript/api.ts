/* tslint:disable */
/* eslint-disable */
/**
 * Ory Keto API
 * Documentation for all of Ory Keto\'s REST APIs. gRPC is documented separately. 
 *
 * The version of the OpenAPI document: v0.11.0-alpha.0
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CheckOplSyntaxResult
 */
export interface CheckOplSyntaxResult {
    /**
     * The list of syntax errors
     * @type {Array<ParseError>}
     * @memberof CheckOplSyntaxResult
     */
    'errors'?: Array<ParseError>;
}
/**
 * The content of the allowed field is mirrored in the HTTP status code.
 * @export
 * @interface CheckPermissionResult
 */
export interface CheckPermissionResult {
    /**
     * whether the relation tuple is allowed
     * @type {boolean}
     * @memberof CheckPermissionResult
     */
    'allowed': boolean;
}
/**
 * Create Relationship Request Body
 * @export
 * @interface CreateRelationshipBody
 */
export interface CreateRelationshipBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof CreateRelationshipBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof CreateRelationshipBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * The standard Ory JSON API error format.
 * @export
 * @interface ErrorGeneric
 */
export interface ErrorGeneric {
    /**
     * 
     * @type {GenericError}
     * @memberof ErrorGeneric
     */
    'error': GenericError;
}
/**
 * 
 * @export
 * @interface ExpandedPermissionTree
 */
export interface ExpandedPermissionTree {
    /**
     * The children of the node, possibly none.
     * @type {Array<ExpandedPermissionTree>}
     * @memberof ExpandedPermissionTree
     */
    'children'?: Array<ExpandedPermissionTree>;
    /**
     * 
     * @type {Relationship}
     * @memberof ExpandedPermissionTree
     */
    'tuple'?: Relationship;
    /**
     * The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
     * @type {string}
     * @memberof ExpandedPermissionTree
     */
    'type': ExpandedPermissionTreeTypeEnum;
}

export const ExpandedPermissionTreeTypeEnum = {
    Union: 'union',
    Exclusion: 'exclusion',
    Intersection: 'intersection',
    Leaf: 'leaf',
    TupleToSubjectSet: 'tuple_to_subject_set',
    ComputedSubjectSet: 'computed_subject_set',
    Not: 'not',
    Unspecified: 'unspecified'
} as const;

export type ExpandedPermissionTreeTypeEnum = typeof ExpandedPermissionTreeTypeEnum[keyof typeof ExpandedPermissionTreeTypeEnum];

/**
 * 
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * The status code
     * @type {number}
     * @memberof GenericError
     */
    'code'?: number;
    /**
     * Debug information  This field is often not exposed to protect against leaking sensitive information.
     * @type {string}
     * @memberof GenericError
     */
    'debug'?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof GenericError
     */
    'details'?: { [key: string]: any; };
    /**
     * The error ID  Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof GenericError
     */
    'id'?: string;
    /**
     * Error message  The error\'s message.
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof GenericError
     */
    'reason'?: string;
    /**
     * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof GenericError
     */
    'request'?: string;
    /**
     * The status description
     * @type {string}
     * @memberof GenericError
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface HealthNotReadyStatus
 */
export interface HealthNotReadyStatus {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof HealthNotReadyStatus
     */
    'errors'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * Status always contains \"ok\".
     * @type {string}
     * @memberof HealthStatus
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Always \"ok\".
     * @type {string}
     * @memberof InlineResponse200
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The version of Ory Keto.
     * @type {string}
     * @memberof InlineResponse2001
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Errors contains a list of errors that caused the not ready status.
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse503
     */
    'errors': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Namespace
 */
export interface Namespace {
    /**
     * Name of the namespace.
     * @type {string}
     * @memberof Namespace
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ParseError
 */
export interface ParseError {
    /**
     * 
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'end'?: SourcePosition;
    /**
     * 
     * @type {string}
     * @memberof ParseError
     */
    'message'?: string;
    /**
     * 
     * @type {SourcePosition}
     * @memberof ParseError
     */
    'start'?: SourcePosition;
}
/**
 * Check Permission using Post Request Body
 * @export
 * @interface PostCheckPermissionBody
 */
export interface PostCheckPermissionBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof PostCheckPermissionBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof PostCheckPermissionBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * Post Check Permission Or Error Body
 * @export
 * @interface PostCheckPermissionOrErrorBody
 */
export interface PostCheckPermissionOrErrorBody {
    /**
     * Namespace to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof PostCheckPermissionOrErrorBody
     */
    'subject_set'?: SubjectSet;
}
/**
 * Relation Query
 * @export
 * @interface RelationQuery
 */
export interface RelationQuery {
    /**
     * Namespace to query
     * @type {string}
     * @memberof RelationQuery
     */
    'namespace'?: string;
    /**
     * Object to query
     * @type {string}
     * @memberof RelationQuery
     */
    'object'?: string;
    /**
     * Relation to query
     * @type {string}
     * @memberof RelationQuery
     */
    'relation'?: string;
    /**
     * SubjectID to query  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof RelationQuery
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof RelationQuery
     */
    'subject_set'?: SubjectSet;
}
/**
 * Relationship
 * @export
 * @interface Relationship
 */
export interface Relationship {
    /**
     * Namespace of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'namespace': string;
    /**
     * Object of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'object': string;
    /**
     * Relation of the Relation Tuple
     * @type {string}
     * @memberof Relationship
     */
    'relation': string;
    /**
     * SubjectID of the Relation Tuple  Either SubjectSet or SubjectID can be provided.
     * @type {string}
     * @memberof Relationship
     */
    'subject_id'?: string;
    /**
     * 
     * @type {SubjectSet}
     * @memberof Relationship
     */
    'subject_set'?: SubjectSet;
}
/**
 * Relationship Namespace List
 * @export
 * @interface RelationshipNamespaces
 */
export interface RelationshipNamespaces {
    /**
     * 
     * @type {Array<Namespace>}
     * @memberof RelationshipNamespaces
     */
    'namespaces'?: Array<Namespace>;
}
/**
 * Payload for patching a relationship
 * @export
 * @interface RelationshipPatch
 */
export interface RelationshipPatch {
    /**
     * 
     * @type {string}
     * @memberof RelationshipPatch
     */
    'action'?: RelationshipPatchActionEnum;
    /**
     * 
     * @type {Relationship}
     * @memberof RelationshipPatch
     */
    'relation_tuple'?: Relationship;
}

export const RelationshipPatchActionEnum = {
    Insert: 'insert',
    Delete: 'delete'
} as const;

export type RelationshipPatchActionEnum = typeof RelationshipPatchActionEnum[keyof typeof RelationshipPatchActionEnum];

/**
 * Paginated Relationship List
 * @export
 * @interface Relationships
 */
export interface Relationships {
    /**
     * The opaque token to provide in a subsequent request to get the next page. It is the empty string iff this is the last page.
     * @type {string}
     * @memberof Relationships
     */
    'next_page_token'?: string;
    /**
     * 
     * @type {Array<Relationship>}
     * @memberof Relationships
     */
    'relation_tuples'?: Array<Relationship>;
}
/**
 * 
 * @export
 * @interface SourcePosition
 */
export interface SourcePosition {
    /**
     * 
     * @type {number}
     * @memberof SourcePosition
     */
    'Line'?: number;
    /**
     * 
     * @type {number}
     * @memberof SourcePosition
     */
    'column'?: number;
}
/**
 * 
 * @export
 * @interface SubjectSet
 */
export interface SubjectSet {
    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'namespace': string;
    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'object': string;
    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof SubjectSet
     */
    'relation': string;
}
/**
 * 
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Version is the service\'s version.
     * @type {string}
     * @memberof Version
     */
    'version'?: string;
}

/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the version of Ory Keto.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Keto, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the version of Ory Keto.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isAlive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isAlive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Keto, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isReady(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isReady(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * This endpoint returns the version of Ory Keto.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
         * @summary Return Running Software Version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isAlive(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.isAlive(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a HTTP 200 status code when Ory Keto is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Keto, the health status will never refer to the cluster state, only to a single instance.
         * @summary Check HTTP Server and Database Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isReady(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.isReady(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * This endpoint returns the version of Ory Keto.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the version will never refer to the cluster state, only to a single instance.
     * @summary Return Running Software Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public getVersion(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a HTTP 200 status code when Ory Keto is accepting incoming HTTP requests. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public isAlive(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).isAlive(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a HTTP 200 status code when Ory Keto is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of Ory Keto, the health status will never refer to the cluster state, only to a single instance.
     * @summary Check HTTP Server and Database Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public isReady(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).isReady(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermissionOrError: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expandPermissions: async (namespace: string, object: string, relation: string, maxDepth?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('expandPermissions', 'namespace', namespace)
            // verify required parameter 'object' is not null or undefined
            assertParamExists('expandPermissions', 'object', object)
            // verify required parameter 'relation' is not null or undefined
            assertParamExists('expandPermissions', 'relation', relation)
            const localVarPath = `/relation-tuples/expand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermission: async (maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCheckPermissionBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermissionOrError: async (maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxDepth !== undefined) {
                localVarQueryParameter['max-depth'] = maxDepth;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCheckPermissionOrErrorBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionApiAxiosParamCreator(configuration)
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPermission(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPermission(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPermissionOrError(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPermissionOrError(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expandPermissions(namespace: string, object: string, relation: string, maxDepth?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpandedPermissionTree>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expandPermissions(namespace, object, relation, maxDepth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckPermission(maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCheckPermission(maxDepth, postCheckPermissionBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCheckPermissionOrError(maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckPermissionResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCheckPermissionOrError(maxDepth, postCheckPermissionOrErrorBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionApiFp(configuration)
    return {
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermission(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.checkPermission(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPermissionOrError(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, maxDepth?: number, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.checkPermissionOrError(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to expand a relationship tuple into permissions.
         * @summary Expand a Relationship into permissions.
         * @param {string} namespace Namespace of the Subject Set
         * @param {string} object Object of the Subject Set
         * @param {string} relation Relation of the Subject Set
         * @param {number} [maxDepth] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expandPermissions(namespace: string, object: string, relation: string, maxDepth?: number, options?: any): AxiosPromise<ExpandedPermissionTree> {
            return localVarFp.expandPermissions(namespace, object, relation, maxDepth, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] 
         * @param {PostCheckPermissionBody} [postCheckPermissionBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermission(maxDepth?: number, postCheckPermissionBody?: PostCheckPermissionBody, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.postCheckPermission(maxDepth, postCheckPermissionBody, options).then((request) => request(axios, basePath));
        },
        /**
         * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
         * @summary Check a permission
         * @param {number} [maxDepth] nolint:deadcode,unused
         * @param {PostCheckPermissionOrErrorBody} [postCheckPermissionOrErrorBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCheckPermissionOrError(maxDepth?: number, postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody, options?: any): AxiosPromise<CheckPermissionResult> {
            return localVarFp.postCheckPermissionOrError(maxDepth, postCheckPermissionOrErrorBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkPermission operation in PermissionApi.
 * @export
 * @interface PermissionApiCheckPermissionRequest
 */
export interface PermissionApiCheckPermissionRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermission
     */
    readonly subjectSetRelation?: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiCheckPermission
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for checkPermissionOrError operation in PermissionApi.
 * @export
 * @interface PermissionApiCheckPermissionOrErrorRequest
 */
export interface PermissionApiCheckPermissionOrErrorRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly subjectSetRelation?: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiCheckPermissionOrError
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for expandPermissions operation in PermissionApi.
 * @export
 * @interface PermissionApiExpandPermissionsRequest
 */
export interface PermissionApiExpandPermissionsRequest {
    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly namespace: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly object: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof PermissionApiExpandPermissions
     */
    readonly relation: string

    /**
     * 
     * @type {number}
     * @memberof PermissionApiExpandPermissions
     */
    readonly maxDepth?: number
}

/**
 * Request parameters for postCheckPermission operation in PermissionApi.
 * @export
 * @interface PermissionApiPostCheckPermissionRequest
 */
export interface PermissionApiPostCheckPermissionRequest {
    /**
     * 
     * @type {number}
     * @memberof PermissionApiPostCheckPermission
     */
    readonly maxDepth?: number

    /**
     * 
     * @type {PostCheckPermissionBody}
     * @memberof PermissionApiPostCheckPermission
     */
    readonly postCheckPermissionBody?: PostCheckPermissionBody
}

/**
 * Request parameters for postCheckPermissionOrError operation in PermissionApi.
 * @export
 * @interface PermissionApiPostCheckPermissionOrErrorRequest
 */
export interface PermissionApiPostCheckPermissionOrErrorRequest {
    /**
     * nolint:deadcode,unused
     * @type {number}
     * @memberof PermissionApiPostCheckPermissionOrError
     */
    readonly maxDepth?: number

    /**
     * 
     * @type {PostCheckPermissionOrErrorBody}
     * @memberof PermissionApiPostCheckPermissionOrError
     */
    readonly postCheckPermissionOrErrorBody?: PostCheckPermissionOrErrorBody
}

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiCheckPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public checkPermission(requestParameters: PermissionApiCheckPermissionRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).checkPermission(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiCheckPermissionOrErrorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public checkPermissionOrError(requestParameters: PermissionApiCheckPermissionOrErrorRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).checkPermissionOrError(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to expand a relationship tuple into permissions.
     * @summary Expand a Relationship into permissions.
     * @param {PermissionApiExpandPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public expandPermissions(requestParameters: PermissionApiExpandPermissionsRequest, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).expandPermissions(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.maxDepth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiPostCheckPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public postCheckPermission(requestParameters: PermissionApiPostCheckPermissionRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).postCheckPermission(requestParameters.maxDepth, requestParameters.postCheckPermissionBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To learn how relationship tuples and the check works, head over to [the documentation](https://www.ory.sh/docs/keto/concepts/api-overview).
     * @summary Check a permission
     * @param {PermissionApiPostCheckPermissionOrErrorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public postCheckPermissionOrError(requestParameters: PermissionApiPostCheckPermissionOrErrorRequest = {}, options?: AxiosRequestConfig) {
        return PermissionApiFp(this.configuration).postCheckPermissionOrError(requestParameters.maxDepth, requestParameters.postCheckPermissionOrErrorBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RelationshipApi - axios parameter creator
 * @export
 */
export const RelationshipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOplSyntax: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/opl/syntax/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationship: async (createRelationshipBody?: CreateRelationshipBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRelationshipBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationships: async (namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationships: async (pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (object !== undefined) {
                localVarQueryParameter['object'] = object;
            }

            if (relation !== undefined) {
                localVarQueryParameter['relation'] = relation;
            }

            if (subjectId !== undefined) {
                localVarQueryParameter['subject_id'] = subjectId;
            }

            if (subjectSetNamespace !== undefined) {
                localVarQueryParameter['subject_set.namespace'] = subjectSetNamespace;
            }

            if (subjectSetObject !== undefined) {
                localVarQueryParameter['subject_set.object'] = subjectSetObject;
            }

            if (subjectSetRelation !== undefined) {
                localVarQueryParameter['subject_set.relation'] = subjectSetRelation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipNamespaces: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRelationships: async (relationshipPatch?: Array<RelationshipPatch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/relation-tuples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(relationshipPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelationshipApi - functional programming interface
 * @export
 */
export const RelationshipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RelationshipApiAxiosParamCreator(configuration)
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkOplSyntax(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckOplSyntaxResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkOplSyntax(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelationship(createRelationshipBody?: CreateRelationshipBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRelationship(createRelationshipBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRelationships(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelationships(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationships(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationships>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelationships(pageToken, pageSize, namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRelationshipNamespaces(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelationshipNamespaces>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRelationshipNamespaces(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRelationships(relationshipPatch?: Array<RelationshipPatch>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRelationships(relationshipPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RelationshipApi - factory interface
 * @export
 */
export const RelationshipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RelationshipApiFp(configuration)
    return {
        /**
         * The OPL file is expected in the body of the request.
         * @summary Check the syntax of an OPL file
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOplSyntax(body?: string, options?: any): AxiosPromise<CheckOplSyntaxResult> {
            return localVarFp.checkOplSyntax(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a relationship.
         * @summary Create a Relationship
         * @param {CreateRelationshipBody} [createRelationshipBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationship(createRelationshipBody?: CreateRelationshipBody, options?: any): AxiosPromise<Relationship> {
            return localVarFp.createRelationship(createRelationshipBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete relationships
         * @summary Delete Relationships
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelationships(namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRelationships(namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all relationships that match the query. Only the namespace field is required.
         * @summary Query relationships
         * @param {string} [pageToken] 
         * @param {number} [pageSize] 
         * @param {string} [namespace] Namespace of the Relationship
         * @param {string} [object] Object of the Relationship
         * @param {string} [relation] Relation of the Relationship
         * @param {string} [subjectId] SubjectID of the Relationship
         * @param {string} [subjectSetNamespace] Namespace of the Subject Set
         * @param {string} [subjectSetObject] Object of the Subject Set
         * @param {string} [subjectSetRelation] Relation of the Subject Set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationships(pageToken?: string, pageSize?: number, namespace?: string, object?: string, relation?: string, subjectId?: string, subjectSetNamespace?: string, subjectSetObject?: string, subjectSetRelation?: string, options?: any): AxiosPromise<Relationships> {
            return localVarFp.getRelationships(pageToken, pageSize, namespace, object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all namespaces
         * @summary Query namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRelationshipNamespaces(options?: any): AxiosPromise<RelationshipNamespaces> {
            return localVarFp.listRelationshipNamespaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to patch one or more relationships.
         * @summary Patch Multiple Relationships
         * @param {Array<RelationshipPatch>} [relationshipPatch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRelationships(relationshipPatch?: Array<RelationshipPatch>, options?: any): AxiosPromise<void> {
            return localVarFp.patchRelationships(relationshipPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkOplSyntax operation in RelationshipApi.
 * @export
 * @interface RelationshipApiCheckOplSyntaxRequest
 */
export interface RelationshipApiCheckOplSyntaxRequest {
    /**
     * 
     * @type {string}
     * @memberof RelationshipApiCheckOplSyntax
     */
    readonly body?: string
}

/**
 * Request parameters for createRelationship operation in RelationshipApi.
 * @export
 * @interface RelationshipApiCreateRelationshipRequest
 */
export interface RelationshipApiCreateRelationshipRequest {
    /**
     * 
     * @type {CreateRelationshipBody}
     * @memberof RelationshipApiCreateRelationship
     */
    readonly createRelationshipBody?: CreateRelationshipBody
}

/**
 * Request parameters for deleteRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiDeleteRelationshipsRequest
 */
export interface RelationshipApiDeleteRelationshipsRequest {
    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof RelationshipApiDeleteRelationships
     */
    readonly subjectSetRelation?: string
}

/**
 * Request parameters for getRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiGetRelationshipsRequest
 */
export interface RelationshipApiGetRelationshipsRequest {
    /**
     * 
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly pageToken?: string

    /**
     * 
     * @type {number}
     * @memberof RelationshipApiGetRelationships
     */
    readonly pageSize?: number

    /**
     * Namespace of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly namespace?: string

    /**
     * Object of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly object?: string

    /**
     * Relation of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly relation?: string

    /**
     * SubjectID of the Relationship
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectId?: string

    /**
     * Namespace of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetNamespace?: string

    /**
     * Object of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetObject?: string

    /**
     * Relation of the Subject Set
     * @type {string}
     * @memberof RelationshipApiGetRelationships
     */
    readonly subjectSetRelation?: string
}

/**
 * Request parameters for patchRelationships operation in RelationshipApi.
 * @export
 * @interface RelationshipApiPatchRelationshipsRequest
 */
export interface RelationshipApiPatchRelationshipsRequest {
    /**
     * 
     * @type {Array<RelationshipPatch>}
     * @memberof RelationshipApiPatchRelationships
     */
    readonly relationshipPatch?: Array<RelationshipPatch>
}

/**
 * RelationshipApi - object-oriented interface
 * @export
 * @class RelationshipApi
 * @extends {BaseAPI}
 */
export class RelationshipApi extends BaseAPI {
    /**
     * The OPL file is expected in the body of the request.
     * @summary Check the syntax of an OPL file
     * @param {RelationshipApiCheckOplSyntaxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public checkOplSyntax(requestParameters: RelationshipApiCheckOplSyntaxRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).checkOplSyntax(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a relationship.
     * @summary Create a Relationship
     * @param {RelationshipApiCreateRelationshipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public createRelationship(requestParameters: RelationshipApiCreateRelationshipRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).createRelationship(requestParameters.createRelationshipBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete relationships
     * @summary Delete Relationships
     * @param {RelationshipApiDeleteRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public deleteRelationships(requestParameters: RelationshipApiDeleteRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).deleteRelationships(requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all relationships that match the query. Only the namespace field is required.
     * @summary Query relationships
     * @param {RelationshipApiGetRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public getRelationships(requestParameters: RelationshipApiGetRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).getRelationships(requestParameters.pageToken, requestParameters.pageSize, requestParameters.namespace, requestParameters.object, requestParameters.relation, requestParameters.subjectId, requestParameters.subjectSetNamespace, requestParameters.subjectSetObject, requestParameters.subjectSetRelation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all namespaces
     * @summary Query namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public listRelationshipNamespaces(options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).listRelationshipNamespaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to patch one or more relationships.
     * @summary Patch Multiple Relationships
     * @param {RelationshipApiPatchRelationshipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public patchRelationships(requestParameters: RelationshipApiPatchRelationshipsRequest = {}, options?: AxiosRequestConfig) {
        return RelationshipApiFp(this.configuration).patchRelationships(requestParameters.relationshipPatch, options).then((request) => request(this.axios, this.basePath));
    }
}


