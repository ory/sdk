/*
 * Ory Keto API
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately. 
 *
 * The version of the OpenAPI document: v0.11.0-alpha.0
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.keto.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import sh.ory.keto.model.Relationship;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import sh.ory.keto.JSON;

/**
 * ExpandedPermissionTree
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-23T17:15:19.489516255Z[Etc/UTC]")
public class ExpandedPermissionTree {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<ExpandedPermissionTree> children = null;

  public static final String SERIALIZED_NAME_TUPLE = "tuple";
  @SerializedName(SERIALIZED_NAME_TUPLE)
  private Relationship tuple;

  /**
   * The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNION("union"),
    
    EXCLUSION("exclusion"),
    
    INTERSECTION("intersection"),
    
    LEAF("leaf"),
    
    TUPLE_TO_SUBJECT_SET("tuple_to_subject_set"),
    
    COMPUTED_SUBJECT_SET("computed_subject_set"),
    
    NOT("not"),
    
    UNSPECIFIED("unspecified");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ExpandedPermissionTree() {
  }

  public ExpandedPermissionTree children(List<ExpandedPermissionTree> children) {
    
    this.children = children;
    return this;
  }

  public ExpandedPermissionTree addChildrenItem(ExpandedPermissionTree childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * The children of the node, possibly none.
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The children of the node, possibly none.")

  public List<ExpandedPermissionTree> getChildren() {
    return children;
  }


  public void setChildren(List<ExpandedPermissionTree> children) {
    this.children = children;
  }


  public ExpandedPermissionTree tuple(Relationship tuple) {
    
    this.tuple = tuple;
    return this;
  }

   /**
   * Get tuple
   * @return tuple
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Relationship getTuple() {
    return tuple;
  }


  public void setTuple(Relationship tuple) {
    this.tuple = tuple;
  }


  public ExpandedPermissionTree type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpandedPermissionTree expandedPermissionTree = (ExpandedPermissionTree) o;
    return Objects.equals(this.children, expandedPermissionTree.children) &&
        Objects.equals(this.tuple, expandedPermissionTree.tuple) &&
        Objects.equals(this.type, expandedPermissionTree.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, tuple, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpandedPermissionTree {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    tuple: ").append(toIndentedString(tuple)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("tuple");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpandedPermissionTree
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExpandedPermissionTree.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpandedPermissionTree is not found in the empty JSON string", ExpandedPermissionTree.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExpandedPermissionTree.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpandedPermissionTree` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExpandedPermissionTree.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            ExpandedPermissionTree.validateJsonObject(jsonArraychildren.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `tuple`
      if (jsonObj.get("tuple") != null && !jsonObj.get("tuple").isJsonNull()) {
        Relationship.validateJsonObject(jsonObj.getAsJsonObject("tuple"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpandedPermissionTree.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpandedPermissionTree' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpandedPermissionTree> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpandedPermissionTree.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpandedPermissionTree>() {
           @Override
           public void write(JsonWriter out, ExpandedPermissionTree value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpandedPermissionTree read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpandedPermissionTree given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpandedPermissionTree
  * @throws IOException if the JSON string is invalid with respect to ExpandedPermissionTree
  */
  public static ExpandedPermissionTree fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpandedPermissionTree.class);
  }

 /**
  * Convert an instance of ExpandedPermissionTree to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

