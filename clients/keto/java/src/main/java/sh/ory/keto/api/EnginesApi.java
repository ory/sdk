/*
 * ORY Keto
 * A cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * The version of the OpenAPI document: v0.0.0-alpha.1
 * Contact: hi@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sh.ory.keto.api;

import sh.ory.keto.ApiCallback;
import sh.ory.keto.ApiClient;
import sh.ory.keto.ApiException;
import sh.ory.keto.ApiResponse;
import sh.ory.keto.Configuration;
import sh.ory.keto.Pair;
import sh.ory.keto.ProgressRequestBody;
import sh.ory.keto.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import sh.ory.keto.model.AddOryAccessControlPolicyRoleMembersBody;
import sh.ory.keto.model.AuthorizationResult;
import sh.ory.keto.model.InlineResponse500;
import sh.ory.keto.model.OryAccessControlPolicy;
import sh.ory.keto.model.OryAccessControlPolicyAllowedInput;
import sh.ory.keto.model.OryAccessControlPolicyRole;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnginesApi {
    private ApiClient localVarApiClient;

    public EnginesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnginesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addOryAccessControlPolicyRoleMembers
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOryAccessControlPolicyRoleMembersCall(String flavor, String id, AddOryAccessControlPolicyRoleMembersBody body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles/{id}/members"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOryAccessControlPolicyRoleMembersValidateBeforeCall(String flavor, String id, AddOryAccessControlPolicyRoleMembersBody body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling addOryAccessControlPolicyRoleMembers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addOryAccessControlPolicyRoleMembers(Async)");
        }
        

        okhttp3.Call localVarCall = addOryAccessControlPolicyRoleMembersCall(flavor, id, body, _callback);
        return localVarCall;

    }

    /**
     * Add a member to an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param body  (optional)
     * @return OryAccessControlPolicyRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public OryAccessControlPolicyRole addOryAccessControlPolicyRoleMembers(String flavor, String id, AddOryAccessControlPolicyRoleMembersBody body) throws ApiException {
        ApiResponse<OryAccessControlPolicyRole> localVarResp = addOryAccessControlPolicyRoleMembersWithHttpInfo(flavor, id, body);
        return localVarResp.getData();
    }

    /**
     * Add a member to an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;OryAccessControlPolicyRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OryAccessControlPolicyRole> addOryAccessControlPolicyRoleMembersWithHttpInfo(String flavor, String id, AddOryAccessControlPolicyRoleMembersBody body) throws ApiException {
        okhttp3.Call localVarCall = addOryAccessControlPolicyRoleMembersValidateBeforeCall(flavor, id, body, null);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a member to an ORY Access Control Policy Role (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOryAccessControlPolicyRoleMembersAsync(String flavor, String id, AddOryAccessControlPolicyRoleMembersBody body, final ApiCallback<OryAccessControlPolicyRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOryAccessControlPolicyRoleMembersValidateBeforeCall(flavor, id, body, _callback);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOryAccessControlPolicy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOryAccessControlPolicyCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/policies/{id}"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOryAccessControlPolicyValidateBeforeCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling deleteOryAccessControlPolicy(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOryAccessControlPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOryAccessControlPolicyCall(flavor, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOryAccessControlPolicy(String flavor, String id) throws ApiException {
        deleteOryAccessControlPolicyWithHttpInfo(flavor, id);
    }

    /**
     * 
     * Delete an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOryAccessControlPolicyWithHttpInfo(String flavor, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOryAccessControlPolicyValidateBeforeCall(flavor, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOryAccessControlPolicyAsync(String flavor, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOryAccessControlPolicyValidateBeforeCall(flavor, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOryAccessControlPolicyRole
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOryAccessControlPolicyRoleCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles/{id}"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOryAccessControlPolicyRoleValidateBeforeCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling deleteOryAccessControlPolicyRole(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOryAccessControlPolicyRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOryAccessControlPolicyRoleCall(flavor, id, _callback);
        return localVarCall;

    }

    /**
     * Delete an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOryAccessControlPolicyRole(String flavor, String id) throws ApiException {
        deleteOryAccessControlPolicyRoleWithHttpInfo(flavor, id);
    }

    /**
     * Delete an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOryAccessControlPolicyRoleWithHttpInfo(String flavor, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOryAccessControlPolicyRoleValidateBeforeCall(flavor, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an ORY Access Control Policy Role (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOryAccessControlPolicyRoleAsync(String flavor, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOryAccessControlPolicyRoleValidateBeforeCall(flavor, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for doOryAccessControlPoliciesAllow
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doOryAccessControlPoliciesAllowCall(String flavor, OryAccessControlPolicyAllowedInput body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/allowed"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doOryAccessControlPoliciesAllowValidateBeforeCall(String flavor, OryAccessControlPolicyAllowedInput body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling doOryAccessControlPoliciesAllow(Async)");
        }
        

        okhttp3.Call localVarCall = doOryAccessControlPoliciesAllowCall(flavor, body, _callback);
        return localVarCall;

    }

    /**
     * Check if a request is allowed
     * Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return AuthorizationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationResult doOryAccessControlPoliciesAllow(String flavor, OryAccessControlPolicyAllowedInput body) throws ApiException {
        ApiResponse<AuthorizationResult> localVarResp = doOryAccessControlPoliciesAllowWithHttpInfo(flavor, body);
        return localVarResp.getData();
    }

    /**
     * Check if a request is allowed
     * Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AuthorizationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationResult> doOryAccessControlPoliciesAllowWithHttpInfo(String flavor, OryAccessControlPolicyAllowedInput body) throws ApiException {
        okhttp3.Call localVarCall = doOryAccessControlPoliciesAllowValidateBeforeCall(flavor, body, null);
        Type localVarReturnType = new TypeToken<AuthorizationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a request is allowed (asynchronously)
     * Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> authorizationResult </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doOryAccessControlPoliciesAllowAsync(String flavor, OryAccessControlPolicyAllowedInput body, final ApiCallback<AuthorizationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = doOryAccessControlPoliciesAllowValidateBeforeCall(flavor, body, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOryAccessControlPolicy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOryAccessControlPolicyCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/policies/{id}"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOryAccessControlPolicyValidateBeforeCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling getOryAccessControlPolicy(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOryAccessControlPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = getOryAccessControlPolicyCall(flavor, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return OryAccessControlPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public OryAccessControlPolicy getOryAccessControlPolicy(String flavor, String id) throws ApiException {
        ApiResponse<OryAccessControlPolicy> localVarResp = getOryAccessControlPolicyWithHttpInfo(flavor, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return ApiResponse&lt;OryAccessControlPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OryAccessControlPolicy> getOryAccessControlPolicyWithHttpInfo(String flavor, String id) throws ApiException {
        okhttp3.Call localVarCall = getOryAccessControlPolicyValidateBeforeCall(flavor, id, null);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOryAccessControlPolicyAsync(String flavor, String id, final ApiCallback<OryAccessControlPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOryAccessControlPolicyValidateBeforeCall(flavor, id, _callback);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOryAccessControlPolicyRole
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOryAccessControlPolicyRoleCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles/{id}"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOryAccessControlPolicyRoleValidateBeforeCall(String flavor, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling getOryAccessControlPolicyRole(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOryAccessControlPolicyRole(Async)");
        }
        

        okhttp3.Call localVarCall = getOryAccessControlPolicyRoleCall(flavor, id, _callback);
        return localVarCall;

    }

    /**
     * Get an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return OryAccessControlPolicyRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public OryAccessControlPolicyRole getOryAccessControlPolicyRole(String flavor, String id) throws ApiException {
        ApiResponse<OryAccessControlPolicyRole> localVarResp = getOryAccessControlPolicyRoleWithHttpInfo(flavor, id);
        return localVarResp.getData();
    }

    /**
     * Get an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @return ApiResponse&lt;OryAccessControlPolicyRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OryAccessControlPolicyRole> getOryAccessControlPolicyRoleWithHttpInfo(String flavor, String id) throws ApiException {
        okhttp3.Call localVarCall = getOryAccessControlPolicyRoleValidateBeforeCall(flavor, id, null);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an ORY Access Control Policy Role (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The standard error format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOryAccessControlPolicyRoleAsync(String flavor, String id, final ApiCallback<OryAccessControlPolicyRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOryAccessControlPolicyRoleValidateBeforeCall(flavor, id, _callback);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOryAccessControlPolicies
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param subject The subject for whom the policies are to be listed. (optional)
     * @param resource The resource for which the policies are to be listed. (optional)
     * @param action The action for which policies are to be listed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policies is an array of policies. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOryAccessControlPoliciesCall(String flavor, Long limit, Long offset, String subject, String resource, String action, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/policies"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOryAccessControlPoliciesValidateBeforeCall(String flavor, Long limit, Long offset, String subject, String resource, String action, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling listOryAccessControlPolicies(Async)");
        }
        

        okhttp3.Call localVarCall = listOryAccessControlPoliciesCall(flavor, limit, offset, subject, resource, action, _callback);
        return localVarCall;

    }

    /**
     * 
     * List ORY Access Control Policies
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param subject The subject for whom the policies are to be listed. (optional)
     * @param resource The resource for which the policies are to be listed. (optional)
     * @param action The action for which policies are to be listed. (optional)
     * @return List&lt;OryAccessControlPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policies is an array of policies. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public List<OryAccessControlPolicy> listOryAccessControlPolicies(String flavor, Long limit, Long offset, String subject, String resource, String action) throws ApiException {
        ApiResponse<List<OryAccessControlPolicy>> localVarResp = listOryAccessControlPoliciesWithHttpInfo(flavor, limit, offset, subject, resource, action);
        return localVarResp.getData();
    }

    /**
     * 
     * List ORY Access Control Policies
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param subject The subject for whom the policies are to be listed. (optional)
     * @param resource The resource for which the policies are to be listed. (optional)
     * @param action The action for which policies are to be listed. (optional)
     * @return ApiResponse&lt;List&lt;OryAccessControlPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policies is an array of policies. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OryAccessControlPolicy>> listOryAccessControlPoliciesWithHttpInfo(String flavor, Long limit, Long offset, String subject, String resource, String action) throws ApiException {
        okhttp3.Call localVarCall = listOryAccessControlPoliciesValidateBeforeCall(flavor, limit, offset, subject, resource, action, null);
        Type localVarReturnType = new TypeToken<List<OryAccessControlPolicy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List ORY Access Control Policies
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param subject The subject for whom the policies are to be listed. (optional)
     * @param resource The resource for which the policies are to be listed. (optional)
     * @param action The action for which policies are to be listed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policies is an array of policies. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOryAccessControlPoliciesAsync(String flavor, Long limit, Long offset, String subject, String resource, String action, final ApiCallback<List<OryAccessControlPolicy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOryAccessControlPoliciesValidateBeforeCall(flavor, limit, offset, subject, resource, action, _callback);
        Type localVarReturnType = new TypeToken<List<OryAccessControlPolicy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOryAccessControlPolicyRoles
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param member The member for which the roles are to be listed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles is an array of roles. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOryAccessControlPolicyRolesCall(String flavor, Long limit, Long offset, String member, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOryAccessControlPolicyRolesValidateBeforeCall(String flavor, Long limit, Long offset, String member, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling listOryAccessControlPolicyRoles(Async)");
        }
        

        okhttp3.Call localVarCall = listOryAccessControlPolicyRolesCall(flavor, limit, offset, member, _callback);
        return localVarCall;

    }

    /**
     * List ORY Access Control Policy Roles
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param member The member for which the roles are to be listed. (optional)
     * @return List&lt;OryAccessControlPolicyRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles is an array of roles. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public List<OryAccessControlPolicyRole> listOryAccessControlPolicyRoles(String flavor, Long limit, Long offset, String member) throws ApiException {
        ApiResponse<List<OryAccessControlPolicyRole>> localVarResp = listOryAccessControlPolicyRolesWithHttpInfo(flavor, limit, offset, member);
        return localVarResp.getData();
    }

    /**
     * List ORY Access Control Policy Roles
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param member The member for which the roles are to be listed. (optional)
     * @return ApiResponse&lt;List&lt;OryAccessControlPolicyRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles is an array of roles. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OryAccessControlPolicyRole>> listOryAccessControlPolicyRolesWithHttpInfo(String flavor, Long limit, Long offset, String member) throws ApiException {
        okhttp3.Call localVarCall = listOryAccessControlPolicyRolesValidateBeforeCall(flavor, limit, offset, member, null);
        Type localVarReturnType = new TypeToken<List<OryAccessControlPolicyRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ORY Access Control Policy Roles (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param limit The maximum amount of policies returned. (optional)
     * @param offset The offset from where to start looking. (optional)
     * @param member The member for which the roles are to be listed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles is an array of roles. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOryAccessControlPolicyRolesAsync(String flavor, Long limit, Long offset, String member, final ApiCallback<List<OryAccessControlPolicyRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOryAccessControlPolicyRolesValidateBeforeCall(flavor, limit, offset, member, _callback);
        Type localVarReturnType = new TypeToken<List<OryAccessControlPolicyRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOryAccessControlPolicyRoleMembers
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param member The member to be removed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOryAccessControlPolicyRoleMembersCall(String flavor, String id, String member, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles/{id}/members/{member}"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "member" + "\\}", localVarApiClient.escapeString(member.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOryAccessControlPolicyRoleMembersValidateBeforeCall(String flavor, String id, String member, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling removeOryAccessControlPolicyRoleMembers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeOryAccessControlPolicyRoleMembers(Async)");
        }
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling removeOryAccessControlPolicyRoleMembers(Async)");
        }
        

        okhttp3.Call localVarCall = removeOryAccessControlPolicyRoleMembersCall(flavor, id, member, _callback);
        return localVarCall;

    }

    /**
     * Remove a member from an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param member The member to be removed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public void removeOryAccessControlPolicyRoleMembers(String flavor, String id, String member) throws ApiException {
        removeOryAccessControlPolicyRoleMembersWithHttpInfo(flavor, id, member);
    }

    /**
     * Remove a member from an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param member The member to be removed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeOryAccessControlPolicyRoleMembersWithHttpInfo(String flavor, String id, String member) throws ApiException {
        okhttp3.Call localVarCall = removeOryAccessControlPolicyRoleMembersValidateBeforeCall(flavor, id, member, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a member from an ORY Access Control Policy Role (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param id The ID of the ORY Access Control Policy Role. (required)
     * @param member The member to be removed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An empty response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOryAccessControlPolicyRoleMembersAsync(String flavor, String id, String member, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOryAccessControlPolicyRoleMembersValidateBeforeCall(flavor, id, member, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertOryAccessControlPolicy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertOryAccessControlPolicyCall(String flavor, OryAccessControlPolicy body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/policies"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertOryAccessControlPolicyValidateBeforeCall(String flavor, OryAccessControlPolicy body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling upsertOryAccessControlPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = upsertOryAccessControlPolicyCall(flavor, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upsert an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return OryAccessControlPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public OryAccessControlPolicy upsertOryAccessControlPolicy(String flavor, OryAccessControlPolicy body) throws ApiException {
        ApiResponse<OryAccessControlPolicy> localVarResp = upsertOryAccessControlPolicyWithHttpInfo(flavor, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Upsert an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;OryAccessControlPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OryAccessControlPolicy> upsertOryAccessControlPolicyWithHttpInfo(String flavor, OryAccessControlPolicy body) throws ApiException {
        okhttp3.Call localVarCall = upsertOryAccessControlPolicyValidateBeforeCall(flavor, body, null);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upsert an ORY Access Control Policy
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertOryAccessControlPolicyAsync(String flavor, OryAccessControlPolicy body, final ApiCallback<OryAccessControlPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertOryAccessControlPolicyValidateBeforeCall(flavor, body, _callback);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertOryAccessControlPolicyRole
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertOryAccessControlPolicyRoleCall(String flavor, OryAccessControlPolicyRole body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/engines/acp/ory/{flavor}/roles"
            .replaceAll("\\{" + "flavor" + "\\}", localVarApiClient.escapeString(flavor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertOryAccessControlPolicyRoleValidateBeforeCall(String flavor, OryAccessControlPolicyRole body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'flavor' is set
        if (flavor == null) {
            throw new ApiException("Missing the required parameter 'flavor' when calling upsertOryAccessControlPolicyRole(Async)");
        }
        

        okhttp3.Call localVarCall = upsertOryAccessControlPolicyRoleCall(flavor, body, _callback);
        return localVarCall;

    }

    /**
     * Upsert an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return OryAccessControlPolicyRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public OryAccessControlPolicyRole upsertOryAccessControlPolicyRole(String flavor, OryAccessControlPolicyRole body) throws ApiException {
        ApiResponse<OryAccessControlPolicyRole> localVarResp = upsertOryAccessControlPolicyRoleWithHttpInfo(flavor, body);
        return localVarResp.getData();
    }

    /**
     * Upsert an ORY Access Control Policy Role
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;OryAccessControlPolicyRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OryAccessControlPolicyRole> upsertOryAccessControlPolicyRoleWithHttpInfo(String flavor, OryAccessControlPolicyRole body) throws ApiException {
        okhttp3.Call localVarCall = upsertOryAccessControlPolicyRoleValidateBeforeCall(flavor, body, null);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert an ORY Access Control Policy Role (asynchronously)
     * Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
     * @param flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> oryAccessControlPolicyRole </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The standard error format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertOryAccessControlPolicyRoleAsync(String flavor, OryAccessControlPolicyRole body, final ApiCallback<OryAccessControlPolicyRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertOryAccessControlPolicyRoleValidateBeforeCall(flavor, body, _callback);
        Type localVarReturnType = new TypeToken<OryAccessControlPolicyRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
