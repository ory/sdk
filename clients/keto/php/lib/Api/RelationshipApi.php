<?php
/**
 * RelationshipApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Ory\Keto\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * The version of the OpenAPI document: v0.11.0-alpha.0
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Keto\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ory\Keto\Client\ApiException;
use Ory\Keto\Client\Configuration;
use Ory\Keto\Client\HeaderSelector;
use Ory\Keto\Client\ObjectSerializer;

/**
 * RelationshipApi Class Doc Comment
 *
 * @category Class
 * @package  Ory\Keto\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RelationshipApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkOplSyntax
     *
     * Check the syntax of an OPL file
     *
     * @param  string $body body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\CheckOplSyntaxResult|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric
     */
    public function checkOplSyntax($body = null)
    {
        list($response) = $this->checkOplSyntaxWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation checkOplSyntaxWithHttpInfo
     *
     * Check the syntax of an OPL file
     *
     * @param  string $body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\CheckOplSyntaxResult|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkOplSyntaxWithHttpInfo($body = null)
    {
        $request = $this->checkOplSyntaxRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\CheckOplSyntaxResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\CheckOplSyntaxResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\CheckOplSyntaxResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\CheckOplSyntaxResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkOplSyntaxAsync
     *
     * Check the syntax of an OPL file
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkOplSyntaxAsync($body = null)
    {
        return $this->checkOplSyntaxAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkOplSyntaxAsyncWithHttpInfo
     *
     * Check the syntax of an OPL file
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkOplSyntaxAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Ory\Keto\Client\Model\CheckOplSyntaxResult';
        $request = $this->checkOplSyntaxRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkOplSyntax'
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkOplSyntaxRequest($body = null)
    {

        $resourcePath = '/opl/syntax/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRelationship
     *
     * Create a Relationship
     *
     * @param  \Ory\Keto\Client\Model\CreateRelationshipBody $createRelationshipBody createRelationshipBody (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\Relationship|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric
     */
    public function createRelationship($createRelationshipBody = null)
    {
        list($response) = $this->createRelationshipWithHttpInfo($createRelationshipBody);
        return $response;
    }

    /**
     * Operation createRelationshipWithHttpInfo
     *
     * Create a Relationship
     *
     * @param  \Ory\Keto\Client\Model\CreateRelationshipBody $createRelationshipBody (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\Relationship|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRelationshipWithHttpInfo($createRelationshipBody = null)
    {
        $request = $this->createRelationshipRequest($createRelationshipBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Ory\Keto\Client\Model\Relationship' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\Relationship', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\Relationship';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\Relationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRelationshipAsync
     *
     * Create a Relationship
     *
     * @param  \Ory\Keto\Client\Model\CreateRelationshipBody $createRelationshipBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRelationshipAsync($createRelationshipBody = null)
    {
        return $this->createRelationshipAsyncWithHttpInfo($createRelationshipBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRelationshipAsyncWithHttpInfo
     *
     * Create a Relationship
     *
     * @param  \Ory\Keto\Client\Model\CreateRelationshipBody $createRelationshipBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRelationshipAsyncWithHttpInfo($createRelationshipBody = null)
    {
        $returnType = '\Ory\Keto\Client\Model\Relationship';
        $request = $this->createRelationshipRequest($createRelationshipBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRelationship'
     *
     * @param  \Ory\Keto\Client\Model\CreateRelationshipBody $createRelationshipBody (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRelationshipRequest($createRelationshipBody = null)
    {

        $resourcePath = '/admin/relation-tuples';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createRelationshipBody)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createRelationshipBody));
            } else {
                $httpBody = $createRelationshipBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRelationships
     *
     * Delete Relationships
     *
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRelationships($namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        $this->deleteRelationshipsWithHttpInfo($namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);
    }

    /**
     * Operation deleteRelationshipsWithHttpInfo
     *
     * Delete Relationships
     *
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRelationshipsWithHttpInfo($namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        $request = $this->deleteRelationshipsRequest($namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRelationshipsAsync
     *
     * Delete Relationships
     *
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRelationshipsAsync($namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        return $this->deleteRelationshipsAsyncWithHttpInfo($namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRelationshipsAsyncWithHttpInfo
     *
     * Delete Relationships
     *
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRelationshipsAsyncWithHttpInfo($namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        $returnType = '';
        $request = $this->deleteRelationshipsRequest($namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRelationships'
     *
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRelationshipsRequest($namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {

        $resourcePath = '/admin/relation-tuples';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($namespace !== null) {
            if('form' === 'form' && is_array($namespace)) {
                foreach($namespace as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['namespace'] = $namespace;
            }
        }
        // query params
        if ($object !== null) {
            if('form' === 'form' && is_array($object)) {
                foreach($object as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['object'] = $object;
            }
        }
        // query params
        if ($relation !== null) {
            if('form' === 'form' && is_array($relation)) {
                foreach($relation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['relation'] = $relation;
            }
        }
        // query params
        if ($subjectId !== null) {
            if('form' === 'form' && is_array($subjectId)) {
                foreach($subjectId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_id'] = $subjectId;
            }
        }
        // query params
        if ($subjectSetNamespace !== null) {
            if('form' === 'form' && is_array($subjectSetNamespace)) {
                foreach($subjectSetNamespace as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.namespace'] = $subjectSetNamespace;
            }
        }
        // query params
        if ($subjectSetObject !== null) {
            if('form' === 'form' && is_array($subjectSetObject)) {
                foreach($subjectSetObject as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.object'] = $subjectSetObject;
            }
        }
        // query params
        if ($subjectSetRelation !== null) {
            if('form' === 'form' && is_array($subjectSetRelation)) {
                foreach($subjectSetRelation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.relation'] = $subjectSetRelation;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRelationships
     *
     * Query relationships
     *
     * @param  string $pageToken pageToken (optional)
     * @param  int $pageSize pageSize (optional)
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\Relationships|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric
     */
    public function getRelationships($pageToken = null, $pageSize = null, $namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        list($response) = $this->getRelationshipsWithHttpInfo($pageToken, $pageSize, $namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);
        return $response;
    }

    /**
     * Operation getRelationshipsWithHttpInfo
     *
     * Query relationships
     *
     * @param  string $pageToken (optional)
     * @param  int $pageSize (optional)
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\Relationships|\Ory\Keto\Client\Model\ErrorGeneric|\Ory\Keto\Client\Model\ErrorGeneric, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRelationshipsWithHttpInfo($pageToken = null, $pageSize = null, $namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        $request = $this->getRelationshipsRequest($pageToken, $pageSize, $namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\Relationships' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\Relationships', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\Relationships';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\Relationships',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRelationshipsAsync
     *
     * Query relationships
     *
     * @param  string $pageToken (optional)
     * @param  int $pageSize (optional)
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRelationshipsAsync($pageToken = null, $pageSize = null, $namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        return $this->getRelationshipsAsyncWithHttpInfo($pageToken, $pageSize, $namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRelationshipsAsyncWithHttpInfo
     *
     * Query relationships
     *
     * @param  string $pageToken (optional)
     * @param  int $pageSize (optional)
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRelationshipsAsyncWithHttpInfo($pageToken = null, $pageSize = null, $namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {
        $returnType = '\Ory\Keto\Client\Model\Relationships';
        $request = $this->getRelationshipsRequest($pageToken, $pageSize, $namespace, $object, $relation, $subjectId, $subjectSetNamespace, $subjectSetObject, $subjectSetRelation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRelationships'
     *
     * @param  string $pageToken (optional)
     * @param  int $pageSize (optional)
     * @param  string $namespace Namespace of the Relationship (optional)
     * @param  string $object Object of the Relationship (optional)
     * @param  string $relation Relation of the Relationship (optional)
     * @param  string $subjectId SubjectID of the Relationship (optional)
     * @param  string $subjectSetNamespace Namespace of the Subject Set (optional)
     * @param  string $subjectSetObject Object of the Subject Set (optional)
     * @param  string $subjectSetRelation Relation of the Subject Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRelationshipsRequest($pageToken = null, $pageSize = null, $namespace = null, $object = null, $relation = null, $subjectId = null, $subjectSetNamespace = null, $subjectSetObject = null, $subjectSetRelation = null)
    {

        $resourcePath = '/relation-tuples';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageToken !== null) {
            if('form' === 'form' && is_array($pageToken)) {
                foreach($pageToken as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_token'] = $pageToken;
            }
        }
        // query params
        if ($pageSize !== null) {
            if('form' === 'form' && is_array($pageSize)) {
                foreach($pageSize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $pageSize;
            }
        }
        // query params
        if ($namespace !== null) {
            if('form' === 'form' && is_array($namespace)) {
                foreach($namespace as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['namespace'] = $namespace;
            }
        }
        // query params
        if ($object !== null) {
            if('form' === 'form' && is_array($object)) {
                foreach($object as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['object'] = $object;
            }
        }
        // query params
        if ($relation !== null) {
            if('form' === 'form' && is_array($relation)) {
                foreach($relation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['relation'] = $relation;
            }
        }
        // query params
        if ($subjectId !== null) {
            if('form' === 'form' && is_array($subjectId)) {
                foreach($subjectId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_id'] = $subjectId;
            }
        }
        // query params
        if ($subjectSetNamespace !== null) {
            if('form' === 'form' && is_array($subjectSetNamespace)) {
                foreach($subjectSetNamespace as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.namespace'] = $subjectSetNamespace;
            }
        }
        // query params
        if ($subjectSetObject !== null) {
            if('form' === 'form' && is_array($subjectSetObject)) {
                foreach($subjectSetObject as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.object'] = $subjectSetObject;
            }
        }
        // query params
        if ($subjectSetRelation !== null) {
            if('form' === 'form' && is_array($subjectSetRelation)) {
                foreach($subjectSetRelation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subject_set.relation'] = $subjectSetRelation;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRelationshipNamespaces
     *
     * Query namespaces
     *
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\RelationshipNamespaces|\Ory\Keto\Client\Model\ErrorGeneric
     */
    public function listRelationshipNamespaces()
    {
        list($response) = $this->listRelationshipNamespacesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listRelationshipNamespacesWithHttpInfo
     *
     * Query namespaces
     *
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\RelationshipNamespaces|\Ory\Keto\Client\Model\ErrorGeneric, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRelationshipNamespacesWithHttpInfo()
    {
        $request = $this->listRelationshipNamespacesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\RelationshipNamespaces' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\RelationshipNamespaces', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Ory\Keto\Client\Model\ErrorGeneric' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\ErrorGeneric', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\RelationshipNamespaces';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\RelationshipNamespaces',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRelationshipNamespacesAsync
     *
     * Query namespaces
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRelationshipNamespacesAsync()
    {
        return $this->listRelationshipNamespacesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRelationshipNamespacesAsyncWithHttpInfo
     *
     * Query namespaces
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRelationshipNamespacesAsyncWithHttpInfo()
    {
        $returnType = '\Ory\Keto\Client\Model\RelationshipNamespaces';
        $request = $this->listRelationshipNamespacesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRelationshipNamespaces'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRelationshipNamespacesRequest()
    {

        $resourcePath = '/namespaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRelationships
     *
     * Patch Multiple Relationships
     *
     * @param  \Ory\Keto\Client\Model\RelationshipPatch[] $relationshipPatch relationshipPatch (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchRelationships($relationshipPatch = null)
    {
        $this->patchRelationshipsWithHttpInfo($relationshipPatch);
    }

    /**
     * Operation patchRelationshipsWithHttpInfo
     *
     * Patch Multiple Relationships
     *
     * @param  \Ory\Keto\Client\Model\RelationshipPatch[] $relationshipPatch (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRelationshipsWithHttpInfo($relationshipPatch = null)
    {
        $request = $this->patchRelationshipsRequest($relationshipPatch);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\ErrorGeneric',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchRelationshipsAsync
     *
     * Patch Multiple Relationships
     *
     * @param  \Ory\Keto\Client\Model\RelationshipPatch[] $relationshipPatch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRelationshipsAsync($relationshipPatch = null)
    {
        return $this->patchRelationshipsAsyncWithHttpInfo($relationshipPatch)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRelationshipsAsyncWithHttpInfo
     *
     * Patch Multiple Relationships
     *
     * @param  \Ory\Keto\Client\Model\RelationshipPatch[] $relationshipPatch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRelationshipsAsyncWithHttpInfo($relationshipPatch = null)
    {
        $returnType = '';
        $request = $this->patchRelationshipsRequest($relationshipPatch);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRelationships'
     *
     * @param  \Ory\Keto\Client\Model\RelationshipPatch[] $relationshipPatch (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRelationshipsRequest($relationshipPatch = null)
    {

        $resourcePath = '/admin/relation-tuples';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($relationshipPatch)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($relationshipPatch));
            } else {
                $httpBody = $relationshipPatch;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
