<?php
/**
 * EnginesApi
 * PHP version 5
 *
 * @category Class
 * @package  Ory\Keto\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ORY Keto
 *
 * A cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * The version of the OpenAPI document: v0.0.0-alpha.37
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ory\Keto\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ory\Keto\Client\ApiException;
use Ory\Keto\Client\Configuration;
use Ory\Keto\Client\HeaderSelector;
use Ory\Keto\Client\ObjectSerializer;

/**
 * EnginesApi Class Doc Comment
 *
 * @category Class
 * @package  Ory\Keto\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnginesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembers
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  \Ory\Keto\Client\Model\AddOryAccessControlPolicyRoleMembersBody $body body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function addOryAccessControlPolicyRoleMembers($flavor, $id, $body = null)
    {
        list($response) = $this->addOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $body);
        return $response;
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembersWithHttpInfo
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  \Ory\Keto\Client\Model\AddOryAccessControlPolicyRoleMembersBody $body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $body = null)
    {
        $request = $this->addOryAccessControlPolicyRoleMembersRequest($flavor, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicyRole' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicyRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicyRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembersAsync
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  \Ory\Keto\Client\Model\AddOryAccessControlPolicyRoleMembersBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOryAccessControlPolicyRoleMembersAsync($flavor, $id, $body = null)
    {
        return $this->addOryAccessControlPolicyRoleMembersAsyncWithHttpInfo($flavor, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addOryAccessControlPolicyRoleMembersAsyncWithHttpInfo
     *
     * Add a member to an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  \Ory\Keto\Client\Model\AddOryAccessControlPolicyRoleMembersBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOryAccessControlPolicyRoleMembersAsyncWithHttpInfo($flavor, $id, $body = null)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
        $request = $this->addOryAccessControlPolicyRoleMembersRequest($flavor, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addOryAccessControlPolicyRoleMembers'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  \Ory\Keto\Client\Model\AddOryAccessControlPolicyRoleMembersBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addOryAccessControlPolicyRoleMembersRequest($flavor, $id, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling addOryAccessControlPolicyRoleMembers'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addOryAccessControlPolicyRoleMembers'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles/{id}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOryAccessControlPolicy
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOryAccessControlPolicy($flavor, $id)
    {
        $this->deleteOryAccessControlPolicyWithHttpInfo($flavor, $id);
    }

    /**
     * Operation deleteOryAccessControlPolicyWithHttpInfo
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOryAccessControlPolicyWithHttpInfo($flavor, $id)
    {
        $request = $this->deleteOryAccessControlPolicyRequest($flavor, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOryAccessControlPolicyAsync
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOryAccessControlPolicyAsync($flavor, $id)
    {
        return $this->deleteOryAccessControlPolicyAsyncWithHttpInfo($flavor, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOryAccessControlPolicyAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOryAccessControlPolicyAsyncWithHttpInfo($flavor, $id)
    {
        $returnType = '';
        $request = $this->deleteOryAccessControlPolicyRequest($flavor, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOryAccessControlPolicy'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOryAccessControlPolicyRequest($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling deleteOryAccessControlPolicy'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOryAccessControlPolicy'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/policies/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOryAccessControlPolicyRole
     *
     * Delete an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOryAccessControlPolicyRole($flavor, $id)
    {
        $this->deleteOryAccessControlPolicyRoleWithHttpInfo($flavor, $id);
    }

    /**
     * Operation deleteOryAccessControlPolicyRoleWithHttpInfo
     *
     * Delete an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOryAccessControlPolicyRoleWithHttpInfo($flavor, $id)
    {
        $request = $this->deleteOryAccessControlPolicyRoleRequest($flavor, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOryAccessControlPolicyRoleAsync
     *
     * Delete an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOryAccessControlPolicyRoleAsync($flavor, $id)
    {
        return $this->deleteOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOryAccessControlPolicyRoleAsyncWithHttpInfo
     *
     * Delete an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $id)
    {
        $returnType = '';
        $request = $this->deleteOryAccessControlPolicyRoleRequest($flavor, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOryAccessControlPolicyRole'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOryAccessControlPolicyRoleRequest($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling deleteOryAccessControlPolicyRole'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOryAccessControlPolicyRole'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation doOryAccessControlPoliciesAllow
     *
     * Check if a request is allowed
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyAllowedInput $body body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\AuthorizationResult|\Ory\Keto\Client\Model\AuthorizationResult|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function doOryAccessControlPoliciesAllow($flavor, $body = null)
    {
        list($response) = $this->doOryAccessControlPoliciesAllowWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation doOryAccessControlPoliciesAllowWithHttpInfo
     *
     * Check if a request is allowed
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyAllowedInput $body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\AuthorizationResult|\Ory\Keto\Client\Model\AuthorizationResult|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function doOryAccessControlPoliciesAllowWithHttpInfo($flavor, $body = null)
    {
        $request = $this->doOryAccessControlPoliciesAllowRequest($flavor, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\AuthorizationResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\AuthorizationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ory\Keto\Client\Model\AuthorizationResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\AuthorizationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\AuthorizationResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\AuthorizationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\AuthorizationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation doOryAccessControlPoliciesAllowAsync
     *
     * Check if a request is allowed
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyAllowedInput $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function doOryAccessControlPoliciesAllowAsync($flavor, $body = null)
    {
        return $this->doOryAccessControlPoliciesAllowAsyncWithHttpInfo($flavor, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation doOryAccessControlPoliciesAllowAsyncWithHttpInfo
     *
     * Check if a request is allowed
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyAllowedInput $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function doOryAccessControlPoliciesAllowAsyncWithHttpInfo($flavor, $body = null)
    {
        $returnType = '\Ory\Keto\Client\Model\AuthorizationResult';
        $request = $this->doOryAccessControlPoliciesAllowRequest($flavor, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'doOryAccessControlPoliciesAllow'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyAllowedInput $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function doOryAccessControlPoliciesAllowRequest($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling doOryAccessControlPoliciesAllow'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/allowed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOryAccessControlPolicy
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicy|\Ory\Keto\Client\Model\InlineResponse500|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function getOryAccessControlPolicy($flavor, $id)
    {
        list($response) = $this->getOryAccessControlPolicyWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation getOryAccessControlPolicyWithHttpInfo
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicy|\Ory\Keto\Client\Model\InlineResponse500|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOryAccessControlPolicyWithHttpInfo($flavor, $id)
    {
        $request = $this->getOryAccessControlPolicyRequest($flavor, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicy' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicy', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOryAccessControlPolicyAsync
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOryAccessControlPolicyAsync($flavor, $id)
    {
        return $this->getOryAccessControlPolicyAsyncWithHttpInfo($flavor, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOryAccessControlPolicyAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOryAccessControlPolicyAsyncWithHttpInfo($flavor, $id)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy';
        $request = $this->getOryAccessControlPolicyRequest($flavor, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOryAccessControlPolicy'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOryAccessControlPolicyRequest($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling getOryAccessControlPolicy'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOryAccessControlPolicy'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/policies/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOryAccessControlPolicyRole
     *
     * Get an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function getOryAccessControlPolicyRole($flavor, $id)
    {
        list($response) = $this->getOryAccessControlPolicyRoleWithHttpInfo($flavor, $id);
        return $response;
    }

    /**
     * Operation getOryAccessControlPolicyRoleWithHttpInfo
     *
     * Get an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOryAccessControlPolicyRoleWithHttpInfo($flavor, $id)
    {
        $request = $this->getOryAccessControlPolicyRoleRequest($flavor, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicyRole' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicyRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicyRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOryAccessControlPolicyRoleAsync
     *
     * Get an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOryAccessControlPolicyRoleAsync($flavor, $id)
    {
        return $this->getOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOryAccessControlPolicyRoleAsyncWithHttpInfo
     *
     * Get an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $id)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
        $request = $this->getOryAccessControlPolicyRoleRequest($flavor, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOryAccessControlPolicyRole'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOryAccessControlPolicyRoleRequest($flavor, $id)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling getOryAccessControlPolicyRole'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOryAccessControlPolicyRole'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOryAccessControlPolicies
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $subject The subject for whom the policies are to be listed. (optional)
     * @param  string $resource The resource for which the policies are to be listed. (optional)
     * @param  string $action The action for which policies are to be listed. (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicy[]|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function listOryAccessControlPolicies($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        list($response) = $this->listOryAccessControlPoliciesWithHttpInfo($flavor, $limit, $offset, $subject, $resource, $action);
        return $response;
    }

    /**
     * Operation listOryAccessControlPoliciesWithHttpInfo
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $subject The subject for whom the policies are to be listed. (optional)
     * @param  string $resource The resource for which the policies are to be listed. (optional)
     * @param  string $action The action for which policies are to be listed. (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicy[]|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOryAccessControlPoliciesWithHttpInfo($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        $request = $this->listOryAccessControlPoliciesRequest($flavor, $limit, $offset, $subject, $resource, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicy[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicy[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicy[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOryAccessControlPoliciesAsync
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $subject The subject for whom the policies are to be listed. (optional)
     * @param  string $resource The resource for which the policies are to be listed. (optional)
     * @param  string $action The action for which policies are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOryAccessControlPoliciesAsync($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        return $this->listOryAccessControlPoliciesAsyncWithHttpInfo($flavor, $limit, $offset, $subject, $resource, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOryAccessControlPoliciesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $subject The subject for whom the policies are to be listed. (optional)
     * @param  string $resource The resource for which the policies are to be listed. (optional)
     * @param  string $action The action for which policies are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOryAccessControlPoliciesAsyncWithHttpInfo($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy[]';
        $request = $this->listOryAccessControlPoliciesRequest($flavor, $limit, $offset, $subject, $resource, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOryAccessControlPolicies'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $subject The subject for whom the policies are to be listed. (optional)
     * @param  string $resource The resource for which the policies are to be listed. (optional)
     * @param  string $action The action for which policies are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listOryAccessControlPoliciesRequest($flavor, $limit = null, $offset = null, $subject = null, $resource = null, $action = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling listOryAccessControlPolicies'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = ObjectSerializer::toQueryValue($subject);
        }
        // query params
        if ($resource !== null) {
            $queryParams['resource'] = ObjectSerializer::toQueryValue($resource);
        }
        // query params
        if ($action !== null) {
            $queryParams['action'] = ObjectSerializer::toQueryValue($action);
        }

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOryAccessControlPolicyRoles
     *
     * List ORY Access Control Policy Roles
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $member The member for which the roles are to be listed. (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicyRole[]|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function listOryAccessControlPolicyRoles($flavor, $limit = null, $offset = null, $member = null)
    {
        list($response) = $this->listOryAccessControlPolicyRolesWithHttpInfo($flavor, $limit, $offset, $member);
        return $response;
    }

    /**
     * Operation listOryAccessControlPolicyRolesWithHttpInfo
     *
     * List ORY Access Control Policy Roles
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $member The member for which the roles are to be listed. (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicyRole[]|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOryAccessControlPolicyRolesWithHttpInfo($flavor, $limit = null, $offset = null, $member = null)
    {
        $request = $this->listOryAccessControlPolicyRolesRequest($flavor, $limit, $offset, $member);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicyRole[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicyRole[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicyRole[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOryAccessControlPolicyRolesAsync
     *
     * List ORY Access Control Policy Roles
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $member The member for which the roles are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOryAccessControlPolicyRolesAsync($flavor, $limit = null, $offset = null, $member = null)
    {
        return $this->listOryAccessControlPolicyRolesAsyncWithHttpInfo($flavor, $limit, $offset, $member)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOryAccessControlPolicyRolesAsyncWithHttpInfo
     *
     * List ORY Access Control Policy Roles
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $member The member for which the roles are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOryAccessControlPolicyRolesAsyncWithHttpInfo($flavor, $limit = null, $offset = null, $member = null)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole[]';
        $request = $this->listOryAccessControlPolicyRolesRequest($flavor, $limit, $offset, $member);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOryAccessControlPolicyRoles'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot; (required)
     * @param  int $limit The maximum amount of policies returned. (optional)
     * @param  int $offset The offset from where to start looking. (optional)
     * @param  string $member The member for which the roles are to be listed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listOryAccessControlPolicyRolesRequest($flavor, $limit = null, $offset = null, $member = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling listOryAccessControlPolicyRoles'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($member !== null) {
            $queryParams['member'] = ObjectSerializer::toQueryValue($member);
        }

        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembers
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  string $member The member to be removed. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeOryAccessControlPolicyRoleMembers($flavor, $id, $member)
    {
        $this->removeOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $member);
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembersWithHttpInfo
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  string $member The member to be removed. (required)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeOryAccessControlPolicyRoleMembersWithHttpInfo($flavor, $id, $member)
    {
        $request = $this->removeOryAccessControlPolicyRoleMembersRequest($flavor, $id, $member);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembersAsync
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  string $member The member to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeOryAccessControlPolicyRoleMembersAsync($flavor, $id, $member)
    {
        return $this->removeOryAccessControlPolicyRoleMembersAsyncWithHttpInfo($flavor, $id, $member)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeOryAccessControlPolicyRoleMembersAsyncWithHttpInfo
     *
     * Remove a member from an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  string $member The member to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeOryAccessControlPolicyRoleMembersAsyncWithHttpInfo($flavor, $id, $member)
    {
        $returnType = '';
        $request = $this->removeOryAccessControlPolicyRoleMembersRequest($flavor, $id, $member);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeOryAccessControlPolicyRoleMembers'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  string $id The ID of the ORY Access Control Policy Role. (required)
     * @param  string $member The member to be removed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeOryAccessControlPolicyRoleMembersRequest($flavor, $id, $member)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling removeOryAccessControlPolicyRoleMembers'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeOryAccessControlPolicyRoleMembers'
            );
        }
        // verify the required parameter 'member' is set
        if ($member === null || (is_array($member) && count($member) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member when calling removeOryAccessControlPolicyRoleMembers'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles/{id}/members/{member}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($member !== null) {
            $resourcePath = str_replace(
                '{' . 'member' . '}',
                ObjectSerializer::toPathValue($member),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOryAccessControlPolicy
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicy $body body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicy|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function upsertOryAccessControlPolicy($flavor, $body = null)
    {
        list($response) = $this->upsertOryAccessControlPolicyWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation upsertOryAccessControlPolicyWithHttpInfo
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicy $body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicy|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOryAccessControlPolicyWithHttpInfo($flavor, $body = null)
    {
        $request = $this->upsertOryAccessControlPolicyRequest($flavor, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicy' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicy', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOryAccessControlPolicyAsync
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicy $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOryAccessControlPolicyAsync($flavor, $body = null)
    {
        return $this->upsertOryAccessControlPolicyAsyncWithHttpInfo($flavor, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOryAccessControlPolicyAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicy $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOryAccessControlPolicyAsyncWithHttpInfo($flavor, $body = null)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicy';
        $request = $this->upsertOryAccessControlPolicyRequest($flavor, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOryAccessControlPolicy'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicy $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsertOryAccessControlPolicyRequest($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling upsertOryAccessControlPolicy'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertOryAccessControlPolicyRole
     *
     * Upsert an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyRole $body body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500
     */
    public function upsertOryAccessControlPolicyRole($flavor, $body = null)
    {
        list($response) = $this->upsertOryAccessControlPolicyRoleWithHttpInfo($flavor, $body);
        return $response;
    }

    /**
     * Operation upsertOryAccessControlPolicyRoleWithHttpInfo
     *
     * Upsert an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyRole $body (optional)
     *
     * @throws \Ory\Keto\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ory\Keto\Client\Model\OryAccessControlPolicyRole|\Ory\Keto\Client\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertOryAccessControlPolicyRoleWithHttpInfo($flavor, $body = null)
    {
        $request = $this->upsertOryAccessControlPolicyRoleRequest($flavor, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Ory\Keto\Client\Model\OryAccessControlPolicyRole' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\OryAccessControlPolicyRole', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ory\Keto\Client\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ory\Keto\Client\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\OryAccessControlPolicyRole',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ory\Keto\Client\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertOryAccessControlPolicyRoleAsync
     *
     * Upsert an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyRole $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOryAccessControlPolicyRoleAsync($flavor, $body = null)
    {
        return $this->upsertOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upsertOryAccessControlPolicyRoleAsyncWithHttpInfo
     *
     * Upsert an ORY Access Control Policy Role
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyRole $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertOryAccessControlPolicyRoleAsyncWithHttpInfo($flavor, $body = null)
    {
        $returnType = '\Ory\Keto\Client\Model\OryAccessControlPolicyRole';
        $request = $this->upsertOryAccessControlPolicyRoleRequest($flavor, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertOryAccessControlPolicyRole'
     *
     * @param  string $flavor The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;. (required)
     * @param  \Ory\Keto\Client\Model\OryAccessControlPolicyRole $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsertOryAccessControlPolicyRoleRequest($flavor, $body = null)
    {
        // verify the required parameter 'flavor' is set
        if ($flavor === null || (is_array($flavor) && count($flavor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flavor when calling upsertOryAccessControlPolicyRole'
            );
        }

        $resourcePath = '/engines/acp/ory/{flavor}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flavor !== null) {
            $resourcePath = str_replace(
                '{' . 'flavor' . '}',
                ObjectSerializer::toPathValue($flavor),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
