/*
 * ORY Keto
 *
 * A cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * The version of the OpenAPI document: v0.0.0
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Keto.Client.Client.OpenAPIDateConverter;

namespace Ory.Keto.Client.Model
{
    /// <summary>
    /// ListOryAccessControlPolicyRoles list ory access control policy roles
    /// </summary>
    [DataContract(Name = "listOryAccessControlPolicyRoles")]
    public partial class KetoListOryAccessControlPolicyRoles : IEquatable<KetoListOryAccessControlPolicyRoles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoListOryAccessControlPolicyRoles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KetoListOryAccessControlPolicyRoles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoListOryAccessControlPolicyRoles" /> class.
        /// </summary>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;  in: path (required).</param>
        /// <param name="limit">The maximum amount of policies returned.  in: query.</param>
        /// <param name="offset">The offset from where to start looking.  in: query.</param>
        public KetoListOryAccessControlPolicyRoles(string flavor = default(string), long limit = default(long), long offset = default(long))
        {
            // to ensure "flavor" is required (not null)
            this.Flavor = flavor ?? throw new ArgumentNullException("flavor is a required property for KetoListOryAccessControlPolicyRoles and cannot be null");
            this.Limit = limit;
            this.Offset = offset;
        }

        /// <summary>
        /// The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;  in: path
        /// </summary>
        /// <value>The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;  in: path</value>
        [DataMember(Name = "flavor", IsRequired = true, EmitDefaultValue = false)]
        public string Flavor { get; set; }

        /// <summary>
        /// The maximum amount of policies returned.  in: query
        /// </summary>
        /// <value>The maximum amount of policies returned.  in: query</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long Limit { get; set; }

        /// <summary>
        /// The offset from where to start looking.  in: query
        /// </summary>
        /// <value>The offset from where to start looking.  in: query</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public long Offset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KetoListOryAccessControlPolicyRoles {\n");
            sb.Append("  Flavor: ").Append(Flavor).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KetoListOryAccessControlPolicyRoles);
        }

        /// <summary>
        /// Returns true if KetoListOryAccessControlPolicyRoles instances are equal
        /// </summary>
        /// <param name="input">Instance of KetoListOryAccessControlPolicyRoles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KetoListOryAccessControlPolicyRoles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Flavor == input.Flavor ||
                    (this.Flavor != null &&
                    this.Flavor.Equals(input.Flavor))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Flavor != null)
                    hashCode = hashCode * 59 + this.Flavor.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                hashCode = hashCode * 59 + this.Offset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
