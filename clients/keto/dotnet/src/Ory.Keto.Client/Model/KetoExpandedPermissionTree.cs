/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately. 
 *
 * The version of the OpenAPI document: v0.11.0-alpha.0
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Keto.Client.Client.OpenAPIDateConverter;

namespace Ory.Keto.Client.Model
{
    /// <summary>
    /// KetoExpandedPermissionTree
    /// </summary>
    [DataContract(Name = "expandedPermissionTree")]
    public partial class KetoExpandedPermissionTree : IEquatable<KetoExpandedPermissionTree>, IValidatableObject
    {
        /// <summary>
        /// The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
        /// </summary>
        /// <value>The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Union for value: union
            /// </summary>
            [EnumMember(Value = "union")]
            Union = 1,

            /// <summary>
            /// Enum Exclusion for value: exclusion
            /// </summary>
            [EnumMember(Value = "exclusion")]
            Exclusion = 2,

            /// <summary>
            /// Enum Intersection for value: intersection
            /// </summary>
            [EnumMember(Value = "intersection")]
            Intersection = 3,

            /// <summary>
            /// Enum Leaf for value: leaf
            /// </summary>
            [EnumMember(Value = "leaf")]
            Leaf = 4,

            /// <summary>
            /// Enum TupleToSubjectSet for value: tuple_to_subject_set
            /// </summary>
            [EnumMember(Value = "tuple_to_subject_set")]
            TupleToSubjectSet = 5,

            /// <summary>
            /// Enum ComputedSubjectSet for value: computed_subject_set
            /// </summary>
            [EnumMember(Value = "computed_subject_set")]
            ComputedSubjectSet = 6,

            /// <summary>
            /// Enum Not for value: not
            /// </summary>
            [EnumMember(Value = "not")]
            Not = 7,

            /// <summary>
            /// Enum Unspecified for value: unspecified
            /// </summary>
            [EnumMember(Value = "unspecified")]
            Unspecified = 8

        }


        /// <summary>
        /// The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified
        /// </summary>
        /// <value>The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoExpandedPermissionTree" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KetoExpandedPermissionTree()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoExpandedPermissionTree" /> class.
        /// </summary>
        /// <param name="children">The children of the node, possibly none..</param>
        /// <param name="tuple">tuple.</param>
        /// <param name="type">The type of the node. union TreeNodeUnion exclusion TreeNodeExclusion intersection TreeNodeIntersection leaf TreeNodeLeaf tuple_to_subject_set TreeNodeTupleToSubjectSet computed_subject_set TreeNodeComputedSubjectSet not TreeNodeNot unspecified TreeNodeUnspecified (required).</param>
        public KetoExpandedPermissionTree(List<KetoExpandedPermissionTree> children = default(List<KetoExpandedPermissionTree>), KetoRelationship tuple = default(KetoRelationship), TypeEnum type = default(TypeEnum))
        {
            this.Type = type;
            this.Children = children;
            this.Tuple = tuple;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The children of the node, possibly none.
        /// </summary>
        /// <value>The children of the node, possibly none.</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<KetoExpandedPermissionTree> Children { get; set; }

        /// <summary>
        /// Gets or Sets Tuple
        /// </summary>
        [DataMember(Name = "tuple", EmitDefaultValue = false)]
        public KetoRelationship Tuple { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KetoExpandedPermissionTree {\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Tuple: ").Append(Tuple).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KetoExpandedPermissionTree);
        }

        /// <summary>
        /// Returns true if KetoExpandedPermissionTree instances are equal
        /// </summary>
        /// <param name="input">Instance of KetoExpandedPermissionTree to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KetoExpandedPermissionTree input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Tuple == input.Tuple ||
                    (this.Tuple != null &&
                    this.Tuple.Equals(input.Tuple))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                if (this.Tuple != null)
                {
                    hashCode = (hashCode * 59) + this.Tuple.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
