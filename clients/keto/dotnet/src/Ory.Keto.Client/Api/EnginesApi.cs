/*
 * ORY Keto
 *
 * Ory Keto is a cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * The version of the OpenAPI document: v0.0.0-alpha.55
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Keto.Client.Client;
using Ory.Keto.Client.Model;

namespace Ory.Keto.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnginesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a member to an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        KetoOryAccessControlPolicyRole AddOryAccessControlPolicyRoleMembers(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody));

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        ApiResponse<KetoOryAccessControlPolicyRole> AddOryAccessControlPolicyRoleMembersWithHttpInfo(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns></returns>
        void DeleteOryAccessControlPolicy(string flavor, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOryAccessControlPolicyWithHttpInfo(string flavor, string id);
        /// <summary>
        /// Delete an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns></returns>
        void DeleteOryAccessControlPolicyRole(string flavor, string id);

        /// <summary>
        /// Delete an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOryAccessControlPolicyRoleWithHttpInfo(string flavor, string id);
        /// <summary>
        /// Check if a request is allowed
        /// </summary>
        /// <remarks>
        /// Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoAuthorizationResult</returns>
        KetoAuthorizationResult DoOryAccessControlPoliciesAllow(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput));

        /// <summary>
        /// Check if a request is allowed
        /// </summary>
        /// <remarks>
        /// Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoAuthorizationResult</returns>
        ApiResponse<KetoAuthorizationResult> DoOryAccessControlPoliciesAllowWithHttpInfo(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>KetoOryAccessControlPolicy</returns>
        KetoOryAccessControlPolicy GetOryAccessControlPolicy(string flavor, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicy</returns>
        ApiResponse<KetoOryAccessControlPolicy> GetOryAccessControlPolicyWithHttpInfo(string flavor, string id);
        /// <summary>
        /// Get an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        KetoOryAccessControlPolicyRole GetOryAccessControlPolicyRole(string flavor, string id);

        /// <summary>
        /// Get an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        ApiResponse<KetoOryAccessControlPolicyRole> GetOryAccessControlPolicyRoleWithHttpInfo(string flavor, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List ORY Access Control Policies
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <returns>List&lt;KetoOryAccessControlPolicy&gt;</returns>
        List<KetoOryAccessControlPolicy> ListOryAccessControlPolicies(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List ORY Access Control Policies
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <returns>ApiResponse of List&lt;KetoOryAccessControlPolicy&gt;</returns>
        ApiResponse<List<KetoOryAccessControlPolicy>> ListOryAccessControlPoliciesWithHttpInfo(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string));
        /// <summary>
        /// List ORY Access Control Policy Roles
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <returns>List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        List<KetoOryAccessControlPolicyRole> ListOryAccessControlPolicyRoles(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string));

        /// <summary>
        /// List ORY Access Control Policy Roles
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <returns>ApiResponse of List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        ApiResponse<List<KetoOryAccessControlPolicyRole>> ListOryAccessControlPolicyRolesWithHttpInfo(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string));
        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <returns></returns>
        void RemoveOryAccessControlPolicyRoleMembers(string flavor, string id, string member);

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveOryAccessControlPolicyRoleMembersWithHttpInfo(string flavor, string id, string member);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upsert an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicy</returns>
        KetoOryAccessControlPolicy UpsertOryAccessControlPolicy(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upsert an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicy</returns>
        ApiResponse<KetoOryAccessControlPolicy> UpsertOryAccessControlPolicyWithHttpInfo(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy));
        /// <summary>
        /// Upsert an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        KetoOryAccessControlPolicyRole UpsertOryAccessControlPolicyRole(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole));

        /// <summary>
        /// Upsert an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        ApiResponse<KetoOryAccessControlPolicyRole> UpsertOryAccessControlPolicyRoleWithHttpInfo(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnginesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a member to an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> AddOryAccessControlPolicyRoleMembersAsync(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoOryAccessControlPolicyRole>> AddOryAccessControlPolicyRoleMembersWithHttpInfoAsync(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOryAccessControlPolicyAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOryAccessControlPolicyWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOryAccessControlPolicyRoleAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if a request is allowed
        /// </summary>
        /// <remarks>
        /// Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoAuthorizationResult</returns>
        System.Threading.Tasks.Task<KetoAuthorizationResult> DoOryAccessControlPoliciesAllowAsync(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if a request is allowed
        /// </summary>
        /// <remarks>
        /// Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoAuthorizationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoAuthorizationResult>> DoOryAccessControlPoliciesAllowWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicy</returns>
        System.Threading.Tasks.Task<KetoOryAccessControlPolicy> GetOryAccessControlPolicyAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoOryAccessControlPolicy>> GetOryAccessControlPolicyWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> GetOryAccessControlPolicyRoleAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoOryAccessControlPolicyRole>> GetOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List ORY Access Control Policies
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KetoOryAccessControlPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<KetoOryAccessControlPolicy>> ListOryAccessControlPoliciesAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// List ORY Access Control Policies
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KetoOryAccessControlPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KetoOryAccessControlPolicy>>> ListOryAccessControlPoliciesWithHttpInfoAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List ORY Access Control Policy Roles
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        System.Threading.Tasks.Task<List<KetoOryAccessControlPolicyRole>> ListOryAccessControlPolicyRolesAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List ORY Access Control Policy Roles
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KetoOryAccessControlPolicyRole&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KetoOryAccessControlPolicyRole>>> ListOryAccessControlPolicyRolesWithHttpInfoAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveOryAccessControlPolicyRoleMembersAsync(string flavor, string id, string member, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveOryAccessControlPolicyRoleMembersWithHttpInfoAsync(string flavor, string id, string member, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upsert an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicy</returns>
        System.Threading.Tasks.Task<KetoOryAccessControlPolicy> UpsertOryAccessControlPolicyAsync(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upsert an ORY Access Control Policy
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoOryAccessControlPolicy>> UpsertOryAccessControlPolicyWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upsert an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> UpsertOryAccessControlPolicyRoleAsync(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upsert an ORY Access Control Policy Role
        /// </summary>
        /// <remarks>
        /// Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoOryAccessControlPolicyRole>> UpsertOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnginesApi : IEnginesApiSync, IEnginesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnginesApi : IEnginesApi
    {
        private Ory.Keto.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnginesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnginesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnginesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnginesApi(String basePath)
        {
            this.Configuration = Ory.Keto.Client.Client.Configuration.MergeConfigurations(
                Ory.Keto.Client.Client.GlobalConfiguration.Instance,
                new Ory.Keto.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnginesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnginesApi(Ory.Keto.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Keto.Client.Client.Configuration.MergeConfigurations(
                Ory.Keto.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnginesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EnginesApi(Ory.Keto.Client.Client.ISynchronousClient client, Ory.Keto.Client.Client.IAsynchronousClient asyncClient, Ory.Keto.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Keto.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Keto.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Keto.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Keto.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        public KetoOryAccessControlPolicyRole AddOryAccessControlPolicyRoleMembers(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = AddOryAccessControlPolicyRoleMembersWithHttpInfo(flavor, id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> AddOryAccessControlPolicyRoleMembersWithHttpInfo(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->AddOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->AddOryAccessControlPolicyRoleMembers");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles/{id}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOryAccessControlPolicyRoleMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        public async System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> AddOryAccessControlPolicyRoleMembersAsync(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = await AddOryAccessControlPolicyRoleMembersWithHttpInfoAsync(flavor, id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole>> AddOryAccessControlPolicyRoleMembersWithHttpInfoAsync(string flavor, string id, KetoAddOryAccessControlPolicyRoleMembersBody body = default(KetoAddOryAccessControlPolicyRoleMembersBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->AddOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->AddOryAccessControlPolicyRoleMembers");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles/{id}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddOryAccessControlPolicyRoleMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns></returns>
        public void DeleteOryAccessControlPolicy(string flavor, string id)
        {
            DeleteOryAccessControlPolicyWithHttpInfo(flavor, id);
        }

        /// <summary>
        ///  Delete an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Keto.Client.Client.ApiResponse<Object> DeleteOryAccessControlPolicyWithHttpInfo(string flavor, string id)
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DeleteOryAccessControlPolicy");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->DeleteOryAccessControlPolicy");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/engines/acp/ory/{flavor}/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOryAccessControlPolicyAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOryAccessControlPolicyWithHttpInfoAsync(flavor, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<Object>> DeleteOryAccessControlPolicyWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DeleteOryAccessControlPolicy");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->DeleteOryAccessControlPolicy");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/engines/acp/ory/{flavor}/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns></returns>
        public void DeleteOryAccessControlPolicyRole(string flavor, string id)
        {
            DeleteOryAccessControlPolicyRoleWithHttpInfo(flavor, id);
        }

        /// <summary>
        /// Delete an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Keto.Client.Client.ApiResponse<Object> DeleteOryAccessControlPolicyRoleWithHttpInfo(string flavor, string id)
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DeleteOryAccessControlPolicyRole");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->DeleteOryAccessControlPolicyRole");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/engines/acp/ory/{flavor}/roles/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOryAccessControlPolicyRoleAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOryAccessControlPolicyRoleWithHttpInfoAsync(flavor, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<Object>> DeleteOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DeleteOryAccessControlPolicyRole");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->DeleteOryAccessControlPolicyRole");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/engines/acp/ory/{flavor}/roles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a request is allowed Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoAuthorizationResult</returns>
        public KetoAuthorizationResult DoOryAccessControlPoliciesAllow(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoAuthorizationResult> localVarResponse = DoOryAccessControlPoliciesAllowWithHttpInfo(flavor, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a request is allowed Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoAuthorizationResult</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoAuthorizationResult> DoOryAccessControlPoliciesAllowWithHttpInfo(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DoOryAccessControlPoliciesAllow");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KetoAuthorizationResult>("/engines/acp/ory/{flavor}/allowed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DoOryAccessControlPoliciesAllow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a request is allowed Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoAuthorizationResult</returns>
        public async System.Threading.Tasks.Task<KetoAuthorizationResult> DoOryAccessControlPoliciesAllowAsync(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoAuthorizationResult> localVarResponse = await DoOryAccessControlPoliciesAllowWithHttpInfoAsync(flavor, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a request is allowed Use this endpoint to check if a request is allowed or not. If the request is allowed, a 200 response with &#x60;{\&quot;allowed\&quot;:\&quot;true\&quot;}&#x60; will be sent. If the request is denied, a 403 response with &#x60;{\&quot;allowed\&quot;:\&quot;false\&quot;}&#x60; will be sent instead.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoAuthorizationResult)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoAuthorizationResult>> DoOryAccessControlPoliciesAllowWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicyAllowedInput body = default(KetoOryAccessControlPolicyAllowedInput), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->DoOryAccessControlPoliciesAllow");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<KetoAuthorizationResult>("/engines/acp/ory/{flavor}/allowed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DoOryAccessControlPoliciesAllow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>KetoOryAccessControlPolicy</returns>
        public KetoOryAccessControlPolicy GetOryAccessControlPolicy(string flavor, string id)
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> localVarResponse = GetOryAccessControlPolicyWithHttpInfo(flavor, id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicy</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> GetOryAccessControlPolicyWithHttpInfo(string flavor, string id)
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->GetOryAccessControlPolicy");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->GetOryAccessControlPolicy");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<KetoOryAccessControlPolicy>("/engines/acp/ory/{flavor}/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicy</returns>
        public async System.Threading.Tasks.Task<KetoOryAccessControlPolicy> GetOryAccessControlPolicyAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> localVarResponse = await GetOryAccessControlPolicyWithHttpInfoAsync(flavor, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicy)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy>> GetOryAccessControlPolicyWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->GetOryAccessControlPolicy");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->GetOryAccessControlPolicy");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KetoOryAccessControlPolicy>("/engines/acp/ory/{flavor}/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        public KetoOryAccessControlPolicyRole GetOryAccessControlPolicyRole(string flavor, string id)
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = GetOryAccessControlPolicyRoleWithHttpInfo(flavor, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> GetOryAccessControlPolicyRoleWithHttpInfo(string flavor, string id)
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->GetOryAccessControlPolicyRole");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->GetOryAccessControlPolicyRole");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        public async System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> GetOryAccessControlPolicyRoleAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = await GetOryAccessControlPolicyRoleWithHttpInfoAsync(flavor, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole>> GetOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->GetOryAccessControlPolicyRole");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->GetOryAccessControlPolicyRole");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List ORY Access Control Policies
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <returns>List&lt;KetoOryAccessControlPolicy&gt;</returns>
        public List<KetoOryAccessControlPolicy> ListOryAccessControlPolicies(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string))
        {
            Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicy>> localVarResponse = ListOryAccessControlPoliciesWithHttpInfo(flavor, limit, offset, subject, resource, action);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List ORY Access Control Policies
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <returns>ApiResponse of List&lt;KetoOryAccessControlPolicy&gt;</returns>
        public Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicy>> ListOryAccessControlPoliciesWithHttpInfo(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->ListOryAccessControlPolicies");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (resource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "resource", resource));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<KetoOryAccessControlPolicy>>("/engines/acp/ory/{flavor}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOryAccessControlPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  List ORY Access Control Policies
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KetoOryAccessControlPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<KetoOryAccessControlPolicy>> ListOryAccessControlPoliciesAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicy>> localVarResponse = await ListOryAccessControlPoliciesWithHttpInfoAsync(flavor, limit, offset, subject, resource, action, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  List ORY Access Control Policies
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="subject">The subject for whom the policies are to be listed. (optional)</param>
        /// <param name="resource">The resource for which the policies are to be listed. (optional)</param>
        /// <param name="action">The action for which policies are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KetoOryAccessControlPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicy>>> ListOryAccessControlPoliciesWithHttpInfoAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string subject = default(string), string resource = default(string), string action = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->ListOryAccessControlPolicies");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (subject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject", subject));
            }
            if (resource != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "resource", resource));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<KetoOryAccessControlPolicy>>("/engines/acp/ory/{flavor}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOryAccessControlPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List ORY Access Control Policy Roles Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <returns>List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        public List<KetoOryAccessControlPolicyRole> ListOryAccessControlPolicyRoles(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string))
        {
            Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicyRole>> localVarResponse = ListOryAccessControlPolicyRolesWithHttpInfo(flavor, limit, offset, member);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List ORY Access Control Policy Roles Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <returns>ApiResponse of List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        public Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicyRole>> ListOryAccessControlPolicyRolesWithHttpInfo(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->ListOryAccessControlPolicyRoles");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (member != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "member", member));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<KetoOryAccessControlPolicyRole>>("/engines/acp/ory/{flavor}/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOryAccessControlPolicyRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List ORY Access Control Policy Roles Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KetoOryAccessControlPolicyRole&gt;</returns>
        public async System.Threading.Tasks.Task<List<KetoOryAccessControlPolicyRole>> ListOryAccessControlPolicyRolesAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicyRole>> localVarResponse = await ListOryAccessControlPolicyRolesWithHttpInfoAsync(flavor, limit, offset, member, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List ORY Access Control Policy Roles Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;</param>
        /// <param name="limit">The maximum amount of policies returned. (optional)</param>
        /// <param name="offset">The offset from where to start looking. (optional)</param>
        /// <param name="member">The member for which the roles are to be listed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KetoOryAccessControlPolicyRole&gt;)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<List<KetoOryAccessControlPolicyRole>>> ListOryAccessControlPolicyRolesWithHttpInfoAsync(string flavor, long? limit = default(long?), long? offset = default(long?), string member = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->ListOryAccessControlPolicyRoles");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (member != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "member", member));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<KetoOryAccessControlPolicyRole>>("/engines/acp/ory/{flavor}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOryAccessControlPolicyRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <returns></returns>
        public void RemoveOryAccessControlPolicyRoleMembers(string flavor, string id, string member)
        {
            RemoveOryAccessControlPolicyRoleMembersWithHttpInfo(flavor, id, member);
        }

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Keto.Client.Client.ApiResponse<Object> RemoveOryAccessControlPolicyRoleMembersWithHttpInfo(string flavor, string id, string member)
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'member' is set
            if (member == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'member' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("member", Ory.Keto.Client.Client.ClientUtils.ParameterToString(member)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/engines/acp/ory/{flavor}/roles/{id}/members/{member}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOryAccessControlPolicyRoleMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveOryAccessControlPolicyRoleMembersAsync(string flavor, string id, string member, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveOryAccessControlPolicyRoleMembersWithHttpInfoAsync(flavor, id, member, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a member from an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="id">The ID of the ORY Access Control Policy Role.</param>
        /// <param name="member">The member to be removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<Object>> RemoveOryAccessControlPolicyRoleMembersWithHttpInfoAsync(string flavor, string id, string member, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'id' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");

            // verify the required parameter 'member' is set
            if (member == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'member' when calling EnginesApi->RemoveOryAccessControlPolicyRoleMembers");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Ory.Keto.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("member", Ory.Keto.Client.Client.ClientUtils.ParameterToString(member)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/engines/acp/ory/{flavor}/roles/{id}/members/{member}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveOryAccessControlPolicyRoleMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upsert an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicy</returns>
        public KetoOryAccessControlPolicy UpsertOryAccessControlPolicy(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> localVarResponse = UpsertOryAccessControlPolicyWithHttpInfo(flavor, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upsert an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicy</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> UpsertOryAccessControlPolicyWithHttpInfo(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->UpsertOryAccessControlPolicy");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<KetoOryAccessControlPolicy>("/engines/acp/ory/{flavor}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upsert an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicy</returns>
        public async System.Threading.Tasks.Task<KetoOryAccessControlPolicy> UpsertOryAccessControlPolicyAsync(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy> localVarResponse = await UpsertOryAccessControlPolicyWithHttpInfoAsync(flavor, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upsert an ORY Access Control Policy
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicy)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicy>> UpsertOryAccessControlPolicyWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicy body = default(KetoOryAccessControlPolicy), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->UpsertOryAccessControlPolicy");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<KetoOryAccessControlPolicy>("/engines/acp/ory/{flavor}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertOryAccessControlPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoOryAccessControlPolicyRole</returns>
        public KetoOryAccessControlPolicyRole UpsertOryAccessControlPolicyRole(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = UpsertOryAccessControlPolicyRoleWithHttpInfo(flavor, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoOryAccessControlPolicyRole</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> UpsertOryAccessControlPolicyRoleWithHttpInfo(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->UpsertOryAccessControlPolicyRole");

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upsert an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoOryAccessControlPolicyRole</returns>
        public async System.Threading.Tasks.Task<KetoOryAccessControlPolicyRole> UpsertOryAccessControlPolicyRoleAsync(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole> localVarResponse = await UpsertOryAccessControlPolicyRoleWithHttpInfoAsync(flavor, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert an ORY Access Control Policy Role Roles group several subjects into one. Rules can be assigned to ORY Access Control Policy (OACP) by using the Role ID as subject in the OACP.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flavor">The ORY Access Control Policy flavor. Can be \&quot;regex\&quot;, \&quot;glob\&quot;, and \&quot;exact\&quot;.</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoOryAccessControlPolicyRole)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoOryAccessControlPolicyRole>> UpsertOryAccessControlPolicyRoleWithHttpInfoAsync(string flavor, KetoOryAccessControlPolicyRole body = default(KetoOryAccessControlPolicyRole), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flavor' is set
            if (flavor == null)
                throw new Ory.Keto.Client.Client.ApiException(400, "Missing required parameter 'flavor' when calling EnginesApi->UpsertOryAccessControlPolicyRole");


            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flavor", Ory.Keto.Client.Client.ClientUtils.ParameterToString(flavor)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<KetoOryAccessControlPolicyRole>("/engines/acp/ory/{flavor}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertOryAccessControlPolicyRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
