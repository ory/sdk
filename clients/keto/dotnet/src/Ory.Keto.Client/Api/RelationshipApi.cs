/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately. 
 *
 * The version of the OpenAPI document: v0.11.0-alpha.0
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ory.Keto.Client.Client;
using Ory.Keto.Client.Model;

namespace Ory.Keto.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check the syntax of an OPL file
        /// </summary>
        /// <remarks>
        /// The OPL file is expected in the body of the request.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoCheckOplSyntaxResult</returns>
        KetoCheckOplSyntaxResult CheckOplSyntax(string body = default(string));

        /// <summary>
        /// Check the syntax of an OPL file
        /// </summary>
        /// <remarks>
        /// The OPL file is expected in the body of the request.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoCheckOplSyntaxResult</returns>
        ApiResponse<KetoCheckOplSyntaxResult> CheckOplSyntaxWithHttpInfo(string body = default(string));
        /// <summary>
        /// Create a Relationship
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relationship.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <returns>KetoRelationship</returns>
        KetoRelationship CreateRelationship(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody));

        /// <summary>
        /// Create a Relationship
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relationship.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <returns>ApiResponse of KetoRelationship</returns>
        ApiResponse<KetoRelationship> CreateRelationshipWithHttpInfo(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody));
        /// <summary>
        /// Delete Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relationships
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns></returns>
        void DeleteRelationships(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));

        /// <summary>
        /// Delete Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relationships
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRelationshipsWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));
        /// <summary>
        /// Query relationships
        /// </summary>
        /// <remarks>
        /// Get all relationships that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>KetoRelationships</returns>
        KetoRelationships GetRelationships(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));

        /// <summary>
        /// Query relationships
        /// </summary>
        /// <remarks>
        /// Get all relationships that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of KetoRelationships</returns>
        ApiResponse<KetoRelationships> GetRelationshipsWithHttpInfo(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string));
        /// <summary>
        /// Query namespaces
        /// </summary>
        /// <remarks>
        /// Get all namespaces
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>KetoRelationshipNamespaces</returns>
        KetoRelationshipNamespaces ListRelationshipNamespaces();

        /// <summary>
        /// Query namespaces
        /// </summary>
        /// <remarks>
        /// Get all namespaces
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of KetoRelationshipNamespaces</returns>
        ApiResponse<KetoRelationshipNamespaces> ListRelationshipNamespacesWithHttpInfo();
        /// <summary>
        /// Patch Multiple Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relationships.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <returns></returns>
        void PatchRelationships(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>));

        /// <summary>
        /// Patch Multiple Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relationships.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchRelationshipsWithHttpInfo(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check the syntax of an OPL file
        /// </summary>
        /// <remarks>
        /// The OPL file is expected in the body of the request.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoCheckOplSyntaxResult</returns>
        System.Threading.Tasks.Task<KetoCheckOplSyntaxResult> CheckOplSyntaxAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check the syntax of an OPL file
        /// </summary>
        /// <remarks>
        /// The OPL file is expected in the body of the request.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoCheckOplSyntaxResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoCheckOplSyntaxResult>> CheckOplSyntaxWithHttpInfoAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Relationship
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relationship.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationship</returns>
        System.Threading.Tasks.Task<KetoRelationship> CreateRelationshipAsync(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Relationship
        /// </summary>
        /// <remarks>
        /// Use this endpoint to create a relationship.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoRelationship>> CreateRelationshipWithHttpInfoAsync(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relationships
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRelationshipsAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete relationships
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationshipsWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query relationships
        /// </summary>
        /// <remarks>
        /// Get all relationships that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationships</returns>
        System.Threading.Tasks.Task<KetoRelationships> GetRelationshipsAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query relationships
        /// </summary>
        /// <remarks>
        /// Get all relationships that match the query. Only the namespace field is required.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationships)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoRelationships>> GetRelationshipsWithHttpInfoAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query namespaces
        /// </summary>
        /// <remarks>
        /// Get all namespaces
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationshipNamespaces</returns>
        System.Threading.Tasks.Task<KetoRelationshipNamespaces> ListRelationshipNamespacesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query namespaces
        /// </summary>
        /// <remarks>
        /// Get all namespaces
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationshipNamespaces)</returns>
        System.Threading.Tasks.Task<ApiResponse<KetoRelationshipNamespaces>> ListRelationshipNamespacesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch Multiple Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relationships.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchRelationshipsAsync(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch Multiple Relationships
        /// </summary>
        /// <remarks>
        /// Use this endpoint to patch one or more relationships.
        /// </remarks>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchRelationshipsWithHttpInfoAsync(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipApi : IRelationshipApiSync, IRelationshipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RelationshipApi : IRelationshipApi
    {
        private Ory.Keto.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipApi(string basePath)
        {
            this.Configuration = Ory.Keto.Client.Client.Configuration.MergeConfigurations(
                Ory.Keto.Client.Client.GlobalConfiguration.Instance,
                new Ory.Keto.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RelationshipApi(Ory.Keto.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ory.Keto.Client.Client.Configuration.MergeConfigurations(
                Ory.Keto.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ory.Keto.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RelationshipApi(Ory.Keto.Client.Client.ISynchronousClient client, Ory.Keto.Client.Client.IAsynchronousClient asyncClient, Ory.Keto.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ory.Keto.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ory.Keto.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ory.Keto.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ory.Keto.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ory.Keto.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check the syntax of an OPL file The OPL file is expected in the body of the request.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>KetoCheckOplSyntaxResult</returns>
        public KetoCheckOplSyntaxResult CheckOplSyntax(string body = default(string))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoCheckOplSyntaxResult> localVarResponse = CheckOplSyntaxWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the syntax of an OPL file The OPL file is expected in the body of the request.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of KetoCheckOplSyntaxResult</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoCheckOplSyntaxResult> CheckOplSyntaxWithHttpInfo(string body = default(string))
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KetoCheckOplSyntaxResult>("/opl/syntax/check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckOplSyntax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the syntax of an OPL file The OPL file is expected in the body of the request.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoCheckOplSyntaxResult</returns>
        public async System.Threading.Tasks.Task<KetoCheckOplSyntaxResult> CheckOplSyntaxAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoCheckOplSyntaxResult> localVarResponse = await CheckOplSyntaxWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the syntax of an OPL file The OPL file is expected in the body of the request.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoCheckOplSyntaxResult)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoCheckOplSyntaxResult>> CheckOplSyntaxWithHttpInfoAsync(string body = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KetoCheckOplSyntaxResult>("/opl/syntax/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckOplSyntax", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Relationship Use this endpoint to create a relationship.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <returns>KetoRelationship</returns>
        public KetoRelationship CreateRelationship(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationship> localVarResponse = CreateRelationshipWithHttpInfo(ketoCreateRelationshipBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Relationship Use this endpoint to create a relationship.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <returns>ApiResponse of KetoRelationship</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoRelationship> CreateRelationshipWithHttpInfo(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody))
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ketoCreateRelationshipBody;


            // make the HTTP request
            var localVarResponse = this.Client.Put<KetoRelationship>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Relationship Use this endpoint to create a relationship.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationship</returns>
        public async System.Threading.Tasks.Task<KetoRelationship> CreateRelationshipAsync(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationship> localVarResponse = await CreateRelationshipWithHttpInfoAsync(ketoCreateRelationshipBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Relationship Use this endpoint to create a relationship.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoCreateRelationshipBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationship)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoRelationship>> CreateRelationshipWithHttpInfoAsync(KetoCreateRelationshipBody ketoCreateRelationshipBody = default(KetoCreateRelationshipBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ketoCreateRelationshipBody;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<KetoRelationship>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRelationship", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Relationships Use this endpoint to delete relationships
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns></returns>
        public void DeleteRelationships(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            DeleteRelationshipsWithHttpInfo(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation);
        }

        /// <summary>
        /// Delete Relationships Use this endpoint to delete relationships
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Keto.Client.Client.ApiResponse<Object> DeleteRelationshipsWithHttpInfo(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Relationships Use this endpoint to delete relationships
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRelationshipsAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRelationshipsWithHttpInfoAsync(_namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Relationships Use this endpoint to delete relationships
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<Object>> DeleteRelationshipsWithHttpInfoAsync(string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query relationships Get all relationships that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>KetoRelationships</returns>
        public KetoRelationships GetRelationships(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationships> localVarResponse = GetRelationshipsWithHttpInfo(pageToken, pageSize, _namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query relationships Get all relationships that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <returns>ApiResponse of KetoRelationships</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoRelationships> GetRelationshipsWithHttpInfo(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string))
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<KetoRelationships>("/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query relationships Get all relationships that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationships</returns>
        public async System.Threading.Tasks.Task<KetoRelationships> GetRelationshipsAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationships> localVarResponse = await GetRelationshipsWithHttpInfoAsync(pageToken, pageSize, _namespace, _object, relation, subjectId, subjectSetNamespace, subjectSetObject, subjectSetRelation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query relationships Get all relationships that match the query. Only the namespace field is required.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="_namespace">Namespace of the Relationship (optional)</param>
        /// <param name="_object">Object of the Relationship (optional)</param>
        /// <param name="relation">Relation of the Relationship (optional)</param>
        /// <param name="subjectId">SubjectID of the Relationship (optional)</param>
        /// <param name="subjectSetNamespace">Namespace of the Subject Set (optional)</param>
        /// <param name="subjectSetObject">Object of the Subject Set (optional)</param>
        /// <param name="subjectSetRelation">Relation of the Subject Set (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationships)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoRelationships>> GetRelationshipsWithHttpInfoAsync(string pageToken = default(string), long? pageSize = default(long?), string _namespace = default(string), string _object = default(string), string relation = default(string), string subjectId = default(string), string subjectSetNamespace = default(string), string subjectSetObject = default(string), string subjectSetRelation = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (relation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "relation", relation));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_id", subjectId));
            }
            if (subjectSetNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.namespace", subjectSetNamespace));
            }
            if (subjectSetObject != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.object", subjectSetObject));
            }
            if (subjectSetRelation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ory.Keto.Client.Client.ClientUtils.ParameterToMultiMap("", "subject_set.relation", subjectSetRelation));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<KetoRelationships>("/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query namespaces Get all namespaces
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>KetoRelationshipNamespaces</returns>
        public KetoRelationshipNamespaces ListRelationshipNamespaces()
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationshipNamespaces> localVarResponse = ListRelationshipNamespacesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query namespaces Get all namespaces
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of KetoRelationshipNamespaces</returns>
        public Ory.Keto.Client.Client.ApiResponse<KetoRelationshipNamespaces> ListRelationshipNamespacesWithHttpInfo()
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = this.Client.Get<KetoRelationshipNamespaces>("/namespaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRelationshipNamespaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query namespaces Get all namespaces
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KetoRelationshipNamespaces</returns>
        public async System.Threading.Tasks.Task<KetoRelationshipNamespaces> ListRelationshipNamespacesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ory.Keto.Client.Client.ApiResponse<KetoRelationshipNamespaces> localVarResponse = await ListRelationshipNamespacesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query namespaces Get all namespaces
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KetoRelationshipNamespaces)</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<KetoRelationshipNamespaces>> ListRelationshipNamespacesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }



            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<KetoRelationshipNamespaces>("/namespaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRelationshipNamespaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Multiple Relationships Use this endpoint to patch one or more relationships.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <returns></returns>
        public void PatchRelationships(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>))
        {
            PatchRelationshipsWithHttpInfo(ketoRelationshipPatch);
        }

        /// <summary>
        /// Patch Multiple Relationships Use this endpoint to patch one or more relationships.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Ory.Keto.Client.Client.ApiResponse<Object> PatchRelationshipsWithHttpInfo(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>))
        {
            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ketoRelationshipPatch;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Multiple Relationships Use this endpoint to patch one or more relationships.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchRelationshipsAsync(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchRelationshipsWithHttpInfoAsync(ketoRelationshipPatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Patch Multiple Relationships Use this endpoint to patch one or more relationships.
        /// </summary>
        /// <exception cref="Ory.Keto.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ketoRelationshipPatch"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Ory.Keto.Client.Client.ApiResponse<Object>> PatchRelationshipsWithHttpInfoAsync(List<KetoRelationshipPatch> ketoRelationshipPatch = default(List<KetoRelationshipPatch>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ory.Keto.Client.Client.RequestOptions localVarRequestOptions = new Ory.Keto.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ory.Keto.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ory.Keto.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ketoRelationshipPatch;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/admin/relation-tuples", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
